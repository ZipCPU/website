<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>The ZipCPU by Gisselquist Technology</title>
    <description>The ZipCPU blog, featuring how to discussions of FPGA and soft-core CPU design.  This site will be focused on Verilog solutions, using exclusively OpenSource IP products for FPGA design.  Particular focus areas include topics often left out of more mainstream FPGA design courses such as how to debug an FPGA design.
</description>
    <link>https://zipcpu.com/</link>
    <atom:link href="https://zipcpu.com/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Mon, 04 Jul 2022 12:30:26 -0400</pubDate>
    <lastBuildDate>Mon, 04 Jul 2022 12:30:26 -0400</lastBuildDate>
    <generator>Jekyll v4.2.0</generator>
    <image>
      <url>https://zipcpu.com/img/gt-rss.png</url>
      <title></title>
      <link></link>
    </image>
    
      <item>
        <title>ZipCPU Lesson: If it's not tested, it doesn't work.</title>
        <description>&lt;p&gt;The &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; &lt;del&gt;has&lt;/del&gt; &lt;em&gt;had&lt;/em&gt; a problem.
It’s kind of fundamental to digital design, so let’s chat about it.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig. 1, The &quot;No testy--no worky&quot; principle&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/zipsim/no-testy-no-worky.svg&quot; alt=&quot;&quot; width=&quot;420&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;It begins with the goal of the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;.
The &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; is designed to be low logic,
and that’s where the problem begins.  The problem is simply that low logic
means different things to different people.  Low logic means one thing on an
iCE40 with only 8k 4-LUTs.  Low logic means something else on a Spartan 6, and
something else entirely on a 20k 6-LUT Artix-7.  It means one thing when
driving a &lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone
bus&lt;/a&gt;, and another thing
when &lt;a href=&quot;/zipcpu/2021/04/17/axilops.html&quot;&gt;driving an AXI
bus&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The natural consequence of trying to support multiple design requirements and
different targets is that the CPU is highly parameterized.  In general, this
is a good thing.&lt;/p&gt;

&lt;p&gt;We’ve discussed how to handle &lt;a href=&quot;/zipcpu/2018/12/20/sby-makefile.html&quot;&gt;formally verifying parameterized
designs&lt;/a&gt;.
That’s not all that hard to do, although &lt;a href=&quot;/zipcpu/2018/12/20/sby-makefile.html&quot;&gt;the
article&lt;/a&gt; needs a bit
of updating.  Specifically, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;chparam&lt;/code&gt; in Yosys should only be used as an
argument to a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hierarchy&lt;/code&gt; command, but that aside handling multiple parameters
is still quite easy to accomplish formally.&lt;/p&gt;

&lt;p&gt;My problem is that my formal proofs don’t quite capture &lt;em&gt;everything&lt;/em&gt;.
Yes, those things they do capture they do so exhaustively, but I still keep
finding a bug every now and again at integration time when two things don’t
work together like they should.&lt;/p&gt;

&lt;p&gt;Frankly, I need a simulation solution that can test the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; in each and every one of its
many potential configurations.  That’s what I’d like to discuss today.&lt;/p&gt;

&lt;h2 id=&quot;first-approach-the-zbasic-system&quot;&gt;First approach: The ZBasic System&lt;/h2&gt;

&lt;p&gt;My previous approach at testing the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; was the separate
&lt;a href=&quot;/zipcpu/2018/02/12/zbasic-intro.html&quot;&gt;ZBasic&lt;/a&gt; repository.
This is simply a demonstration system connecting the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; to a variety of other
components.  Most notable among these other components are the &lt;a href=&quot;https://github.com/ZipCPU/zbasic/blob/master/rtl/memdev.v&quot;&gt;block RAM
memory&lt;/a&gt;, the &lt;a href=&quot;https://github.com/ZipCPU/zbasic/blob/master/rtl/wbuart/wbuart.v&quot;&gt;serial
port&lt;/a&gt;, and the
&lt;a href=&quot;/blog/2017/06/05/wb-bridge-overview.html&quot;&gt;debugging bus&lt;/a&gt;.
Other less notable components include the &lt;a href=&quot;https://github.com/ZipCPU/zbasic/blob/master/rtl/sdspi/sdspi.v&quot;&gt;SPI based SD card protocol
controller&lt;/a&gt; and
the &lt;a href=&quot;/zipcpu/2019/02/09/cpu-blinky.html&quot;&gt;GPIO controller&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;That makes the &lt;a href=&quot;/zipcpu/2018/02/12/zbasic-intro.html&quot;&gt;ZBasic&lt;/a&gt;
system into a pretty complete great demonstration system–for simulating a
single configuration.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;It offers as much &lt;a href=&quot;https://github.com/ZipCPU/zbasic/blob/master/rtl/memdev.v&quot;&gt;block
RAM&lt;/a&gt;
as your simulation environment will allow&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The &lt;a href=&quot;https://github.com/ZipCPU/zbasic/blob/master/rtl/wbuart/wbuart.v&quot;&gt;serial
port&lt;/a&gt;
has both transmit and receive functionalities, so you can interact with
the CPU.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;When using &lt;a href=&quot;/blog/2017/06/21/looking-at-verilator.html&quot;&gt;Verilator&lt;/a&gt;,
the &lt;a href=&quot;/blog/2020/04/01/design-flow.html&quot;&gt;SD card can be treated as a full SD card of whatever
size is necessary&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is all great, but it’s hardly ideal for testing the &lt;em&gt;CPU&lt;/em&gt;–even though
that’s what I’ve used it for.&lt;/p&gt;

&lt;p&gt;To that end, I built several CPU tests that I have kept in the
&lt;a href=&quot;https://github.com/ZipCPU/zbasic&quot;&gt;ZBasic repository&lt;/a&gt; to help me know if the
CPU is working.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://github.com/ZipCPU/zbasic/blob/master/sw/board/cputest.c&quot;&gt;There’s the standard CPU
test&lt;/a&gt;, which
is designed to check the performance of (almost) every instruction in
isolation.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;There’s a &lt;a href=&quot;https://github.com/ZipCPU/zbasic/blob/master/sw/board/hello.c&quot;&gt;Hello World
test&lt;/a&gt;, which
I’ve included in order to flesh out any obvious problems with the C-Library.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;There’s another &lt;a href=&quot;https://github.com/ZipCPU/zbasic/blob/master/sw/board/hellostep.c&quot;&gt;Hello World
test&lt;/a&gt;
that works by stepping through the &lt;a href=&quot;https://en.wikipedia.org/wiki/%22Hello,_World!%22_program&quot;&gt;classic Hello World
program&lt;/a&gt; one
instruction at a time: a supervisor mode task sets up the program in user
mode, and then steps through it.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Finally, there’s a &lt;a href=&quot;https://github.com/ZipCPU/zbasic/blob/master/sw/board/lockcheck.c&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LOCK&lt;/code&gt; instruction checking
program&lt;/a&gt;.
This one generates three (or four) concurrent tasks all attempting to get
access to the same MUTEX and then verify that they have said MUTEX.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These programs are what actually tests the CPU–which was the original purpose
of the &lt;a href=&quot;https://github.com/ZipCPU/zbasic&quot;&gt;ZBasic repository&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The most obvious problem I’ve alluded to so far is that this repository only
tests a single configuration.  That configuration tends to be a full pipeline,
cache enabled, Wishbone design.  The next big problem is that the test is
dependent on many other (non-CPU) components for success.&lt;/p&gt;

&lt;p&gt;The result of all of this is that I’ve often published changes to the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; repository that … broke one
part or another of the CPU and then never realized it.&lt;/p&gt;

&lt;p&gt;Frankly, I needed a better testing environment.&lt;/p&gt;

&lt;h2 id=&quot;envisioning-a-better-simulation-test&quot;&gt;Envisioning a better simulation test&lt;/h2&gt;

&lt;p&gt;When thinking over what I needed, I decided upon three goals for a new
simulation environment.  Obviously, it needed to test multiple configurations.
That was my first goal.  But that also lead to my second goal, which was that
I wanted my simulation environment to test both the
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone&lt;/a&gt;
and &lt;a href=&quot;/zipcpu/2021/04/17/axilops.html&quot;&gt;AXI front ends&lt;/a&gt;.
Finally, I also wanted this new simulation environment to be all Verilog.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left; padding: 25px&quot;&gt;&lt;caption&gt;Fig. 2, Supported base ZipCPU configuration groups&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/zipsim/zip-configs.svg&quot; alt=&quot;&quot; width=&quot;420&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;The first step was to identify a series of “supported” configurations.
I chose to define 22 such configurations, of which I’m (currently) only testing
the 14 I’ve ever used in practice.  The 22 configurations fall into six basic
groups:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;ASM&lt;/strong&gt;: The Assembly only configuration is the lowest logic configuration of
the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;.  It doesn’t have full
instruction support, neither does it support user mode.  Missing instructions
include shifts by more than one bit, multiplies, and divides.  Worse,
without user mode, there’s no way to trap on one of these instructions being
illegal.  As a result, you can’t really use this configuration with GCC.
GCC will often attempt to implement one (or more) of these instructions, and
without the ability to trap on them there’s no real way to rescue a program
so generated for this configuration.&lt;/p&gt;

    &lt;p&gt;While this configuration is defined, there are no tests assigned to it.
Yet.  (Technically, that makes this configuration unusable.  Remember,
if it’s not tested then it doesn’t really work.)&lt;/p&gt;

    &lt;p&gt;What I really like about this configuration is that this represents the
lowest logic configuration of the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;: requiring only 584 Xilinx
7-Series 6-LUTs.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;TRAP&lt;/strong&gt;: This configuration now supports shifts, user mode, and the lock
instruction.  Since it supports user mode, it also supports traps, and so
the CPU can now support the divide and multiply instructions from user
mode–assuming I ever build the trap software to handle such instructions
properly.&lt;/p&gt;

    &lt;p&gt;Without the software to support this TRAP configuration, or for that matter
without a GCC flag implemented to replace divide and multiply instructions
with soft equivalents, there are no tests of this configuration yet.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;MIN&lt;/strong&gt;: This is the minimum CPU configuration supported by a generic ZipCPU
backend for GCC.  It includes support for multiplies, divides, shifts, lock
instructions, user mode, and the compressed instruction set.  This
configuration uses the most basic instruction fetch and memory controllers.
This also the only configuration where the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; is not running its
full pipeline.  Finally, this configuration is the first of several that
allows the CPU to be externally configured: the CPU may be reset, halted, or
stepped externally and registers within the CPU may be now read and written
externally,&lt;/p&gt;

    &lt;p&gt;This is the minimum configuration that I can currently test automatically.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;PIPE&lt;/strong&gt;: This is the minimum pipelined configuration.  Yes, the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; is
pipelined by design, but that can require too much logic for some hardware
to handle.  Therefore, the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
supports both pipelined and non-pipelined configurations.  This configuration
is the first of the pipelined configurations.  It also uses (naturally) the
piped fetch and memory controllers–allowing multiple bus requests to be
outstanding at any given time.  As an extra bonus with pipelining, this is
the first configuration supporting early branching.&lt;/p&gt;

    &lt;p&gt;In this case, early branching is defined by any branch recognized by the
instruction decoder, which can be forwarded to the instruction fetch
prior to the associated instruction making its way through the rest of the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;’s pipeline.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;CACHE&lt;/strong&gt;: Here’s where we get to a more traditional CPU configuration.  In
this configuration, both instructions and data are kept in a (nominally 4kB)
cache.  Because this configuration is cached, this is also the first one that
has a chance of keeping the CPU’s pipeline fully loaded.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Low Power&lt;/strong&gt;: The final configuration has been optimized for low power.  This
configuration is the same as the CACHE configuration above, save for two
changes.  First, unused signals have been zero’d out to prevent any
unnecessary toggling.  Since this costs extra logic to do, it’s not the
primary or default configuration by any means.  Second, this configuration
enables the &lt;a href=&quot;/blog/2021/10/26/clkgate.html&quot;&gt;clock gating feature that we’ve discussed
before&lt;/a&gt;.  As a result,
whenever the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; is sleeping
(i.e. waiting for an interrupt), the CPU’s clock will be turned off when
using this configuration.&lt;/p&gt;

    &lt;p&gt;No, it’s not likely I’ll be able to use this in any FPGA projects, but I
do use it from time to time on simulation projects and so it’s
nice to know it can be done.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That’s six basic configurations, of which I have tests defined for only
four at present.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig. 3, All 22 ZipCPU test configurations&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/zipsim/all-configs.svg&quot; alt=&quot;&quot; width=&quot;480&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Then, for each of these four configurations, I want to
test the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; in one of four
environments:
using a basic Wishbone wrapper I call the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/2ffbf68b450948dee56f36bbd113e80866a9362a/rtl/zipbones.v&quot;&gt;ZipBones&lt;/a&gt;,
a second Wishbone wrapper with an attached peripheral set
(&lt;a href=&quot;/zipcpu/2018/04/17/ziptimer.html&quot;&gt;timers&lt;/a&gt;,
&lt;a href=&quot;/zipcpu/2019/04/02/icontrol.html&quot;&gt;interrupt controller&lt;/a&gt;s,
some performance counters, a
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/2ffbf68b450948dee56f36bbd113e80866a9362a/rtl/peripherals/wbdmac.v&quot;&gt;DMA&lt;/a&gt;,
etc.)
called the &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/2ffbf68b450948dee56f36bbd113e80866a9362a/rtl/zipsystem.v&quot;&gt;ZipSystem&lt;/a&gt;,
an &lt;a href=&quot;/blog/2021/08/14/axiperf.html&quot;&gt;AXI-Lite&lt;/a&gt;
wrapper called
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/2ffbf68b450948dee56f36bbd113e80866a9362a/rtl/zipaxil.v&quot;&gt;ZipAXIL&lt;/a&gt;,
or finally a &lt;a href=&quot;/blog/2021/08/14/axiperf.html&quot;&gt;Full AXI
wrapper&lt;/a&gt; I call
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/2ffbf68b450948dee56f36bbd113e80866a9362a/rtl/zipaxi.v&quot;&gt;ZipAXI&lt;/a&gt;.
You can see these configurations enumerated in Fig. 3.  It’s not quite 24 total
configurations, simply because it hasn’t (yet) made any sense to build an
AXI-Lite cache.  Therefore, the cache and low–power configurations only test
the &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob//2ffbf68b450948dee56f36bbd113e80866a9362a/rtl/zipaxi.v&quot;&gt;&lt;em&gt;AXI&lt;/em&gt; wrapper to the
ZipCPU&lt;/a&gt;,
not the &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/2ffbf68b450948dee56f36bbd113e80866a9362a/rtl/zipaxil.v&quot;&gt;AXI-Lite
wrapper&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This sort of comes with a rather derived requirement: I’ll need a simulation
environment that can be uniform enough to support all (or most) of these
configurations.  This is just to minimize the amount of rework necessary
to go from a test of one configuration to another.  However, since the
AXI environment is so different from the Wishbone one, I eventually settled
on two top level simulation drivers: &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob//2ffbf68b450948dee56f36bbd113e80866a9362a/sim/rtl/axi_tb.v&quot;&gt;one for
AXI&lt;/a&gt;,
and &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob//2ffbf68b450948dee56f36bbd113e80866a9362a/sim/rtl/wb_tb.v&quot;&gt;one for
Wishbone&lt;/a&gt;.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left; padding: 25px&quot;&gt;&lt;caption&gt;Fig. 4, All Verilog test bench&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/zipsim/all-verilog.svg&quot; alt=&quot;&quot; width=&quot;420&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;My last requirement was that this simulation environment be all Verilog.
This is sort of a new requirement to me, since &lt;a href=&quot;/blog/2020/04/01/design-flow.html&quot;&gt;I normally use Verilator for
my simulations&lt;/a&gt;.
Five reasons drive this requirement:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Sometime back, &lt;a href=&quot;/zipcpu/2021/07/23/cpusim.html&quot;&gt;I needed to build a simulation with a CPU for a bus
driver&lt;/a&gt; and the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; fit that role nicely&lt;/p&gt;

    &lt;p&gt;Some of my recent &lt;a href=&quot;/blog/2017/10/13/fpga-v-asic.html&quot;&gt;ASIC&lt;/a&gt;
projects have required driving a bus from Verilog.
While an all Verilog model of an ARM might have worked here, the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
fits this role nicely in its absence.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;X propagation.&lt;/p&gt;

    &lt;p&gt;I’ve now been burned, more than once, by a model that works just fine in
&lt;a href=&quot;/blog/2017/06/21/looking-at-verilator.html&quot;&gt;Verilator&lt;/a&gt;
that then failed to work in a simulator that supports ‘X propagation.  This
has bit me in two ways:&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;a href=&quot;/blog/2020/08/22/oddr.html&quot;&gt;My ODDR design&lt;/a&gt; failed
miserably here.  Where I struggled was with a design that just needed to
create a register that simply toggles within it.  That register didn’t
need to be reset, it just needed to toggle with every clock.  However, if
you include this design in an
&lt;a href=&quot;/blog/2017/10/13/fpga-v-asic.html&quot;&gt;ASIC&lt;/a&gt;
environment, where initial statements
aren’t allowed, then you either need to add a reset or the ‘X propagation
will kill you–even if the design would’ve worked.&lt;/p&gt;

        &lt;p&gt;My first “solution” to this problem was to replace things like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;==&lt;/code&gt; with
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;===&lt;/code&gt; and so forth.  That worked great until the post place and route
simulation.  So … I bit the bullet and added a reset to that design.
(Who cares, right?  It’s an
&lt;a href=&quot;/blog/2017/10/13/fpga-v-asic.html&quot;&gt;ASIC&lt;/a&gt;!  Logic is
cheap in &lt;a href=&quot;/blog/2017/10/13/fpga-v-asic.html&quot;&gt;ASIC&lt;/a&gt;s.)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;I’ve often found myself using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;always @(*)&lt;/code&gt; blocks to set something to a
constant.  This works great when using either
&lt;a href=&quot;/blog/2017/06/21/looking-at-verilator.html&quot;&gt;Verilator&lt;/a&gt;
or synthesis tools, because you get the value you want.  Unfortunately,
this is not Verilog language compliant.  With a true Verilog compliant
simulator, any registers set within such a block will be set to ‘X
(undefined) since nothing ever triggers such an always block.&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ol&gt;

    &lt;p&gt;Frankly, if I want to deliver “working” IP to any customers, then that IP
really needs to work on their simulator as well.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;External device models require assignment delays, and often encrypted IP.&lt;/p&gt;

    &lt;p&gt;I’ve also recently needed to run simulations against external device models
that include assignment delays within them, and I’ve wanted to drive
these simulations with the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;.&lt;/p&gt;

    &lt;p&gt;Sometimes these models are of my own creation.  In this case, &lt;a href=&quot;http://iverilog.icarus.com&quot;&gt;Icarus
Verilog&lt;/a&gt;
has handled the problem quite nicely.  At other times, these simulations
are proprietary, encrypted, models provided by various device vendors.  This
necessitates being able to use proprietary simulation tools.&lt;/p&gt;

    &lt;p&gt;So far I’ve tried three proprietary tools:&lt;/p&gt;
    &lt;ol&gt;
      &lt;li&gt;NC Verilog (which doesn’t like my use of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;localparam&lt;/code&gt;s)&lt;/li&gt;
      &lt;li&gt;XCellium, which can currently (for me) handle all but Xilinx’s
proprietary IP.  (I must be missing something–Xilinx says it is
supported …)&lt;/li&gt;
      &lt;li&gt;Xilinx’s Vivado, which SegFaulted on the first project I tried it on.
Since then, I’ve now gotten it to the point where I can run batch
simulations on it–just like with XCellium–so both simulators are quite
usable for me.&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/YosysHQ/mcy&quot;&gt;MCY, or Mutation Coverage with Yosys&lt;/a&gt;,
works nicely with an all Verilog simulation model to start from.&lt;/p&gt;

    &lt;p&gt;In case you are not familiar with &lt;a href=&quot;https://github.com/YosysHQ/mcy&quot;&gt;MCY&lt;/a&gt;,
&lt;a href=&quot;https://github.com/YosysHQ/mcy&quot;&gt;MCY&lt;/a&gt; is a means of testing the test
bench.  Want to know what bugs your test bench will catch?  Mutate the design
(i.e. break it), and see if the test bench can find the mutation.  A good
test bench should be able to find any mutation, or at least a high percentage
of them.&lt;/p&gt;

    &lt;p&gt;Sadly, although &lt;a href=&quot;https://github.com/YosysHQ/mcy&quot;&gt;MCY&lt;/a&gt; can be used with
formal methods, it doesn’t integrate well with them.  (i.e., you need to be
careful that you don’t mutate any formal properties.)  This has really slowed
my adoption of &lt;a href=&quot;https://github.com/YosysHQ/mcy&quot;&gt;MCY&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Post place-and-route timing simulations&lt;/p&gt;

    &lt;p&gt;Simulating internal timing requires an all RTL model–ideally one that
achieves a high level of coverage.  So, any test script that passes an
&lt;a href=&quot;https://github.com/YosysHQ/mcy&quot;&gt;MCY&lt;/a&gt; check should (ideally) be able to
exercise all of the paths within a design even after place and route.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Finally, several of the customers I’ve worked with have asked for all
Verilog test benches.
&lt;a href=&quot;/blog/2017/06/21/looking-at-verilator.html&quot;&gt;Verilator&lt;/a&gt; C++
models were simply unacceptable to them.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Bottom line is, if I want to work with others in the IP community, then I’ll
need a Verilog–only test bench.&lt;/p&gt;

&lt;h2 id=&quot;building-the-simulation-environment&quot;&gt;Building the simulation environment&lt;/h2&gt;

&lt;p&gt;The first step was to build a simulation environment that would meet these
needs.&lt;/p&gt;

&lt;p&gt;My first problem was the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;’s 
configuration.  Prior to defining a common configuration set, the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; was completely configured via
an &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/43a0cdbbb549d360aa05b606305667d3c24bad7c/rtl/cpudefs.v&quot;&gt;external Verilog “header” file that defined a set of macros used to
configure the CPU&lt;/a&gt;.
These macros controlled &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/43a0cdbbb549d360aa05b606305667d3c24bad7c/rtl/cpudefs.v#209&quot;&gt;whether or not the CPU was
pipelined&lt;/a&gt;,
which fetch or memory controller was used, &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/43a0cdbbb549d360aa05b606305667d3c24bad7c/rtl/cpudefs.v#64-78&quot;&gt;which multiply
implementation&lt;/a&gt;
was used, which portions of the instruction set were implemented and more.&lt;/p&gt;

&lt;p&gt;My problem with this external configuration file was that it was hard to
automatically override the definitions within it.  The easy way to override
things is with parameters (Generics, when using VHDL).  So my first step was
to &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/tree/2ffbf68b450948dee56f36bbd113e80866a9362a&quot;&gt;rewrite the ZipCPU&lt;/a&gt;
to get rid of any and all “ifdef”s and to replace them with configuration
parameters.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig. 5, Minimum CPU Testbench Requirements&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/zipsim/min-cpu.svg&quot; alt=&quot;&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;I then needed a top level simulation environment.  A minimum CPU needs
memory and a console.  My &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/2ffbf68b450948dee56f36bbd113e80866a9362a/sim/zipsw/cputest.c&quot;&gt;favorite CPU test
program&lt;/a&gt;
also requires a &lt;a href=&quot;/zipcpu/2018/04/17/ziptimer.html&quot;&gt;timer&lt;/a&gt;,
and my &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/2ffbf68b450948dee56f36bbd113e80866a9362a/sim/zipsw/cputest.c&quot;&gt;clock gating test software&lt;/a&gt;
requires interrupts from an automatically &lt;a href=&quot;/zipcpu/2018/04/17/ziptimer.html&quot;&gt;reloading
timer&lt;/a&gt;.  I also threw a
&lt;a href=&quot;/blog/2017/06/08/simple-scope.html&quot;&gt;CPU logic analyzer in there for good
measure&lt;/a&gt; although I
don’t yet have a test that uses it.&lt;/p&gt;

&lt;p&gt;This leads to a test environment looking like Fig. 6.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig. 6, ZipCPU simulation test bench components&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/zipsim/zip_tb.svg&quot; alt=&quot;&quot; width=&quot;560&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;It’s not just a single test environment either.  I built two near–identical
test environments: &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/commit/2ffbf68b450948dee56f36bbd113e80866a9362a/sim/rtl/axi_tb.v&quot;&gt;one for
AXI&lt;/a&gt;,
and &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/commit/2ffbf68b450948dee56f36bbd113e80866a9362a/sim/rtl/wb_tb.v&quot;&gt;another for Wishbone&lt;/a&gt;.
Further, since I wanted to test the same executable logic in each environment,
I made sure that the address space controlled by each test environment was the
same between both
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/2ffbf68b450948dee56f36bbd113e80866a9362a/sim/rtl/axi_tb.v&quot;&gt;AXI&lt;/a&gt; and
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/2ffbf68b450948dee56f36bbd113e80866a9362a/sim/rtl/wb_tb.v&quot;&gt;Wishbone&lt;/a&gt;
test benches.&lt;/p&gt;

&lt;p&gt;As a side note, I never would’ve considered a test setup this complex early on
in my own personal development.  A
&lt;a href=&quot;/blog/2019/07/17/crossbar.html&quot;&gt;crossbar&lt;/a&gt; just to test a
CPU?  That’s a project in and of itself!  Or how about the bus resizing
elements, which are required to test the CPU on a non–32bit bus?  All of
these extra parts and pieces were never things that I had considered to be
necessary components of a &lt;em&gt;CPU&lt;/em&gt; repository, yet the C library won’t run without
the console, and so the testing the design necessitates having a
&lt;a href=&quot;/blog/2019/07/17/crossbar.html&quot;&gt;crossbar&lt;/a&gt; on hand.
Similarly, either I need to build a bus width agile console port, or
alternatively I just need to suck up the reality of crossing bus widths.&lt;/p&gt;

&lt;p&gt;I then ran into a problem when trying to figure out how to support both the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/2ffbf68b450948dee56f36bbd113e80866a9362a/rtl/zipbones.v&quot;&gt;ZipBones&lt;/a&gt;
CPU wrapper, the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/2ffbf68b450948dee56f36bbd113e80866a9362a/rtl/zipsystem.v&quot;&gt;ZipSystem&lt;/a&gt;
wrapper, as well as the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/2ffbf68b450948dee56f36bbd113e80866a9362a/rtl/zipaxi.v&quot;&gt;ZipAXI&lt;/a&gt;
wrapper from a common addressing space.  For background, &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/2ffbf68b450948dee56f36bbd113e80866a9362a/rtl/core/zipcore.v&quot;&gt;the
core&lt;/a&gt;
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; is just that: a CPU.  It doesn’t
come with many of the peripherals necessary for most CPU environments.  For
this reason, the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; initially
came with two wrappers.  (There are now four.)  You could either use the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/2ffbf68b450948dee56f36bbd113e80866a9362a/rtl/zipbones.v&quot;&gt;ZipBones&lt;/a&gt;
wrapper or the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/2ffbf68b450948dee56f36bbd113e80866a9362a/rtl/zipsystem.v&quot;&gt;ZipSystem&lt;/a&gt;.
The difference between these two is that the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/2ffbf68b450948dee56f36bbd113e80866a9362a/rtl/zipsystem.v&quot;&gt;ZipSystem&lt;/a&gt;
contained a locally mapped set of peripherals:
&lt;a href=&quot;/zipcpu/2018/04/17/ziptimer.html&quot;&gt;timers&lt;/a&gt;, counters, one or
two &lt;a href=&quot;/zipcpu/2019/04/02/icontrol.html&quot;&gt;interrupt controller&lt;/a&gt;s,
and a &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/2ffbf68b450948dee56f36bbd113e80866a9362a/rtl/peripherals/wbdmac.v&quot;&gt;DMA&lt;/a&gt;.  The
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/2ffbf68b450948dee56f36bbd113e80866a9362a/rtl/zipbones.v&quot;&gt;ZipBones&lt;/a&gt;
wrapper had none of these, so it might be lighter in logic area.  Then, when I
later built the &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/2ffbf68b450948dee56f36bbd113e80866a9362a/rtl/zipaxil.v&quot;&gt;AXI-Lite wrapper&lt;/a&gt;
and later the &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/2ffbf68b450948dee56f36bbd113e80866a9362a/rtl/zipaxi.v&quot;&gt;AXI (full) wrapper&lt;/a&gt;,
I left these near-peripherals out.&lt;/p&gt;

&lt;p&gt;How, then, should I guarantee that the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;’s software can interact
with these external peripherals regardless of the wrapper used?&lt;/p&gt;

&lt;p&gt;The obvious answer is to guarantee within the test bench that each of these
wrappers can see the same set of necessary peripherals–regardless of whether
or not they come pre–packaged within the CPU wrapper or not.  Hence, I included
an &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/2ffbf68b450948dee56f36bbd113e80866a9362a/rtl/peripherals/axilperiphs.v&quot;&gt;AXI-Lite CPU peripheral
set&lt;/a&gt;
into the &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/2ffbf68b450948dee56f36bbd113e80866a9362a/sim/rtl/axi_tb.v&quot;&gt;AXI testbench
top&lt;/a&gt;, and several
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/2ffbf68b450948dee56f36bbd113e80866a9362a/rtl/zipsystem.v&quot;&gt;ZipSystem&lt;/a&gt;
peripherals directly into the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/2ffbf68b450948dee56f36bbd113e80866a9362a/sim/rtl/wb_tb.v&quot;&gt;Wishbone top&lt;/a&gt; for the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/2ffbf68b450948dee56f36bbd113e80866a9362a/rtl/zipbones.v&quot;&gt;ZipBones&lt;/a&gt; system to interact with.
All that remained was to make sure these peripherals all mapped to the same
addresses.&lt;/p&gt;

&lt;p&gt;This wasn’t (yet) enough.&lt;/p&gt;

&lt;p&gt;One of the recent drivers of this work has been my desire to operate the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
in environments with non–32bit wide buses.  One project I’m working on
requires a 64-bit bus.  A second project, based on &lt;a href=&quot;https://www.enclustra.com/en/products/fpga-modules/mercury-kx2/&quot;&gt;Enclustra’s Mercury+ KX7
board&lt;/a&gt;,
will require a 512-bit bus if I only want to be able to keep up with the
memory bandwidth that board is capable of.
This meant that my simulation test bench environments needed to be
bus–width agnostic as well.  This then turned into
a requirement that my test bench include a bus downsizer,
in addition to requiring one more parameter to define the simulation
environment.  Thankfully, the &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/2ffbf68b450948dee56f36bbd113e80866a9362a/sim/rtl/wbdown.v&quot;&gt;bus
downsizer&lt;/a&gt;
can be included even if the bus doesn’t need downsizing–in that case, it just
becomes a simple
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/2ffbf68b450948dee56f36bbd113e80866a9362a/sim/rtl/wbdown.v#L77-L99&quot;&gt;pass-through&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Then, after using these simulation environments for a while, I ended up
retrofitting each of them with a Verilog &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/2ffbf68b450948dee56f36bbd113e80866a9362a/sim/rtl/wb_tb.v#L962-L980&quot;&gt;watchdog
timer&lt;/a&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;localparam&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;TB_WATCHDOG_TIMEOUT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1_000_00&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// 1ms&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;reg&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;clog2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TB_WATCHDOG_TIMEOUT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;watchdog_counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;watchdog_counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// if (i_reset)&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;//	Resets aren't strictly necessary in&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;//	simulation only environments ...&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;//&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;//	watchdog_counter &amp;lt;= 0;&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// else&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cpu_stb&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cpu_stall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// Clear the watchdog if the CPU ever makes a&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// (successful) bus request&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;watchdog_counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;watchdog_counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;watchdog_counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;watchdog_counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TB_WATCHDOG_TIMEOUT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;ERROR: Watchdog timeout!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;finish&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This timer will count the number of clock cycles it’s been since the CPU has
attempted to access the bus.  It’s sort of a proxy for whether or not the
CPU has ever locked up.  (Hint: This means the CPU &lt;em&gt;was&lt;/em&gt; locking up.  In
this case, the lock-up was caused by the clock gating logic found in the
Wishbone drivers.)  The way it works is, if the CPU’s bus inputs ever become
idle for some parameterized number of clock cycles, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TB_WATCHDOG_TIMEOUT&lt;/code&gt;,
then the simulation halts with an ERROR.  This helped to keep failing
simulations from hanging the entire simulation setup.  (We’ll get to the
setup in the next section.)&lt;/p&gt;

&lt;p&gt;The final critical component of the simulation environment was the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; software executable itself.  By
parameterizing the simulation software load using the name of the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; executable,
I now had complete control over what simulations would run and how.&lt;/p&gt;

&lt;h2 id=&quot;configuring-the-test-cases&quot;&gt;Configuring the test cases&lt;/h2&gt;

&lt;p&gt;The last critical piece in this setup, prior to the &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/2ffbf68b450948dee56f36bbd113e80866a9362a/sim/sim_run.pl&quot;&gt;simulation
script&lt;/a&gt;,
was the &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/2ffbf68b450948dee56f36bbd113e80866a9362a/sim/rtl/sim_testcases.txt&quot;&gt;test definition
file&lt;/a&gt;.
The &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/2ffbf68b450948dee56f36bbd113e80866a9362a/sim/sim_run.pl&quot;&gt;Perl
script&lt;/a&gt;
reads the various test configurations from this &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/2ffbf68b450948dee56f36bbd113e80866a9362a/sim/rtl/sim_testcases.txt&quot;&gt;test definition
file&lt;/a&gt;,
and then commands a run of that test.  All output from the test then gets
logged to a file for later viewing.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left; padding: 25px&quot;&gt;&lt;caption&gt;Fig. 7, Defining a simulation&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/zipsim/test-defn.svg&quot; alt=&quot;&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;To show how this is done, let’s back up a moment and start with the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/2ffbf68b450948dee56f36bbd113e80866a9362a/sim/rtl/sim_testcases.txt&quot;&gt;simulation configuration file&lt;/a&gt;.
I chose to define a given simulation run via five space delimited fields.
These are:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;The name of the test.  This also becomes the name of the executable &lt;a href=&quot;http://iverilog.icarus.com&quot;&gt;Icarus
Verilog&lt;/a&gt; builds, as well as being transformed
into the name of the output log file.  For these reasons, the test name needs
to be unique.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The CPU configuration.  Given that there were 15 separate parameters I
wanted to control via the configuration, it helped to have named
configuration rather than writing all of these parameters out on each
configuration line.  The &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/2ffbf68b450948dee56f36bbd113e80866a9362a/sim/sim_run.pl&quot;&gt;simulation drive
script&lt;/a&gt;
could then easily look up a configuration by name, and set everything.
For example, here’s what the generic &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/2ffbf68b450948dee56f36bbd113e80866a9362a/sim/sim_run.pl#L64-L78&quot;&gt;pipeline
configuration&lt;/a&gt;
looks like from Perl:&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl&quot; data-lang=&quot;perl&quot;&gt;    &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$pipeconfig&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; -POPT_PIPELINED=1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&quot;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; -POPT_LGDCACHE=2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&quot;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; -POPT_LGICACHE=2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&quot;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; -POPT_MPY=6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&quot;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; -POPT_DIV=1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&quot;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; -POPT_SHIFTS=1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&quot;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; -POPT_LOCK=1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&quot;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; -POPT_EARLY_BRANCHING=1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&quot;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; -POPT_LOWPOWER=0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&quot;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; -POPT_DISTRIBUTED_REGS=0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&quot;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; -POPT_USERMODE=1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&quot;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; -POPT_CLKGATE=0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&quot;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; -POPT_DBGPORT=1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&quot;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; -POPT_TRACE_PORT=0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&quot;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; -POPT_CIS=1 &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&quot;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This is just the first step in the configuration, though.  This would then
need to be coupled with a top level entity, a simulation file set, and
one more parameter indicating which wrapper was being used: either one of the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/2ffbf68b450948dee56f36bbd113e80866a9362a/rtl/zipbones.v&quot;&gt;ZipBones&lt;/a&gt; or
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/2ffbf68b450948dee56f36bbd113e80866a9362a/rtl/zipsystem.v&quot;&gt;ZipSystem&lt;/a&gt; wrappers (for
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone&lt;/a&gt;),
or the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/2ffbf68b450948dee56f36bbd113e80866a9362a/rtl/zipaxil.v&quot;&gt;ZipAXIL&lt;/a&gt; or
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/2ffbf68b450948dee56f36bbd113e80866a9362a/rtl/zipaxi.v&quot;&gt;ZipAXI&lt;/a&gt; wrappers.
I’ll get to these details in the next section, though.&lt;/p&gt;

&lt;ol start=&quot;3&quot;&gt;
  &lt;li&gt;
    &lt;p&gt;Now that the design has a named configuration to use, the next step was to
select a test.  For this, the third element in each line was the name of a
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Executable_and_Linkable_Format&quot;&gt;ELF&lt;/a&gt;
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/2ffbf68b450948dee56f36bbd113e80866a9362a/sim/verilator/mkhex.cpp&quot;&gt;executable turned hex file&lt;/a&gt;.
This file would then be included into the simulation via
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/2ffbf68b450948dee56f36bbd113e80866a9362a/sim/rtl/memsim.v#L81&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$readmemh()&lt;/code&gt;&lt;/a&gt;
for the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; to execute.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;To know, later on, if the test passed successfully, I also kept track of
the output of the CPU’s console.  This is the fourth component of a test
configuration line: the name of a file to write this console output into.&lt;/p&gt;

    &lt;p&gt;The reason for this configuration parameter was to help guarantee that all
intermediate and output files had unique names.  This would allow me to run
the script multiple times, for different tests, on multiple different
processors concurrently.&lt;/p&gt;

    &lt;p&gt;In hindsight, I could’ve just created a file name from the name of the
test.  Perhaps I might’ve called it &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$tstname-out.txt&lt;/code&gt; or some such.
Still, this works, so I have no need to change it at present.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig. 8, Reconfigurability is a test requirement&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/zipsim/reconfigurable.svg&quot; alt=&quot;&quot; width=&quot;420&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;ol start=&quot;3&quot;&gt;
  &lt;li&gt;
    &lt;p&gt;The final part of the command line was really key to the success of this
format as a whole.  The final piece is an (optional) white-space separated
list of parameter overrides.  Frankly, if I ever do this again, this will
be a guaranteed part of any future approach.&lt;/p&gt;

    &lt;p&gt;Why?  Because it keeps me from modifying the files under test just to test
a new configuration.&lt;/p&gt;

    &lt;p&gt;Why?  Because in one customer project, I created an &lt;a href=&quot;http://iverilog.icarus.com&quot;&gt;Icarus
Verilog&lt;/a&gt; script file for each test, and I then
kept needing to change one (or more) of those files to turn on (or off)
&lt;a href=&quot;/blog/2017/07/31/vcd.html&quot;&gt;VCD&lt;/a&gt;
generation.  (Yes, &lt;a href=&quot;/blog/2017/07/31/vcd.html&quot;&gt;VCD&lt;/a&gt;
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/2ffbf68b450948dee56f36bbd113e80866a9362a/sim/rtl/wb_tb.v#L945-L956&quot;&gt;generation in the Verilog test benches is completely
parameterized&lt;/a&gt;).
It then became a hassle to recognize whether or not the changes to the
file needed to be committed to the repository or not, since git only ever
flagged that the file was changed.  (It didn’t help that the change was
a single character on a very long &lt;a href=&quot;http://iverilog.icarus.com&quot;&gt;Icarus&lt;/a&gt;
command line.) This way, I can control the current test configuration
separate from the other files under version control, and I can also see
at a glance whether configuration changes were substantial or not.&lt;/p&gt;

    &lt;p&gt;How have I used this?  I’ve now used it for more than just turning on and off
&lt;a href=&quot;/blog/2017/07/31/vcd.html&quot;&gt;VCD&lt;/a&gt; (or other trace file)
generation.  I’ve also used it to adjust the default bus width, or to turn on
&lt;a href=&quot;/blog/2021/10/26/clkgate.html&quot;&gt;clock gating&lt;/a&gt;
for configurations that don’t have it enabled by default.  Want to create
an ad-hoc test to check a 512bit bus?  Not a problem!  In another project,
one with fewer configuration parameters, I use this parameter list field to
set all of the key parameters (and macros!)–such as whether an analog PHY
is present, or whether or not Xilinx SERDES I/O elements should be used and
tested.&lt;/p&gt;

    &lt;p&gt;Even better, when required, I can use this optional field to implement
Verilog macros as well.  So there are a lot of opportunities here.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;That’s the &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/2ffbf68b450948dee56f36bbd113e80866a9362a/sim/rtl/sim_testcases.txt&quot;&gt;configuration file&lt;/a&gt;.
As you can see, it really captures all of the potential ways the simulation
can be reconfigured to support one test or another.&lt;/p&gt;

&lt;h2 id=&quot;the-simulation-driver&quot;&gt;The simulation driver&lt;/h2&gt;

&lt;p&gt;Now let’s turn our attention over to some of the key components of this
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/2ffbf68b450948dee56f36bbd113e80866a9362a/sim/sim_run.pl#L64-L78&quot;&gt;simulation perl script driver&lt;/a&gt;.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left; padding: 25px&quot;&gt;&lt;caption&gt;Fig. 9, Steps to a scripted simulation&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/zipsim/script-ops.svg&quot; alt=&quot;&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;The script starts off by &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/2ffbf68b450948dee56f36bbd113e80866a9362a/sim/sim_run.pl#L9-L162&quot;&gt;defining a massive number of configuration default
values&lt;/a&gt;.
I’ll skip &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/2ffbf68b450948dee56f36bbd113e80866a9362a/sim/sim_run.pl#L9-L162&quot;&gt;this section&lt;/a&gt;
for brevity, but you are more than welcome to look through it.  These define
both the basic &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; configurations,
such as we listed above, as well as &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/2ffbf68b450948dee56f36bbd113e80866a9362a/sim/sim_run.pl#L138-L162&quot;&gt;which wrapper is to be used for each
configuration&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;From there, the &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/2ffbf68b450948dee56f36bbd113e80866a9362a/sim/sim_run.pl#L164-L178&quot;&gt;script starts looking over the command line
arguments&lt;/a&gt;.  In this
case, we insist on at least one argument &lt;em&gt;or die!&lt;/em&gt;.  Sorry, couldn’t help it.
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;or die&lt;/code&gt; is common Perlese for exiting the script with an error.  Otherwise,
if the &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/2ffbf68b450948dee56f36bbd113e80866a9362a/sim/sim_run.pl#L170-L174&quot;&gt;first command line argument is the single word
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;all&lt;/code&gt;&lt;/a&gt;,
then we’ll ignore any other arguments and run every test case found in the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/2ffbf68b450948dee56f36bbd113e80866a9362a/sim/rtl/sim_testcases.txt&quot;&gt;configuration file&lt;/a&gt;.
Finally, if neither case applies, then &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/2ffbf68b450948dee56f36bbd113e80866a9362a/sim/sim_run.pl#L175-L176&quot;&gt;the argument list is interpreted as a
set of test names&lt;/a&gt;
that we’ll then &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/2ffbf68b450948dee56f36bbd113e80866a9362a/sim/sim_run.pl#L450-L471&quot;&gt;look
up&lt;/a&gt;
in our &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/2ffbf68b450948dee56f36bbd113e80866a9362a/sim/rtl/sim_testcases.txt&quot;&gt;test definitions
file&lt;/a&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl&quot; data-lang=&quot;perl&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$all_run&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ARGV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;eq&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&quot;&quot;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;No test cases given&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&quot;;&lt;/span&gt;
	&lt;span class=&quot;nb&quot;&gt;exit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;elsif&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ARGV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;eq&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&quot;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;nv&quot;&gt;$all_run&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;SUM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$report&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&quot;);&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;SUM&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Running all tests:&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;--------------------&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n\n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&quot;);&lt;/span&gt;
	&lt;span class=&quot;nb&quot;&gt;close&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;SUM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;## Run any named tests found in the definitions file&lt;/span&gt;
	&lt;span class=&quot;nv&quot;&gt;@array&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;@ARGV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We’re going to want to place our results in a directory that isn’t under
version control.  Let’s call this directory &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;test/&lt;/code&gt;, and make sure it exists.
If not, we’ll create it next.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl&quot; data-lang=&quot;perl&quot;&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;test/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&quot;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;nb&quot;&gt;mkdir&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&quot;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The next step is found at the bottom of the file.  Here we either look
up a test configuration by name, via the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gettest()&lt;/code&gt; function (&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/2ffbf68b450948dee56f36bbd113e80866a9362a/sim/sim_run.pl#L450-L471&quot;&gt;also
implemented within this perl script&lt;/a&gt;, or read
every line from the configuration file.  Every line is then passed to the
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;simline()&lt;/code&gt; function for both parsing and to run the actual simulation.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl&quot; data-lang=&quot;perl&quot;&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$all_run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;TL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$simd&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/sim_testcases.txt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&quot;);&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$line&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;TL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$line&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=~&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/^\s*#/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;# print &quot;TEST LINE: $line&quot;;&lt;/span&gt;
		&lt;span class=&quot;nv&quot;&gt;simline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;SUM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$report&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&quot;);&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;SUM&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;----&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Test run complete&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n\n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&quot;);&lt;/span&gt;
	&lt;span class=&quot;nb&quot;&gt;close&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;SUM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;foreach&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$akey&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;@array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;nv&quot;&gt;$line&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;gettest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$akey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$line&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=~&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/FAIL/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;# print &quot;TEST LINE: $line&quot;;&lt;/span&gt;
		&lt;span class=&quot;nv&quot;&gt;simline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Incidentally, it’s this &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;simline()&lt;/code&gt; function where all the work takes
place, so let’s break this function up into pieces and walk through it, since
this is the function that actually runs the simulator for a given test
configuration.&lt;/p&gt;

&lt;p&gt;The key to this function is Perl’s pattern matching ability.&lt;/p&gt;

&lt;p&gt;We’ll start by removing any end of line comments.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl&quot; data-lang=&quot;perl&quot;&gt;	&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$line&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=~&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/^(.*)#.*/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;nv&quot;&gt;$line&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We’ll then apply a pattern match to the line to separate out the various
components of the line.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl&quot; data-lang=&quot;perl&quot;&gt;	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$line&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=~&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/^\s*(\S+)\s*(\S+)\s*(\S+)\s*(\S+)\s(.*)\s*$/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;nv&quot;&gt;$tstname&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;nv&quot;&gt;$config&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;nv&quot;&gt;$memfil&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;nv&quot;&gt;$confil&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;nv&quot;&gt;$params&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The pattern above depends upon the existence of four (or more) white space
delineated fields, as we described them above, where the last field containing
the (optional) parameter list may be left blank.  If this pattern doesn’t
match, then … this isn’t a properly configured test line, and we’ll generate
an error and then skip it.&lt;/p&gt;

&lt;p&gt;For now, let’s assume the pattern matches and we’ll continue.&lt;/p&gt;

&lt;p&gt;It’s important for me to know &lt;em&gt;when&lt;/em&gt; things happen.  This helps me know
how long a test takes, as well as how deep into a test I am at any given
time.  When I’m not producing any console output, this is also the first
indication I have of any (potential) errors.  So, I’ll take this time to
grab a time stamp to describe the beginning of the simulation call.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl&quot; data-lang=&quot;perl&quot;&gt;	&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$sc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$mn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$hr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$dy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$mo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$yr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$wday&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$yday&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$isdst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;localtime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;nv&quot;&gt;$yr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$yr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1900&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$mo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$mo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;nv&quot;&gt;$tstamp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sprintf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;%04d/%02d/%02d %02d:%02d:%02d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&quot;,&lt;/span&gt;
				&lt;span class=&quot;nv&quot;&gt;$yr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$mo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$dy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$hr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$mn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$sc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Incidentally, if you look through this &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/2ffbf68b450948dee56f36bbd113e80866a9362a/sim/sim_run.pl&quot;&gt;simulation driver Perl
script&lt;/a&gt;, you’ll find
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/2ffbf68b450948dee56f36bbd113e80866a9362a/sim/sim_run.pl#L214-L279&quot;&gt;the script works for&lt;/a&gt;
&lt;a href=&quot;/blog/2017/06/21/looking-at-verilator.html&quot;&gt;Verilator&lt;/a&gt;
as well as &lt;a href=&quot;http://iverilog.icarus.com&quot;&gt;Icarus&lt;/a&gt;–it’s just that
the &lt;a href=&quot;/blog/2017/06/21/looking-at-verilator.html&quot;&gt;Verilator&lt;/a&gt;
support &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/2ffbf68b450948dee56f36bbd113e80866a9362a/sim/sim_run.pl#L9&quot;&gt;isn’t (currently) configured either by
default&lt;/a&gt; or by the command line.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl&quot; data-lang=&quot;perl&quot;&gt;	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$verilator_flag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;## Configure for Verilator ...&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;## Configure for IVerilog ...&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now that we have our configuration test parameters, the next step is to put
the &lt;a href=&quot;http://iverilog.icarus.com&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;iverilog&lt;/code&gt; command line&lt;/a&gt; together.&lt;/p&gt;

&lt;p&gt;We’ll start with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-g2012&lt;/code&gt;.  I personally use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-g2012&lt;/code&gt; option for all my
work.  I need it to support my liberal use of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;localparam&lt;/code&gt;s, but I’m sure
there are other goodies that come with this as well.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl&quot; data-lang=&quot;perl&quot;&gt;	&lt;span class=&quot;nv&quot;&gt;$cmd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;iverilog -g2012&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&quot;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Let’s look up the parameters associated with our named configuration next.
To do this, however, we’ll need to know the top level module name, whether
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/2ffbf68b450948dee56f36bbd113e80866a9362a/sim/rtl/wb_tb.v&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wb_tb&lt;/code&gt;&lt;/a&gt; or
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/2ffbf68b450948dee56f36bbd113e80866a9362a/sim/rtl/axi_tb.v&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;axi_tb&lt;/code&gt;&lt;/a&gt;.
We’re going to need that, so let’s grab that off of the configuration file
string.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl&quot; data-lang=&quot;perl&quot;&gt;	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$cfgfiles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=~&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/-s\s+(\S+)\s/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;nv&quot;&gt;$toplevel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;elsif&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$cfgfiles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=~&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/-s\s+(\S+)$/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;nv&quot;&gt;$toplevel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;## This should probably be an error.&lt;/span&gt;
		&lt;span class=&quot;nv&quot;&gt;$toplevel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;no_tb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&quot;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We can now look up our configuration string.  This is the string with all of
our parameters defined in it.  In my case, I prefixed each parameter with
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-P&lt;/code&gt;.  This, however, isn’t sufficient.  Parameters need to be prefixed with
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-P&lt;/code&gt; &lt;em&gt;and&lt;/em&gt; the name of the top level–so we’ll do a simple substitution here to
get that right.  While we’re at it, we’ll add a shell escape for our quotation
marks–so the shell won’t play with them unduly.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl&quot; data-lang=&quot;perl&quot;&gt;	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$cfghash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;ne&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&quot;&quot;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;## Must include sim file list and top level&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;## as well as any parameters&lt;/span&gt;
		&lt;span class=&quot;nv&quot;&gt;$cfgstr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$cfghash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
		&lt;span class=&quot;nv&quot;&gt;$cfgstr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=~&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;s/-P/-P$toplevel./g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;nv&quot;&gt;$cfgstr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=~&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;s/\&quot;/\\\&quot;/g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;nv&quot;&gt;$cmd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$cmd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$cfgstr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Two more parameters come from the test configuration line itself.
These are the name of the memory file, containing the &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/2ffbf68b450948dee56f36bbd113e80866a9362a/sim/zipsw/cputest.c&quot;&gt;ZipCPU test
program&lt;/a&gt;
memory image, and the name of the console file output.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl&quot; data-lang=&quot;perl&quot;&gt;	&lt;span class=&quot;nv&quot;&gt;$cmd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$cmd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; -P&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$toplevel&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;.MEM_FILE=&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;zipsw/&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$memfil&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\\&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&quot;;&lt;/span&gt;
	&lt;span class=&quot;nv&quot;&gt;$cmd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$cmd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; -P&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$toplevel&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;.CONSOLE_FILE=&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\\&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$testd&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$confil&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\\&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&quot;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;With that, it’s now time to look at our parameter list.  This list comes in the
form of a set of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;A=B&lt;/code&gt; pairs, where the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;A&lt;/code&gt; is the parameter name and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;B&lt;/code&gt;
is it’s value.&lt;/p&gt;

&lt;p&gt;The first step is to try to match the remaining portion of the line to
both an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;A=B&lt;/code&gt; pair and an everything else in the line.  I’ve chosen to
name this “everything else” as the &lt;a href=&quot;https://en.wikipedia.org/wiki/CAR_and_CDR&quot;&gt;CDR after the use of this term in
LISP&lt;/a&gt;.  Once the design
has been separated into these three pieces, I can then use the first
two, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;A&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;B&lt;/code&gt; of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;A=B&lt;/code&gt;, to generate a command line parameter
setting.  Since this will follow all other parameter settings on the command
line, this one should override any previous parameters set by the same name.
Don’t forget to escape any string quotations!&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl&quot; data-lang=&quot;perl&quot;&gt;	&lt;span class=&quot;nv&quot;&gt;$cdr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$cdr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=~&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/\s*(\S+)=(\S+)(.*)$/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;nv&quot;&gt;$p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;nv&quot;&gt;$v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;nv&quot;&gt;$cdr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=~&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/\&quot;(.*)\&quot;/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;nv&quot;&gt;$str&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;nv&quot;&gt;$cmd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$cmd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; -P&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$toplevel&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$p&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\\&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$str&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\\&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&quot;;&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;nv&quot;&gt;$cmd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$cmd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; -P&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$toplevel&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$p&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&quot;;&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Our last step will be to append the name of our file list to the command
line, and then specify that &lt;a href=&quot;http://iverilog.icarus.com&quot;&gt;Icarus&lt;/a&gt;
should produce an output file in our
test directory having the same name as our test’s configuration name.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl&quot; data-lang=&quot;perl&quot;&gt;	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$cfgfiles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;ne&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&quot;&quot;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;nv&quot;&gt;$cmd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$cmd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$cfgfiles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;nv&quot;&gt;$cmd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$cmd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; -o &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$testd&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$tstname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&quot;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This should be unique enough to work with.&lt;/p&gt;

&lt;p&gt;For those not familiar with &lt;a href=&quot;http://iverilog.icarus.com&quot;&gt;Icarus Verilog&lt;/a&gt;,
this is &lt;a href=&quot;http://iverilog.icarus.com&quot;&gt;Icarus&lt;/a&gt;’s way of doing business.
Simulation takes place in two parts.  The first part is to build a simulation
executable, and the second part is to build the simulation itself.&lt;br /&gt;
(Vivado isn’t all that different.)  Now that we have a command line built up
to build the executable, therefore, we go ahead and run
&lt;a href=&quot;http://iverilog.icarus.com&quot;&gt;Icarus&lt;/a&gt; to build our simulation executable.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl&quot; data-lang=&quot;perl&quot;&gt;	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$testd&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$tstname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&quot;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;nb&quot;&gt;unlink&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$testd&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$tstname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&quot;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;nv&quot;&gt;$cmd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$cmd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; |&amp;amp; tee -a &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$sim_log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&quot;;&lt;/span&gt;
	&lt;span class=&quot;nb&quot;&gt;system&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;echo &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$cmd&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&quot;;&lt;/span&gt;
	&lt;span class=&quot;nb&quot;&gt;system&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;bash -c &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$cmd&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&quot;;&lt;/span&gt;
	&lt;span class=&quot;nv&quot;&gt;$errB&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If all goes well, we should now have a simulation executable–assuming
&lt;a href=&quot;http://iverilog.icarus.com&quot;&gt;Icarus&lt;/a&gt; didn’t find some error while building
our design.&lt;/p&gt;

&lt;p&gt;So … let’s run our simulation!&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl&quot; data-lang=&quot;perl&quot;&gt;	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$errB&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$testd&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$tstname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&quot;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;## Grab a timestamp&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$sc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$mn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$hr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$dy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$mo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$yr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$wday&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$yday&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$isdst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;localtime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;nv&quot;&gt;$yr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$yr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1900&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$mo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$mo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;nv&quot;&gt;$tstamp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sprintf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;%04d/%02d/%02d %02d:%02d:%02d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&quot;,&lt;/span&gt;
				&lt;span class=&quot;nv&quot;&gt;$yr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$mo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$dy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$hr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$mn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$sc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;nb&quot;&gt;system&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;echo &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$tstamp&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; -- Starting simulation&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; | tee -a &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$sim_log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&quot;;&lt;/span&gt;

		&lt;span class=&quot;c1&quot;&gt;## Then run the simulation&lt;/span&gt;
		&lt;span class=&quot;nb&quot;&gt;system&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$testd&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$tstname&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; &amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$sim_log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&quot;;&lt;/span&gt;

		&lt;span class=&quot;c1&quot;&gt;## Finish the log with another timestamp&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$sc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$mn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$hr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$dy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$mo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$yr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$wday&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$yday&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$isdst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;localtime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;nv&quot;&gt;$yr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$yr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1900&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$mo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$mo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;nv&quot;&gt;$tstamp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sprintf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;%04d/%02d/%02d %02d:%02d:%02d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&quot;,&lt;/span&gt;
					&lt;span class=&quot;nv&quot;&gt;$yr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$mo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$dy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$hr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$mn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$sc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;nb&quot;&gt;system&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;echo &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$tstamp&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; &amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$sim_log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&quot;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Once we get to this point, the simulation has now completed.  This may take
many hours, depending upon the configuration and the test.  For example,
running the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LOCK&lt;/code&gt; check on the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/2ffbf68b450948dee56f36bbd113e80866a9362a/rtl/zipbones.v&quot;&gt;ZipBones&lt;/a&gt;
MIN configuration takes about 12hrs on my computer.  On the other hand, when
using &lt;a href=&quot;/blog/2017/06/21/looking-at-verilator.html&quot;&gt;Verilator&lt;/a&gt;,
&lt;em&gt;all&lt;/em&gt; of the tests for all of the configurations can complete in less than one
hour–but … that’s another story.  (It’s also one of the reasons why I love
&lt;a href=&quot;/blog/2017/06/21/looking-at-verilator.html&quot;&gt;Verilator&lt;/a&gt; so
much!)&lt;/p&gt;

&lt;p&gt;Now that everything has completed, let’s go dig through the log file to
see if we’ve been successful.&lt;/p&gt;

&lt;p&gt;If we find &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ERROR&lt;/code&gt; in the log file, or any reference to an assertion failure,
then we have not been successful.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl&quot; data-lang=&quot;perl&quot;&gt;		&lt;span class=&quot;nb&quot;&gt;system&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;grep &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;'ERROR&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;' &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$sim_log&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; | sort -u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&quot;;&lt;/span&gt;
		&lt;span class=&quot;nb&quot;&gt;system&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;grep -q &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;'ERROR&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;' &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$sim_log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&quot;;&lt;/span&gt;
		&lt;span class=&quot;nv&quot;&gt;$errE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;nb&quot;&gt;system&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;grep -iq &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;'assert.*fail&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;' &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$sim_log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&quot;;&lt;/span&gt;
		&lt;span class=&quot;nv&quot;&gt;$errA&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;nb&quot;&gt;system&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;grep -iq &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;'fail&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;' &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$sim_log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&quot;;&lt;/span&gt;
		&lt;span class=&quot;nv&quot;&gt;$errF&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We can now take these results and write them into a report file, to track
all of our simulation results.  We’ll assume here that if we haven’t found
any errors, then the test has been successful.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl&quot; data-lang=&quot;perl&quot;&gt;	&lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;SUM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$report&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&quot;);&lt;/span&gt;
	&lt;span class=&quot;nv&quot;&gt;$msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sprintf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;%s IVerilog  -- %s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&quot;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$tstamp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$tstname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$errE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$errA&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$errF&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;## ERRORs found&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;SUM&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;ERRORS    &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$msg&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&quot;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;     &lt;span class=&quot;p&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;ERRORS    &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$msg&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&quot;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;SUM&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;PASSED    &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$msg&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&quot;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;     &lt;span class=&quot;p&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;PASSED    &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$msg&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&quot;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This isn’t really an ideal test, but it’s worked for me so far.&lt;/p&gt;

&lt;p&gt;The &lt;em&gt;ideal&lt;/em&gt; would be for the test to end with some form of SUCCESS message.
My test setup still needs some work, though, before I will have a dependable
SUCCESS message to work from.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Put together, &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/2ffbf68b450948dee56f36bbd113e80866a9362a/sim/sim_run.pl&quot;&gt;this script&lt;/a&gt; allows me to test a rough 67 test
cases.  Why so many?  Simply because each test checks something different.
Sadly, I’ve learned from experience that it’s possible to have 66 test cases
pass and one fail.&lt;/p&gt;

&lt;p&gt;Ideally, the &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/2ffbf68b450948dee56f36bbd113e80866a9362a/sim/zipsw/cputest.c&quot;&gt;initial CPU test&lt;/a&gt;
should catch any and all bugs.  Sadly, it doesn’t.  Or rather, it hasn’t.  For
example, the original &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/2ffbf68b450948dee56f36bbd113e80866a9362a/sim/zipsw/cputest.c&quot;&gt;CPU
test&lt;/a&gt;
never caught the bugs associated with stepping the CPU, one instruction at a
time.  Specifically, stepping through a divide instruction would void the
divide instruction, and leave you forever stepping through the same
instruction.  While I’ve now fixed the &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/2ffbf68b450948dee56f36bbd113e80866a9362a/sim/zipsw/cputest.c&quot;&gt;CPU test
program&lt;/a&gt;
so it checks for that bug, I’m reasonably confident that nothing other than my
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/2ffbf68b450948dee56f36bbd113e80866a9362a/sim/zipsw/lockcheck.c&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LOCK&lt;/code&gt; checking program&lt;/a&gt;
will truly check for whether or not &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LOCK&lt;/code&gt; instruction works.  Further, the
bus width tests have found bugs the other tests haven’t as well.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig. 10, Does testing need to go multicore?&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/zipsim/multicore.svg&quot; alt=&quot;&quot; width=&quot;420&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;While the test set is reasonably complete, I am also painfully aware of some
significant holes remaining in it–thanks to both
&lt;a href=&quot;/blog/2017/06/21/looking-at-verilator.html&quot;&gt;Verilator&lt;/a&gt;’s
coverage checking capability and &lt;a href=&quot;https://github.com/YosysHQ/mcy&quot;&gt;MCY&lt;/a&gt;.
For example, while I exercise the exclusive access capabilities of
both AXI and Wishbone buses, I only do so from a single CPU.  Worse, the
CPU will not allow a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LOCK&lt;/code&gt; instruction sequence to be interrupted or stepped
through–it’s either all one instruction or none by design.  In many ways,
that’s a good thing … except that it means there will never be any true
&lt;em&gt;bus&lt;/em&gt; contention to test whether or not the memory modules handle locking
properly.  Another glaring fault in this test setup is that nothing is
(currently) testing the CPU’s debug port.  Hence, I may choose to fix both
of these by adding additional CPU’s to my simulation, in such a way that one
master CPU controls and starts all others.&lt;/p&gt;

&lt;p&gt;For now, let me note that I’ve enjoyed this approach so much that I’ve
started using something similar on my commercial projects, and I’ve even
ported a similar script to Vivado.&lt;/p&gt;

&lt;p&gt;Bottom line: the approach works nicely, and I’m likely to use it again.&lt;/p&gt;
&lt;hr /&gt;&lt;p&gt;&lt;em&gt;Judge me, O LORD; for I have walked in mine integrity: I have trusted also in the LORD; therefore I shall not slide.  Examine me, O LORD, and prove me; try my reins and my heart. (Ps 26:1-2)&lt;/em&gt;</description>
        <pubDate>Mon, 04 Jul 2022 00:00:00 -0400</pubDate>
        <link>https://zipcpu.com/zipcpu/2022/07/04/zipsim.html</link>
        <guid isPermaLink="true">https://zipcpu.com/zipcpu/2022/07/04/zipsim.html</guid>
        
        
        <category>zipcpu</category>
        
      </item>
    
      <item>
        <title>A Coming Economic Downturn?  or Worse?</title>
        <description>&lt;p&gt;I’ll try to keep this short.&lt;/p&gt;

&lt;p&gt;Some time ago, I came across this verse:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Therefore thus saith the Lord GOD, Behold, I lay in Zion for a foundation a
stone, a tried stone, a precious corner stone, a sure foundation: he that
believeth shall not make haste.&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://www.blueletterbible.org/kjv/isa/28/16/&quot;&gt;Isaiah 28:16&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;At the time, I was trying to understand the New Testament references to
cornerstones, and this was &lt;a href=&quot;https://www.blueletterbible.org/kjv/1pe/2/6&quot;&gt;one of those
references&lt;/a&gt;.  The other major
reference being to &lt;a href=&quot;https://www.blueletterbible.org/kjv/psa/118/22/&quot;&gt;Ps 118:22&lt;/a&gt;.
Unlike &lt;a href=&quot;https://www.blueletterbible.org/kjv/psa/118/22/&quot;&gt;Ps 118:22&lt;/a&gt;,
&lt;a href=&quot;https://www.blueletterbible.org/kjv/isa/28/16/&quot;&gt;this Isaiah verse&lt;/a&gt;
had a context that quite captured my attention.  For example, if you back up
by just one verse, you read:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Because ye have said, We have made a covenant with death, and with hell
are we at agreement; when the overflowing scourge shall pass through, it
shall not come unto us: for we have made lies our refuge, and under
falsehood have we hid ourselves:&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://www.blueletterbible.org/kjv/isa/28/15/&quot;&gt;Isaiah 28:15&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;That’s not just pretty poetic language, its powerful language and … it has
my attention.  Specifically, why does
&lt;a href=&quot;https://www.blueletterbible.org/kjv/isa/28/16/&quot;&gt;verse 16&lt;/a&gt;
begin with the word “Therefore”?
The two verses seem to be completely unrelated.  Or at least, they seemed
unrelated to me until I understood how and why God had put them together.
Once you put them together, they then speak very loudly to today’s day and age.&lt;/p&gt;

&lt;p&gt;So, let’s back up further.  I’ll back up all the way to verse 9.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Whom shall he teach knowledge? and whom shall he make to understand
  doctrine? them that are weaned from the milk, and drawn from the breasts.
For precept must be upon precept, precept upon precept; line upon line,
  line upon line; here a little, and there a little:
For with stammering lips and another tongue will he speak to this people.
To whom he said, This is the rest wherewith ye may cause the weary to rest;
  and this is the refreshing: yet they would not hear.
But the word of the LORD was unto them precept upon precept, precept upon
  precept; line upon line, line upon line; here a little, and there a
  little; that they might go, and fall backward, and be broken, and snared,
  and taken.&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://www.blueletterbible.org/kjv/isa/28/9-13/&quot;&gt;Is 28:9-13&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let me pause for a moment and expand upon the language a little bit here.&lt;/p&gt;

&lt;p&gt;First, since studying Biblical Greek (yes, I know this is from Hebrew), I’ve
had a different definition and understanding of the word “doctrine”.  I would
define this word as “the substance of what is taught.”  This isn’t all that
different from today’s &lt;a href=&quot;https://en.wikipedia.org/wiki/Doctrine&quot;&gt;Wikipedia
definition&lt;/a&gt;, “a codification of
beliefs or a body of teachings or instructions, taught principles or
positions, as the essence of teachings in a given branch of knowledge or in a
belief system,” save that I don’t connect doctrine with a “belief system” by
nature.  The word is more neutral than that.  It’s simple the substance of
what is taught.  It’s the text book if you will, the “codification” of a
“body of teachings or instructions.”  There is a doctrine of mathematics, for
example–it’s not about beliefs, it’s just the codification of the lesson
material.&lt;/p&gt;

&lt;p&gt;God wants to teach us “knowledge” and “doctrine”.  This sounds like a good
thing.  I’m interested.  I’d sign up for that class.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;For precept must be upon precept, precept upon precept; line upon line,
  line upon line; here a little, and there a little:&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://www.blueletterbible.org/kjv/isa/28/10/&quot;&gt;Is 28:10&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This we all know and agree upon.  You can’t teach a child how to multiply
unless they first know how to add.  You can’t teach reading unless you first
teach letters.  Teaching is built upon a foundation, and that foundation
needs to be laid a little bit at a time.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;To whom he said, This is the rest wherewith ye may cause the weary to rest;
  and this is the refreshing: yet they would not hear.&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://www.blueletterbible.org/kjv/isa/28/12/&quot;&gt;Is 28:12&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This part starts with a promise, and one I like–&lt;a href=&quot;https://www.blueletterbible.org/kjv/heb/4/9&quot;&gt;a promise of
rest&lt;/a&gt; and refreshing.  I like
promises, especially promises of good from those who are able to keep them.&lt;/p&gt;

&lt;p&gt;But it continues with, “yet they would not hear.”&lt;/p&gt;

&lt;p&gt;God, therefore, is offering to man a wonderful promise and getting rebellion
in response.  This forms the backdrop of what takes place next.&lt;/p&gt;

&lt;p&gt;Indeed, the next part is where it starts to get interesting.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;But the word of the LORD was unto them precept upon precept, precept upon
  precept; line upon line, line upon line; here a little, and there a
  little; that they might go, and fall backward, and be broken, and snared,&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://www.blueletterbible.org/kjv/isa/28/13/&quot;&gt;Is 28:13&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Here’s God’s point: if you don’t learn the lessons of truth, about how the
reality of the world works, the truth doesn’t change.  Instead, the realities
of life will break you.  As one preacher once said, men don’t break God’s laws,
God’s laws break them.  Sure, you can jump off a building an defy gravity
for a fleeting moment, but you can’t avoid the sudden stop at the bottom.&lt;/p&gt;

&lt;p&gt;It’s not just that two plus two equals four and not five independent of the
family you were born into, but it’s also the simple basics of life: only hens
lay eggs, only cows provide milk, and only women can give birth.  You aren’t
going to get eggs from a cock (a farmer’s term for a male chicken, since
technically all chickens roost and are therefore roosters), and I’m going to
laugh at the individual who tries to milk the bull.  Frankly, there are some
parts of this world that man cannot change, and those who try will “fall
backward, and be broken, and snared.”  Put simply, it’s not going to end well.&lt;/p&gt;

&lt;p&gt;But this is only the part of where God describes what is currently taking
place.  It’s in the next verse where He begins His pronouncement of judgment.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Wherefore hear the word of the LORD, ye scornful men, that rule this people
  which is in Jerusalem.
Because ye have said, We have made a covenant with death, and with hell
  are we at agreement; when the overflowing scourge shall pass through, it
  shall not come unto us: for we have made lies our refuge, and under
  falsehood have we hid ourselves:&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://www.blueletterbible.org/kjv/isa/28/14-15/&quot;&gt;Is 28:14-15&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Yes, I know that this particular judgment has long since passed.  The
individuals who ruled “this people which is in Jerusalem” did so over
a thousand years ago.  I’m just not willing to dismiss this passage that
quickly, especially since the nature of God which caused Him to send this
judgment hasn’t changed, neither have the simple truths of life which still
need to be taught today.&lt;/p&gt;

&lt;p&gt;Indeed, “We have made lies our refuge, and under falsehood have we hid
ourselves” describes the day we live in.  Yes, the government can get itself
out of the problem it has created by spending more than it has by printing
more money!  Yes, we can escape all responsibility by blaming our predecessor!
Yes, we can blame foreigners and aliens for the problems we’ve created in our
own back yards!  Yes, a man can win in women’s sports by declaring himself to
be a woman!  Yes, I can declare my engineering products as “working” even
before they are tested!  Reality doesn’t affect me!&lt;/p&gt;

&lt;p&gt;But what of the peace treaty with death?  God gets to that two verses down.
For now, in the midst of this pronouncement of judgment, the prophet
adds this verse about the cornerstone.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Therefore thus saith the Lord GOD, Behold, I lay in Zion for a foundation a
  stone, a tried stone, a precious corner stone, a sure foundation: he that
  believeth shall not make haste.&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://www.blueletterbible.org/kjv/isa/28/16/&quot;&gt;Is 28:16&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Again, like I said at the beginning, at the first read this feels out of place.
The verse following seems to skip it.  It’s almost as if, if you only removed
&lt;a href=&quot;https://www.blueletterbible.org/kjv/isa/28/16/&quot;&gt;verse 16&lt;/a&gt;,
the passage would make more sense.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Judgment also will I lay to the line, and righteousness to the plummet: and
  the hail shall sweep away the refuge of lies, and the waters shall overflow
  the hiding place.
And your covenant with death shall be disannulled, and your agreement with
  hell shall not stand; when the overflowing scourge shall pass through,
  then ye shall be trodden down by it.
From the time that it goeth forth it shall take you: for morning by morning
  shall it pass over, by day and by night: and it shall be a vexation only
  to understand the report.&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://www.blueletterbible.org/kjv/isa/28/17-19/&quot;&gt;Is 28:17-19&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&quot;https://www.blueletterbible.org/kjv/isa/28/17/&quot;&gt;Verse 17&lt;/a&gt;,
referencing a line and a plummet, is a clear reference to the
restoration of truth in a society.  We build using lines.  A taught cord
can be used as a straight line when setting a wall.  Indeed, masons use such
cords often and for that specific purpose.  Straight lines are important.  So
is the &lt;a href=&quot;https://www.lowes.com/pd/Swanson-Tool-Company-16-oz-Solid-Brass-Plumb-Bob/1006465&quot;&gt;plummet–a basic weight on a cord&lt;/a&gt;.  The plummet is used to
determine which way is down and, as a consequence, which is up.  Both are
references to basic truths which cannot be ignored or broken.  This,
therefore, is a reference to God bringing His creation back to reality.
This judgment will be a true “Come to Jesus” moment, if ever there was one.&lt;/p&gt;

&lt;p&gt;What of the peace treaty with death?  It will be disannulled.  There was no
basis for it.  The judge will neither recognize it, nor honour it, nor compel
its enforcement.  The agreement with hell?  Same thing.  It will not stand.
The overflowing scourge?&lt;/p&gt;

&lt;p&gt;Ahh, now that’s where we meet what’s coming next.&lt;/p&gt;

&lt;p&gt;What form will this overflowing scourge take?&lt;/p&gt;

&lt;p&gt;Will it be an economic recession?  Perhaps.  A depression?  Could be.  An
interruption in the food supply?  We’ve already seen some of that.  An
interruption in power?  That’s already in the forecast.  War?  Another world
war even?  We know from prophecy that another one is coming if not two.  The
destruction of the current world order?  &lt;a href=&quot;https://www.blueletterbible.org/kjv/dan/2/42-45&quot;&gt;That’s also been
prophesied&lt;/a&gt;.
It’s just a matter of when.&lt;/p&gt;

&lt;p&gt;Frankly, I don’t know what’s coming next.  Sure, &lt;a href=&quot;https://www.blueletterbible.org/kjv/psa/119/105&quot;&gt;God’s word is a lamp unto
my feet&lt;/a&gt;–just not my
horizon.  What I do know is this, &lt;a href=&quot;https://www.blueletterbible.org/kjv/mat/24/32&quot;&gt;the signs are all around
us&lt;/a&gt;,
and “It shall be a vexation only to understand the report.”&lt;/p&gt;

&lt;p&gt;When God steps in, there will be shock and awe.&lt;/p&gt;

&lt;p&gt;Okay, so let’s now go back to that corner stone verse.  How does that apply
here?&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Therefore thus saith the Lord GOD, Behold, I lay in Zion for a foundation a
stone, a tried stone, a precious corner stone, a sure foundation: he that
believeth shall not make haste.&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://www.blueletterbible.org/kjv/isa/28/16/&quot;&gt;Is 28:16&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The application is now straight-forward.  The storm is coming.  Many shall be
destroyed by it.  God has declared it, and there’s nothing that can be done
to stop it.  All we can hope to do is to ride through it.  For this reason,
God provides a “sure foundation”, so that those standing upon it will not get
swept away with the judgment of the unbelievers.&lt;/p&gt;

&lt;p&gt;It’s against this backdrop that Jesus teaches,&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Therefore whosoever heareth these sayings of mine, and doeth them, I will
  liken him unto a wise man, which built his house upon a rock:
And the rain descended, and the floods came, and the winds blew, and beat
  upon that house; and it fell not: for it was founded upon a rock.
And every one that heareth these sayings of mine, and doeth them not, shall
  be likened unto a foolish man, which built his house upon the sand:
And the rain descended, and the floods came, and the winds blew, and beat
  upon that house; and it fell: and great was the fall of it.&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://www.blueletterbible.org/kjv/mat/7/24-27&quot;&gt;Matt 7:24-27&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You will hear many individuals telling you how to prepare for whatever they
believe the coming catastrophe will be.  I’ve heard some telling me to buy
&lt;a href=&quot;https://www.birchgold.com&quot;&gt;gold&lt;/a&gt; or silver.  Some say that I should purchase
&lt;a href=&quot;https://mypatriotsupply.com&quot;&gt;packaged food&lt;/a&gt; for long term storage.  Others
have said to buy bonds.  Still others say that inflationary times are the
best times to borrow money.&lt;/p&gt;

&lt;p&gt;While these individuals may be well intentioned, the only advice that will
help you avoid God’s judgment of sinful men is the advice God offers.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://www.blueletterbible.org/kjv/mat/7/24&quot;&gt;Therefore whosoever heareth these sayings of mine, and doeth
them&lt;/a&gt;, …&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;&lt;p&gt;&lt;em&gt;Therefore thus saith the Lord GOD, Behold, I lay in Zion for a foundation a stone, a tried stone, a precious corner stone, a sure foundation: he that believeth shall not make haste.  (Is 28:16)&lt;/em&gt;</description>
        <pubDate>Tue, 21 Jun 2022 00:00:00 -0400</pubDate>
        <link>https://zipcpu.com/blog/2022/06/21/cornerstone.html</link>
        <guid isPermaLink="true">https://zipcpu.com/blog/2022/06/21/cornerstone.html</guid>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>Quiz #20: Using $stable in a multiclock environment</title>
        <description>&lt;!-- answer: &quot;2022/01/01/fv-answer19.html&quot; --&gt;

&lt;p&gt;This is a really good question for understanding how &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$stable()&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$past()&lt;/code&gt;
work in a multiclock environment.&lt;/p&gt;

&lt;p&gt;Remember, though: I like to play trick questions.  Beware of the easy and
(possibly) obvious answer.&lt;/p&gt;
</description>
        <pubDate>Mon, 16 May 2022 00:00:00 -0400</pubDate>
        <link>https://zipcpu.com/quiz/2022/05/16/quiz20.html</link>
        <guid isPermaLink="true">https://zipcpu.com/quiz/2022/05/16/quiz20.html</guid>
        
        
        <category>quiz</category>
        
      </item>
    
      <item>
        <title>Learning AXI: Where to start?</title>
        <description>&lt;p&gt;Someone &lt;a href=&quot;https://www.reddit.com/r/FPGA/comments/shw219/advice_for_studying_the_axi_specification/&quot;&gt;once asked on Reddit, how should one go about learning the AXI
protocol&lt;/a&gt;?
The following summarizes my basic answer.&lt;/p&gt;

&lt;p&gt;First off, don’t start with Xilinx’s example designs.  Sorry, but their
examples are horribly broken.  Even their demo &lt;a href=&quot;/blog/2021/08/28/axi-rules.html&quot;&gt;AXI Stream master is
broken&lt;/a&gt;.  It’s a shame
that they’ve neither fixed these designs, nor updated their training materials
to acknowledge that their basic designs are broken.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right; padding: 25px&quot;&gt;&lt;caption&gt;Fig. 1, Basic Roadmap for Learning AXI&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/learning-axi/roadmap.svg&quot; alt=&quot;&quot; width=&quot;280&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Others have suggested that the best place to start is by learning handshaking,
and most of the AXI stream protocol is just that: handshaking.  I would agree.
Therefore, I would recommend that anyone starting out begin by learning
&lt;a href=&quot;/blog/2021/08/28/axi-rules.html&quot;&gt;AXI’s handshaking rules&lt;/a&gt;.
As &lt;a href=&quot;/blog/2021/08/28/axi-rules.html&quot;&gt;that article&lt;/a&gt; will
explain, the AXI stream protocol is little more than simple handshaking, and
you can (mostly) ignore the TID, TSTRB, TKEEP, and TDEST signals.  This
is also where you’ll discover how Xilinx got their example AXI stream master
messed up, and where you’ll learn how easy it would be to fix it.&lt;/p&gt;

&lt;p&gt;Once you understand &lt;a href=&quot;/blog/2021/08/28/axi-rules.html&quot;&gt;AXI
handshaking&lt;/a&gt;, I’d then
recommend learning about
&lt;a href=&quot;/blog/2019/05/22/skidbuffer.html&quot;&gt;skidbuffers&lt;/a&gt;. Without
them, you’ll never get better than 50% throughput without violating the
AXI specification.&lt;/p&gt;

&lt;p&gt;The next place I’d go would be to  &lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;look into
AXI-lite&lt;/a&gt;. Beware of
backpressure! It has caused Xilinx (and others unnamed) no end of headaches,
and forms the backdrop for many of the bugs in their example designs. If you
want a working example design to start from, check out &lt;a href=&quot;/blog/2020/03/08/easyaxil.html&quot;&gt;this example
design&lt;/a&gt; that I
often use myself when working with AXI-lite.  You might also wish to look over
&lt;a href=&quot;/blog/2021/05/22/vhdlaxil.html&quot;&gt;this post, describing how to fix Xilinx’s (broken) AXI-lite VHDL
example&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For most use cases, you can stop there.  AXI-lite will get you just about
everywhere you need to go.  For most of the things you might need the
full AXI specification for, you can already find example open source or vendor
designs that’ll work.
(&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axidma.v&quot;&gt;DMA&lt;/a&gt;s,
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axidma.v&quot;&gt;MM2S&lt;/a&gt;,
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axidma.v&quot;&gt;S2MM&lt;/a&gt;,
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axidma.v&quot;&gt;virtual FIFO&lt;/a&gt;,
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axidma.v&quot;&gt;video frame buffer reading&lt;/a&gt;,
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axidma.v&quot;&gt;video frame buffer writing&lt;/a&gt;, etc.)&lt;/p&gt;

&lt;p&gt;If you are interested in moving past AXI-lite, then it’s time to understand &lt;a href=&quot;/blog/2019/04/27/axi-addr.html&quot;&gt;AXI
addressing&lt;/a&gt;,
and the various FIX, WRAP, and INCR addressing modes and how the AxSIZE field
impacts them.  This is important.  Xilinx &lt;a href=&quot;/formal/2019/05/13/axifull.html&quot;&gt;didn’t even try to get this right
in their example&lt;/a&gt;, and I’ve
seen plenty of ASIC designs that even get this addressing messed up.  You will
need to understand this before diving into building your first full AXI slave.
Indeed, I’ve used the &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axi_addr.v&quot;&gt;next AXI address
module&lt;/a&gt; built
and presented in that article in many of my own designs.&lt;/p&gt;

&lt;p&gt;Once you understand addressing, or at least once you’ve simplified it enough
that you can work with it, then the next step would be to build a &lt;a href=&quot;/formal/2019/05/13/axifull.html&quot;&gt;fully
capable AXI slave&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;What will you gain by writing an AXI slave over an AXI-Lite slave?  Not much.
Seriously.  There’s not a lot of performance gain to be had by building an
AXI (full) slave over that already gained by building an AXI-Lite slave–at
least, not much gain to be had for most uses.  What performance difference might
you see?  Well, following &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axi2axilite.v&quot;&gt;a good AXI to AXI-lite
bridge&lt;/a&gt;, you
might find yourself
loosing about 2 clocks of &lt;em&gt;latency&lt;/em&gt; per transaction.  That’s it.  Following a
poor AXI to AXI-lite bridge?  In that case, you might lose 4-8 clocks of
&lt;em&gt;throughput&lt;/em&gt; per transaction.  Of course, you could always switch back to a
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axi2axilite.v&quot;&gt;better bridge&lt;/a&gt;
to recover this lost throughput–so there’s really not a lot to
be gained by switching from an AXI-lite slave to an AXI (full) one.&lt;/p&gt;

&lt;p&gt;When it comes to AXI masters, however, that’s a different story.  Still, I
would similarly recommend you start with an &lt;a href=&quot;/blog/2020/03/23/wbm2axisp.html&quot;&gt;AXI-Lite
master&lt;/a&gt;. Technically, such
a master should be able to be just as fast as an AXI full master.  Practically
and sadly, many designs cripple their AXI-lite implementations. (Hello, Xilinx?)&lt;/p&gt;

&lt;p&gt;A full discussion of &lt;a href=&quot;/blog/2020/06/16/axiaddr-limits.html&quot;&gt;AXI masters gets
difficult&lt;/a&gt;.
It’s hard enough that I haven’t (yet) figured out how to simplify the material
enough to write a post on how to build a general purpose AXI master–the
addressing is just that hard to get right in general. (It usually takes me
a couple of days to get right–even when building my own.) However, you are
welcome to examine &lt;a href=&quot;/blog/2021/06/28/master-examples.html&quot;&gt;some of the AXI masters I’ve written and
posted&lt;/a&gt; if you’d like.&lt;/p&gt;

&lt;p&gt;Among those &lt;a href=&quot;/blog/2021/06/28/master-examples.html&quot;&gt;AXI master
examples&lt;/a&gt; are
two worth mentioning here since I’ve written articles about them.  The first
discusses how to build a &lt;a href=&quot;/zipcpu/2021/04/17/axilops.html&quot;&gt;memory controller for the ZipCPU using the AXI-Lite
protocol&lt;/a&gt;, whereas the
second discusses the &lt;a href=&quot;/zipcpu/2021/09/30/axiops.html&quot;&gt;modifications necessary to upgrade that memory controller
to AXI (full)&lt;/a&gt;.  This &lt;a href=&quot;/zipcpu/2021/09/30/axiops.html&quot;&gt;second
article&lt;/a&gt; goes over the
AXI Exclusive Access protocol (AxLOCK, and EXOKAY), and then how to go about
building a master that uses it–although I only really know of CPU use cases
for such a protocol.  It also discusses some of the challenging interactions
between AxADDR and AxSIZE.&lt;/p&gt;

&lt;p&gt;If you are really going to dive deeply into the AXI protocol, then it will
quickly become important to know &lt;a href=&quot;/blog/2021/08/14/axiperf.html&quot;&gt;how to measure AXI
performance&lt;/a&gt;.
Just what kind of performance are you achieving, what is possible, and what
can you expect are all good questions you’ll want to know how to answer.&lt;/p&gt;

&lt;p&gt;The above will get you most of the way. However, it will also leave you with
questions about what AxCACHE, AxPROT, and AxQOS are for, or when you should
use the AxID field.  Indeed, you may leave wondering about AxSIZE as well, and
why it’s an important part of the protocol.  For a discussion of these, let me
point you to a reddit question of my own from some time ago: &lt;a href=&quot;https://www.reddit.com/r/FPGA/comments/egkrce/is_axi_too_complicated/&quot;&gt;is AXI too
complicated&lt;/a&gt;?&lt;/p&gt;

&lt;h2 id=&quot;formally-verifying-axi&quot;&gt;Formally Verifying AXI&lt;/h2&gt;

&lt;p&gt;Not that long ago, I was asked about the possibility of writing a course on how
to formally verify AXI components.  At the time, I sketched out the following
outline for such a course–an outline that primarily matches most of the
progression above.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The course would start with a &lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;quick review of formal
methods&lt;/a&gt;: what
are assertions and assumptions, and what are some of the &lt;a href=&quot;/blog/2018/03/10/induction-exercise.html&quot;&gt;unique challenges
associated with
induction&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left; padding: 20px&quot;&gt;&lt;caption&gt;Fig. 2, Lessons that might compose a course in formally verifying AXI components&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/learning-axi/courseware.svg&quot; alt=&quot;&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Indeed, when you get to AXI full,
   &lt;a href=&quot;/blog/2018/03/10/induction-exercise.html&quot;&gt;induction&lt;/a&gt;
   becomes a necessity.  AXI is sufficiently complicated to limit a bounded
   model check to somewhere between 20-40 cycles.  As a result, no bounded model
   check will be sufficient to verify one or more 256-beat bursts.  A complete
   proof, therefore, &lt;em&gt;requires&lt;/em&gt;
   &lt;a href=&quot;/blog/2018/03/10/induction-exercise.html&quot;&gt;induction&lt;/a&gt;.
   It’s important here to understand how it works, and what challenges you
   might expect when working with it.&lt;/p&gt;

&lt;ol start=&quot;2&quot;&gt;
  &lt;li&gt;
    &lt;p&gt;As above, the next step would be to look into AXI Stream, and in
particular how to handle
&lt;a href=&quot;/blog/2021/08/28/axi-rules.html&quot;&gt;Handshaking&lt;/a&gt;
and &lt;a href=&quot;/blog/2019/05/22/skidbuffer.html&quot;&gt;skidbuffers&lt;/a&gt;.
Specifically, I’d go over the assertions necessary to describe an
&lt;a href=&quot;/blog/2021/08/28/axi-rules.html&quot;&gt;AXI handshake&lt;/a&gt;, and the
need for &lt;a href=&quot;/blog/2019/05/22/skidbuffer.html&quot;&gt;skidbuffers&lt;/a&gt;.
The lesson would end with a
&lt;a href=&quot;/blog/2019/05/22/skidbuffer.html&quot;&gt;skidbuffer&lt;/a&gt;
exercise of some type–perhaps simply requiring a student to build their own.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The next step would be
&lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;AXI-Lite&lt;/a&gt;.  The big
difference between
&lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;AXI-Lite&lt;/a&gt; and the
bare &lt;a href=&quot;/blog/2021/08/28/axi-rules.html&quot;&gt;handshaking&lt;/a&gt;
discussion is that you need to count outstanding read and write requests when
using &lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;AXI-Lite&lt;/a&gt;.  Every
read request requires one (and only one) response.  Write requests
are similar and also require a single response, however a write request is
not complete until there’s been a request on both write address and write
data channels.  In general, though, the only thing we’re adding above and
beyond the basic
&lt;a href=&quot;/blog/2021/08/28/axi-rules.html&quot;&gt;handshaking&lt;/a&gt;
are some simple counters as well as some assertions tied to those counters.&lt;/p&gt;

    &lt;p&gt;An exercise for this portion of the course might involve verifying a given
&lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;AXI-Lite&lt;/a&gt; module.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;While AXI-lite is a great protocol for register handling, it’s also
important to know your design handles registers properly.  Therefore, I’d
dedicate a lesson to discussing &lt;a href=&quot;/blog/2020/12/19/axil-register-checking.html&quot;&gt;how to verify that registers are read or
written correctly&lt;/a&gt;.&lt;/p&gt;

    &lt;p&gt;A good exercise here would be to modify the exercise from the AXI-lite
lesson, so that it verifies the register within.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;We can now discuss &lt;a href=&quot;/blog/2019/04/27/axi-addr.html&quot;&gt;AXI
  addressing&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;It would then be time to dive into AXI full.  This topic is so large,
however, that it really needs to be broken up.  Therefore, I’d start with
how to verify handling a single read burst.  The basics of single read
burst counting are pretty simple: you need to count the number of bursts
that are outstanding, and the number of remaining outstanding items in
each burst.&lt;/p&gt;

    &lt;p&gt;This might be where I’d introduce the exercise of verifying an &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/demofull.v&quot;&gt;AXI full
slave&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;This is also where the easy part ends.  How, for example, shall you verify
that the number of beats returned for a given burst read request is correct?
That’s a touch harder–especially when you need to start tracking multiple
outstanding bursts.&lt;/p&gt;

    &lt;p&gt;From there, I’d move on to discuss how to verify out-of-order returns, and
how to handle verifying packet ID’s.&lt;/p&gt;

    &lt;p&gt;This leads to the task of verifying an AXI full slave that requires multiple
beats to process requests given to it.  A simple example might be an AXI
SRAM controller, where the SRAM requires one (or more) clocks from
request to response and where the read command can only be issued once.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Write handling is more challenging than read handling.  Specifically, AXI
write requests split the write address and data into two channels, and
formally verifying both channels can require a bit of synchronization within
the formal properties.  Once the channels are synchronized, however,
verification returns to being as easy as counting bursts and beats again.&lt;/p&gt;

    &lt;p&gt;Yes, there are a couple new requirements, although once the channels are
synchronized these are minimal.  Primarily, the extra requirements deal
with those packets for which AWSIZE is less than a full word, or for which
the initial AWADDR isn’t word aligned.  In these cases, there’s the
additional requirement that write beats only contain strobes for the
correct bytes.  For example, if AWADDR is odd, then the WSTRB[0] of the
first beat must be zero.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Exclusive Access.  Exclusive access is AXI’s method of handling atomic
requests.  These really aren’t all that hard to understand or model.
Indeed, they are easier to deal with than read or write bursts.  Still,
I would place exclusive access handling late in the course, not because
of how easy or difficult it is, but more because of how few things actually
need it.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right; padding: 25px&quot;&gt;&lt;caption&gt;Fig. 3, It can be a real challenge to verify a design containing a FIFO&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/learning-axi/fifo-challenge.svg&quot; alt=&quot;&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;ol start=&quot;10&quot;&gt;
  &lt;li&gt;That brings us to the FIFO Challenge.  FIFOs are fairly easy to verify on
   their own.  Sadly, they become much harder to verify when they are used
   within something.  AXI, however, is very much built around the concept
   of FIFOs.  How to verify something that has a FIFO within it is something
   we’d need to discuss here.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Once you get past the FIFO challenge, it then becomes possible to build AXI
   components that can handle any number of multiple bursts at a time.  When
   would you need something like this?  When building an AXI
   &lt;a href=&quot;/blog/2019/07/17/crossbar.html&quot;&gt;interconnect&lt;/a&gt; or
   a &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axidma.v&quot;&gt;DMA&lt;/a&gt;
   of some type.  Both would make good examples of components that might
   need this technology.&lt;/p&gt;

&lt;p&gt;At least, these are my current thoughts on what lessons I might teach were I
to create a course in formally verifying AXI components.  Given that every
piece of commercial IP I’ve ever built has required some form of AXI interface,
I wouldn’t be surprised to find such a course to be an in-demand topic.
I would just need to find a way to clear enough time out of my schedule to
create it.&lt;/p&gt;

&lt;h2 id=&quot;axi-design-exercises&quot;&gt;AXI Design Exercises&lt;/h2&gt;

&lt;p&gt;When learning any new topic, its important to exercise your new knowledge
as you learn it.  Here’s a list, therefore, containing a progression of
exercises with increasing difficulty that you might find valuable when
learning AXI.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left; padding: 25px&quot;&gt;&lt;caption&gt;Fig. 4, Practice exercises, for use in learning AXI&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/learning-axi/exercises.svg&quot; alt=&quot;&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Build and verify an AXI Stream component.  A good example of this might
be either a DSP component or perhaps a FIFO of some type.  Perhaps the
simplest example I might come up with would be a frequency shifter based
upon an internal &lt;a href=&quot;/dsp/2017/08/30/cordic.html&quot;&gt;CORDIC&lt;/a&gt;.&lt;/p&gt;

    &lt;p&gt;Other examples include stream processing network packets–such as a
stream component that might recognize, encrypt or decrypt a UDP packet.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Build and verify an AXI-lite bus slave&lt;/p&gt;

    &lt;p&gt;This project is actually pretty easy.  I’d have you start with the
&lt;a href=&quot;/blog/2020/03/08/easyaxil.html&quot;&gt;EasyAXIL design&lt;/a&gt;, and
then modify it for some purpose.  Perhaps that might be to create a
GPIO or UART controller from it, or to turn it into a basic timer
peripheral of some type.  Any of these exercises would be fairly simple,
since the &lt;a href=&quot;/blog/2020/03/08/easyaxil.html&quot;&gt;EasyAXIL
design&lt;/a&gt; is just
that easy to work with and from.  Even better, it comes with all the details
you need to formally verify how well it handles bus transactions.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The simplest bus master to build is a basic, scripted, one request at a time
bus master using AXI-lite.  &lt;a href=&quot;/blog/2021/12/30/dbgaxil.html&quot;&gt;This
article&lt;/a&gt; presents both
such a bus master, and a usage description of why you might wish to build
one.  The master is easy enough to verify, and so might make a good practice
start at building your first AXI-lite bus master.&lt;/p&gt;

    &lt;p&gt;Indeed, a scripted AXI-lite bus master is not really all that much more
complex than a basic &lt;a href=&quot;/zipcpu/2021/04/17/axilops.html&quot;&gt;AXI-Lite CPU memory
unit&lt;/a&gt;, so
building such a memory unit might also fit nicely here.  From an exercise
standpoint, however, the &lt;a href=&quot;/zipcpu/2021/04/17/axilops.html&quot;&gt;CPU memory
unit&lt;/a&gt; has to deal with
two protocols, both that of the CPU and that of AXI-lite, meaning that the
&lt;a href=&quot;/zipcpu/2021/04/17/axilops.html&quot;&gt;CPU memory unit&lt;/a&gt; might be
more complex than this exercise would require.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;A more complicated AXI-lite bus master, and certainly one with more interest,
might be to &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/zipcore/rtl/core/axilfetch.html&quot;&gt;add a small FIFO to a CPU instruction fetch
unit&lt;/a&gt;.&lt;/p&gt;

    &lt;p&gt;This exercise is only slightly more complex than the scripted memory
controller of the last exercise.  Specifically, what should the fetch unit
do when, mid fetch, the CPU tells it that it no longer wants the values
currently being fetched but instead wants to start over from a new address?&lt;/p&gt;

    &lt;p&gt;Before leaving this example, let me quickly outline the number of uses I’ve
found for such a FIFO based AXI-lite bus controller.  The most basic use
is in scripting a scatter-gather DMA.  I’ve also found it useful for
scripting I2C or SPI transactions from a script in memory somewhere.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;That would roughly exhaust the exercises needed to learn how to work with
both &lt;a href=&quot;/blog/2021/08/28/axi-rules.html&quot;&gt;AXI handshaking&lt;/a&gt; and
&lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;AXI-lite&lt;/a&gt;.  From here, it
would be time to move on to the full AXI bus protocol.&lt;/p&gt;

&lt;ol start=&quot;5&quot;&gt;
  &lt;li&gt;
    &lt;p&gt;The first (and simplest) exercise would be to build (and verify) an AXI
(full) slave.  A specific performance goal would be that this slave should
be able to handle a throughput of one beat per clock–even when crossing
the boundaries between multiple burst requests.&lt;/p&gt;

    &lt;p&gt;A classic design example which might work well here would be a single
port SRAM controller.  Such a controller would require an internal
arbiter to select which of the read or write channel would be allowed
access to the SRAM.&lt;/p&gt;

    &lt;p&gt;A bonus exercise might be to make that slave able to handle exclusive
access requests, but this would need to be bonus.  Not all AXI slaves
need or want exclusive access.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;A good exercise for building an AXI master might be to build an AXI based
cache of some type.  At this point, however, there’s no real way around
the two protocols required: you’d need to support both a cache-to-CPU
protocol as well as the AXI protocol.&lt;/p&gt;

    &lt;p&gt;The cache would be the first type of component requiring burst access.
It can be kept simple enough as to only require a single burst at a time.
Bonus points would include using WRAP addressing, or exclusive access
(data cache only).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;When you want good bus performance, however, you need to be able to build 
a &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axidma.v&quot;&gt;DMA&lt;/a&gt;.
The skills involved in building (and verifying) a &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axidma.v&quot;&gt;memory to memory
DMA controller&lt;/a&gt;
should be the last AXI skills you will need to learn.&lt;/p&gt;

    &lt;p&gt;The key new feature learned when building a &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axidma.v&quot;&gt;DMA
controller&lt;/a&gt;,
not present in any of the prior AXI components, is the simple reality that
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axidma.v&quot;&gt;a DMA&lt;/a&gt;
needs to be able to blast as much information across the bus as possible in
as few beats as possible.  This means you’d need to be able to verify that
your design can issue and track multiple outstanding burst requests at any
given time.&lt;/p&gt;

    &lt;p&gt;To simplify this project to something that might still be accomplished
within a class, I might suggest limiting this DMA to aligned words only.
Obviously, &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axidma.v&quot;&gt;a DMA which can handle both unaligned addresses and unaligned
lengths&lt;/a&gt; is
more useful, but the challenge involved in verfiying
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axidma.v&quot;&gt;such a DMA&lt;/a&gt;
might be too much for an introductory course in AXI design.&lt;/p&gt;

    &lt;p&gt;The neat part of this exercise however, is that once you can build a
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axidma.v&quot;&gt;basic AXI DMA&lt;/a&gt;,
you can then build all kinds of specialized data movers, such as:
stream or packet to memory DMA’s, or the reverse memory to packet or stream
DMA, video DMAs, virtual FIFOs, and more.  None of these items are really
all that much more complex than the
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axidma.v&quot;&gt;basic AXI DMA&lt;/a&gt;
is in the first place.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;While these example design exercises start simple, they do end up quite
complex–as they should.  This isn’t quite as complex as AXI gets, however.
More complicated AXI designs might include bus upsizers, downsizers, or even
&lt;a href=&quot;/blog/2019/07/17/crossbar.html&quot;&gt;crossbars&lt;/a&gt;.  While such
components are more complex, they aren’t really required for &lt;em&gt;learning&lt;/em&gt; AXI.
If you can handle the prior exercises, then you should then know enough to
build any of these more complex components.&lt;/p&gt;

&lt;p&gt;The big problem I have with these exercises, however, is that they get fairly
challenging by the end.  I’m not sure how I would go about fitting the
verification of a DMA into an AXI formal verification course of only a couple
days–especially since it took me a couple of weeks to verify &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axidma.v&quot;&gt;my own
DMA&lt;/a&gt;.
So … I’ll continue to keep my eyes open for better (simpler) examples to
work with and from.  Until then, this is still a really good list of exercises
for any student to work with in order to learn the basic AXI concepts on his or
her own.&lt;/p&gt;

&lt;h2 id=&quot;conclusions&quot;&gt;Conclusions&lt;/h2&gt;

&lt;p&gt;I’m not sure I’ve seen a lot of good AXI training material on-line.  Most
of what I’ve seen, so far, has been Xilinx’s materials–and those materials
would have you start with and modify a
&lt;a href=&quot;/formal/2019/05/13/axifull.html&quot;&gt;broken design&lt;/a&gt;.
Further, there aren’t a lot of materials discussing how to &lt;em&gt;formally&lt;/em&gt; verify
AXI designs, and it’s that formal part that was required in order to find some
really fundamental
bugs in Xilinx’s AXI designs.&lt;/p&gt;

&lt;p&gt;In the meantime, I offer the roadmap above for learning AXI.  Not everyone
will need all of the lessons or exercises above.  However, the lessons and
exercises outlined above should be thorough enough for anyone to fully learn
the topic.&lt;/p&gt;

&lt;p&gt;Finally, if a course in formally verifying AXI bus components is something you
would be interested in, then let me invite you to correspond with me and
express your interest.  Let me also invite anyone interested to suggest how
either the exercises might be simplified, or how the course might be
structured so as to make sure everyone has the time and ability to accomplish
each of the exercises.  Without such exercises, I fear that lecture alone would
leave students just as confused as they are or were when they entered
the course.&lt;/p&gt;
&lt;hr /&gt;&lt;p&gt;&lt;em&gt;If thou hast run with the footmen, and they have wearied thee, then how canst thou contend with horses? and if in the land of peace, wherein thou trustedst, they wearied thee, then how wilt thou do in the swelling of Jordan? (Jer 12:5)&lt;/em&gt;</description>
        <pubDate>Sat, 07 May 2022 00:00:00 -0400</pubDate>
        <link>https://zipcpu.com/blog/2022/05/07/learning-axi.html</link>
        <guid isPermaLink="true">https://zipcpu.com/blog/2022/05/07/learning-axi.html</guid>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>Bringing up a new piece of hardware -- what can go wrong?</title>
        <description>&lt;p&gt;For those who wonder what a “day in the life of” a digital design engineer
might be like, let me offer the following account of “bringup week.”
This is the week the team assembled, with all of their various parts and
pieces, to put a hardware design together for the first time.&lt;/p&gt;

&lt;p&gt;I’m getting ahead of myself, though, so let me back up a bit.&lt;/p&gt;

&lt;p&gt;As background, I’ve had the wonderful fortune and opportunity to help build a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Sonar&quot;&gt;SONAR&lt;/a&gt;
system.  Since I’m just a one-man shop, I’m only working on a portion of this
system.  My portion is simply the FPGA portion with some demonstration software
thrown in for good effect.  Others had developed and assembled the circuit
boards, someone else had developed the actual
&lt;a href=&quot;https://en.wikipedia.org/wiki/Sonar&quot;&gt;SONAR&lt;/a&gt; circuitry, and another team had
designed and built the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Transducer&quot;&gt;transducers&lt;/a&gt;
which would go in the water and couple the physical pressure waves with
electrical signals.  The digital board used to control this initial bringup
effort was &lt;a href=&quot;https://digilent.com/shop/nexys-video-artix-7-fpga-trainer-board-for-multimedia-applications/&quot;&gt;Digilent’s Nexys Video
board&lt;/a&gt;–a
very capable board for many reasons.&lt;/p&gt;

&lt;p&gt;My job in this design was primarily two-fold: 1) command the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Sonar&quot;&gt;SONAR&lt;/a&gt; transmitter, and 2) capture
and save &lt;a href=&quot;https://en.wikipedia.org/wiki/Sonar&quot;&gt;SONAR&lt;/a&gt;
samples from the receiver.  That was, and still is, the primary task.&lt;/p&gt;

&lt;p&gt;As with any hardware project, there are several steps towards a working piece
of hardware.  The first couple of steps take place on paper.  Then there’s
an initial prototype design, where the parts and pieces get assembled together
in order to test the concepts first placed on paper.  Just before this
step, I had picked up a &lt;a href=&quot;https://digilent.com/shop/nexys-video-artix-7-fpga-trainer-board-for-multimedia-applications/&quot;&gt;Nexys Video
board&lt;/a&gt;
to test partial designs on.  This is where I’ll pick up the story today–with
the testing of this prototype design.  Later, we’ll actually turn the component
designs that formed this prototype into design components for a fully
functioning &lt;a href=&quot;https://en.wikipedia.org/wiki/Sonar&quot;&gt;SONAR&lt;/a&gt; system, with all of
the ultimate functionality we are going to give it.  But for now, we’re just
testing our concepts with a basic prototype board.&lt;/p&gt;

&lt;p&gt;Thankfully, most of the critical digital work was already done.  I’d been
working on the transmitter for over a year, and I was confident it would work.
How could it not?  I mean, the transmitter design logic was really simple.  All
I needed to do was to generate various tones,
&lt;a href=&quot;https://en.wikipedia.org/wiki/Chirp&quot;&gt;chirps&lt;/a&gt;,
&lt;a href=&quot;https://en.wikipedia.org/wiki/Phase-shift_keying#Binary_phase-shift_keying_(BPSK)&quot;&gt;BPSK&lt;/a&gt;
and/or &lt;a href=&quot;https://en.wikipedia.org/wiki/Frequency-shift_keying&quot;&gt;BFSK&lt;/a&gt;
waveforms.  It was all very basic stuff.  I say I was working on it for a year,
but the original design was done in a day or two and I’ve only been tweaking
it since then.  As for the receiver, I was just planning on porting a receiver
design from another project where it had already demonstrated the ability to
work quite well.&lt;/p&gt;

&lt;p&gt;Sounds pretty low key, right?  I mean, all the stuff this project required was
either really simple or had already worked before on another project.  No
problem!&lt;/p&gt;

&lt;p&gt;Unfortunately, there were a couple big secondary tasks that didn’t come from
other projects–not all of them explicitly written down.  Worse, some of these
were added into the requirements at a late stage of the game.  Let’s go over
a quick list of what new digital pieces were part of this design:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Gigabit Ethernet&lt;/li&gt;
&lt;/ol&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig. 1, This system is going to get wet&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/netbus/sysdesign.svg&quot; alt=&quot;&quot; width=&quot;420&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Here’s the reality: we’re building a
   &lt;a href=&quot;https://en.wikipedia.org/wiki/Sonar&quot;&gt;SONAR&lt;/a&gt; device.  It’s going
   to get wet.  That’s just the nature of this business.  To make sure things
   can work in water, our plan is to seal all of the electronics into an
   air-tight can.  Sealing that can will require a special technician, so
   … once sealed it’s not likely that I’ll see my FPGA board
   again.  At that point, I’ll have only one interface available to my
   FPGA–and indeed to the entire device: a Gigabit Ethernet (GbE).&lt;/p&gt;

&lt;p&gt;That’s it.&lt;/p&gt;

&lt;p&gt;Think about this for a moment.  There will be no JTAG port access to plug
   Vivado in to.  There will be no serial port for debugging.  There will only
   be GbE.&lt;/p&gt;

&lt;p&gt;That means that any design problems, updates, or upgrades, must all be
   handled via GbE.  Might you need an &lt;a href=&quot;/blog/2017/06/08/simple-scope.html&quot;&gt;internal logic
   analyzer&lt;/a&gt;?  You’ll need
   to configure it, read from it, and process it over GbE.  Want to update the
   design?  You’ll need to write a new design to flash and then command the
   FPGA to reconfigure itself all over GbE.&lt;/p&gt;

&lt;p&gt;This sort of thing is often and typically handled via a
   &lt;a href=&quot;/about/zipcpu.html&quot;&gt;CPU&lt;/a&gt;.  What happens,
   however, when you need to update that CPU’s software?  Similarly, what
   happens when the CPU software fails and needs to be debugged?  All of that
   will need to be handled over the network.&lt;/p&gt;

&lt;p&gt;For these reasons, I chose to handle several networking protocols in
   digital logic apart from the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;CPU&lt;/a&gt;–so
   I could have some confidence that they would continue to work even while
   the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;CPU&lt;/a&gt; was halted or being debugged.
   These protocols included the &lt;a href=&quot;https://en.wikipedia.org/wiki/Address_Resolution_Protocol&quot;&gt;Address Resolution Protocol
   (ARP)&lt;/a&gt; and the
   &lt;a href=&quot;https://en.wikipedia.org/wiki/Internet_Control_Message_Protocol&quot;&gt;Internet Control Message Protocol (ICMP, or
   “ping”)&lt;/a&gt;,
   as well as the data packet protocol sending out the
   &lt;a href=&quot;https://en.wikipedia.org/wiki/Sonar&quot;&gt;SONAR&lt;/a&gt; data and a debug protocol I
   built specifically for the purpose of being able to read and write
   addresses in the design across GbE without needing
   the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;CPU&lt;/a&gt;.  That way, the network can
   be used to &lt;a href=&quot;/zipcpu/2017/07/14/cpu-debugging-needs.html&quot;&gt;halt the CPU, read its registers, update its software, and
   more&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The good news is that I’d done projects with GbE before.  The bad news is
   that this project will likely push the GbE to over 50% capacity.  My
   previous approach to GbE was crippingly slow, and could never handle such
   rates.  As a result, I rewrote much of it to handle AXI stream inputs and
   outputs so the hardware could do most of the network work automatically.&lt;/p&gt;

&lt;p&gt;Hence, while the &lt;a href=&quot;https://en.wikipedia.org/wiki/Sonar&quot;&gt;SONAR&lt;/a&gt; transmit
   and receive logic might be reused, the network logic contained a massive
   rewrite and a lot of new logic.  The one good news to this new portion of the
   requirement is that we were only bringing up a prototype.  The prototype
   wasn’t going to be sealed in a bottle, and so I &lt;a href=&quot;/blog/2017/06/05/wb-bridge-overview.html&quot;&gt;still had the serial port
   and more available to
   me&lt;/a&gt;–with the
   understanding that future versions would remove this and any other excess
   interfaces.&lt;/p&gt;

&lt;ol start=&quot;2&quot;&gt;
  &lt;li&gt;
    &lt;p&gt;Time Synchronization&lt;/p&gt;

    &lt;p&gt;Eventually, we’ll need to coordinate multiple of these
&lt;a href=&quot;https://en.wikipedia.org/wiki/Sonar&quot;&gt;SONAR&lt;/a&gt; devices together.  That means
they’ll all need to send their transmit pulses at the same time, and they’ll
all need to sample the return waveforms at the same time.&lt;/p&gt;

    &lt;p&gt;Oh, and did I mention that any synchronization would need to take place over
GbE?&lt;/p&gt;

    &lt;p&gt;As a bonus, I’m trying to figure out how I might synchronize these devices
to GPS, but … I’m not there yet.  Of course, there’s no GPS in the water,
so the synchronization would have to come from above.  The big difference
would be that GPS allows you to do absolute time synchronization, vs the
simpler relative time synchronization task of running multiple co-located
devices.&lt;/p&gt;

    &lt;p&gt;Oh, and just to add into the mix: there’s no room in the one control cable
containing the GbE connection to add specialized timing signals or even
a common clock.  It’s all GbE.&lt;/p&gt;

    &lt;p&gt;This logic is also new.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Audio&lt;/p&gt;

    &lt;p&gt;Somewhere along here, I must’ve decided that my task was too easy, and
so I pointed out to other members of the team that the FPGA development
board we were using for the prototype bringup had audio ports on it and
asked if we could use them.&lt;/p&gt;

    &lt;p&gt;Well, okay, the story is a bit longer.  The challenge with any test is that
you need test equipment.  How shall we know, for example, how much power
the device is putting in the water if we can’t measure it?  Measuring
something like that requires a calibrated measurement device and I
volunteered the FPGA as a way of reading from this calibrated device.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left; padding: 20px&quot;&gt;&lt;caption&gt;Fig. 2, Knowing how much power is in the water requires an independent, calibrated measurement&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/proto-bringup/microphone.svg&quot; alt=&quot;&quot; width=&quot;420&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;I mean, why not use the I2S controller I’d built years earlier (and never
   tested) to listen to this calibrated device?  The controller was already
   on board, it just needed to be read.  Even better, if the FPGA read from
   the calibrated device, then we could have common time stamps between our
   transmitter and the calibrated receiver.&lt;/p&gt;

&lt;p&gt;The other half of this measurement is the question of, how can you tell how
   good your receiver is?  This requires having a known source that can
   transmit a known waveform, which can then be heard using the
   &lt;a href=&quot;https://en.wikipedia.org/wiki/Sonar&quot;&gt;SONAR&lt;/a&gt; device under test.
   Basically, you need to be able to broadcast a waveform at a known volume
   and then receive at the same time.  You can then take that received waveform,
   correlate it with the transmitted waveform, and get a measure of how much
   power you were able to receive.  If you know how much power was actually
   in the water, you should then be able to estimate how much of that power
   you were able to successfully capture.&lt;/p&gt;

&lt;p&gt;While we’re at it, why not just grab “sounds” from locations within the
   device to allow your “ear” to do some debugging?&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig. 3, Audio Feedback Sources&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/proto-bringup/audio-out.svg&quot; alt=&quot;&quot; width=&quot;420&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;This is all well and good.  My problem was that none of this was part of my
   original assignment.&lt;/p&gt;

&lt;p&gt;An ugly corollary to the above problem statement is that I set up the audio
   device for 96k samples per second.  The
   &lt;a href=&quot;https://en.wikipedia.org/wiki/Sonar&quot;&gt;SONAR&lt;/a&gt;,
   however, was sampling at a much higher frequency.  How than shall I take the
   &lt;a href=&quot;https://en.wikipedia.org/wiki/Sonar&quot;&gt;SONAR&lt;/a&gt;,
   sampling rate and downsample it to the audio rate?  Several of these
   audio sources needed resamplers, as shown in Fig. 3 above.  Those also
   needed to be designed and tested.&lt;/p&gt;

&lt;ol start=&quot;4&quot;&gt;
  &lt;li&gt;
    &lt;p&gt;Video&lt;/p&gt;

    &lt;p&gt;One of the hassles of our setup was that viewing the data was a challenge.
By design, the prototype &lt;a href=&quot;https://en.wikipedia.org/wiki/Sonar&quot;&gt;SONAR&lt;/a&gt;
device would digitize sound waves from the
water, assemble them into packets, and then blast those packets over the
network.  I then needed to write software to capture these packets and to
write them to a file.  The plan was then to read this file into
&lt;a href=&quot;https://www.gnu.org/software/octave&quot;&gt;Octave&lt;/a&gt; for analysis.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left; padding: 20px&quot;&gt;&lt;caption&gt;Fig. 4, A Simulated Falling Raster&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/proto-bringup/gfx-raster.png&quot; alt=&quot;&quot; width=&quot;401&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;The problem with this setup is that you don’t get any immediate feedback
   regarding what’s in the water.  It takes time to capture packets, more time
   to read them into &lt;a href=&quot;https://www.gnu.org/software/octave&quot;&gt;Octave&lt;/a&gt;, and even
   more time to then display these packets.  Was there something that could
   be done in real time?&lt;/p&gt;

&lt;p&gt;Well, yes.  The &lt;a href=&quot;https://digilent.com/shop/nexys-video-artix-7-fpga-trainer-board-for-multimedia-applications/&quot;&gt;Nexys Video development board&lt;/a&gt;
   we were using for this prototype also has an HDMI video output port.  Why
   not use that to generate some canned displays?  As it turns out, simple
   &lt;a href=&quot;https://github.com/ZipCPU/vgasim/blob/dev/rtl/gfx/vid_histogram.v&quot;&gt;histograms&lt;/a&gt;,
   &lt;a href=&quot;https://github.com/ZipCPU/vgasim/blob/dev/rtl/gfx/vid_histogram.v&quot;&gt;plots&lt;/a&gt;,
   and even &lt;a href=&quot;https://github.com/ZipCPU/vgasim/blob/dev/rtl/gfx/vid_waterfall.v&quot;&gt;falling
   rasters&lt;/a&gt;
   aren’t all that hard to build.  Why not add these to the mix?&lt;/p&gt;

&lt;p&gt;Fig. 4, for example, shows a falling raster.  Recent time is at the top,
   and it scrolls down from above.  Frequency goes from left to right, and the
   energy at any particular frequency is shown coming out of the page.  (I.e.
   black has no energy, white has the most.)&lt;/p&gt;

&lt;p&gt;In this case, the signal shown is a test signal for which I manually
   varied the frequency during a
   &lt;a href=&quot;/blog/2018/08/22/what-is-simulation.html&quot;&gt;simulated&lt;/a&gt;
   test-run.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig. 5, A simulated split window, containing a spectrogram and a falling raster&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/proto-bringup/gfx-split-trace.png&quot; alt=&quot;&quot; width=&quot;401&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Fig. 5 is very similar, save that we’ve now split the screen in half using
   a &lt;a href=&quot;https://github.com/ZipCPU/vgasim/blob/dev/rtl/gfx/vid_empty.v&quot;&gt;blank video
   generator&lt;/a&gt;,
   plus two &lt;a href=&quot;https://github.com/ZipCPU/vgasim/blob/dev/rtl/axisvoverlay.v&quot;&gt;AXI video stream
   overlays&lt;/a&gt;
   in order to generate a split video.  The top half shows a
   &lt;a href=&quot;https://github.com/ZipCPU/vgasim/blob/dev/rtl/gfx/vid_trace.v&quot;&gt;trace&lt;/a&gt; of
   the &lt;a href=&quot;/dsp/2018/10/02/fft.html&quot;&gt;Fourier transform&lt;/a&gt;
   of the input signal, whereas the bottom half shows a &lt;a href=&quot;https://github.com/ZipCPU/vgasim/blob/dev/rtl/gfx/vid_waterfall.v&quot;&gt;falling
   raster&lt;/a&gt;
   again.  Where the two meet, you can see the current
   &lt;a href=&quot;/dsp/2018/10/02/fft.html&quot;&gt;Fourier transform&lt;/a&gt;
   and a horizontal line showing that
   &lt;a href=&quot;https://en.wikipedia.org/wiki/Spectrogram&quot;&gt;spectrogram&lt;/a&gt;
   coming out of the screen.&lt;/p&gt;

&lt;p&gt;So far, all this capability sounds wonderful!&lt;/p&gt;

&lt;p&gt;That is, until it has to be made to work.&lt;/p&gt;

&lt;p&gt;Remember, the most expensive part of digital logic (FPGA) design is not
the design itself, but rather the verification of that design.  Not only that,
I had now permitted some major scope creep into the project.  Neither audio
nor video were ever &lt;em&gt;required&lt;/em&gt; portions of the project.  While I had done HDMI
video before, I hadn’t done I2S audio nor had I ever configured the I2S chip
I had using I2C before.  (Remember &lt;a href=&quot;/blog/2021/11/15/ultimate-i2c.html&quot;&gt;my proposal for an ultimate I2C
controller&lt;/a&gt;?
This would be the first test of &lt;a href=&quot;https://github.com/ZipCPU/wbi2c/blob/master/rtl/wbi2ccpu.v&quot;&gt;that
controller&lt;/a&gt;.)&lt;/p&gt;

&lt;p&gt;All this meant that there needed to be just that much more testing prior to
bringup.&lt;/p&gt;

&lt;h2 id=&quot;programmatics&quot;&gt;Programmatics&lt;/h2&gt;

&lt;p&gt;Just to add to the stress of the entire project, let me point out a very
simple reality:  It takes time to coordinate team activities.  Put another
way, if you want a design to work across the boundaries of multiple engineering
teams, then you really need to get the engineers responsible for each portion
of the design together into the same room and lock them in there until it works.
That means there needs to be a time and date on a schedule for the meeting.
Travel arrangements need to be made.  This all needs to be done in advance,
and .. it takes a lot of work to rearrange things if need be.  No one wants
to be the one individual responsible for telling the rest of the team that
they have some problem or other and every one else will need to reschedule.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left; padding: 20px&quot;&gt;&lt;caption&gt;Fig. 6, Test Readiness Review&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/proto-bringup/trr.svg&quot; alt=&quot;&quot; width=&quot;420&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;On a larger project, we might have coordinated a “Test Readiness Review”, so
that everyone would be on the record stating that their portion of the project
was sufficiently working that the project was now ready for test.  In our
case, the analog engineer didn’t feel like he could debug his side of the board
until he had access to a working digital design–forcing us to come together
perhaps earlier than we might have otherwise.&lt;/p&gt;

&lt;p&gt;Either way, once we put this bringup week on the calendar, it was then
going to happen whether I was ready for it or not.&lt;/p&gt;

&lt;p&gt;In my case, I felt like I was ready: I could
&lt;a href=&quot;/blog/2018/08/22/what-is-simulation.html&quot;&gt;simulate&lt;/a&gt;
the device and see the critical portions of the design working nicely through
all of the
&lt;a href=&quot;/blog/2018/08/22/what-is-simulation.html&quot;&gt;simulated&lt;/a&gt;
digital hoops I had laid out for it.&lt;/p&gt;

&lt;p&gt;Still, there was always the worst case scenario: What if my
&lt;a href=&quot;/blog/2018/08/22/what-is-simulation.html&quot;&gt;simulations&lt;/a&gt;
were insufficient, or some hardware piece didn’t work like I had expected?  What
if I arrived at the test site and my stuff didn’t work?  The last thing I
wanted was to sit in a room full of engineers with everyone staring at me
and asking me why my portion of the design, the digital logic, wasn’t working.&lt;/p&gt;

&lt;h2 id=&quot;preparation&quot;&gt;Preparation&lt;/h2&gt;

&lt;p&gt;Let’s just remember, though, I figured this task would be relatively simple: I
already had the transmitter and receiver built, and the receiver had been used
in another project.  So … I allocated myself about two weeks to do my final
preparations.&lt;/p&gt;

&lt;p&gt;I suppose it’s not quite so bad as that.  That’s just what it felt like towards
the end.  Looking over my git logs, I had the major portions of the design built
and verified two months before bringup.  They all built.  They were all lint
clean via &lt;a href=&quot;/blog/2017/06/21/looking-at-verilator.html&quot;&gt;Verilator&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;My big problem, however, is that I didn’t have a large
&lt;a href=&quot;/blog/2018/08/22/what-is-simulation.html&quot;&gt;simulation&lt;/a&gt;
infrastructure.  I had a long list of things that should’ve been tested in
&lt;a href=&quot;/blog/2018/08/22/what-is-simulation.html&quot;&gt;simulation&lt;/a&gt;,
but for which I didn’t really have a good model for.  For example, &lt;a href=&quot;https://github.com/ZipCPU/wbi2c/bench/cpp/i2csim.cpp&quot;&gt;my I2C
model&lt;/a&gt; didn’t match
that of the Audio chip I was going to control.  Neither did I have a network
&lt;a href=&quot;/blog/2018/08/22/what-is-simulation.html&quot;&gt;simulation&lt;/a&gt;
model (at first).  I certainly didn’t have a model for the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Sonar&quot;&gt;SONAR&lt;/a&gt; transmitter, and no method other
than formal methods to verify it.&lt;/p&gt;

&lt;p&gt;Still, I was confident things would work–perhaps naively so.&lt;/p&gt;

&lt;p&gt;However, when I started building my design with Vivado I was quickly reminded
of some of the limitations of
&lt;a href=&quot;/blog/2017/06/21/looking-at-verilator.html&quot;&gt;Verilator&lt;/a&gt;’s
lint capabilities.  Sure, they’ve gotten &lt;em&gt;a lot better&lt;/em&gt; since &lt;a href=&quot;/blog/2017/07/17/debugging-dbgbus.html&quot;&gt;I last grumped
about them&lt;/a&gt;, but
Vivado still catches more wires that should be registers and registers that
should be wires than
&lt;a href=&quot;/blog/2017/06/21/looking-at-verilator.html&quot;&gt;Verilator&lt;/a&gt;
does.  (I know,
&lt;a href=&quot;/blog/2017/06/21/looking-at-verilator.html&quot;&gt;Verilator&lt;/a&gt; is
an &lt;em&gt;open source&lt;/em&gt; project–I should submit a patch to fix these issues.
I’ll just be honest and say that I haven’t done so–yet.)&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig. 7, Clocks in the design&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/proto-bringup/clocks.svg&quot; alt=&quot;&quot; width=&quot;240&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Then there was timing.  Sadly, this design has way too many clocks in it.
The SPI based A/D runs off of a 200MHz clock.  The network runs off of two
separate 125MHz clocks–one for transmit and one for receive.  I would combine
these two clocks, but there’s always the possibility that the network might not
come up in GbE mode.  In that case, the receive clock will run at either 2.5MHz
(10T) or 25MHz (100T), whereas the transmit clock will remain at 125MHz.  The
audio runs off of a 24.5MHz clock.  The rest of the design runs off of the
100MHz clock used by the DDR3 memory and exported by the MIG.  That meant
that, just to get the design to synthesize, I needed to write a lot of timing
exceptions everywhere something
&lt;a href=&quot;/blog/2017/10/20/cdc.html&quot;&gt;crossed clock domains&lt;/a&gt;.
Although tedious, the good news is that I found some places where I didn’t
realize I was &lt;a href=&quot;/blog/2017/10/20/cdc.html&quot;&gt;crossed clock
domains&lt;/a&gt;, and all of those needed
to be fixed.&lt;/p&gt;

&lt;p&gt;One problem I had early on in when trying to implement my design centered
around how to delay the network clock by 90 degrees from the data.  My plan
was to, and indeed &lt;a href=&quot;https://github.com/ZipCPU/videozip/blob/7e86624a623c38a2fd36fdffc6ec56c693c2ec37/rtl/toplevel.v#L351-L356&quot;&gt;my previous implementations of this interface
did&lt;/a&gt;, &lt;a href=&quot;https://github.com/ZipCPU/videozip/blob/7e86624a623c38a2fd36fdffc6ec56c693c2ec37/rtl/toplevel.v#L356&quot;&gt;output a clock using a hardware
ODDR element&lt;/a&gt;, and to drive that element with &lt;a href=&quot;https://github.com/ZipCPU/videozip/blob/7e86624a623c38a2fd36fdffc6ec56c693c2ec37/rtl/toplevel.v#L567&quot;&gt;a clock
that was 90 degrees delayed from my data
clock&lt;/a&gt;.
As long as the two logic levels leading into this ODDR element were constant
this shouldn’t be a problem, right?&lt;/p&gt;

&lt;p&gt;Well, not quite.&lt;/p&gt;

&lt;p&gt;There was always the possibility that the transmitter might need to run at
a lower network speed than GbE, and then these values would need to toggle
to generate a slower speed clock.  But, my patience was thin, I just wanted
it to work–not necessarily to work right.  Unfortunately, Vivado gave me
no end of grief trying to get timing closure using this method.  In the end, I
tore up that approach and simply output both clock and data using a 4x OSERDES.
That way I could guarantee the phase relationship and clock crossings myself,
and also guarantee that the network interface was done “right”.  (Incidentally,
I’ve also now verified–by accident–that the slower speed transmit mode works
as designed.)&lt;/p&gt;

&lt;p&gt;I was now ready to place the design on the board.&lt;/p&gt;

&lt;p&gt;The first test?
&lt;a href=&quot;https://en.wikipedia.org/wiki/Address_Resolution_Protocol&quot;&gt;ARP&lt;/a&gt; and
&lt;a href=&quot;https://en.wikipedia.org/wiki/Internet_Control_Message_Protocol&quot;&gt;ICMP (ping)&lt;/a&gt;.
Why?  Because if I ever need to debug a network connection, the first thing I
always try is to &lt;a href=&quot;https://en.wikipedia.org/wiki/Ping_(networking_utility)&quot;&gt;ping&lt;/a&gt;
the device on the other end.  When you run
&lt;a href=&quot;https://en.wikipedia.org/wiki/Ping_(networking_utility)&quot;&gt;ping&lt;/a&gt;
on your local network, the first thing your computer will do is to broadcast an
&lt;a href=&quot;https://en.wikipedia.org/wiki/Address_Resolution_Protocol&quot;&gt;ARP&lt;/a&gt;
request.  Once it gets the response,
and only then, will the actual
&lt;a href=&quot;https://en.wikipedia.org/wiki/Ping_(networking_utility)&quot;&gt;ping&lt;/a&gt;
packet get sent.&lt;/p&gt;

&lt;p&gt;Neither worked.&lt;/p&gt;

&lt;p&gt;I still remember that cold, depressed feeling as I stared at the board and
wondered to myself, now what?&lt;/p&gt;

&lt;p&gt;Unfortunately, I hadn’t put any debugging infrastructure into any of the new
components of the design.  I just … never thought things wouldn’t work.
(You’d think I’d know better by now …)  So my first step was to instrument
as much of the network design as I could with &lt;a href=&quot;/blog/2017/07/08/getting-started-with-wbscope.html&quot;&gt;Wishbone
scopes&lt;/a&gt;.
I started with the end points, and then worked my way towards the packet
processors in the middle.  Every step got a scope.  It got to the point where
I could touch any point in the packet processing chain to see what was going on.&lt;/p&gt;

&lt;p&gt;Shall we look over some of the errors I found?  Here was one: my packet miss
counter wasn’t counting up the number of missed packets.  See the bug?&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_wb_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_net_reset_n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// See the bug?&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;counter_rx_miss&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;32'h0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rx_miss_stb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;counter_rx_miss&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;counter_rx_miss&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If you missed it, just remember that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_n&lt;/code&gt; is the suffix I use for negative
logic.  The counter should be cleared on reset, and the test for that should’ve
been for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;!o_net_reset_n&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This wasn’t the only place where I got reset polarities mixed up.  In
a design filled with “working” and “formally verified” modules, you’d expect
some bugs due to integration.  Here was one of those bugs:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;n&quot;&gt;pkt2stream&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;icmp_stream&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_net_rx_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARESETN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rx_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//Same bug&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Incidentally, this was the exact same bug.  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rx_reset&lt;/code&gt; was active high, whereas
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;S_AXI_ARESETN&lt;/code&gt; is active low.  Not only that, I found this same bug in a
couple of submodules of the same network control module.&lt;/p&gt;

&lt;p&gt;Here’s another bug I found.  Again, this is the sort of bug you might expect
when integrating various “working” components together.  In this case, I
was using &lt;a href=&quot;/blog/2022/02/23/axis-abort.html&quot;&gt;abortable AXI
Streams&lt;/a&gt;, and needed a way
to convert these streams to normal AXI streams that couldn’t be aborted and
that could be written to memory if desired.  (There’d be no room for TLAST in
memory …)  My method of handling this was to start each “packet” with a
length word, followed by the packet payload.  The bug?  Well, the
converter to AXI Stream calculated the length word based upon the length
of the packet itself, whereas the bridge from a regular AXI Stream to an
&lt;a href=&quot;/blog/2022/02/23/axis-abort.html&quot;&gt;abortable AXI stream&lt;/a&gt;
included the four bytes of the length word in its length count.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig. 7, Converting between AXI Stream types&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/proto-bringup/pktlength.svg&quot; alt=&quot;&quot; width=&quot;760&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Apparently, there was enough time separating when I wrote these two components
that I forgot which format I was using.  Then, to add insult to injury,
neither of the two components using this format described the format properly
in their comments.  Had they done so, the issue would’ve been easier to debug.&lt;/p&gt;

&lt;p&gt;Lesson learned: Document all interface formats.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left; padding: 20px&quot;&gt;&lt;caption&gt;Fig. 8, Selecting from among many packet sources&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/proto-bringup/txmux.svg&quot; alt=&quot;&quot; width=&quot;480&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;I also found a &lt;a href=&quot;/blog/2021/08/28/axi-rules.html&quot;&gt;basic AXI
handshaking&lt;/a&gt; bug in the
packet merge utility.  This utility, shown in Fig. 8, is responsible for
granting channel access to one (and only one) packet source when that source
wishes to send a packet.  In my case, there were several possible packet
sources: the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Address_Resolution_Protocol&quot;&gt;ARP&lt;/a&gt; processor, the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Internet_Control_Message_Protocol&quot;&gt;ICMP&lt;/a&gt;
processor, the debug protocol handler, and the receive data processor.
(Eventually, the list will include the network time handler and CPU packet
handling as well.)  In this case, the bug involved moving a data item forward
in an AXI Stream when the slave was valid, rather than waiting for the slave
to be valid &lt;em&gt;and&lt;/em&gt; ready.  The result was an extra word at the beginning of
every packet.&lt;/p&gt;

&lt;p&gt;Incidentally, this is one of those places where formal verification is no
more complex than a counter: You count the number of stream words from a given
stream’s packet input going into the mux, and you count the number of words
coming out.  Verify that the same number of words going in matches the number
of words coming out.  If you want to get fancy, you can even declare that
word #XYZ (let the solver pick this) must have some solver chosen value,
and then verify the same on the output.  Still, the formal proof is quite easy
to do.  … You just have to do it.&lt;/p&gt;

&lt;p&gt;During this whole process, I used &lt;a href=&quot;https://www.wireshark.org&quot;&gt;Wireshark&lt;/a&gt;
heavily to debug any errors.
&lt;a href=&quot;https://www.wireshark.org&quot;&gt;Wireshark&lt;/a&gt; could tell me, for example, if an
&lt;a href=&quot;https://en.wikipedia.org/wiki/Address_Resolution_Protocol&quot;&gt;ARP&lt;/a&gt;
request was getting a response or not, or if that response had the correct
format, or if not what part of the packet was in error.
(&lt;a href=&quot;https://www.wireshark.org&quot;&gt;Wireshark&lt;/a&gt; was
also telling me that I was blasting packets of what looked like random data
across the network–but we’ll get to that nasty bug soon enough.)  If you
ever find yourself doing network debugging, I highly recommend having
&lt;a href=&quot;https://www.wireshark.org&quot;&gt;Wireshark&lt;/a&gt; running during your debug sessions.  The
information it provides is just that valuable.&lt;/p&gt;

&lt;p&gt;Once I had
&lt;a href=&quot;https://en.wikipedia.org/wiki/Address_Resolution_Protocol&quot;&gt;ARP&lt;/a&gt; and
&lt;a href=&quot;https://en.wikipedia.org/wiki/Internet_Control_Message_Protocol&quot;&gt;ICMP&lt;/a&gt;
working, as well as seeing my receive data packets
properly transmitted, I figured my task was done.  I took a break and rested
for the weekend.  It wasn’t until the next week when I tried looking at the
output of my &lt;a href=&quot;https://en.wikipedia.org/wiki/Ping_(networking_utility)&quot;&gt;ping&lt;/a&gt;
command, and thus discovering that
[ping](https://en.wikipedia.org/wiki/Ping_(networking_utility) didn’t
think it was getting a response, that I dug even further down to discover that
my &lt;a href=&quot;https://en.wikipedia.org/wiki/IPv4&quot;&gt;IP&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Internet_checksum&quot;&gt;checksums&lt;/a&gt;
were all wrong.&lt;/p&gt;

&lt;p&gt;Lesson learned: &lt;a href=&quot;https://www.wireshark.org&quot;&gt;Wireshark&lt;/a&gt; doesn’t automatically
check &lt;a href=&quot;https://en.wikipedia.org/wiki/IPv4&quot;&gt;IP&lt;/a&gt; or
&lt;a href=&quot;https://en.wikipedia.org/wiki/User_Datagram_Protocol&quot;&gt;UDP&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Internet_checksum&quot;&gt;checksums&lt;/a&gt;.
That functionality needs to be enabled.&lt;/p&gt;

&lt;p&gt;Oops.&lt;/p&gt;

&lt;p&gt;As it turns out, I had built my &lt;a href=&quot;https://en.wikipedia.org/wiki/Internet_checksum&quot;&gt;IP
checksum&lt;/a&gt; logic based upon my
memory of how the &lt;a href=&quot;https://en.wikipedia.org/wiki/Internet_checksum&quot;&gt;checksum&lt;/a&gt;
was supposed to work from the last time I had built
&lt;a href=&quot;https://en.wikipedia.org/wiki/IPv4&quot;&gt;IP&lt;/a&gt; packets.  Apparently, I had forgotten
that the &lt;a href=&quot;https://en.wikipedia.org/wiki/Internet_checksum&quot;&gt;checksum&lt;/a&gt;
needs to be inverted before use.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig. 9, Packet Checks in the Network Simulator&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/proto-bringup/netsim-checks.svg&quot; alt=&quot;&quot; width=&quot;420&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;By this point, I had also finally bit the bullet: I now had a GbE network
&lt;a href=&quot;/blog/2018/08/22/what-is-simulation.html&quot;&gt;simulation&lt;/a&gt; model.
This model would send random
&lt;a href=&quot;https://en.wikipedia.org/wiki/Address_Resolution_Protocol&quot;&gt;ARP&lt;/a&gt; and
&lt;a href=&quot;https://en.wikipedia.org/wiki/Internet_Control_Message_Protocol&quot;&gt;ICMP&lt;/a&gt;
requests, and validate their responses.  It checked
&lt;a href=&quot;https://en.wikipedia.org/wiki/IPv4&quot;&gt;IP&lt;/a&gt; and
&lt;a href=&quot;https://en.wikipedia.org/wiki/User_Datagram_Protocol&quot;&gt;UDP&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Internet_checksum&quot;&gt;checksums&lt;/a&gt;.  It would also
validate &lt;a href=&quot;https://en.wikipedia.org/wiki/User_Datagram_Protocol&quot;&gt;UDP&lt;/a&gt;
packets.  Even better, I could send requests to my design via
&lt;a href=&quot;https://en.wikipedia.org/wiki/User_Datagram_Protocol&quot;&gt;UDP&lt;/a&gt;
on the local host, and the network model would then forward those requests
into the design and then forward any responses back.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left; padding: 25px&quot;&gt;&lt;caption&gt;Fig. 10, Network Packet Simulator&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/proto-bringup/netsim.svg&quot; alt=&quot;&quot; width=&quot;420&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;This &lt;a href=&quot;/blog/2018/08/22/what-is-simulation.html&quot;&gt;simulation&lt;/a&gt;
capability was very helpful, and I’m not sure I would’ve found
any of my remaining bugs without it.&lt;/p&gt;

&lt;p&gt;Another ugly bug I wasn’t expecting was associated with adding packet
headers and so forth to the design.  In this design, the network engine
accepts an AXI stream packet.  That packet starts with the Ethernet destination
and an EtherType (skipping the Ethernet source MAC), followed by any ethernet
payload.  Incidentally, this format helps keep all the AXI stream words
formatted nicely on 32-bit boundaries–but that’s another story.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig. 11, Network Core processing steps&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/proto-bringup/netcore.svg&quot; alt=&quot;&quot; width=&quot;320&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;It then &lt;a href=&quot;https://github.com/ZipCPU/videozip/blob/enet/rtl/ethernet/addemac.v&quot;&gt;fills out the rest of the Ethernet
header&lt;/a&gt;,
&lt;a href=&quot;https://github.com/ZipCPU/videozip/blob/enet/rtl/ethernet/addepad.v&quot;&gt;expands the packet to the minimum
size&lt;/a&gt;
(64 bytes), and &lt;a href=&quot;https://github.com/ZipCPU/videozip/blob/enet/rtl/ethernet/addecrc.v&quot;&gt;adds a
CRC&lt;/a&gt;.
All of this extra “adding” process, however, takes cycles, and I wasn’t
insisting on any dead time between packets to make sure these cycles were
available.  Rather, I had set the TREADY value associated with the incoming
network packet stream to be a constant one.&lt;/p&gt;

&lt;p&gt;Frankly, I never saw that one coming.  Because I unconditionally set
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TREADY=1&lt;/code&gt;, the network processing modules weren’t getting properly reset
between packets and so independent packets were getting merged together.
This wasn’t a problem with the previous design from which this one was drawn,
since the previous design used a different handshake to start packet
transmission.&lt;/p&gt;

&lt;p&gt;Still, I figured I was at least close to ready.&lt;/p&gt;

&lt;p&gt;I even had the network debugging port up and running.  This port was a
modified version of my &lt;a href=&quot;/blog/2017/06/05/wb-bridge-overview.html&quot;&gt;serial port “debugging
bus”&lt;/a&gt;, save that
it had been modified to run “reliably” over
&lt;a href=&quot;https://en.wikipedia.org/wiki/User_Datagram_Protocol&quot;&gt;UDP&lt;/a&gt;.
Using this port, I could send commands to the device to read or write to any
address found within my FPGA design.
The basic protocol was that the external computer would send a packet to the
FPGA requesting a bus transaction, and then wait for the FPGA’s response.  Every
packet was given a response.  If there was ever no response, the request would
timeout and then get repeated.  As a result, no more than one request would
ever be in flight at any given time–although there might be multiple copies of
that one request and its response in flight.  To handle that, if the FPGA
received duplicate packets, it would only run the bus requests once for the
first packet request, and then simply repeat the response it had generated
for that request on any subsequent requests.  No, the protocol wasn’t very
efficient networkwise, but it was &lt;em&gt;MUCH&lt;/em&gt; faster than the serial port it was
replacing.&lt;/p&gt;

&lt;p&gt;Now that I had all of this working, it was time to start staging for the trip.&lt;/p&gt;

&lt;h2 id=&quot;staging&quot;&gt;Staging&lt;/h2&gt;

&lt;p&gt;“Staging” is my word for separating all of the hardware that will be traveling
with me from my fixed development environment.  My desktop would not be
traveling with me, so I needed to bring a laptop–and a newly purchased one
at that.  That laptop would be a special project laptop.  It needed to have
Linux installed, Vivado, Verilator, GtkWave, Icarus Verilog, zip-gcc and
… all my favorite development toys.  Once I had all these installed, I
cleared off a table and started setting up my traveling equipment.&lt;/p&gt;

&lt;p&gt;Of course, once I put it all together, nothing worked.&lt;/p&gt;

&lt;p&gt;Sound familiar?&lt;/p&gt;

&lt;p&gt;This time, it took me almost a whole day to chase down the problem.  (I hadn’t
allocated time for this extra day …)  Apparently, that brand new laptop I had
just bought for this trip and this project came with a bad Ethernet port.
(Or had I broken it somehow?  I’ll never know …)&lt;/p&gt;

&lt;p&gt;The problem with this was, I had assumed everyone else’s hardware “just
worked.” Had I suspected the laptop might have a bad Ethernet port, I
might’ve saved myself a half day or more by trying my USB to Ethernet
dongle earlier.&lt;/p&gt;

&lt;p&gt;Instead, I turned to my &lt;a href=&quot;https://github.com/ZipCPU/videozip/blob/dev/rtl/enetctrl.v&quot;&gt;(working) MDIO
controller&lt;/a&gt;
for the first time only to discover … it wasn’t working.  I couldn’t figure
out what had happened.  I knew the design worked before the last time I used
it, but somehow it wasn’t working today.  In particular, the bits returned
were off by one, and the last bit wasn’t trustworthy.  In hindsight, looking
over the design with &lt;a href=&quot;https://www.atlassian.com/git/tutorials/gitk&quot;&gt;gitk&lt;/a&gt;, it
looks like I had tweaked this design since copying it from the
&lt;a href=&quot;https://github.com/ZipCPU/videozip/blob/enet/rtl/enetctrl.v&quot;&gt;“working” project&lt;/a&gt;
and … not validated it since.  Those “tweaks” were what wasn’t working.&lt;/p&gt;

&lt;p&gt;At this point, though, I was less than a two days out.  It was now Wednesday,
the &lt;a href=&quot;https://www.amtrak.com/auto-train&quot;&gt;train&lt;/a&gt; left on Friday, and I had only
just gotten my tests running again in this staging area.  Then, when I went to
double check everything again, I discovered that … the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Sonar&quot;&gt;SONAR&lt;/a&gt;
data packets weren’t getting through anymore.&lt;/p&gt;

&lt;p&gt;At this point, I was out of time.  I had a critical capability that wasn’t
working, but it was now time to pack up all my hardware for the train.
(I swear it was working earlier!  What happened?)&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig. 12, Amtrak's Auto Train&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/proto-bringup/auto-train.svg&quot; alt=&quot;&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;h2 id=&quot;the-train&quot;&gt;The Train&lt;/h2&gt;

&lt;p&gt;Let me set the stage a bit more for what happened next.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;https://en.wikipedia.org/wiki/Sonar&quot;&gt;SONAR&lt;/a&gt; data processing in this
system takes place in several steps:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;All of the digitizers for the various sensors sample their data from an
SPI based A/D concurrently.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;That data is then serialized, and organized into blocks of 24 samples,
with 24-bits per sample.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Each block is then examined to calculate an appropriate block exponent.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The samples are then compressed into 16, 20, 24, or 32-bits per sample.&lt;/p&gt;

    &lt;p&gt;Okay, so stuffing 24-bits into 32-bits isn’t much of a compression, but it
does make it easier to examine what’s going on when staring at a hex dump
of the packet.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Finally, the samples and exponents are assembled together into packets of
32-bit words.  The packets contain configuration information, the time
stamp of the first sample, possibly some non-acoustic data, and then
transmit information is appended to the end of the packet.&lt;/p&gt;

    &lt;p&gt;This takes place in a module I called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rx_genpkt&lt;/code&gt;.  By the time I got on
the train, this module had just recently been formally verified (we’ll
discuss that with Fig. 13 below), and no longer showed any signs of being
broken in either
&lt;a href=&quot;/blog/2018/08/22/what-is-simulation.html&quot;&gt;simulation&lt;/a&gt;
or hardware.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Ethernet, &lt;a href=&quot;https://en.wikipedia.org/wiki/IPv4&quot;&gt;IPv4&lt;/a&gt;, and
&lt;a href=&quot;https://en.wikipedia.org/wiki/User_Datagram_Protocol&quot;&gt;UDP&lt;/a&gt; headers are
then added to the sample packet, containing the length of the packet,
&lt;a href=&quot;https://en.wikipedia.org/wiki/IPv4&quot;&gt;IP&lt;/a&gt; and
&lt;a href=&quot;https://en.wikipedia.org/wiki/User_Datagram_Protocol&quot;&gt;UDP&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Internet_checksum&quot;&gt;checksums&lt;/a&gt;,
and so forth.&lt;/p&gt;

    &lt;p&gt;This takes place in a module I called &lt;em&gt;pkt2udp&lt;/em&gt;, the one module I knew
was broken when I got on the train.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The packet then gets multiplexed between the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Sonar&quot;&gt;SONAR&lt;/a&gt;
sensor data source and a second (microphone) data source–following Fig. 2
shown above.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;It then crosses from the 100MHz to the 125MHz clock domain.&lt;/p&gt;

    &lt;p&gt;This clock domain crossing component is really nothing more than a
&lt;a href=&quot;/blog/2018/07/06/afifo.html&quot;&gt;traditional asynchronous
FIFO&lt;/a&gt;.
The “packet” getting placed into this FIFO consisted of a 4-byte header
containing the packet’s length, followed by a payload containing as many
words as were required to capture the rest of the number of bytes requested
in the header.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Once in the 125MHz domain, the length word is stripped from the packet,
and the packet payload is then broken down from 32-bit words to 8-bit
octets.&lt;/p&gt;

    &lt;p&gt;The 32-bit word size turns out to be convenient for both assembling the
packet, as well as making sure that packet generated using a 100MHz clock
can keep the network busy on every clock cycle of a 125MHz clock.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Finally, the packet goes through an arbiter that selects one packet request
   at a time, from among several potential packet sources, to forward to the
   network core.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The network core then adds a MAC address.  (See Fig. 11)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The network core then pads the packet to a minimum of 64 bytes&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;A CRC is then added to the end of the packet, and&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;A preamble is added to the beginning of the packet.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The packet then travels the network.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In general, there’s one module for each of these steps, and most of these
modules have been formally verified.  There were two notable exceptions to this
rule.&lt;/p&gt;

&lt;p&gt;The first exception was that the initial packet assembly, where we added
configuration information and timestamps.  Just before I left, I had narrowed
down a bug to this logic, as shown in Fig. 13 below.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig. 13, Chasing bugs in hardware&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/proto-bringup/bugchasing.svg&quot; alt=&quot;&quot; width=&quot;780&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;At the time, this packet assembly logic wasn’t located in a separate module but
rather in a module containing other modules.  As such, it hadn’t been formally
verified.  Just before leaving, I had traced a nasty bug to this module,
as shown in Fig. 13 above.  That was enough to split the remaining processing
logic into a separate module for formal verification.  Once separated, this
processing module then became easy to verify.&lt;/p&gt;

&lt;p&gt;Unfortunately, the bugs in the RxCHAIN weren’t the last bugs in the system.
Another bug appeared in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pkt2udp&lt;/code&gt;.  Once I had formally verified (and fixed)
the receive chain, this &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pkt2udp&lt;/code&gt; module was the only one left in the chain
that hadn’t been formally verified.&lt;/p&gt;

&lt;p&gt;What did &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pkt2udp&lt;/code&gt; do?  This was the component responsible for turning a
sensor data packet into a
&lt;a href=&quot;https://en.wikipedia.org/wiki/User_Datagram_Protocol&quot;&gt;UDP&lt;/a&gt; packet.&lt;/p&gt;

&lt;p&gt;Frankly, I didn’t trust this module at all.  It felt like I kept tracing bugs
into the module, but could never find their cause.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig. 14, The Circular Buffer&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/proto-bringup/linked-list.svg&quot; alt=&quot;&quot; width=&quot;480&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;For some more background, understand that this component’s operation centered
around the circular buffer, shown in Fig. 14 above.  (A ping-pong buffer pair
would’ve been easier to verify.)  Within this buffer, the first 32-bit word of
every packet in the buffer was to contain the length of the packet that would
follow.&lt;/p&gt;

&lt;p&gt;Writing to this buffer meant:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Clearing the packet length field.  This was usually done as part of
writing the previous packet to memory, but on reset it might need to
be cleared manually.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Write data into the buffer, counting how much data gets inserted&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;/blog/2022/02/23/axis-abort.html&quot;&gt;Abort (drop)&lt;/a&gt;
the packet if 1) the source
&lt;a href=&quot;/blog/2022/02/23/axis-abort.html&quot;&gt;aborts&lt;/a&gt;
aborts, or 2) if the one packet uses (or will use) the entire memory buffer.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Once the packet is complete, write a zero to the field following.  This
will become the length field of the next packet.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Then go back and write the finished packet length into the buffer&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Finally, move the write-packet boundary forward in the buffer.  Our packet
has now been committed to the output stream.  It now has a reserved location
in RAM.  It won’t be dropped from this point forward.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The key to all this processing is the length field.  A zero length means there
is no packet present.  Once a packet was committed, the length of that
(now committed) packet would be updated in memory once we guaranteed that the
next packet’s length field was set to zero.&lt;/p&gt;

&lt;p&gt;If at any time during this process there wasn’t enough room in the buffer for
the packet, the packet needed to be
&lt;a href=&quot;/blog/2022/02/23/axis-abort.html&quot;&gt;dropped&lt;/a&gt;.  There were two
parts to this.  First, if the packet filled the entire memory and there still
wasn’t enough memory to finish the packet, then the packet would be
&lt;a href=&quot;/blog/2022/02/23/axis-abort.html&quot;&gt;dropped&lt;/a&gt; internally.
The source would never be the wiser.  This keeps the routine from locking up
on an over-long packet.  Second, the incoming packet would stall if the
writer ever ran out of memory between the write and read pointers.  If it
stalled for too long, the packet source might also &lt;a href=&quot;/blog/2022/02/23/axis-abort.html&quot;&gt;abort the
packet&lt;/a&gt;–once it couldn’t
stall any longer.  (Remember, data is coming in at a constant rate.  It must
either go somewhere, or get dropped if the system can’t handle it.  You cannot
stall indefinitely, neither can we allow partially completed packets to move
forward.)&lt;/p&gt;

&lt;p&gt;The read side of this process was simple enough as well: You’d read from the
first word where the last packet left off.  While that word read zero,
the reader would stay put and just keep reading that length word.  Once the
length word became non-zero, the reader would start reading the packet out,
by reading and then forwarding the packet’s data.&lt;/p&gt;

&lt;p&gt;I’m sure most of you will recognize this structure as a basic
&lt;a href=&quot;https://en.wikipedia.org/wiki/Linked_list&quot;&gt;linked list&lt;/a&gt;.  The
biggest differences between this
&lt;a href=&quot;https://en.wikipedia.org/wiki/Linked_list&quot;&gt;linked list&lt;/a&gt;
and the ones you find more often in software are 1) the wrapping memory, and
the fact that the “pointers” in this case were lengths, rather than true
pointers, and 2) in hardware, you have to deal with timing and timing cycles.
These are minor differences, though: it’s still a basic
&lt;a href=&quot;https://en.wikipedia.org/wiki/Linked_list&quot;&gt;linked list&lt;/a&gt;:
the first word in a packet gives the packet’s length, and therefore points
to the first word, the length word, in the next packet.&lt;/p&gt;

&lt;p&gt;Indeed, the operation of this IP is all quite straight-forward, but I had
no end of trouble with this design.  It got so bad at one point that I even
(gasp!) built a Verilog
&lt;a href=&quot;/blog/2018/08/22/what-is-simulation.html&quot;&gt;simulation&lt;/a&gt;
to bench test it.  That bench test was
&lt;em&gt;really&lt;/em&gt; hard to get right, too.  I spent a half day toggling between
assuming that the reader would accept packets out at full speed, or that it
would accept them at quarter speed, only able to get one of the two speeds
working depending on how I set the &lt;em&gt;M_AXIN_READY&lt;/em&gt; input.  While I eventually
found that bug, it wasn’t really enough.&lt;/p&gt;

&lt;p&gt;What the design needed was to be formally verified.&lt;/p&gt;

&lt;p&gt;Why wasn’t it formally verified?  How was it that I had gone so long without
formally verifying this critical component?&lt;/p&gt;

&lt;p&gt;The simple answer is that I couldn’t figure out how to go about formally
verifying a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Linked_list&quot;&gt;linked list&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As a result, I was now on an &lt;a href=&quot;https://www.amtrak.com/auto-train&quot;&gt;Amtrak train&lt;/a&gt;
headed for hardware bringup with a known bug in my digital logic design.  Using
my own &lt;a href=&quot;/blog/2017/06/08/simple-scope.html&quot;&gt;internal logic
analyzer&lt;/a&gt;,
I had caught this bug in hardware just before leaving.  What I discovered 
is illustrated in Fig. 15 below.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig. 15, The linked list, now corrupted&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/proto-bringup/broken-links.svg&quot; alt=&quot;&quot; width=&quot;480&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;I should point out that I only discovered this via &lt;a href=&quot;/blog/2017/06/08/simple-scope.html&quot;&gt;the internal
logic analyzer&lt;/a&gt;.  I’m
not sure I would’ve known where to look without it.  While the &lt;a href=&quot;/blog/2017/06/08/simple-scope.html&quot;&gt;internal logic
analyzer&lt;/a&gt; told me where
the design was stuck, however, it didn’t tell me how it got stuck in the first
place.&lt;/p&gt;

&lt;p&gt;Here at least I knew that, due
to some unknown condition, the read pointer would be reading a zero
length packet somewhere in memory (meaning that there was no packet present),
all while the write half of the module was working on a packet elsewhere.
The design would be locked up, never to go again.  However, while I could
discover this much using &lt;a href=&quot;/blog/2017/07/08/getting-started-with-wbscope.html&quot;&gt;my
scope&lt;/a&gt;,
I couldn’t figure out &lt;em&gt;how&lt;/em&gt; the design ever got into this configuration.
&lt;em&gt;This wasn’t supposed to happen!&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Therefore, on the train, I decided to try the following approach to formally
verifying this linked list chain:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;I would allow the formal tool to select two arbitrary memory locations.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I would start tracking these two locations as soon as the first location
pointed to the second one.  If it never pointed at the second location,
I’d never track what happened next.&lt;/p&gt;

    &lt;p&gt;A formal-only state machine’s state register would note that I was
tracking a packet existing between these two pointer addresses.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I then tracked these two addresses, and their values, until the read
pointer pointed at the first of these two locations, so that it would
start reading out the packet.  Frankly, I didn’t need to go farther: I
had the read tracking logic working in my formal proof already.  I just
needed to get to this point where I could guarantee that the read pointer
would be given the right data.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I also formally verified particular properties of these two locations:
1) The first address, plus the length contained at that address, had to point
at the second address.  2) The writer could be active starting at the second
address, but never between the two.  2) The packet length was at least a
minimum packet length, and always less than the full memory size, and so on.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;For all other linked list pointer-pairs within the design that the formal
tool might encounter, I &lt;em&gt;assumed&lt;/em&gt; these properties.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Once I had this plan in mind, I was then able to formally verify the packet to
&lt;a href=&quot;https://en.wikipedia.org/wiki/User_Datagram_Protocol&quot;&gt;UDP&lt;/a&gt;
module.  What I discovered was a strange corner case: If
the source &lt;a href=&quot;/blog/2022/02/23/axis-abort.html&quot;&gt;aborted&lt;/a&gt;
the packet just at the exact same clock cycle that the
&lt;a href=&quot;https://en.wikipedia.org/wiki/User_Datagram_Protocol&quot;&gt;UDP&lt;/a&gt;
packet assembler completed it, a zero length word would be written to the
packet’s length word, and the writer would move on to the next packet.&lt;/p&gt;

&lt;p&gt;Just to see what’s going on, here’s what the original packet assembly
logic looked like:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// ... assemble the parts and pieces of the packet together&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;endcase&lt;/span&gt;

		&lt;span class=&quot;c1&quot;&gt;// On either an external or internal abort ...&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXIN_ABORT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;abort_packet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;// Write the null pointer back to the first address&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;// of memory&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;mem_wr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1'b1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Write to memory&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;mem_waddr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;next_start_of_packet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;mem_wdata&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

			&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_IDLE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_RESETN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;// Reset stuffs&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The problem here is, what happens if the packet is already fully assembled
when the &lt;a href=&quot;/blog/2022/02/23/axis-abort.html&quot;&gt;abort&lt;/a&gt;
signal is received?  We were then going to write the length
of this packet and set the packet start address to the next start of packet
address.  The &lt;a href=&quot;/blog/2022/02/23/axis-abort.html&quot;&gt;abort&lt;/a&gt;
condition would override that write, causing us to write
a null pointer which would then cause the reader to freeze waiting.&lt;/p&gt;

&lt;p&gt;And here’s the corrected condition:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// ... assemble the parts and pieces of the packet together&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;endcase&lt;/span&gt;

		&lt;span class=&quot;c1&quot;&gt;// On either an external or internal abort ...&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXIN_ABORT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_PAYLOAD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;abort_packet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Notice how, this time, the packet is only
&lt;a href=&quot;/blog/2022/02/23/axis-abort.html&quot;&gt;aborted&lt;/a&gt;
if it hasn’t been completed.  That is, we don’t
&lt;a href=&quot;/blog/2022/02/23/axis-abort.html&quot;&gt;abort&lt;/a&gt;
after we’ve received the full &lt;em&gt;payload&lt;/em&gt; of the packet.  Once the payload has
been completed, we do nothing more with the
&lt;a href=&quot;/blog/2022/02/23/axis-abort.html&quot;&gt;abort&lt;/a&gt; logic.&lt;/p&gt;

&lt;p&gt;In the end, it only took between 4-6 hrs on the train to fully verify this
packet to &lt;a href=&quot;https://en.wikipedia.org/wiki/User_Datagram_Protocol&quot;&gt;UDP&lt;/a&gt;
bridge.  That’s 4-6 hrs compared to the last several weeks where
I was dealing with this bug on and off depending on the conditions within the
design, depending on when the hardware switched from 10Mb mode to 1GbE mode,
and so forth.  Worse, during those weeks, I could never quite pin the bug
down to one module, so it really required formally verifying everything else
to get to the point where I could isolate this bug to this module.&lt;/p&gt;

&lt;p&gt;Now, at least, I had found the bug.  Even better, I now had confidence that
this last unverified portion of my design would work as intended.  I just had
nowhere to assemble the hardware to test it until the team was assembled
on Monday morning.&lt;/p&gt;

&lt;h2 id=&quot;bringup-bugs-found&quot;&gt;Bringup Bugs Found&lt;/h2&gt;

&lt;p&gt;So, once Monday morning came around, I joined the team at the test site.
I plugged in the hardware and my newly verified packet to
&lt;a href=&quot;https://en.wikipedia.org/wiki/User_Datagram_Protocol&quot;&gt;UDP&lt;/a&gt;
converter “just worked” like a champ.&lt;/p&gt;

&lt;p&gt;Instead, I had two other bugs to deal with.  (These weren’t the first bugs
of the day, either–those were in the circuitry elsewhere and not my digital
logic.)&lt;/p&gt;

&lt;p&gt;The first was associated with a weird corner case.  The network hardware is
designed to start up in 10Mb Ethernet mode.  It then senses whether or not the
cable is capable of 100Mb or 1Gb Ethernet.  Once that sensing is complete, the
network hardware will switch modes.  My design, however, only checks and
changes speed between packets.&lt;/p&gt;

&lt;p&gt;What happens, then, when the &lt;a href=&quot;https://en.wikipedia.org/wiki/Sonar&quot;&gt;SONAR&lt;/a&gt;
receiver starts assembling data into packets
and then attempts to blast so much data across the network that there’s never
a rest between packets for the network controller to use to change speed in?&lt;/p&gt;

&lt;p&gt;What happens is that the network controller gets so stuck that the debugging
packets can’t get through.  Without the debugging packets, it was impossible
to send (via the network debugging port) a command to halt the packet
generation.  It’s a classic chicken-and-egg problem.&lt;/p&gt;

&lt;p&gt;For the time being, I could get around this bug easily enough by turning the
receive data handling off (via
&lt;a href=&quot;/blog/2017/06/05/wb-bridge-overview.html&quot;&gt;UART&lt;/a&gt;),
letting the network adjust, and then
turning it back on again.  By the Tuesday morning (Day #2) I had a more
permanent fix for this in place, whereby the data packet generation wouldn’t
start until the network was in high speed 1Gb/s mode.  Indeed, after the
second morning, I never needed the &lt;a href=&quot;/blog/2017/06/05/wb-bridge-overview.html&quot;&gt;UART debug bus backup
port&lt;/a&gt;
again–it was all network control after that.&lt;/p&gt;

&lt;p&gt;It was the second problem that was more of a hassle that first day.&lt;/p&gt;

&lt;p&gt;For background, remember that this is the first time my FPGA logic was
connected to hardware on this project.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left; padding: 25px&quot;&gt;&lt;caption&gt;Fig. 16, SPI Controller Self-Test Setup&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/proto-bringup/miso.svg&quot; alt=&quot;&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;When the receive processing logic was first checked out years ago,
I had two potential test sources, as shown in Fig. 16.&lt;/p&gt;

&lt;p&gt;The first was an emulated A/D inside my design, which I could use as a source
if I needed one and had no hardware.  This emulated A/D consisted of a series of
&lt;a href=&quot;/dsp/2017/08/30/cordic.html&quot;&gt;CORDICs&lt;/a&gt;, each generating
a sine wave at a different frequency and amplitude, but all of them phase
aligned.  The result was then
encoded appropriately to match what the A/D output would be–it became the
“MISO” input from an emulated A/D.  As a result, if you ever plotted the
receive waveform from this artificial test source, you’d see some easily
recognizable signals.&lt;/p&gt;

&lt;p&gt;For this project, however, I had decided that the emulated source was probably
overkill.&lt;/p&gt;

&lt;p&gt;Instead, I used the second test source configuration in the A/D controller.
This test source would replace whatever was actually read by the A/D with a
counter and the channel number.  I could then follow this incrementing counter
through my processing chain to make certain that no data was ever dropped.
This project now marked the second time I’d used this counter approach.  The
first time, on the original receiver project, I &lt;em&gt;automatically&lt;/em&gt; verified that
there were never any breaks in the counter when the results were finally
received by the software processor.  This time, however, I just looked at a
couple of packets in hex, by eye, to verify there were no packet breaks.&lt;/p&gt;

&lt;p&gt;So, now, with the whole team assembled, we connected a signal generator to the
A/D input.  The &lt;a href=&quot;/dsp/2019/12/21/histogram.html&quot;&gt;histogram&lt;/a&gt;
of the output looked wonderful, so I figured everything was good–up until we
all looked at the waveform.  Instead of a sine wave, we got something like
Fig. 17.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left; padding: 25px&quot;&gt;&lt;caption&gt;Fig. 17, Corrupted Sinewave&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/proto-bringup/corrupted-sinewav.png&quot; alt=&quot;&quot; width=&quot;640&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;In this figure, you’ll notice discontinuities in the sine wave.  As a
hypothesis test, I’ve placed vertical bars every 18 samples.  You’ll notice
that these vertical bars land right on those discontinuities–every 18 samples.&lt;/p&gt;

&lt;p&gt;At one point, we tried increasing the amplitude.  We got something worse,
as shown in Fig. 18.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left; padding: 25px&quot;&gt;&lt;caption&gt;Fig. 18, The corruption only gets worse as the volume goes up&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/proto-bringup/corrupted-capture.png&quot; alt=&quot;&quot; width=&quot;640&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Let’s start with what we know.  Sudden breaks in what should be a smooth
waveform sound like samples that are getting dropped somewhere.
So, I checked for lost samples.  I turned on the counter injection at the
source, as shown in Fig. 16, and then had my packet software dump the data in
hex so I could check for lost samples.&lt;/p&gt;

&lt;p&gt;There were no lost samples.&lt;/p&gt;

&lt;p&gt;I was confused.  That first day of testing ended in frustration.&lt;/p&gt;

&lt;p&gt;On my way out the door, however, another teammate suggested based upon the
frequency we were measuring that I was dropping exactly 6 of every 24 samples.
As it turned out, that was just the help I needed to find the bug.&lt;/p&gt;

&lt;p&gt;Surprise!  The dropped samples bug wasn’t in my hardware at all.&lt;/p&gt;

&lt;p&gt;The network packets were arriving at their destination without error, and
without any dropped packets.  I had verified by eye that nothing was getting
dropped.  That wasn’t the bug.&lt;/p&gt;

&lt;p&gt;No, the bug was in my latest rewrite of the packet handling &lt;em&gt;software&lt;/em&gt;, the
same software that both collected packets and converted them to a text file
so that &lt;a href=&quot;https://www.gnu.org/software/octave&quot;&gt;Octave&lt;/a&gt;
could ingest them.  As of the latest &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rx_genpkt&lt;/code&gt; rewrite, I had run out of
meta-data room to stuff the number of samples per packet in the header.
Instead, the software would simply know this value as a shared
constant.  My problem was, when re-writing this software, I looked up the
packet size from a &lt;a href=&quot;/blog/2017/07/31/vcd.html&quot;&gt;VCD&lt;/a&gt;
trace, shown in &lt;a href=&quot;https://gtkwave.sourceforge.net&quot;&gt;GTKWave&lt;/a&gt;, and generated via
&lt;a href=&quot;/blog/2018/08/22/what-is-simulation.html&quot;&gt;simulation&lt;/a&gt;
just to be sure I got it right.  I read
that there were 0x18 samples per packet, and then wrote the software to read
out 18 samples per packet–dropping six samples from every data packet in the
process.  (Did you notice the accidental hexadecimal to decimal unit change?)&lt;/p&gt;

&lt;p&gt;That fixed the discontinuities in Fig. 17.  What about the additional
discontinuities in Fig. 18?
Those discontinuities came because, surprise, surprise, I was now using Xilinx
hardware instead of ~ALtera~ Intel hardware.  I had also changed the front end.
The receive wavefoms were running though some IDDR elements and there was an
additional delay in when the MISO were returned to my controller.  As a
result, I was sampling the bits from the A/D on the wrong clock cycle.  This
was easily found (and fixed) using my &lt;a href=&quot;/blog/2017/06/08/simple-scope.html&quot;&gt;internal
logic analyzer&lt;/a&gt;.
I’m not sure how I would’ve found this delay otherwise.&lt;/p&gt;

&lt;p&gt;Needless to say, by Tuesday morning I had a parameter in the design allowing
me to adjust the capture delay by eye, and I was able to adjust it so
that it now captured in the center of the bit.&lt;/p&gt;

&lt;p&gt;Fig’s 17 and 18 show one more bug in them, most obvious in Fig. 17: the
sine wave wasn’t uniformly smooth between its positive and negative half
sides.  This one wasn’t my fault.  Instead, we traced it to a mis-configuration
in the function generator we were using to generate the sinewave in the first
place.  We had it set to clip the negative half of the waveform–although
this was more obvious when we ran a triangle wave through the system (not shown
above).&lt;/p&gt;

&lt;p&gt;These three bugs ended up being my last show stopping bug for the week.  The
rest of the week everything I had written “just worked” like I wanted.
(Don’t worry, we’re not superhumans, we still had other bugs to chase down …
there just weren’t any more of them in the digital logic.  Or, to be more
exact, there weren’t any more bugs in the digital logic &lt;em&gt;that any one else
noticed&lt;/em&gt;.)&lt;/p&gt;

&lt;h2 id=&quot;sudden-new-capabilities&quot;&gt;Sudden New Capabilities&lt;/h2&gt;

&lt;p&gt;There’s one more story worth telling from this week.&lt;/p&gt;

&lt;p&gt;As I’m sure you can imagine, this being the first time the team was assembled,
things didn’t go as smoothly as everyone had planned.  I wasn’t the only
engineer in the team with faults that needed to be chased down.  In particular,
we were chasing down some hardware faults in the transmitter on Thursday.
Things weren’t working, and we weren’t certain why.&lt;/p&gt;

&lt;p&gt;The team then asked me if it would be possible to transmit from only one of
the transmitters on this device.&lt;/p&gt;

&lt;p&gt;That wasn’t a request I was expecting.  Nowhere in the requirements did it
say that I needed to be able to transmit onto a selectable subset of the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Transducer&quot;&gt;transducers&lt;/a&gt;
controlled by the device.&lt;/p&gt;

&lt;p&gt;In general, adding a capability like this sounds pretty easy.  All you need
to do is to take the output data and mask it with a register telling you
which transmitters are “on” and which ones are not.  The fix, in Verilog,
was just about as simple as inserting the following lines of logic.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;generate&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NUM_SONAR_ELEMENTS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ADD_ENABLES&lt;/span&gt;

		&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;o_tx_control&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// This is an FPGA, initial works&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tx_enabled&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;o_tx_control&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;o_tx_control&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;int_tx_control&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;endgenerate&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;That was the easy part.&lt;/p&gt;

&lt;p&gt;Now let’s put this problem into a broader context: This design has a
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;, memory,
many controllers,
&lt;a href=&quot;/blog/2017/06/08/simple-scope.html&quot;&gt;scopes&lt;/a&gt;,
etc.  Every peripheral within the design has its own &lt;a href=&quot;/zipcpu/2019/09/03/address-assignment.html&quot;&gt;address
assignments&lt;/a&gt;.
There’s also an
&lt;a href=&quot;/blog/2019/07/17/crossbar.html&quot;&gt;interconnect&lt;/a&gt;, the
responsible for routing requests from their sources to the peripherals being
referenced.  Putting something new like this together will require allocating
a new address for a new peripheral register.  That peripheral will then need
to be added to the
&lt;a href=&quot;/blog/2019/07/17/crossbar.html&quot;&gt;interconnect&lt;/a&gt;, the
&lt;a href=&quot;/blog/2019/07/17/crossbar.html&quot;&gt;interconnect&lt;/a&gt;,
will need to be reconfigured for the &lt;a href=&quot;/zipcpu/2019/09/03/address-assignment.html&quot;&gt;new address
map&lt;/a&gt;, and
then all the software will need to be adjusted for any addresses that had to
change during this process and so on.&lt;/p&gt;

&lt;p&gt;That’s a lot of work.&lt;/p&gt;

&lt;p&gt;Oh, and did I mention I wasn’t using Vivado’s IP integrator?  Nor was I using
their AXI &lt;a href=&quot;/blog/2019/07/17/crossbar.html&quot;&gt;interconnect&lt;/a&gt;?
(I was using &lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone&lt;/a&gt;.
I could’ve used AXI, I just chose not to.)&lt;/p&gt;

&lt;p&gt;Using &lt;a href=&quot;https://github.com/ZipCPU/autofpga&quot;&gt;AutoFPGA&lt;/a&gt;, we had all this work
done in less than a half an hour.  When you consider that Vivado took about
half of that time for synthesis and implementation (I wasn’t counting at the
time), this may be even more impressive.&lt;/p&gt;

&lt;h2 id=&quot;audio-and-video&quot;&gt;Audio and Video&lt;/h2&gt;

&lt;p&gt;In the end, neither the brand new audio nor the video capabilities were tested
during this bringup week.  That’s kind of a shame, so I figured I’d at least
discuss some pictures of what the video might look like in
&lt;a href=&quot;/blog/2018/08/22/what-is-simulation.html&quot;&gt;simulation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Fig. 4, back in the beginning of the article, shows one such falling raster.
In this figure, frequency goes from left to right, and the displayed image
scrolls from the top down.  The source is an artificially
generated test tone, generated internal to the system.  At several points
during the
&lt;a href=&quot;/blog/2018/08/22/what-is-simulation.html&quot;&gt;simulation&lt;/a&gt;,
I adjusted the tone’s frequency, and you can see these adjustments in the image.&lt;/p&gt;

&lt;p&gt;Similarly, Fig. 5 shows a split screen, with a trace on top and the falling
raster below.  Note how the frequency axes are identical, so that the trace
sits nicely on top of the raster, with the raster showing how the trace had
adjusted over time.&lt;/p&gt;

&lt;p&gt;I suppose it’s a good thing the video outputs didn’t get tested.  They didn’t
work in
&lt;a href=&quot;/blog/2018/08/22/what-is-simulation.html&quot;&gt;simulation&lt;/a&gt;,
until the end of the week.  Below, for example, is a bug
that locked up the Video source selector.  (Remember, I had five video sources,
each generating video signals, and so I need a selector in the system somewhere
to select between which one would be displayed.)&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HLAST&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;VLAST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This was just a &lt;a href=&quot;/blog/2021/08/28/axi-rules.html&quot;&gt;basic AXI
bug&lt;/a&gt;.  The correct
condition should have read:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;READY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This is just a &lt;a href=&quot;/blog/2021/08/28/axi-rules.html&quot;&gt;basic AXI stream handling
rule&lt;/a&gt;.  I should’ve known
better, and so I’m kicking myself for having made it.  The good news, of
course, is that this bug was easily found with just a touch of formal methods.&lt;/p&gt;

&lt;p&gt;Perhaps I’ll have a chance to show off these (now working) video capabilities
during our next hardware test.&lt;/p&gt;

&lt;h2 id=&quot;conclusions&quot;&gt;Conclusions&lt;/h2&gt;

&lt;p&gt;So, what can we learn from the week and the preparation leading up to it?
Let’s see if we can draw some conclusions.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Expect failures–even in hardware.  Plan for them.  Give yourself time,
ahead of time, to find and fix failures.&lt;/p&gt;

    &lt;p&gt;While it sounds weird, I like to put it as, “Fail early, fail often.”&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;/blog/2018/08/22/what-is-simulation.html&quot;&gt;Simulate&lt;/a&gt; all
major interfaces!  I lost a lot of preparation time believing that my
network interfaces “just worked”, simply because I hadn’t bit the bullet and
built a proper network
&lt;a href=&quot;/blog/2018/08/22/what-is-simulation.html&quot;&gt;simulation&lt;/a&gt;
model first.  Once I had that model, debugging the network got easy, and
my bug-to-fix times got a lot faster.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;For all of my simulation work using the packet to
&lt;a href=&quot;https://en.wikipedia.org/wiki/User_Datagram_Protocol&quot;&gt;UDP&lt;/a&gt; converter,
nothing managed to catch the actual bugs I was encountering in hardware.
I would’ve had to trigger the 
&lt;a href=&quot;/blog/2022/02/23/axis-abort.html&quot;&gt;abort&lt;/a&gt; on just the
right input sample to trigger this, and I had no idea (before finding the
bug using formal methods) how I might’ve set up the simulation to stimulate
the bug.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;It’s a lot easier to find bugs using formal methods than it is to &lt;a href=&quot;/blog/2017/06/02/design-process.html&quot;&gt;find
them in hardware&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Frankly, if it’s not been formally verified, I don’t trust it.  Remember
Fig. 13?  The last two items in that processing chain to get formally
verified were the last two items with bugs in them.  Of those two, the one
item that was the hardest to formally verify turned out to be the last item
in the design with a difficult bug to chase down.  Once formally verified,
however, it worked like a charm.&lt;/p&gt;

    &lt;p&gt;This isn’t to say that every formally verified module &lt;a href=&quot;/formal/2020/06/12/four-keys.html&quot;&gt;worked the first
time&lt;/a&gt;.  Rather, not
every formal proof I ran was sufficient to guarantee proper functionality
the first time.  The proofs got better the longer I worked with each of the
individual components of the design.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Yes, it is possible to formally verify a linked list.  I wish I had
formally verified the &lt;em&gt;pkt2udp&lt;/em&gt; module earlier–it would’ve saved me a lot
of head scratching during the weeks leading up to my travels.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Document your interfaces!&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The sooner you move to the “staging” area, the sooner you can debug your
chosen travel hardware.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Plan early on for how you will debug a design.  Adding the (unused) Audio
and Video capability into the design late in the game took a lot of my
time and – we never got to testing either of those interfaces.  (We
might’ve started testing with them sooner, if I arrived with more confidence
in their functionality–but that’s another story.)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;With a little focus, you can get a lot of work done on &lt;a href=&quot;https://www.amtrak.com/auto-train&quot;&gt;Amtrak’s auto
   train&lt;/a&gt;, while still bringing whatever
   hardware you might need.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;While I didn’t discuss this one above, here was another lesson learned: If
   you have a complicated condition, and two or more things depend upon it,
   create a common signal to capture that condition for both pieces of logic.
   In my case, I had a condition for when a received packet should be generated.
   That condition was repeated in two different locations of the same module.
   Among other things, it checked how much space was available in the buffer.
   I then updated the condition to help guarantee sufficient space was
   available, but only updated it in one location–not both.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This was the bug in Fig. 13, and one I found when I finally formally
   verified the data packet generator.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Looking over all the bugs I found, I seem to have traced several to the
   boundaries between formally verified components–at a place where things
   weren’t verified.  I’ll have to think about this some more.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Finally, while I can be critical of others making basic mistakes, I made
   plenty myself.  I think the worst one I found was checking for
   &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;!VALID || VALID&lt;/code&gt; when what I wanted to be checking for was
   &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;!VALID || READY&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Let me leave you with a final thought from the first verses of Psalm one,
a Psalm I’ve started to make a habit of reciting to myself on trips like
this one:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Blessed is the man that walketh not in the counsel of the ungodly, nor
  standeth in the way of sinners, nor sitteth in the seat of the scornful. 
But his delight is in the law of the LORD; and in his law doth he meditate
  day and night. 
And he shall be like a tree planted by the rivers of water, that bringeth
  forth his fruit in his season; his leaf also shall not wither; and
  whatsoever he doeth shall prosper.&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://www.blueletterbible.org/kjv/psa/1&quot;&gt;Ps 1:1-3&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;May God bless you all.&lt;/p&gt;
&lt;hr /&gt;&lt;p&gt;&lt;em&gt;And unto Adam he said, Because thou hast hearkened unto the voice of thy wife, and hast eaten of the tree, of which I commanded thee, saying, Thou shalt not eat of it: cursed is the ground for thy sake; in sorrow shalt thou eat of it all the days of thy life (Gen 3:17)&lt;/em&gt;</description>
        <pubDate>Fri, 29 Apr 2022 00:00:00 -0400</pubDate>
        <link>https://zipcpu.com/blog/2022/04/29/proto-bringup.html</link>
        <guid isPermaLink="true">https://zipcpu.com/blog/2022/04/29/proto-bringup.html</guid>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>Rethinking Video with AXI video streams</title>
        <description>&lt;p&gt;So far on this blog, I’ve really only shared &lt;a href=&quot;/blog/2018/11/29/llvga.html&quot;&gt;one video
article&lt;/a&gt;.
&lt;a href=&quot;/blog/2018/11/29/llvga.html&quot;&gt;This article&lt;/a&gt;
discussed how to generate the frame synchronization signals sufficient
to drive a VGA controller.  It also demonstrated a video simulation capability
that has been very useful to me when working with video.&lt;/p&gt;

&lt;p&gt;Since then, I’ve had the opportunity to build several new video modules.  These
include an &lt;a href=&quot;https://github.com/ZipCPU/vgasim/blob/5853a4b46f13fa073bc51c999a4a90ca02d4fd20/rtl/axivcamera.v&quot;&gt;AXI video capture device (frame grabber)&lt;/a&gt;,
an &lt;a href=&quot;https://github.com/ZipCPU/vgasim/blob/5853a4b46f13fa073bc51c999a4a90ca02d4fd20/rtl/axivdisplay.v&quot;&gt;AXI frame buffer&lt;/a&gt;,
an &lt;a href=&quot;https://github.com/ZipCPU/vgasim/blob/5853a4b46f13fa073bc51c999a4a90ca02d4fd20/rtl/gfx/vid_empty.v&quot;&gt;empty AXI video source&lt;/a&gt;,
an &lt;a href=&quot;https://github.com/ZipCPU/vgasim/blob/5853a4b46f13fa073bc51c999a4a90ca02d4fd20/rtl/axissprite.v&quot;&gt;AXI stream sprite module&lt;/a&gt;,
and even a (not yet tested) &lt;a href=&quot;https://github.com/ZipCPU/vgasim/blob/5853a4b46f13fa073bc51c999a4a90ca02d4fd20/rtl/axisvoverlay.v&quot;&gt;overlay module&lt;/a&gt;
to overlay one AXI video stream on top of another.  More recently, I’ve
expanded this work with a &lt;a href=&quot;https://github.com/ZipCPU/vgasim/blob/5853a4b46f13fa073bc51c999a4a90ca02d4fd20/rtl/gfx/vid_trace.v&quot;&gt;data plotting
capability&lt;/a&gt;,
a &lt;a href=&quot;https://github.com/ZipCPU/vgasim/blob/5853a4b46f13fa073bc51c999a4a90ca02d4fd20/rtl/gfx/vid_histogram.v&quot;&gt;histogram capture and plot
capability&lt;/a&gt;,
and (once its tested and works) a &lt;a href=&quot;https://github.com/ZipCPU/vgasim/blob/5853a4b46f13fa073bc51c999a4a90ca02d4fd20/rtl/gfx/vid_waterfall.v&quot;&gt;waterfall display for a
spectrogram&lt;/a&gt;.  &lt;a href=&quot;https://www.blueletterbible.org/kjv/jas/4/15&quot;&gt;Should the Lord
will&lt;/a&gt;, I’d also like to
demonstrate a half-spectrogram/half-waterfall display, but that one has
(yet) to be implemented.  (It shouldn’t be too hard to make, given
&lt;a href=&quot;/dsp/2018/10/02/fft.html&quot;&gt;my FFT&lt;/a&gt;
and the components above …)&lt;/p&gt;

&lt;p&gt;Along the way, I’ve learned a lot, and thought I might write to share some
of these lessons.&lt;/p&gt;

&lt;p&gt;Before diving in, however, I’d like to mention 
&lt;a href=&quot;https://twitter.com/WillFlux&quot;&gt;Will Green&lt;/a&gt;’s &lt;a href=&quot;https://projectf.io/posts/fpga-graphics&quot;&gt;FPGA Graphics
blogs&lt;/a&gt;.
He discusses not only the &lt;a href=&quot;https://projectf.io/posts/fpga-graphics/&quot;&gt;graphics sync
timing&lt;/a&gt;, but goes on to discuss
&lt;a href=&quot;https://projectf.io/posts/fpga-pong/&quot;&gt;pong&lt;/a&gt;,
&lt;a href=&quot;https://projectf.io/posts/hardware-sprites/&quot;&gt;sprites&lt;/a&gt;,
&lt;a href=&quot;https://projectf.io/posts/fpga-ad-astra/&quot;&gt;star fields&lt;/a&gt;,
&lt;a href=&quot;https://projectf.io/posts/framebuffers/&quot;&gt;frame buffers&lt;/a&gt;,
&lt;a href=&quot;https://projectf.io/posts/lines-and-triangles/&quot;&gt;lines, triangles&lt;/a&gt;,
&lt;a href=&quot;https://projectf.io/posts/fpga-shapes/&quot;&gt;arbitrary 2D shapes&lt;/a&gt; and
&lt;a href=&quot;https://projectf.io/posts/animated-shapes/&quot;&gt;animations&lt;/a&gt;.  I’ve read several
of these posts, and would love to commend them to you here.  Indeed, I expect
I’ll be digging even deeper into some of his blogs, to see how he accomplishes
his various tasks.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://twitter.com/WillFlux&quot;&gt;Will Green&lt;/a&gt;’s graphics blog series, however,
follows the form of much of &lt;a href=&quot;/blog/2018/11/29/llvga.html&quot;&gt;my earlier graphics
work&lt;/a&gt;.  Since then I’ve come
across &lt;a href=&quot;/blog/2021/08/28/axi-rules.html&quot;&gt;AXI handshaking&lt;/a&gt;,
and realized it solves a lot of the problems I’ve had with video in the past.&lt;/p&gt;

&lt;p&gt;Let’s start, therefore, with some of the problems I’ve struggled with.  We’ll
move from there to discuss the AXI video stream protocol, and then some &lt;a href=&quot;https://github.com/ZipCPU/vgasim/blob/5853a4b46f13fa073bc51c999a4a90ca02d4fd20/bench/formal/faxivideo.v&quot;&gt;formal
properties&lt;/a&gt;
you can use when working with video to get things going properly.&lt;/p&gt;

&lt;h2 id=&quot;video-problems&quot;&gt;Video Problems&lt;/h2&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 1. Simulated Video Framebuffer&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/vgasim.png&quot; alt=&quot;&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;When I last &lt;a href=&quot;/blog/2018/11/29/llvga.html&quot;&gt;demonstrated and discussed
video&lt;/a&gt;, I used three global
signals for pipeline control: Read, Newline, and NewFrame.  Together, they
generated a rough &lt;a href=&quot;/blog/2017/08/14/strategies-for-pipelining.html&quot;&gt;“global-CE” pipeline control
mechanism&lt;/a&gt;
Using these three signals, I was able to generate and demonstrate a proper
&lt;a href=&quot;https://github.com/ZipCPU/vgasim/blob/master/rtl/wbvgaframe.v&quot;&gt;frame buffer&lt;/a&gt;,
which could draw an arbitrary image to a screen–even in simulation.
(See Fig. 1) Of these three signals, the read signal was not all that unlike
&lt;a href=&quot;https://twitter.com/WillFlux&quot;&gt;Will Green&lt;/a&gt;’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;de&lt;/code&gt;, or “data enable” signal as
he calls it.  Indeed, they were both &lt;a href=&quot;/blog/2017/08/14/strategies-for-pipelining.html&quot;&gt;“global-CE” pipeline control
signals&lt;/a&gt;.
The biggest difference was that my VGA outputs were registered, vs. his
were combinatorial outputs.  (Not a big difference, unless you see a
performance impact.)  When my read signal was high, the low level graphics
driver was reading a pixel from its environment.  When his &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;de&lt;/code&gt; signal is
high, the low level graphics driver is producing a pixel to the VGA port.&lt;/p&gt;

&lt;p&gt;Unfortunately, those three signals proved insufficient for my needs, and much
of my personal video development stagnated for a while as a result.&lt;/p&gt;

&lt;p&gt;Why was that?&lt;/p&gt;

&lt;p&gt;Well, basically, there are several challenges associated with building video
that aren’t necessarily present in other types of RTL design.&lt;/p&gt;
&lt;table align=&quot;center&quot; style=&quot;float: left; padding: 25px;&quot;&gt;&lt;caption&gt;Fig 2. Video Challenges&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/video/video-challenges.svg&quot; alt=&quot;&quot; width=&quot;420&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;These challenges are outlined in Fig. 2.  We’ll discuss them briefly here.&lt;/p&gt;

&lt;p&gt;The first problem is that a full size, full colour, frame buffer will not
(often) fit into memory.  &lt;a href=&quot;https://twitter.com/WillFlux&quot;&gt;Will Green&lt;/a&gt;
manages to make &lt;a href=&quot;https://projectf.io/posts/framebuffers/&quot;&gt;his frame buffer fit in
RAM&lt;/a&gt; fit by restricting his video
to 640x480, and his color to a single bit.  This won’t work if you want full
color, or a 1920x1280 resolution–unless you have a &lt;em&gt;lot&lt;/em&gt; of block RAM on an
expensive chip.  (Even then, you’d have better things to use it on.)&lt;/p&gt;

&lt;p&gt;This will force you off chip, and generally into an external SDRAM of some
type.  This results in two consequences.  First, the SDRAM will have a specific
clock frequency that it will want to run at.  While this clock frequency may
match your pixel clock rate, that would be an unlikely but lucky break.
More often, the two rates will be different–especially since SDRAM’s don’t
support the wide range of pixel clock rates required by a robust video solution.
This will force you to use an &lt;a href=&quot;/blog/2018/07/06/afifo.html&quot;&gt;asynchronous
FIFO&lt;/a&gt; somewhere in your
design to move from the one clock rate to another.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right;&quot;&gt;&lt;caption&gt;Fig 3. Can you do video without a framebuffer?&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/video/basys3-challenge.svg&quot; alt=&quot;&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;The second consequence of going off chip is that you’ll need a bus protocol
of some type.
&lt;a href=&quot;/formal/2019/05/13/axifull.html&quot;&gt;AXI&lt;/a&gt;,
&lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;AXI-lite&lt;/a&gt;, and
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone&lt;/a&gt;
are all common bus protocols which
could work well for this purpose.  Why do you need a bus protocol?  First,
because of contention for the device.  Specifically, you’ll want to be able to
both adjust that memory and to use it for other purposes.  Second, it will
allow you to split your project’s development at a natural seam–allowing you
to use an SDRAM driver built by someone else–such as Xilinx’s memory interface
generator (MIG).  To make matters worse, bus timing and latency aren’t
necessarily predictable: your latency will depend on whether or not something
else is using the bus at the same time.  This means that you’ll want to use
high speed burst accesses to read/write video memory–getting on and off the
bus as fast as possible.&lt;/p&gt;

&lt;p&gt;Along the way, it doesn’t help that in many video processing applications, the
submodules have no control of the pixel clock rate, mode, or reset.  A video
source may change video modes, clock rate, height and width, at any time the
user presses a button up stream.  Everything downstream must just “still work”
under such eventualities.  Further, the CPU might reset the processing chain at
any time.  Again, things need to “just work”.&lt;/p&gt;

&lt;p&gt;The next problem with the
&lt;a href=&quot;/blog/2017/08/14/strategies-for-pipelining.html&quot;&gt;global-CE&lt;/a&gt;
approach to video signals is, how shall you deal with signals that require
multiple processing steps?  For example, what if you wish to place a sprite
on the video stream, but that sprite has more than one bit of alpha?  The
resulting pixel should have a value of:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;	&lt;span class=&quot;n&quot;&gt;output_red&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input_red&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alpha&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sprite_red&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alpha&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;output_green&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input_green&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alpha&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sprite_green&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alpha&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;output_blue&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input_blue&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alpha&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sprite_blue&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alpha&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This is likely to cost you a clock or two to calculate.  (&lt;a href=&quot;https://github.com/ZipCPU/vgasim/blob/5853a4b46f13fa073bc51c999a4a90ca02d4fd20/rtl/axissprite.v#L831-L866&quot;&gt;I used two in my
implementation.&lt;/a&gt;)
This would be in addition to &lt;a href=&quot;https://github.com/ZipCPU/vgasim/blob/5853a4b46f13fa073bc51c999a4a90ca02d4fd20/rtl/axissprite.v#L750-L752&quot;&gt;the clock required to look the sprite’s value up
from sprite memory&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In other words, while you can make video work with the single enable signal
approach, doing so will only get you so far before you’ll run into some
challenges that are more difficult to deal with.  Further, as we’ll see, the
components you will need to make it work tend not to be very portable.&lt;/p&gt;

&lt;p&gt;For all of these reasons, I’ve found the AXI Stream protocol to be a viable
alternative for moving video streams around within a design.&lt;/p&gt;

&lt;h2 id=&quot;axi-stream-video&quot;&gt;AXI Stream Video&lt;/h2&gt;

&lt;p&gt;We’ve discussed the &lt;a href=&quot;/blog/2021/08/28/axi-rules.html&quot;&gt;AXI stream
protocol&lt;/a&gt;
several times on this blog.  It’s a broadly applicable protocol for moving
data around on chip, albeit &lt;a href=&quot;/blog/2022/02/23/axis-abort.html&quot;&gt;leaving the developer with some
challenges&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;One advantage of AXI stream is &lt;a href=&quot;/blog/2021/08/28/axi-rules.html&quot;&gt;the handshaking
protocol&lt;/a&gt;.  Basically a
“source” (master) will set the VALID flag whenever it has data (i.e. one or
more pixels) available, and the “destination” (slave) will set the READY
flag when it is ready and able to receive data.&lt;/p&gt;

&lt;p&gt;As &lt;a href=&quot;/blog/2022/02/23/axis-abort.html&quot;&gt;we’ve discussed before&lt;/a&gt;,
there are two problems with this protocol: what
happens when the master produces data faster than the slave can accept it,
and what happens when the slave wants more data than the master can produce?
When it comes to video, this question is solved (in general) by the component
holding the clock source.  There are two possibilities here: the source
video can drive the clock, or the FPGA can generate a clock to drive video.&lt;/p&gt;

&lt;p&gt;If the timing source is an external video source signal, such as might be
produced by a camera or other video output device, then that device controls
the timing as shown in Fig. 4 below.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 4. Video source controls the timing&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/video/source-timing.svg&quot; alt=&quot;&quot; width=&quot;560&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;This can easily be accomplished using the AXI stream &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TVALID&lt;/code&gt; signal, but only
as long as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TREADY&lt;/code&gt; can be guaranteed high whenever &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TVALID&lt;/code&gt; is produced
by the &lt;a href=&quot;https://github.com/ZipCPU/vgasim/blob/5853a4b46f13fa073bc51c999a4a90ca02d4fd20/rtl/sync2stream.v&quot;&gt;AXI stream to video source
converter&lt;/a&gt;.
This becomes our first criteria of success: the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Back_pressure&quot;&gt;back pressure&lt;/a&gt;
can never be allowed to build up so much that the source data has nowhere to
go.  Where we to implement an &lt;a href=&quot;/blog/2022/02/23/axis-abort.html&quot;&gt;AXI ABORT
signal&lt;/a&gt;,
this is where it would be generated.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 5. Backpressure controls the timing&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/video/backpressure-time.svg&quot; alt=&quot;&quot; width=&quot;560&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;The other possibility, shown in Fig. 5 above, is that the pixel clock would be
generated internally within the FPGA, and thus the final converter–from &lt;a href=&quot;https://github.com/ZipCPU/vgasim/blob/5853a4b46f13fa073bc51c999a4a90ca02d4fd20/rtl/axisvga.v&quot;&gt;AXI
stream to VGA&lt;/a&gt;
(HDMI, or …  whatever)–would control timing via the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TREADY&lt;/code&gt; signal.  In
this case, the processing chain must guarantee that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TVALID&lt;/code&gt; will be true
whenever this final &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TREADY&lt;/code&gt; is high.&lt;/p&gt;

&lt;p&gt;I’ll come back and discuss synchronization some more in a moment.&lt;/p&gt;

&lt;p&gt;For now, let me point out that video requires two other signals: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TLAST&lt;/code&gt; and
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TUSER&lt;/code&gt;, as shown in Fig. 6 on the left.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left; padding: 25px;&quot;&gt;&lt;caption&gt;Fig 6. AXI Stream Video Signals&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/video/axisvideo.png&quot; alt=&quot;&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;According to &lt;a href=&quot;https://www.xilinx.com/support/documentation/ip_documentation/axi_videoip/v1_0/ug934_axi_videoIP.pdf&quot;&gt;Xilinx’s AXI4-Stream Video IP and System Design
Guide&lt;/a&gt;,
the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TLAST&lt;/code&gt; signal will be set on the last beat of any horizontal line–as an
“End-of-Line” (EOL) indication, whereas &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TUSER&lt;/code&gt; will be set on the first beat
of any frame as a “Start-of-Frame” (SOF) indication.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 7. AXI Stream TLAST and TUSER definitions&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/video/axis-last.png&quot; alt=&quot;&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;I’m sure that I’m not the first person to say this, but doesn’t that seem
backwards to you?  I mean, in every other AXI stream application protocol
I’ve seen, the beat following &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TLAST&lt;/code&gt; will be the beginning of a “new-packet”.
You can therefore use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TLAST&lt;/code&gt; to synchronize the entire protocol on that new
packet.  Even better, because &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TLAST&lt;/code&gt; takes place one cycle before the new
packet starts, you can use it as a reset signal if necessary–to reset any
packet processing counters to be ready for the next frame.  Likewise, if you
have a stream to memory copy ending at the end of a packet, shouldn’t that
copy end with the one and only &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TLAST&lt;/code&gt;?&lt;/p&gt;

&lt;p&gt;Let me therefore propose instead that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TLAST&lt;/code&gt; &lt;em&gt;should&lt;/em&gt; be set to the last pixel
in a &lt;em&gt;frame&lt;/em&gt;, not the last pixel in a line.  This would make &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TLAST&lt;/code&gt; an
“End-of-Frame” (EOF) indication.&lt;/p&gt;

&lt;p&gt;For comparison, Fig. 8 shows the difference of which pixel would be marked
with the “start-of-frame” (SOF) marker vs the “end-of-frame” (EOF) marker
that I would propose.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 8. AXI Stream Video Signals&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/video/eol-v-sof.svg&quot; alt=&quot;&quot; width=&quot;560&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Unfortunately, &lt;a href=&quot;https://dwanethomas.com/roman-chariots-and-the-space-shuttle/&quot;&gt;standards once built tend to last for a long, long
time&lt;/a&gt;.  The
AXI video stream standard may well be one of those standards at this time.
It’s for this reason that I’ve been building my IP to both rules: the standard,
and what I think should be the standard.  As a result, you’ll often find an
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OPT_TUSER_IS_SOF&lt;/code&gt;  parameter within my video IPs.  When set, the IP will
interpret the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TUSER&lt;/code&gt; signal as a start of frame signal, and when clear it
will interpret &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TUSER&lt;/code&gt; as a horizontal EOL signal–as shown in Fig. 7 above.&lt;/p&gt;

&lt;p&gt;This leaves one more issue to deal with when dealing with video: how should the
reset be handled?  As mentioned in Fig. 2 above, the video processing chain
may be reset separate from the global reset.  Worse, the video pixel clock
may be dropped at any time.  So … how shall this be dealt with?&lt;/p&gt;

&lt;p&gt;This leads to my next criteria of AXI video stream processing: Any video
processing component &lt;em&gt;must&lt;/em&gt; be able to handle partial frames, and
&lt;em&gt;resynchronize on the SOF (or EOF) marker independent of any reset which
may (or may not) be properly present&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Let’s summarize these AXI stream video rules, shall we?&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/ZipCPU/vgasim/blob/5853a4b46f13fa073bc51c999a4a90ca02d4fd20/rtl/sync2stream.v&quot;&gt;Sources&lt;/a&gt;
must generate TUSER/TLAST signals based upon the original synchronization
signals embedded in the source signals.  Any mode parameters required (porch
size, etc.) should be determined at runtime if possible.&lt;/p&gt;

    &lt;p&gt;Changing modes aren’t necessarily an error, although any mode changes should
be reported to the user.&lt;/p&gt;

    &lt;p&gt;The important rule here is that sources should generate an error for the 
user whenever they detect any &lt;a href=&quot;https://en.wikipedia.org/wiki/Back_pressure&quot;&gt;back
pressure&lt;/a&gt; they cannot handle.
(&lt;a href=&quot;https://github.com/ZipCPU/vgasim/blob/5853a4b46f13fa073bc51c999a4a90ca02d4fd20/rtl/sync2stream.v&quot;&gt;Mine&lt;/a&gt; doesn’t do this yet, but it will be a simple
enough upgrade.)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Processing components should resynchronize everything on every &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SOF&lt;/code&gt;/&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EOF&lt;/code&gt;
signal, whether or not it appears when it is expected or not.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Memory writing components, such as &lt;a href=&quot;https://github.com/ZipCPU/vgasim/blob/5853a4b46f13fa073bc51c999a4a90ca02d4fd20/rtl/axivcamera.v&quot;&gt;frame
grabbers&lt;/a&gt;, should guarantee that they do not write beyond
the end of any allocated memory–regardless of how they are (or are not)
synchronized.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Sinks must either:&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;
        &lt;p&gt;Generate their own &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TUSER&lt;/code&gt;/&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TLAST&lt;/code&gt; signals, and lock the incoming stream
to them.  In my designs, if an &lt;a href=&quot;https://github.com/ZipCPU/vgasim/blob/5853a4b46f13fa073bc51c999a4a90ca02d4fd20/rtl/axisvga.v#L143-L144&quot;&gt;out of sync condition is ever
detected&lt;/a&gt;,
&lt;a href=&quot;https://github.com/ZipCPU/vgasim/blob/5853a4b46f13fa073bc51c999a4a90ca02d4fd20/rtl/axisvga.v#L237-L238&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TREADY&lt;/code&gt; is held high until &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TVALID &amp;amp;&amp;amp; TLAST&lt;/code&gt;&lt;/a&gt;
(i.e. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TVALID &amp;amp;&amp;amp; EOF&lt;/code&gt;).
It’s then lowered until the sink is ready for the new frame’s data.  If
done well, the sink will always generate a reliable video signal &lt;em&gt;even if&lt;/em&gt;
an upstream component misbehaves.&lt;/p&gt;

        &lt;p&gt;In this case, the sink should generate an error if the incoming pixel
stream ever runs dry, such that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TREADY &amp;amp;&amp;amp; !TVALID&lt;/code&gt;.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Lock to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TUSER&lt;/code&gt;/&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TLAST&lt;/code&gt; signals provided by the upstream source.&lt;/p&gt;

        &lt;p&gt;In this case, the sink should also generate a notice to the system if
a resync is ever required.  Sometimes I’ll handle this via a “glitch
counter”.  Once the glitch counter stops incrementing, you know the
system has properly synchronized.&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ol&gt;

    &lt;p&gt;This leads to a processing system requirement that all processing components
must be able to process at least one more pixel per line than the protocol
requires (ideally more), in order to allow the processing component to
catch up with and thus synchronize with the sink.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Using these rules, we can now come back in a later post and build some AXI
video stream components.&lt;/p&gt;

&lt;h2 id=&quot;formal-video-properties&quot;&gt;Formal Video Properties&lt;/h2&gt;

&lt;p&gt;What would a ZipCPU article be without discussing formal verification?
So, before we leave let’s build a quick set of &lt;a href=&quot;https://github.com/ZipCPU/vgasim/blob/5853a4b46f13fa073bc51c999a4a90ca02d4fd20/bench/formal/faxivideo.v&quot;&gt;video interface
properties&lt;/a&gt;.
As you may recall, I think of &lt;a href=&quot;/formal/2020/06/12/four-keys.html&quot;&gt;formal interface files as if they were
gold&lt;/a&gt;.
Why?  Because a good formal interface property set can 1) verify both ends
of any link, 2) be re-used over and over, and 3) it can form a basis for the
beginning of any formal proof.  That is, if you have no other ideas of what
to put in your proof, you can always start with the interfaces.&lt;/p&gt;

&lt;p&gt;So, let’s do that today.&lt;/p&gt;

&lt;p&gt;Better yet, this &lt;a href=&quot;https://github.com/ZipCPU/vgasim/blob/5853a4b46f13fa073bc51c999a4a90ca02d4fd20/bench/formal/faxivideo.v&quot;&gt;property set&lt;/a&gt;
isn’t going to be all that complicated.  If you’ll remember, video (in general)
is &lt;a href=&quot;/blog/2018/11/29/llvga.html&quot;&gt;nothing more than a pair of
counters&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So, let’s quickly build an &lt;a href=&quot;https://github.com/ZipCPU/vgasim/blob/5853a4b46f13fa073bc51c999a4a90ca02d4fd20/bench/formal/faxivideo.v&quot;&gt;AXI Stream Video interface property
set&lt;/a&gt; before closing.&lt;/p&gt;

&lt;p&gt;We’ll parameterize this file by the number of bits per pixel, the number of
bits required to represent a screen position, and whether or not &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TUSER&lt;/code&gt; is
being used as a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SOF&lt;/code&gt; signal vs an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EOL&lt;/code&gt; signal.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;faxivideo&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;#(&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;parameter&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;PW&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;24&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;// Bits per pixel&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;parameter&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;LGDIM&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;parameter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;OPT_TUSER_IS_SOF&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
		&lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;			&lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_reset_n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;//&lt;/span&gt;
		&lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;			&lt;span class=&quot;n&quot;&gt;S_VID_TVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;			&lt;span class=&quot;n&quot;&gt;S_VID_TREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;S_VID_TDATA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;			&lt;span class=&quot;n&quot;&gt;S_VID_TLAST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;			&lt;span class=&quot;n&quot;&gt;S_VID_TUSER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;//&lt;/span&gt;
		&lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LGDIM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;i_width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;kt&quot;&gt;output&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;reg&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LGDIM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;o_xpos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o_ypos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;kt&quot;&gt;output&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;reg&lt;/span&gt;			&lt;span class=&quot;n&quot;&gt;f_known_height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;kt&quot;&gt;output&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;			&lt;span class=&quot;n&quot;&gt;o_hlast&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o_vlast&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o_sof&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Our property set will accept as an input all the wires associated with an AXI
video stream.  We’ll also accept the height and width of the frame as inputs.
These can either be known by your design, or arbitrary “anyconst” values.
For example, you could set up a pair of values within the formal property
section of any component, such as:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;c1&quot;&gt;// Anyconst value example (not part of the formal video property set)&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;anyconst&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;reg&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LGDIM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;f_width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;These values could then be passed to the &lt;a href=&quot;https://github.com/ZipCPU/vgasim/blob/5853a4b46f13fa073bc51c999a4a90ca02d4fd20/bench/formal/faxivideo.v&quot;&gt;interface property
set&lt;/a&gt;
as the “true” height and width of the video channel–even if your design
doesn’t know these values yet.&lt;/p&gt;

&lt;p&gt;Our first properties will be those of the basic AXI Stream.  These come in
two parts.  First, VALID should be low following any reset.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_past_valid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset_n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// We should work regardless of whether a user uses a reset&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// or not, and regardless of whether or not it is asynchronous.&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// Hence ... no property here--we'll catch it on the next clock&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// cycle.&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;($&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset_n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_VID_TVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Second, in the event of any &lt;a href=&quot;https://en.wikipedia.org/wiki/Back_pressure&quot;&gt;back
pressure&lt;/a&gt;,
the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TDATA&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TLAST&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TUSER&lt;/code&gt; signals should be held constant.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;($&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_VID_TVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_VID_TREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_VID_TVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;($&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;stable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_VID_TDATA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;($&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;stable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_VID_TLAST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;($&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;stable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_VID_TUSER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Note that this wouldn’t really apply to a video &lt;a href=&quot;https://github.com/ZipCPU/vgasim/blob/5853a4b46f13fa073bc51c999a4a90ca02d4fd20/rtl/sync2stream.v&quot;&gt;source&lt;/a&gt;,
since buffer space is limited–as I mentioned above.  But we’ll pretend it
applies uniformly either way.&lt;/p&gt;

&lt;p&gt;These &lt;em&gt;assertions&lt;/em&gt; might also violate my rule of only making assertions about
outputs and any internal signals, should you wish to apply this to an
AXI stream coming into an IP.  In that case, you’ll need to either modify
these to turn them into assumptions, or create another set of assumptions
within your IP to match these.&lt;/p&gt;

&lt;p&gt;Once we know that the stream is a proper AXI stream, we can then calculate the
current position of the pixel within that stream.  These position values may
then be used by the IP instantiating the property set, or not.  Your call.&lt;/p&gt;

&lt;p&gt;On any reset, the position resets to zero–i.e. to the top left of the screen.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;o_xpos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;o_ypos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;f_known_height&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset_n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_xpos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_ypos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;f_known_height&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Then, on any new pixel, the video signals advance.  The horizontal position
will advance from left to right up to the end of the line, and then it will be
reset back to the beginning of the line–the left side.  The vertical position
will also advance from the top downward, although only at the end of every
line, up until the full height of the screen before getting reset.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_VID_TVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_VID_TREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// Advance the horizontal X position, from left to right&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_xpos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;o_xpos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;o_xpos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o_xpos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_xpos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;// New line.  Advance the vertical Y position, from&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;// top to bottom&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_ypos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;o_ypos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;f_known_height&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;o_ypos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o_ypos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Remember when I said video is just a &lt;a href=&quot;/blog/2018/11/29/llvga.html&quot;&gt;pair of
counters&lt;/a&gt;?  Here you can see
the two counters for an AXI video stream.  The cool thing is that you can
now use these two counters to verify the logic within your IP.&lt;/p&gt;

&lt;p&gt;There is one new piece to these counters: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;f_known_height&lt;/code&gt;.  I use this to
verify an IP that needs to discover the height of the incoming frame.  Once
the first frame has passed, that is once the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EOF&lt;/code&gt; has been received,
the height can now be known.  This can then be used with an assertion that
any recovered video height has the correct value.&lt;/p&gt;

&lt;p&gt;From here, I can generate three more signals: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HLAST&lt;/code&gt; (EOL), &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VLAST&lt;/code&gt; (last
line), and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SOF&lt;/code&gt; (start of frame).  Once you have the screen position, together
with the width and height of the screen, these signals become easy to define.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;o_hlast&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_xpos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_width&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;o_vlast&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_ypos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_height&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;o_sof&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_xpos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o_ypos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Further, we’ll want to make certain any incoming height or width are reasonable.
The minimum video size, at least for this property set, is a 3x3 window.
(Small sizes are good, especially if they can be used to make formal
proofs run faster …) In general, the video size should be held
constant–although we’ll allow it to change during any reset.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_past_valid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset_n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_reset_n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;($&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;stable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;($&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;stable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;

		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_sof&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_VID_TVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;assume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_width&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;assume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_height&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;No, this isn’t quite as robust as my “rules” for video processing above.
If you’ll remember, I argued above that video components needing height or
width would need to derive them and re-derive them if they ever changed.  This
assumption guarantees they’ll never change outside of a reset, so the
properties might leave you blind in that eventuality.  That won’t stop you
from building a good design, but it might keep the tool from catching any
bugs within it–depending on how you use these values.&lt;/p&gt;

&lt;p&gt;Now that we know our position on the screen, we can run a quick check to make
sure our formal output counters match the actual height and width of the
display as they are given to us.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_past_valid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset_n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_reset_n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_xpos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_ypos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;That leaves us only two more signals to verify: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TLAST&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TUSER&lt;/code&gt;.
How we verify these will depend upon whether we are requiring &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TUSER&lt;/code&gt; to
represent the start of frame, or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TLAST&lt;/code&gt; representing the end of the frame.
Both will work–depending on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OPT_TUSER_IS_SOF&lt;/code&gt; parameter.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_past_valid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_reset_n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset_n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_VID_TVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OPT_TUSER_IS_SOF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_VID_TLAST&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o_hlast&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_known_height&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_VID_TUSER&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o_sof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TUSER&lt;/code&gt; represents the start of the frame, then it should match the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;o_sof&lt;/code&gt;
signal and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TLAST&lt;/code&gt; should match our end-of-line signal &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;o_hlast&lt;/code&gt;.  You might
notice that I have made an exception here to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TUSER&lt;/code&gt; rule.  That’s to allow
conversions between the two protocols.  In other words, an initial frame can
have its lines counted before needing to set &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TUSER&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Reading this over now, I should note that &lt;a href=&quot;https://www.xilinx.com/support/documentation/ip_documentation/axi_videoip/v1_0/ug934_axi_videoIP.pdf&quot;&gt;Xilinx’s
guide&lt;/a&gt;
would require that no pixels should be output prior to the first SOF.  I
have yet to enforce this rule within my designs.  Enforcing it here would
simply mean dropping the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;f_known_height&lt;/code&gt; requirement from this assertion.&lt;/p&gt;

&lt;p&gt;Returning back to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OPT_TUSER_IS_SOF&lt;/code&gt;, if &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TUSER&lt;/code&gt; is not a start of frame
signal, then (in my version of the AXI video stream protocol)
we’ll assert that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TLAST&lt;/code&gt; is the end of frame signal and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TUSER&lt;/code&gt; the end of
line signal.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_VID_TLAST&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_vlast&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o_hlast&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_VID_TUSER&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o_hlast&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;endmodule&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;No, there’s not much more to this property set.  There doesn’t need to be.
Your design might need more properties, but at least this will give you some
starting ones to work with.&lt;/p&gt;

&lt;h2 id=&quot;conclusions&quot;&gt;Conclusions&lt;/h2&gt;

&lt;p&gt;The more I’ve been working with AXI video streams, the more I’ve enjoyed using
the AXI stream video protocol.  It’s much more versatile than &lt;a href=&quot;/blog/2018/11/29/llvga.html&quot;&gt;my own
protocol&lt;/a&gt;,
and the &lt;a href=&quot;https://en.wikipedia.org/wiki/Back_pressure&quot;&gt;back pressure&lt;/a&gt;
feature solves the problem of how to synchronize multiple components in a
pipeline together nicely.  Even better, by pushing the stream signals,
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TLAST&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TUSER&lt;/code&gt;, through the pipeline from the source, we solve the
problems associated with generating these signals at the end of the pipeline
where they quickly get out of sync.&lt;/p&gt;

&lt;p&gt;Now with this background, I should be able to come back and discuss how to
build a &lt;a href=&quot;https://github.com/ZipCPU/vgasim/blob/5853a4b46f13fa073bc51c999a4a90ca02d4fd20/rtl/axissprite.v&quot;&gt;hardware sprite
capability&lt;/a&gt;.
&lt;a href=&quot;https://www.blueletterbible.org/kjv/jas/4/15&quot;&gt;Lord willing&lt;/a&gt;,
that can be the next article in this series.&lt;/p&gt;

&lt;hr /&gt;&lt;p&gt;&lt;em&gt;For a just man falleth seven times, and riseth up again: but the wicked shall fall into mischief. (Prov 24:16)&lt;/em&gt;</description>
        <pubDate>Mon, 14 Mar 2022 00:00:00 -0400</pubDate>
        <link>https://zipcpu.com/video/2022/03/14/axis-video.html</link>
        <guid isPermaLink="true">https://zipcpu.com/video/2022/03/14/axis-video.html</guid>
        
        
        <category>video</category>
        
      </item>
    
      <item>
        <title>AXI Stream is broken</title>
        <description>&lt;p&gt;There, I said it.  One of the simplest and most useful AXI protocols,
&lt;a href=&quot;/doc/axi-stream.pdf&quot;&gt;AXI Stream&lt;/a&gt;, is fundamentally flawed.&lt;/p&gt;

&lt;p&gt;Let’s quickly review AXI Stream, and then I’ll tell you what I mean by saying
the protocol is broken.  Then I’ll propose a method of fixing at least part
of the problem.&lt;/p&gt;

&lt;h2 id=&quot;what-is-axi-stream&quot;&gt;What is AXI Stream?&lt;/h2&gt;

&lt;p&gt;We’ve discussed &lt;a href=&quot;/doc/axi-stream.pdf&quot;&gt;AXI Stream&lt;/a&gt;s
a couple of times on this blog already, most recently when discussing the basic
&lt;a href=&quot;/blog/2021/08/28/axi-rules.html&quot;&gt;AXI handshaking rules&lt;/a&gt;.
As a quick background, &lt;a href=&quot;/doc/axi-stream.pdf&quot;&gt;AXI Stream&lt;/a&gt;
is a protocol that can be useful for transferring &lt;em&gt;stream&lt;/em&gt; data around within
a chip.  Unlike &lt;em&gt;memory&lt;/em&gt; data, there’s no address associated with stream
data–it’s just a stream of information.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 1. AXI stream signals&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/slave-rules/axis-signals.png&quot; alt=&quot;&quot; width=&quot;302&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;But how fast shall the stream run?  As fast as it can be produced, or as
fast as it can be consumed?  This is determined by a pair of values:
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TVALID&lt;/code&gt;, indicating that the data in the stream is valid on the current clock
cycle and produced by the source (master), and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TREADY&lt;/code&gt;, indicating that
the consumer (slave) is prepared to accept data.  Whenever &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TVALID &lt;/code&gt;and
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TREADY&lt;/code&gt; are both true, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TDATA&lt;/code&gt; moves through the stream.&lt;/p&gt;

&lt;p&gt;A third signal is also very useful, and that is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TLAST&lt;/code&gt;.  The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TLAST&lt;/code&gt; signal
can be used to create &lt;em&gt;packets&lt;/em&gt; of data, having beginning and ending.
The packet ends when &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TLAST&lt;/code&gt; is true, and begins on the first &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TVALID&lt;/code&gt; signal
following the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TLAST&lt;/code&gt; signal.&lt;/p&gt;

&lt;p&gt;The stream standard also defines such signals as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TID&lt;/code&gt; (an ID for a packet),
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TDEST&lt;/code&gt; (the packet’s destination), &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TSTRB&lt;/code&gt; (which bytes have valid
information), and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TKEEP&lt;/code&gt; (which bytes in a stream cannot be removed), but I
have personally only rarely seen uses for these.  The one exception is the
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TUSER&lt;/code&gt; field which comes nicely into play in video streams–but I digress.&lt;/p&gt;

&lt;p&gt;There’s one other important term you need to know:
&lt;a href=&quot;https://en.wikipedia.org/wiki/Back_pressure&quot;&gt;&lt;em&gt;backpressure&lt;/em&gt;&lt;/a&gt;.
&lt;a href=&quot;https://en.wikipedia.org/wiki/Back_pressure&quot;&gt;Backpressure&lt;/a&gt; is what’s created when
the source is ready to send data, that is when &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TVALID&lt;/code&gt; is true, but the
consumer isn’t ready to receive it and so &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TREADY&lt;/code&gt; is false.  Under the
&lt;a href=&quot;/doc/axi-stream.pdf&quot;&gt;AXI Stream&lt;/a&gt; protocol, there’s no limit
to how much &lt;a href=&quot;https://en.wikipedia.org/wiki/Back_pressure&quot;&gt;backpressure&lt;/a&gt;
a slave may impose on any stream.&lt;/p&gt;

&lt;p&gt;And herein lies my complaint.&lt;/p&gt;

&lt;h2 id=&quot;whats-wrong-with-axi-stream&quot;&gt;What’s wrong with AXI Stream?&lt;/h2&gt;

&lt;p&gt;There are three basic types of stream components, and realistically
&lt;a href=&quot;/doc/axi-stream.pdf&quot;&gt;AXI Stream&lt;/a&gt; only works for one of
these three.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 2. AXI stream doesn't capture hard real-time requirements well&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/axis-abort/axis-pipeline.svg&quot; alt=&quot;&quot; width=&quot;780&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Sources&lt;/strong&gt;.  Most of the physical data sources I’ve come across produce
data at a fixed and known rate.  Examples of these sources include:&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Analog-to-digital_converter&quot;&gt;Analog to Digital converters&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;Network PHYs&lt;/li&gt;
      &lt;li&gt;Digital cameras&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;In all three of three of these examples, data comes whether you are ready
for it or not.  What then happens if &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TVALID&lt;/code&gt; is true, from the source, but
the processing stream isn’t ready to handle it?  i.e. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TREADY&lt;/code&gt; is low?
Where does the data go?&lt;/p&gt;

    &lt;p&gt;As an example, &lt;a href=&quot;/dsp/dsp.html&quot;&gt;some of the filters we’ve created on this
blog&lt;/a&gt; can only accept one data sample every
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;N&lt;/code&gt; samples (for some arbitrary &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;N&lt;/code&gt;).  What happens if you choose to feed
the filter with data arriving at faster than one sample every &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;N&lt;/code&gt; clock
cycles?&lt;/p&gt;

    &lt;p&gt;Let’s call this the &lt;em&gt;over-energetic source&lt;/em&gt; problem for lack of a better
term, and it is a problem.  In general, there is no way to detect an
over-energetic source from within the protocol  As a result, there is no
protocol compliant way to handle this situation.  Given a sufficient amount
of &lt;a href=&quot;https://en.wikipedia.org/wiki/Back_pressure&quot;&gt;backpressure&lt;/a&gt;,
data will simply be dropped in a non-protocol compliant fashion.  There’s
really no other choice.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left; padding: 25px&quot;&gt;&lt;caption&gt;Fig 3. There are always real-time requirements&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/axis-abort/real-time.svg&quot; alt=&quot;&quot; width=&quot;420&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;ol start=&quot;2&quot;&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Processing components&lt;/strong&gt;.  These are neither sources nor sinks, and in
today’s taxonomy, I shall arbitrarily declare that they have no real time
requirement.  In these cases, the
&lt;a href=&quot;/doc/axi-stream.pdf&quot;&gt;AXI Stream&lt;/a&gt; protocol can be a
really good fit.&lt;/p&gt;

    &lt;p&gt;A good example of such processing components would include data processing
engines.  Perhaps some seismic data was recorded a couple of years ago
and you wish to process it in an FPGA today.  In this case, there’s may be
neither explicit latency nor throughput requirements.  The data stream can
move through the system as fast as the hardware algorithm will allow it.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Sinks&lt;/strong&gt;.  Here you have the second problem: most sinks need to interact
with physical hardware at a known rate.  Corollaries to the examples above
form good examples here as well:&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital-to-analog_converter&quot;&gt;Digital to analog converters&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;Network PHYs&lt;/li&gt;
      &lt;li&gt;Video monitors&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;What happens in these cases if it’s time to produce a sample, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TREADY&lt;/code&gt; is
true to accept that sample, but &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TVALID&lt;/code&gt; is not?  That is, data is required
but there’s no data to be had?  We might call this the &lt;em&gt;sluggish source&lt;/em&gt;
problem for the sake of a discussion, although the condition itself is
often called a &lt;a href=&quot;https://en.wikipedia.org/wiki/Buffer_underrun&quot;&gt;buffer
underrun&lt;/a&gt;.&lt;/p&gt;

    &lt;p&gt;As with the first situation, there’s really no protocol compliant way of
handling this situation.&lt;/p&gt;

    &lt;p&gt;Unlike the first situation, however, a sink can often detect this situation
(!&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TVALID &amp;amp; READY&lt;/code&gt;) and handle it in an application specific manner.  For
example, a &lt;a href=&quot;https://en.wikipedia.org/wiki/Digital-to-analog_converter&quot;&gt;DAC&lt;/a&gt;
might replicate the last output value and raise an error flag.  A network
PHY might simply terminate the packet early–without any
&lt;a href=&quot;https://en.wikipedia.org/wiki/Cyclic_redundancy_check&quot;&gt;CRC&lt;/a&gt;, and so cause
the receiver to drop the packet.  A video stream might blank to black, and
then wait for the next frame to resynchronize.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;From this list, you can see that two of the three
&lt;a href=&quot;/doc/axi-stream.pdf&quot;&gt;AXI Stream&lt;/a&gt; component types can’t
handle the raw &lt;a href=&quot;/doc/axi-stream.pdf&quot;&gt;AXI Stream&lt;/a&gt; protocol
very well.  Of these two, the over-energetic source problem is the most
problematic.&lt;/p&gt;

&lt;p&gt;There’s another, more minor, problem with
&lt;a href=&quot;/doc/axi-stream.pdf&quot;&gt;AXI streams&lt;/a&gt;, and that is the problem
of recording any metadata associated with the stream.  As an example, let’s
just consider the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TLAST&lt;/code&gt; signal.  What should an
&lt;a href=&quot;/doc/axi-stream.pdf&quot;&gt;AXI streams&lt;/a&gt;
processing system do with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TLAST&lt;/code&gt; signal when the data needs to be
recorded to memory?  In general, it’s just dropped.  In many cases, that
“just works”.  For example, if you are recording video, where every video
frame has the same length, then you should be able to tell what packet you are
on by where the write pointer is in memory.  On the other hand, if every
packet has a different size, then a different format is really needed.&lt;/p&gt;

&lt;p&gt;These are the two problems I’ve come across when working with
&lt;a href=&quot;/doc/axi-stream.pdf&quot;&gt;AXI streams&lt;/a&gt; which I would like to
address today.&lt;/p&gt;

&lt;h2 id=&quot;motivating-a-solution&quot;&gt;Motivating a Solution&lt;/h2&gt;

&lt;p&gt;Just to motivate a solution a little bit, I’m currently working on building
a SONAR data capture design for a customer.  This particular design will be
for an underwater SONAR device, so physical access to the actual device will
be limited.  We’ve chosen instead to run all access over an Ethernet
connection.  On top of that, prior experience building designs like this has
generated some reluctance in the team I’m working with to have a design depend
upon a CPU.  They would rather have a design that “just works” as soon as power
is applied.&lt;/p&gt;

&lt;p&gt;Fig. 4 shows a basic outline of this application, where data is collected from
a number of sensors, serialized, compressed, organized into packets, converted
to UDP, and then forwarded across a network data link.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 4. A Basic network data collector&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/axis-abort/sonar-application.svg&quot; alt=&quot;&quot; width=&quot;640&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;My &lt;a href=&quot;/blog/2018/02/09/first-cyclonev.html&quot;&gt;previous approach&lt;/a&gt;
to network handling didn’t “just work” at the speeds I wanted to work at.  In
that case, the ARM CPU on the DE10-Nano couldn’t keep up with my data rate
requirements.  (Okay, &lt;a href=&quot;/blog/2019/04/27/axi-addr.html&quot;&gt;part of the fault was the
method I was using&lt;/a&gt; to
transfer data to the CPU …)  Lesson learned?  Automated data processing,
and in particular network packet handling &lt;em&gt;that approaches the capacity of
the network link&lt;/em&gt;, should be handled in the fabric, not in the CPU.&lt;/p&gt;

&lt;p&gt;This meant that I needed to rearrange my approach to handling networks.
I needed something automatic, something that didn’t require a CPU, and
something that “just worked”.&lt;/p&gt;

&lt;p&gt;I first looked at &lt;a href=&quot;/doc/axi-stream.pdf&quot;&gt;AXI stream&lt;/a&gt;,
and then came face to face with the problem above: what happens if the stream
is going to someplace where the buffer is full?  What happens if there’s too
much &lt;a href=&quot;https://en.wikipedia.org/wiki/Back_pressure&quot;&gt;backpressure&lt;/a&gt;
in the system to handle a new packet?  What happens when an output packet is
blocked by a collision with another outgoing packet, or when such a collision
takes so long to resolve that there’s no longer any buffer space to hold the
outgoing packet?&lt;/p&gt;

&lt;p&gt;In network protocols, the typical answer to this problem is to drop packets.
Unfortunately, the &lt;a href=&quot;/doc/axi-stream.pdf&quot;&gt;AXI stream&lt;/a&gt;
protocol offers no native support for dropping packets.&lt;/p&gt;

&lt;p&gt;Let’s fix that.&lt;/p&gt;

&lt;h2 id=&quot;proposing-a-solution-packet-aborts&quot;&gt;Proposing a solution: Packet aborts&lt;/h2&gt;

&lt;p&gt;At this point, I’m now well into the design of this system, and the solution
I chose was to add an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ABORT&lt;/code&gt; signal to the
&lt;a href=&quot;/doc/axi-stream.pdf&quot;&gt;AXI stream&lt;/a&gt; protocol.  The basic
idea behind this signal is that an AXI master should be able to cancel any
ongoing packets if the slave generates too much
&lt;a href=&quot;https://en.wikipedia.org/wiki/Back_pressure&quot;&gt;backpressure&lt;/a&gt; (holds &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TREADY&lt;/code&gt; low
too long).&lt;/p&gt;

&lt;p&gt;Here are the basic rules to this new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ABORT&lt;/code&gt; signal:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ABORT&lt;/code&gt; may be raised at any time–whether or not &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TVALID&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TREADY&lt;/code&gt; are
true.&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ABORT&lt;/code&gt; may also be raised for any cause.
&lt;a href=&quot;https://en.wikipedia.org/wiki/Back_pressure&quot;&gt;Backpressure&lt;/a&gt;
is only one potential cause.  Why?  Think about it.  An &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ABORT&lt;/code&gt; signal caused
by &lt;a href=&quot;https://en.wikipedia.org/wiki/Back_pressure&quot;&gt;backpressure&lt;/a&gt; at one point in a
processing chain may need to propagate forward to other portions of the
chain that weren’t suffering
&lt;a href=&quot;https://en.wikipedia.org/wiki/Back_pressure&quot;&gt;backpressure&lt;/a&gt;.  In other
words, the protocol needs to allow &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ABORT&lt;/code&gt;’s whether or not
&lt;a href=&quot;https://en.wikipedia.org/wiki/Back_pressure&quot;&gt;backpressure&lt;/a&gt;
was currently present on a given link.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Following an abort, the next sample from the
&lt;a href=&quot;/doc/axi-stream.pdf&quot;&gt;AXI stream&lt;/a&gt;
will always be the first sample of the next packet.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;If &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ABORT &amp;amp;&amp;amp; !TVALID&lt;/code&gt;, then the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ABORT&lt;/code&gt; may be dropped immediately.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;If &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ABORT &amp;amp;&amp;amp; TVALID&lt;/code&gt;, then the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ABORT&lt;/code&gt; signal may not be dropped until
after &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ABORT &amp;amp;&amp;amp; TVALID &amp;amp;&amp;amp; TREADY&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Once &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TVALID &amp;amp;&amp;amp; TREADY &amp;amp;&amp;amp; TLAST&lt;/code&gt; have been received, the source can no
longer abort a packet.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ABORT&lt;/code&gt; signal is very similar to a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TUSER&lt;/code&gt; signal, but with a couple
subtle differences.  First, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TUSER&lt;/code&gt; is only valid if &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TVALID&lt;/code&gt; is also true,
whereas &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ABORT&lt;/code&gt; may be raised at any time.  Second, an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ABORT&lt;/code&gt; signal may be
raised &lt;em&gt;while&lt;/em&gt; the channel is stalled with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TVALID &amp;amp;&amp;amp; !TREADY&lt;/code&gt;.  This
would be a protocol violation if a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TUSER&lt;/code&gt; signal was used to carry an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ABORT&lt;/code&gt;
signal.&lt;/p&gt;

&lt;p&gt;Still, that’s the basic protocol.  For lack of a better name, I’ve chosen to
call this the “AXI network” protocol or AXIN for short.&lt;/p&gt;

&lt;h2 id=&quot;the-drop-signal&quot;&gt;The DROP signal&lt;/h2&gt;

&lt;p&gt;I would be remiss if I didn’t mention
&lt;a href=&quot;https://twitter.com/joshltyler&quot;&gt;@JoshTyler&lt;/a&gt;’s &lt;a href=&quot;https://github.com/joshtyler/hdl_common/synth/axis/axis_packet_fifo.sv&quot;&gt;prior
work&lt;/a&gt;
before going any further.  &lt;a href=&quot;https://twitter.com/joshltyler&quot;&gt;@JoshTyler&lt;/a&gt;
chose to use a DROP signal, similar to my &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ABORT&lt;/code&gt; signal proposed above.
Whenever his &lt;a href=&quot;https://github.com/joshtyler/hdl_common/synth/axis/axis_packet_fifo.sv&quot;&gt;Packet
FIFO&lt;/a&gt;
encounters a DROP signal, it simply drops the entire packet–much like
the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ABORT&lt;/code&gt; signal I’ve proposed above would do.&lt;/p&gt;

&lt;p&gt;There are a couple of subtle differences, however, between his DROP signal and
my proposed &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ABORT&lt;/code&gt; signal.  The biggest difference between the two is that, in
the AXIN protocol, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ABORT&lt;/code&gt; signal may arrive without an accompanied
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TVALID&lt;/code&gt;.  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ABORT&lt;/code&gt; may also be raised even if the stream is stalled with
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TVALID &amp;amp;&amp;amp; !TREADY&lt;/code&gt;.  From this standpoint, it’s more of an out of band signal
whereas &lt;a href=&quot;https://twitter.com/joshltyler&quot;&gt;@JoshTyler&lt;/a&gt;’s DROP signal is in band.&lt;/p&gt;

&lt;p&gt;Both approaches are designed to solve this problem, and both could work nicely
for this purpose.  In general, &lt;a href=&quot;https://twitter.com/joshltyler&quot;&gt;@JoshTyler&lt;/a&gt;’s
approach looks like it was easier to implement.  However, it also looks like
&lt;a href=&quot;https://github.com/joshtyler/hdl_common/synth/axis/axis_packet_fifo.sv&quot;&gt;his implementation&lt;/a&gt;
might hang if ever given a packet larger than the size of &lt;a href=&quot;https://github.com/joshtyler/hdl_common/synth/axis/axis_packet_fifo.sv&quot;&gt;his
FIFO&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;measuring-success-does-it-work&quot;&gt;Measuring success: does it work?&lt;/h2&gt;

&lt;p&gt;Of course, the first question should always be, does my proposed AXIN
protocol work?  At this point in the development of my own design, I can
answer that with a resounding &lt;em&gt;yes!&lt;/em&gt;  Not only does this technique work, it
works quite well.&lt;/p&gt;

&lt;p&gt;Allow me to share some of my experiences working with this protocol, starting
from the beginning.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 5. First steps&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/axis-abort/first-steps.svg&quot; alt=&quot;&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;ol&gt;
  &lt;li&gt;As with most of the protocols I’ve come to work with, my first step was to
build a set of formal properties to define the AXIN protocol.  These matched
the modified AXI stream properties outlined above.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;That was the easy part.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left; padding=25px&quot;&gt;&lt;caption&gt;Fig 6. The AXIN FIFO&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/axis-abort/netfifo.svg&quot; alt=&quot;&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;ol start=&quot;2&quot;&gt;
  &lt;li&gt;
    &lt;p&gt;The next piece I built was a basic &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ABORT&lt;/code&gt; enabled FIFO, shown in Fig. 6 on
the left.  This FIFO had two AXIN ports: an AXIN slave port and an AXIN
master port.  The simple goal of the FIFO was to provide some buffer room
between a packet source and a destination.&lt;/p&gt;

    &lt;p&gt;Here I came across the first problem with the protocol: the FIFO turned out
to be a real challenge to build.  (&lt;a href=&quot;https://github.com/joshtyler/hdl_common/synth/axis/axis_packet_fifo.sv&quot;&gt;Josh’s
implementation&lt;/a&gt;
looks easy in comparison.) What happens, for example, if two packets are in
a FIFO and the third packet aborts?  The first two packets, which now have
allocated memory within the FIFO must go through.  What happens if the FIFO
is completely full with less than a packet and the source aborts?  The FIFO
output must abort as well, and the FIFO should then flush the incoming
packet until its end–even though the source will know nothing of the packet
getting dropped.  All of these new conditions made this AXIN protocol a
challenge to build a design for.  Today, however, the task is now done and
the FIFO works.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Once I had a FIFO in place, things started getting easier.  I then built an
AXIN payload to UDP converter, an AXIN multiplexer to select from multiple
packet sources, an AXIN broadcast element to broadcast packets to multiple
separate packet handlers, and more.  With each new component, the protocol
became easier and easier to use.&lt;/p&gt;

&lt;p&gt;Two recent examples might help illustrate the utility of this approach.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;First, on startup, the network PHY is given a long reset.  (It might be
too long …)  During this time, however, packets are still generated–they
just need to be dropped internally because the network controller is holding
the PHY in reset.  Sure enough, the FIFO that I had put so much time and
energy into worked like a champ!  It dropped these packets, and recovered
immediately once the controller brought the PHY out of reset and started
accepting packets.  Even better, I haven’t found any bugs in it since the
formal verification work I went through.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The second example I have is one of data packet generation.  As you may
recall, one of the primary design goals was to broadcasting data packets,
each containing an internal time stamp.  The problem is that this data packet
includes in its header a time stamp associated with the data–something not
known until the data is available.  In other words, the header cannot be
formed until the both the data and its associated time stamp are available.
Once that first data sample is available, though, the data must now wait for
the header to be formed and forwarded downstream.  The problem then replicates
itself again in the next processing stage: the payload to UDP packet
converter.&lt;/p&gt;

    &lt;p&gt;My first approach to data packet generation was to try and schedule the
packet header generation between the time when the data entered the
data compression pipeline stage and when it came out to go into the payload
generator (See Fig. 4 above), but then I came across a simulation trace in
which the last data sample of one packet was immediately followed by the
first data sample of the next packet.  That left no time cycles for header
generation between the last data sample of the one packet and the first
sample of the next.  When I went back to the drawing board to look for another
solution, I found my AXIN FIFO.  Placing this FIFO between the data source
and the packet generator solved this problem nicely, and I haven’t had a
reason to look back since.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Indeed, the ease of building these subsequent data handling components has
easily repaid the time I have put into building the original FIFO a couple
times over.&lt;/p&gt;

&lt;p&gt;No, this new protocol isn’t perfect.  I still needed a way to transition
from a packet that can be dropped to one that has been fully accepted.
In particular, I wanted to generate a DMA engine that could store a packet
into memory.  Indeed, this brings up the next problem: how shall packet
boundaries be preserved once the packet is stored in memory?&lt;/p&gt;

&lt;p&gt;I’ve seen two solutions to this problem.  One solution is to record &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TLAST&lt;/code&gt;
along with the packet data, so the boundary can be rediscovered at a later
time.  This works, as long as you have room for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TLAST&lt;/code&gt; bit.  A second
solution I’ve found in a vendor design is to capture &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TLAST&lt;/code&gt; data in a
separate memory.  This works until you discover one memory becoming full
before the other one.  Indeed, I seem to recall a bug report having to do
with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TLAST&lt;/code&gt; buffer suffering from an overrun while the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TDATA&lt;/code&gt; buffer
still had plenty of room in it …&lt;/p&gt;

&lt;p&gt;But I digress.&lt;/p&gt;

&lt;p&gt;Just as a quick reminder, most data buses have a power of two width.  That
means they are 8b, 16b, 32b, 64b, 128b, etc. wide.  At this width, there’s no
room for an extra bit of information to hold the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TLAST&lt;/code&gt; bit indicating the end
of a packet once it has been placed into memory.  I wanted another solution
to this problem therefore.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 7. Converting from AXIN to AXI Stream&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/axis-abort/pkt2stream.svg&quot; alt=&quot;&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;ol start=&quot;3&quot;&gt;
  &lt;li&gt;
    &lt;p&gt;This leads to the third main component I built: A bridge from AXIN to a
proper &lt;a href=&quot;/doc/axi-stream.pdf&quot;&gt;AXI stream&lt;/a&gt; with no &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TLAST&lt;/code&gt;.
I then embed into this stream, in the first 32’bit word of packet data, the
length of the packet in bytes.  Then, once converted to this format, basic
&lt;a href=&quot;/doc/axi-stream.pdf&quot;&gt;AXI stream&lt;/a&gt;
tasks become easy again, since I could now use regular
&lt;a href=&quot;/doc/axi-stream.pdf&quot;&gt;AXI stream&lt;/a&gt; components.  Similarly, I
could now write packets to memory and maintain the packet boundaries at the
same time.&lt;/p&gt;

    &lt;p&gt;As with the FIFO, however, this component was a real challenge to build.
Just so we are clear, the challenge wasn’t so much the challenge of writing
Verilog to handle the task.  That part was easy.  The real challenge was
writing Verilog that would work under all conditions.  Sure enough, the formal
solver kept finding condition after condition that my AXIN to stream bridge
wasn’t handling properly.  For example, what should happen if the incoming
packet is longer than the slave’s packet buffer?  The slave should drop the
packet–not the master.  All of these and more had to go into this protocol
converter.&lt;/p&gt;

    &lt;p&gt;One reality of my current version of the bridge, however, is that it limits
the size of a packet to what can be stored within the block RAM found within
the bridge.  Given time, I’ll probably remove this limitation by adding an
external memory interface–but that’s a project still to come.&lt;/p&gt;

    &lt;p&gt;However, being able to capture a full packet in block RAM has the advantage
of guaranteeing that any locally generated packets can be guaranteed to be
complete packets before they are sent to the PHY.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Once the whole packet processing chain was put together, it looked roughly
like Fig. 8 below.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 8. Network processing chain&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/axis-abort/net-stream-blocks.svg&quot; alt=&quot;&quot; width=&quot;780&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;First, the packet would be formed by grouping raw data samples together with
a time stamp and a frame number.  In general, this involved a series of stages,
almost all with small FIFOs, as various headers were applied.  The result was
typically an &lt;a href=&quot;https://en.wikipedia.org/wiki/Ethernet_frame&quot;&gt;Ethernet packet&lt;/a&gt;
encapsulating an &lt;a href=&quot;https://en.wikipedia.org/wiki/IPv4&quot;&gt;IPv4 packet&lt;/a&gt;
encapsulating a &lt;a href=&quot;https://en.wikipedia.org/wiki/User_Datagram_Protocol&quot;&gt;UDP
packet&lt;/a&gt; with an
application specific payload.  This generated packet had the basic structure
shown in Fig. 9.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left; padding: 25px&quot;&gt;&lt;caption&gt;Fig 9. Final packet structure&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/axis-abort/datapacket.svg&quot; alt=&quot;&quot; width=&quot;180&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Going back to Fig. 8, this packet was then buffered, converted to
AXI stream proper (without &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TLAST&lt;/code&gt;), and then sent through an
&lt;a href=&quot;/blog/2018/07/06/afifo.html&quot;&gt;asynchronous FIFO&lt;/a&gt;.  On the
other side of the FIFO, the packet was converted back to the AXIN
protocol, albeit with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ABORT&lt;/code&gt; signal now held low, and a single packet
source was selected to feed the network controller.  Because every packet
source had its own buffer, and because the &lt;a href=&quot;/blog/2018/07/06/afifo.html&quot;&gt;asynchronous
FIFO&lt;/a&gt; operated on
32-bit data using a clock speed that was faster than one quarter the network
speed, there was never a chance that the network controller would run dry
prior between starting and completing a packet.&lt;/p&gt;

&lt;p&gt;Further, in spite of all the resources used by this approach, the Artix
A7-200T I am using still has plenty of LUTs and LUT RAMs (over 80%+) remaining
for a lot more design work.&lt;/p&gt;

&lt;p&gt;Perhaps the proverb that describes this work the best is, “In all labour
there is profit,” since my original work to generate the formal AXIN
properties, the following network FIFO, and then AXIN to stream converter,
has now all been repaid in spades via reuse.
(&lt;a href=&quot;https://www.blueletterbible.org/kjv/pro/14/23&quot;&gt;Prov 14:23&lt;/a&gt;)&lt;/p&gt;

&lt;h2 id=&quot;conclusions&quot;&gt;Conclusions&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;/doc/axi-stream.pdf&quot;&gt;AXI stream&lt;/a&gt; remains a simple and
easy to use protocol.  Indeed, it is ideal for any application where you can
guarantee your design will match any needed rates before using it.  Yes,
&lt;a href=&quot;https://en.wikipedia.org/wiki/Back_pressure&quot;&gt;backpressure&lt;/a&gt; is a great feature,
but it is also important to recognize that all systems have a limit of how
much &lt;a href=&quot;https://en.wikipedia.org/wiki/Back_pressure&quot;&gt;backpressure&lt;/a&gt; they can handle
before breaking any real time requirements.  Once the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Back_pressure&quot;&gt;backpressure&lt;/a&gt; limit of any design
has been reached, some &lt;a href=&quot;/doc/axi-stream.pdf&quot;&gt;AXI stream&lt;/a&gt;
sources may need to be able to control what happens next.  Others simply need
to be able to flag the existence of the data loss.  Either way, apart from
careful extra-protocol engineering and rate management, data loss becomes
inevitable.&lt;/p&gt;

&lt;p&gt;So, just how should dropped data be handled in your application?&lt;/p&gt;

&lt;p&gt;In the case of network packet data that I’ve been working with, the easy
answer is to drop a whole packet whenever on-chip packet congestion becomes too
much to deal with.  The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ABORT&lt;/code&gt; signal has worked nicely for this purpose, in
spite of the initial challenges I had in working with it.&lt;/p&gt;

&lt;p&gt;In many ways, this only pushes the problem up a level in the stack.
In my case, that’s okay:  Most network protocols are robust enough to be
able to handle some amount of packet loss.  Packet loss can be detected
via packet frame counters, time stamps or both.  Packet loss can also be
detected in client-server relationships whenever a reply to a given request is
not received in a timely manner.  In those cases, requests can be retried or
eventually abandoned.  This is all quite doable, and doing it in a controlled
manner is key to success.&lt;/p&gt;

&lt;p&gt;Indeed, this technique has worked so well that I’ve started applying something
similar to video streams as well.  Have you noticed, for example, that many
video IPs are very sensitive to which IPs get reset first?  That, however, may
need to remain a topic for another day.&lt;/p&gt;
&lt;hr /&gt;&lt;p&gt;&lt;em&gt;Why do the heathen rage, and the people imagine a vain thing? (Ps 2:1)&lt;/em&gt;</description>
        <pubDate>Wed, 23 Feb 2022 00:00:00 -0500</pubDate>
        <link>https://zipcpu.com/blog/2022/02/23/axis-abort.html</link>
        <guid isPermaLink="true">https://zipcpu.com/blog/2022/02/23/axis-abort.html</guid>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>2020 and 2021 in review</title>
        <description>&lt;p&gt;In the spirit of looking back at the last year with every new year, shall
we take a look back at 2021?  No, let’s do better.  Last year, we never looked
back at 2020, so today let’s look back at both 2020 and 2021.  To do that,
let’s look up which articles have had the most page views, and then take a
look at what articles may be coming up in 2022.&lt;/p&gt;

&lt;p&gt;But first, how’s the blog going?&lt;/p&gt;

&lt;h2 id=&quot;whats-going-on-with-the-blog&quot;&gt;What’s going on with the blog?&lt;/h2&gt;

&lt;p&gt;Well, first off, the blog is working.&lt;/p&gt;

&lt;p&gt;“Working”?  What do I mean by that?&lt;/p&gt;

&lt;p&gt;Well, &lt;a href=&quot;/blog/2020/01/01/2019-in-review.html&quot;&gt;as you may
remember&lt;/a&gt;,
my goal with this blog has always been to attract customers to Gisselquist
Technology, LLC.  I’m a small shop, so I don’t need more than a small handful
of customers with just a couple of projects to keep me fully employed.  Those
who’ve wished to hire me haven’t had a problem finding my (not so well-hidden)
E-Mail and writing me directly for support.&lt;/p&gt;

&lt;p&gt;So far, it’s worked.  I’ve been well employed.  Perhaps even over employed,
having more tasks than people to work on them.  Economically, this is a good
place to be in.&lt;/p&gt;

&lt;p&gt;Second, the blog itself is no longer funded by a large sponsor.  That’s not a
big deal, until you realize that the time I put into the blog is no longer
funded.  It hasn’t made it into my work week this last year.  Instead, I’ve
kept the blog running on weekend or vacation hours this last year.  The sad
part of this is that the number of articles I’ve posted has gone down over
the years.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;31 non-quiz posts in 2019&lt;/li&gt;
  &lt;li&gt;25 non-quiz posts in 2020&lt;/li&gt;
  &lt;li&gt;17 non-quiz posts in 2021&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The problem I’m having, however, is that I have more work than resources.
Keep your eyes and ears peeled on this one.  You may discover that there’s
more than one of me by the end of the year.  We’ll see where the Lord leads
between now and then.&lt;/p&gt;

&lt;h2 id=&quot;top-posts-from-2020&quot;&gt;Top Posts from 2020&lt;/h2&gt;

&lt;p&gt;Before diving into the top ten posts from 2020, I should explain why this
list wasn’t posted last year at the new year.  The reason is simply
that the last month of 2020 was dominated by comments made by individuals
who wished to cancel the ZipCPU blog for statements I had made that they
disagreed with.&lt;/p&gt;

&lt;p&gt;Specifically, &lt;a href=&quot;/blog/2020/11/26/zipcpu-biz.html&quot;&gt;I had commented
that&lt;/a&gt;: “God made man
“male and female” by design.  This is obvious and evident from the creation
itself: Only women can give birth.  Only women menstruate.  Only women suffer
from miscarriages.  Men who dress like women, who call themselves women, are
nothing more than that: men who dress like women, and who imagine themselves
to be women.  Some may have even made themselves eunuchs.  They have not made
themselves into women.”  This was then my justification for refusing to use
female pronouns for a man.  You can read more of how &lt;a href=&quot;/blog/2020/11/26/zipcpu-biz.html&quot;&gt;this became a business
issue in the article&lt;/a&gt;,
should you be interested.  It’s a sad story.&lt;/p&gt;

&lt;p&gt;Needless to say, these comments caused quite an uproar on social media.&lt;/p&gt;

&lt;p&gt;Despite the uproar caused by these comments, I see no reason to update, correct,
or change my comments above.  Of all those who have challenged these comments,
no one has challenged the truth of their content.  The closest anyone has come
to challenging the truth of these statements has been based on a “&lt;a href=&quot;https://fallacyinlogic.com/straw-man-argument/&quot;&gt;straw man
argument&lt;/a&gt;”: This person asked
me if, by my measure, a woman who could not bear children was no longer
a woman.  Since that wasn’t what I had said, I see no reason to change
or apologize for these comments.&lt;/p&gt;

&lt;p&gt;Instead, let me say that if these words offend you, then perhaps this blog
isn’t for you.  If you wish to stick around, then &lt;a href=&quot;/blog/2021/07/25/healing.html&quot;&gt;know that there is a
second half to the Gospel of Jesus, the
Christ&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Because the end of the 2020 was dominated by the many who were offended, I
held off on sharing the top ten articles I had posted in 2020.  The following
Bible verses share some of my reasons for this:
&lt;a href=&quot;https://blueletterbible.org/kjv/pro/15/28&quot;&gt;[1]&lt;/a&gt;,
&lt;a href=&quot;https://blueletterbible.org/kjv/pro/26/4&quot;&gt;[2]&lt;/a&gt;,
&lt;a href=&quot;https://blueletterbible.org/kjv/ecc/10/2&quot;&gt;[3]&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It’s now been a year and the furor has died down.  Those who are offended
by these comments no longer read the blog.  Indeed, I can even measure the
effect.  As a result of those who were offended by these comments, I lost about
200 twitter followers out of 4,200, or about 5%.  This particular incident
hasn’t really hurt me or the blog very much.  Indeed, I’m moving on–although
I may yet come back and address this issue again if need be.&lt;/p&gt;

&lt;p&gt;With that as background, let’s go back and take a look at the top ten articles
from 2020 and give them the highlight they deserve based upon their total
page views across both 2020 and 2021.  Here are these top ten articles from
2020, from least to most popular:&lt;/p&gt;

&lt;ol start=&quot;10&quot;&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;/blog/2020/01/13/reuse.html&quot;&gt;Lessons in Hardware Reuse&lt;/a&gt;, 1,590 page views&lt;/p&gt;

    &lt;p&gt;This is a fun article discussing reuse from a personal, business,
perspective.  I own all my IP, so I should be able to re-use it without
a problem, no?  Sadly, what should be a reuse panacea has had some pitfalls
within it that I never expected.  These surprises are discussed in this
article.&lt;/p&gt;

    &lt;p&gt;This article gets a duckduckgo.com score of #1.  It is the top or first
hit, when searching duckduckgo.com for “hardware reuse.”&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;It doesn’t really seem right to list a post about posts as a top article,
but the article, “&lt;a href=&quot;/blog/2020/01/01/2019-in-review.html&quot;&gt;2019: AXI Meets Formal
Verification&lt;/a&gt;”, my
last end of year summary from two years ago now, received more page views
at 1,873 than the
&lt;a href=&quot;/blog/2020/01/13/reuse.html&quot;&gt;Reuse&lt;/a&gt; article above.&lt;/li&gt;
&lt;/ul&gt;

&lt;ol start=&quot;9&quot;&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;/blog/2020/10/03/tfrvalue.html&quot;&gt;Moving values and strobes cross clock domains&lt;/a&gt;, 2,154 page views&lt;/p&gt;

    &lt;p&gt;This is one of several clock domain crossing articles that have been a
real hit.  The first one, &lt;a href=&quot;/blog/2017/10/20/cdc.html&quot;&gt;Some Simple Clock-Domain Crossing
Solutions&lt;/a&gt;, discusses CDCs
in general.  Indeed, this article is a hit in its own right as you’ll see
below.  This article also discussed how to move multi-bit values across clock
domains while keeping them coherent.  Once I got heavily involved in formal
methods, though, I wanted
to start adding formal methods checks to asynchronuos logic.  I started,
therefore, with a simple article on &lt;a href=&quot;/formal/2018/04/12/areset.html&quot;&gt;Formally Verifying an Asynchronous
Reset&lt;/a&gt;.  This didn’t
seem complete enough, so I tried another: &lt;a href=&quot;/formal/2018/05/31/clkswitch.html&quot;&gt;Formally Verifying Asynchronous
Components&lt;/a&gt;.  This went
over the formal verification of a clock switch.  A fun project.  With these
few under my belt, I posted about &lt;a href=&quot;/blog/2018/07/06/afifo.html&quot;&gt;Crossing clock domains with an
Asynchronous FIFO&lt;/a&gt;–another
big hit as you’ll see below.  That’s about as good as you can get, no?&lt;/p&gt;

    &lt;p&gt;Well, not quite.  There’s always a reason to want to transfer &lt;em&gt;values&lt;/em&gt;,
not data, across clock domains.  The difference being that these values
don’t necessarily need to move at high speed, and there’s not necessarily
another one following the first.  It’s just that: a value that needs to
cross clock domains.&lt;/p&gt;

    &lt;p&gt;That’s the focus of the article, but with one other twist: the approach
is twice as fast as the one I presented in &lt;a href=&quot;/blog/2017/10/20/cdc.html&quot;&gt;my first CDC
article&lt;/a&gt;.
Feel free to check it out.&lt;/p&gt;

    &lt;p&gt;This item gets a duckduckgo.com score of #1, the top/first hit, when
searching for “cross clock domain values”.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;ol start=&quot;8&quot;&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;/blog/2020/04/01/design-flow.html&quot;&gt;Re: What does your design flow look like?&lt;/a&gt; 2,156 page views&lt;/p&gt;

    &lt;p&gt;This follows from a question I was handed regarding which tools I use.
Since writing the article, I’ve now done a lot more with
&lt;a href=&quot;http://iverilog.icarus.com&quot;&gt;iverilog&lt;/a&gt; and even
&lt;a href=&quot;https://www.cadence.com/en_US/home/tools/system-design-and-verification/simulation-and-testbench-verification/xcelium-simulator.html&quot;&gt;XCellium&lt;/a&gt; (a
commercial simulator).  Perhaps I may come back and discuss the main
differences between these simulation approaches and my preferred approach:
&lt;a href=&quot;/blog/2017/06/21/looking-at-verilator.html&quot;&gt;Verilator&lt;/a&gt;.&lt;/p&gt;

    &lt;p&gt;While I tried, I was unable to get a valid duckduckgo.com score for this
article.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;ol start=&quot;7&quot;&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;/dsp/2020/07/28/down-sampler.html&quot;&gt;Building a Downsampling Filter&lt;/a&gt;, 2,226 page views&lt;/p&gt;

    &lt;p&gt;This continues our series into filter design and implementation.  You can
find &lt;a href=&quot;/dsp/dsp.html&quot;&gt;more DSP articles on the DSP page&lt;/a&gt;, if
you are interested, to include other filtering articles in this series.&lt;/p&gt;

    &lt;p&gt;This item gets a duckduckgo.com score of #1, the top/first hit, when
searching for “verilog downsampling filter”.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;ol start=&quot;6&quot;&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;/blog/2020/06/16/axiaddr-limits.html&quot;&gt;The hard part of building a bursting AXI Master&lt;/a&gt;, 3,632 page views&lt;/p&gt;

    &lt;p&gt;What I’d really like to blog about is how to build one of these bursting
AXI masters.  I’m not really sure how to get from here to there though.
AXI-lite masters are fairly easy to build and verify.  AXI4 bursting masters?
Those that issue burst requests?  Much harder.  This article discusses why,
and some of the challenges I’ve had while trying to build and verify
such masters.&lt;/p&gt;

    &lt;p&gt;Basically, the formal tool tends to get about 5-10 clock cycles into any
bursting master implementation before it starts finding bugs.  These are
usually associated with issuing the very first burst request of the bus.  I
then find myself spending a day or even two finding and fixing bugs at this
point.  It’s just a real challenge to get right.  (No, Xilinx didn’t get
their DMA right here either–it dies quickly at this point due to a detail
I doubt anyone would notice.)&lt;/p&gt;

    &lt;p&gt;In all, verifying a bursting AXI master can take 3-4 days of work.  I’m not
yet certain how to turn that into an article that would explain to all
how to do it.  Until then, &lt;a href=&quot;/blog/2020/06/16/axiaddr-limits.html&quot;&gt;this
article&lt;/a&gt; is
perhaps the best I have.  It attempts to go over the pitfalls, explain
why these masters are a challenge to build, and then to outline what I’ve
done to get around the various challenges involved.&lt;/p&gt;

    &lt;p&gt;Not knowing a good search term, I not going to give this item a
duckduckgo.com score.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;ol start=&quot;5&quot;&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;/blog/2020/11/26/zipcpu-biz.html&quot;&gt;Is it possible to make a living as a solo digital design
engineer?&lt;/a&gt; 3,995 page views&lt;/p&gt;

    &lt;p&gt;This is the article that started the furor mentioned above.&lt;/p&gt;

    &lt;p&gt;Yes, I can get anxious about where my next paycheck will come from.  Yes,
as a solo engineer, I worry about where the next job will come from.  There
are just too many things that I cannot control about my future.&lt;/p&gt;

    &lt;p&gt;Bottom line: As a business man, I depend upon “gifts” from the Almighty.
Such “gifts” often come in the form of contracts.  Some come in the form
of new business contacts.  It’s for this reason that I judge it more
important to please God than to please men.  Therefore, don’t ask me to
lie or otherwise violate my faith.  I’d rather find another customer, than
to work with someone that requires that I lie.&lt;/p&gt;

    &lt;p&gt;This item gets a duckduckgo.com score of #1, the top/first hit, when
searching for “solo digital design engineer”.  This is probably due more
to the attention a small section generated rather than the entirety of the
article, but so be it.
&lt;a href=&quot;https://en.wikipedia.org/wiki/Streisand_effect&quot;&gt;[Ref]&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;ol start=&quot;4&quot;&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;/dsp/2020/04/20/axil2axis.html&quot;&gt;Debugging AXI Streams&lt;/a&gt;, 6,166 page views&lt;/p&gt;

    &lt;p&gt;How shall an AXI stream be debugged?  This article presents a fun approach:
Use an AXI-lite slave to feed and recover the AXI stream.  It’s a simple
enough approach.  It’s also one of my first AXI stream articles.&lt;/p&gt;

    &lt;p&gt;This item gets a duckduckgo.com score of #1, the top/first hit, when
searching for “axi stream debug”.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;ol start=&quot;3&quot;&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;/blog/2020/02/17/mustard-seed.html&quot;&gt;The Faith of a Mustard Seed&lt;/a&gt;, 8,357 page views&lt;/p&gt;

    &lt;p&gt;Not all of my blog articles are about digital design.  I chose, early on,
to also discuss faith and ethics but at a less frequent level.  This has
kept the ZipCPU blog and twitter feed from being aggregated with other
tech blogs that don’t have this “feature”.&lt;/p&gt;

    &lt;p&gt;This article, regarding the faith of a mustard seed, presents a missing
viewpoint on Jesus’ teachings of mustard seeds.  It’s a completely
different take from the mainstream.  It turns Jesus teaching from an
impossibility into an encouragement.&lt;/p&gt;

    &lt;p&gt;I’m honored that so many individuals have enjoyed this article.&lt;/p&gt;

    &lt;p&gt;Perhaps I shouldn’t be surprised, but this article only gets a
duckduckgo.com score of #89 when searching for “faith of a
mustard seed”.  Sadly, most of the prior articles describe this faith as the
least of all faiths, since the size of the mustard seed is so small.  I
argue in the article that this is entirely the wrong way to understand the
parable, but you may have to read it to know more.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;ol start=&quot;2&quot;&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;/blog/2020/03/08/easyaxil.html&quot;&gt;Building an AXI-Lite slave the easy way&lt;/a&gt;, 9,610 page views&lt;/p&gt;

    &lt;p&gt;When &lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;I first built my formal AXI-lite properties, I tested them on Xilinx’s
demonstration design&lt;/a&gt;.
(They call it their AXI-lite “template.”)  I was
surprised to find it horribly broken.  Once you have a set of formal
properties, though, it becomes really easy to build your own design that
meets those properties.  That became the basis for &lt;a href=&quot;/formal/2019/01/12/demoaxilite.html&quot;&gt;my next post on the
topic of AXI-Lite&lt;/a&gt;.&lt;/p&gt;

    &lt;p&gt;The problem was that &lt;a href=&quot;/formal/2019/01/12/demoaxilite.html&quot;&gt;this first version of an AXI-Lite
slave&lt;/a&gt; wasn’t very
easy to work with.&lt;/p&gt;

    &lt;p&gt;Over time, as I got to working with AXI-Lite, I sort of settled on a simpler
skeleton design to start from.  I call it &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/easyaxil.v&quot;&gt;my “easyaxil”
design&lt;/a&gt;.  This
is the design I go to when I need a control port for any new interface.
It’s simple, and easy to work with.  &lt;a href=&quot;/blog/2020/03/08/easyaxil.html&quot;&gt;This
article&lt;/a&gt; presents that
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/easyaxil.v&quot;&gt;simpler design&lt;/a&gt;.&lt;/p&gt;

    &lt;p&gt;This item gets a duckduckgo.com score of #1, the top/first hit, when
searching for “axi-lite slave”.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;ol start=&quot;1&quot;&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;/blog/2020/03/23/wbm2axisp.html&quot;&gt;Building a basic AXI Master&lt;/a&gt;, 12,219 page views&lt;/p&gt;

    &lt;p&gt;This is the first post I’ve written regarding building an AXI master.  I’ve
since written others, but this remains a good, basic, startup guide for
building an AXI master.  Not only does it outline the basic templates for
the required AXI logic, but it also discusses the context in which an
AXI master will find itself, and a taxonomy of the various types of
AXI masters.&lt;/p&gt;

    &lt;p&gt;The only drawback to this article is that the AXI master presented is really
a bridge.  Rather than some ethereal “AXI master”, this one bridges from
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone&lt;/a&gt; to AXI.  Not
everyone uses
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone&lt;/a&gt;.
In hindsight, perhaps that’s not so bad: any bus master needs to accept
its direction from somewhere.  1) Both &lt;a href=&quot;/zipcpu/2017/11/18/wb-prefetch.html&quot;&gt;CPU
fetch&lt;/a&gt; and
&lt;a href=&quot;/zipcpu/2021/04/17/axilops.html&quot;&gt;memory units&lt;/a&gt; need to
get their direction from the CPU.  2) A DMA needs to get its direction from
a control port.  3) My &lt;a href=&quot;/blog/2021/12/30/dbgaxil.html&quot;&gt;debugging bus
master&lt;/a&gt; gets its direction
from a character stream.  Why should getting direction from a
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone&lt;/a&gt;
slave interface be a problem?&lt;/p&gt;

    &lt;p&gt;Perhaps the only problem here is in the imagination of the reader, since all
of the principles are the same.&lt;/p&gt;

    &lt;p&gt;The one thing this article doesn’t discuss is how to build an AXI master
that will generate burst requests.  I’ve discussed some of the problems
with presenting such a burst request generating master above.  On the other
hand, if you don’t need burst requests, this might just be ideal.&lt;/p&gt;

    &lt;p&gt;This item gets a duckduckgo.com score of #1, the top/first hit, when
searching for “axi master”.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;top-posts-from-2021&quot;&gt;Top Posts from 2021&lt;/h1&gt;

&lt;p&gt;Let’s now turn our attention to the top ten posts, posted in 2021, as sorted
based upon their number of page views.  Since these articles are being judged
based upon a year, or less, they will (obviously) have fewer page views than
those of 2020 above.&lt;/p&gt;

&lt;ol start=&quot;10&quot;&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;/blog/2021/07/03/slowmpy.html&quot;&gt;Building a Better Verilog Multiply for the ZipCPU&lt;/a&gt;, 980 page views&lt;/p&gt;

    &lt;p&gt;Many articles have been written about how to build a digital logic
multiply.  Many of these focus on &lt;a href=&quot;https://en.wikipedia.org/wiki/Wallace_tree&quot;&gt;Wallace
trees&lt;/a&gt; and some other amazing
implementations.  The reality is, though, that knowing how to build a
blazing fast multiplication algorithm on an FPGA is often irrelevant: FPGAs
have hardware multiplies you can use for that purpose.  Why slow down your
clock to create one of these faster multiplies?&lt;/p&gt;

    &lt;p&gt;On the other hand, what if your goal is ultra-low logic, and you are working
on a device either with no hardware multiplies to work with, or perhaps no
hardware multiplies left?  &lt;a href=&quot;/blog/2021/07/03/slowmpy.html&quot;&gt;This
article&lt;/a&gt;
focuses on just that situation within the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;,
and the resulting algorithm saves a lot of logic in the end.&lt;/p&gt;

    &lt;p&gt;This item gets a duckduckgo.com score of #2 when searching for
“Verilog multiply”.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;ol start=&quot;9&quot;&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;/blog/2021/06/28/master-examples.html&quot;&gt;Examples of AXI4 bus masters&lt;/a&gt;, 1,017 page views&lt;/p&gt;

    &lt;p&gt;I’ve discussed above the struggles I’ve had trying to describe how to build
complex AXI masters on the blog.  The topic just doesn’t fit in a blog
article very well.  &lt;a href=&quot;/blog/2021/06/28/master-examples.html&quot;&gt;This
article&lt;/a&gt;,
on the other hand, goes over a list of examples of such masters.  Perhaps,
if you need to build your own AXI master, you might find an example to suit
your purpose from among the many listed?&lt;/p&gt;

    &lt;p&gt;This item gets a duckduckgo.com score of #2 when searching for “AXI master
example”.  Sadly, the first hit is for a Xilinx HLS support request, from
someone who was not able to get a working AXI4 master under HLS.  It’s
somewhat of a shame, since Xilinx’s AXI4 master template does work–under
the right conditions.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;ol start=&quot;8&quot;&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;/blog/2021/08/28/axi-rules.html&quot;&gt;AXI Handshaking Rules&lt;/a&gt;, 1,030 page views&lt;/p&gt;

    &lt;p&gt;I’m often surprised by the number of help requests on Xilinx’s forums, from
people trying to get a custom AXI-whatever to work, but &lt;em&gt;who can’t get the
basic AXI handshake right!&lt;/em&gt;  This is one of those fundamental things.  You
are not going to get AXI-anything to work if you mess up the handshaking.&lt;/p&gt;

    &lt;p&gt;Indeed, I would strongly recommend that you learn the rules of the
AXI handshake before you write online asking for help.  That’s the
background of this article.  Indeed, there are some basic template logic
blocks offered in this article which, if you follow them, will guarantee
that you get the handshake right.  It’s not that hard to do, and I end up
naturally using those logic templates over and over again.  As a result,
this is a good article to read when you are having AXI problems–before
you go about embarrassing yourself.&lt;/p&gt;

    &lt;p&gt;This item gets a duckduckgo.com score of #1, the top/first hit, when
searching for “axi handshake”.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;ol start=&quot;7&quot;&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;/blog/2021/10/26/clkgate.html&quot;&gt;Clock Gating&lt;/a&gt;, 1,067 page views&lt;/p&gt;

    &lt;p&gt;Clock gating on an FPGA is great when you want to emulate an ASIC design.
You’ll need special vendor primitives to do it.&lt;/p&gt;

    &lt;p&gt;That’s not the topic of &lt;a href=&quot;/blog/2021/10/26/clkgate.html&quot;&gt;this
article&lt;/a&gt;.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/blog/2021/10/26/clkgate.html&quot;&gt;This article&lt;/a&gt;
is instead about whether or not gating a clock would improve
&lt;em&gt;simulation&lt;/em&gt; performance.  At first, it looked like the answer would be a
resounding yes.  So, I implemented a bunch of clock gates and then measured
everything.  In the end, it didn’t appear to improve Verilator performance
by any significant amount, but the experiment was pretty fun and I learned
a lot from it.  As a bonus, the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; can now shut down its clock
when it’s either shut down or waiting for an interrupt.  Cool, no?&lt;/p&gt;

    &lt;p&gt;This item gets a duckduckgo.com score of #5 when searching for
“clock gating”.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;ol start=&quot;6&quot;&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;/blog/2021/08/14/axiperf.html&quot;&gt;Measuring AXI latency and throughput performance&lt;/a&gt;, 1,188 page views&lt;/p&gt;

    &lt;p&gt;Being able to know how well your AXI bus is running is a big deal.  Where
are your clock cycles going?  How fast are requests being made?  How long
does it take them to get from the processor to your slave?  Measurements are
always the first steps in any bus performance optimization effort.&lt;/p&gt;

    &lt;p&gt;The problem is that AXI is … complicated.  It’s even worse in an
environment containing burst requests, multiple IDs, multiple masters, and
multiple slaves.  This article, therefore, attempts to distill the relevant
information from the AXI bus in order to create simplified AXI performance
measures you can use to know how fast your design is (or isn’t) running.&lt;/p&gt;

    &lt;p&gt;This one is pretty valuable.  &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axiperf.v&quot;&gt;The
logic&lt;/a&gt; for
the performance monitor is posted.  Feel free to try it out.&lt;/p&gt;

    &lt;p&gt;In this case, the &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axiperf.v&quot;&gt;Verilog AXI performance
monitor&lt;/a&gt;,
presented in this article, gets a duckduckgo.com score of #5 when searching
for “AXI performance measurement”.  &lt;a href=&quot;/blog/2021/08/14/axiperf.html&quot;&gt;The
article&lt;/a&gt; itself, however,
doesn’t come up in the top 100.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;ol start=&quot;5&quot;&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;/zipcpu/2021/04/17/axilops.html&quot;&gt;Building a Simple AXI-lite Memory Controller&lt;/a&gt;, 1,264 page views&lt;/p&gt;

    &lt;p&gt;Let’s now return to our &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
roots, and see what it takes to build a CPU memory controller that speaks
AXI.  In this case, it’s about building an &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/zipcore/rtl/core/axilops.v&quot;&gt;AXI-lite memory
controller&lt;/a&gt;,
although &lt;a href=&quot;/zipcpu/2021/09/30/axiops.html&quot;&gt;a later
article&lt;/a&gt; (that didn’t
make the top-ten) will convert &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/zipcore/rtl/core/axilops.v&quot;&gt;this AXI-lite memory
controller&lt;/a&gt;
to a &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/zipcore/rtl/core/axiops.v&quot;&gt;full AXI memory controller&lt;/a&gt;–complete
with exclusive access and data width trimming.&lt;/p&gt;

    &lt;p&gt;Still, this article forms the basis for one of the AXI masters I test the
&lt;a href=&quot;/blog/2021/08/14/axiperf.html&quot;&gt;AXI performance monitor&lt;/a&gt;
with.&lt;/p&gt;

    &lt;p&gt;This item gets a duckduckgo.com score of #1, the top/first hit, when
searching for “axi-lite memory controller”.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;ol start=&quot;4&quot;&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;/blog/2021/05/22/vhdlaxil.html&quot;&gt;Fixing Xilinx’s Broken AXI-lite design in VHDL&lt;/a&gt;, 1,358 page views&lt;/p&gt;

    &lt;p&gt;I don’t normally do VHDL.  Sorry, but Verilog has now been my home since
about 2007 or so.  However, I currently have a copy of SymbiYosys that can be
used to verify VHDL designs, so why not try it out?  In this case, I used
Vivado to generate an AXI-lite design, and then ran SymbiYosys on it.  After
verifying that the basic Xilinx AXI-lite bugs were present, I then updated
the design until it passed a formal check.  Yes, there are only a small
number of updates required to get the design working, and I even get it
working well, but for some reason this post has been well loved in spite
of the minimal amount of work involved.&lt;/p&gt;

    &lt;p&gt;How well does the design work in the end?  Well, without a
&lt;a href=&quot;/blog/2019/05/22/skidbuffer.html&quot;&gt;skid buffer&lt;/a&gt;, the
best you can do is 50% throughput and this design doesn’t use a
&lt;a href=&quot;/blog/2019/05/22/skidbuffer.html&quot;&gt;skid buffer&lt;/a&gt;.
Still, the updated design hits 50% throughput number even though Xilinx’s
original write performance was 33% at best.  Indeed, once you either know
what you are doing, or rather once you can pretend with a formal tool
and an &lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;AXI-lite property
set&lt;/a&gt;,
then getting your performance up there isn’t all that hard.&lt;/p&gt;

    &lt;p&gt;This item gets a duckduckgo.com score of #1, the top/first hit, when
searching for “axi-lite VHDL”.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;ol start=&quot;3&quot;&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;/blog/2021/03/20/xilinx-forums.html&quot;&gt;Common AXI Themes on Xilinx’s Forum&lt;/a&gt;, 1,935 page views&lt;/p&gt;

    &lt;p&gt;Once I thought I knew how to verify AXI designs, I started examining
Xilinx’s forums looking for designs to verify.  Indeed, I think I went so
far as to look for any forum request with the word “AXI” in its title.&lt;/p&gt;

    &lt;p&gt;The fun result is that I got quite the survey of problems individuals were
struggling with when using AXI.  The post, therefore, is very informative.
It’ll tell you a lot about how others, both new and experienced, view AXI
and Xilinx’s AXI IP.&lt;/p&gt;

    &lt;p&gt;There is a problem, however.  Since posting this article Xilinx has
completely revamped their community forums.  As a result, all my links to
the original forum posts are now lost.  I haven’t (yet) had the opportunity
to try to go back and look up the new links (Xilinx promises that they can
be found by searching for them anew), and Xilinx hasn’t shown any
interest in fixing these broken links.  So, while the article is really cool,
the references it depends upon will take some work to look up.&lt;/p&gt;

    &lt;p&gt;This item gets a duckduckgo.com score of #1, the top/first hit, when
searching for “xilinx forum themes”, and the #3 hit when searching for
“xilinx forum axi”.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;ol start=&quot;2&quot;&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;/blog/2021/03/06/asic-lsns.html&quot;&gt;Lessons learned while building an ASIC design&lt;/a&gt;, 2,177 page views&lt;/p&gt;

    &lt;p&gt;My first ASIC design!  I was surprised at the many things I learned along
the way.  Things like, logic is cheap but verification is expensive.  Or,
you can’t go back and put features into a design later, they have to been
in when you turn the design in.  Or, much to my surprise, the moment you
start you are late.&lt;/p&gt;

    &lt;p&gt;Ouch.&lt;/p&gt;

    &lt;p&gt;Still, there was a lot to learn, and this article is the #2 article from
2021.&lt;/p&gt;

    &lt;p&gt;This item gets a duckduckgo.com score of #5 when searching for “asic
lessons”.  It might’ve been higher, but three articles regarding the
“Australian Securities and Investments Commission” ended up getting placed
higher.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;ol start=&quot;1&quot;&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;/blog/2021/01/29/hiring.html&quot;&gt;The FPGA designer who didn’t get the job&lt;/a&gt;, 6,870 page views&lt;/p&gt;

    &lt;p&gt;This article follows the following conversation:&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;Friend&lt;/strong&gt;: Can you provide someone with some work?  I’m thinking of hiring
him, and would like to give him some work in order to evaluate his
capabilities.&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;Me&lt;/strong&gt;: Well, I have a design that hasn’t yet been tested.  Why not have him
run it through it’s paces, and see how well it works?  This will show us
his simulation capabilities, his Verilog capabilities, and even better
any formal background he might have.&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;Potential hiree&lt;/strong&gt;: Sorry, I want a design job, not a verification job.&lt;/p&gt;

    &lt;p&gt;I spent one round trying to convince him that he was being evaluated for a
&lt;em&gt;design&lt;/em&gt; job, and that a design engineer needs to know how to verify his own
stuff–especially when working for a small company.&lt;/p&gt;

    &lt;p&gt;In the end, this engineer didn’t get the job.  I might argue he was too
proud to lower himself to working with someone else’s designs.  Others
have argued that I was the problem in the whole affair.  Perhaps.  I’ll
let you read the article and decide for yourself.&lt;/p&gt;

    &lt;p&gt;Of all the articles written in 2021, this one had more views than any other.&lt;/p&gt;

    &lt;p&gt;I searched duckduckgo.com for “fpga design job”, but this article was so
far buried behind job postings that I don’t have a score for it.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;top-10-posts-across-all-of-2020-and-2021&quot;&gt;Top 10 Posts across all of 2020 and 2021&lt;/h1&gt;

&lt;p&gt;In many ways, I haven’t really figured out the right “top articles” metric
to use at the end of the year for this review.
Should the “top articles of 2021” be from the articles &lt;em&gt;written&lt;/em&gt; in 2021, or
should it be from all of the articles &lt;em&gt;read&lt;/em&gt; in 2021?  To make matters a touch
worse, the top ten articles &lt;em&gt;written&lt;/em&gt; in 2021 tends to be biased towards
articles written earlier in the year, which have had time to accumulate more
page views.  The end result is an indecision that has lead me to post multiple
lists instead just a single one.  Therefore, here’s the list of the top ten
articles &lt;em&gt;read&lt;/em&gt; in 2020-2021, regardless of the year they were written within.&lt;/p&gt;

&lt;ol start=&quot;10&quot;&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;/blog/2020/03/23/wbm2axisp.html&quot;&gt;Building a basic AXI Master&lt;/a&gt;, 12,219 page views&lt;/p&gt;

    &lt;p&gt;This was one of the 2020 articles we discussed above, but it’s made it into
the overall top ten, so I’ll list it again here.&lt;/p&gt;

    &lt;p&gt;As mentioned above, this item gets a duckduckgo.com score of #1,
the top/first hit, when searching for “axi master”.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;ol start=&quot;9&quot;&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;/dsp/2017/09/15/fastfir.html&quot;&gt;Building a high speed Finite Impulse Response (FIR) Digital Filter&lt;/a&gt;, 13,090 page views&lt;/p&gt;

    &lt;p&gt;I’ve come back to filtering several times over since, but this was one of my
earlier filtering articles.  It seems quite well loved.&lt;/p&gt;

    &lt;p&gt;This item gets a duckduckgo.com score of #5, 
when searching for “fast verilog fir filter”.  “Fast” in this case is
necessary to separate this filter’s implementation from other, perhaps more
common, &lt;a href=&quot;/dsp/2017/12/30/slowfil.html&quot;&gt;“slow” filter
designs&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;/fpga-hell.html&quot;&gt;FPGA Hell&lt;/a&gt;, 13,858 page views&lt;/p&gt;

    &lt;p&gt;This isn’t really a regular article, so I’m not going to rank it among the
top ten articles of 2020-2021.  It does get a large number of page views,
though, so I figure I should list it here anyway.&lt;/p&gt;

    &lt;p&gt;This item gets a duckduckgo.com score of #1, the top/first hit, when
searching for “fpga hell”.  Perhaps that’s too much of a give me, but that
just seems the most appropriate search term for this article.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;ol start=&quot;8&quot;&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;/dsp/2017/12/14/logic-pll.html&quot;&gt;Building a Simple Logic PLL&lt;/a&gt;, 13,960 page views&lt;/p&gt;

    &lt;p&gt;I’m not sure if those who find this article realize that it’s presenting a
&lt;em&gt;logic&lt;/em&gt; PLL, rather than a more traditional analog PLL.  It’s not any less
important, though.  I’ve used this algorithm many times over, for many
purposes.  Indeed, it now exists in an ASIC–but that’s another story.
This year, this articles comes in at #8.&lt;/p&gt;

    &lt;p&gt;This item gets a duckduckgo.com score of #4, when searching for “Verilog
PLL”.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;/projects.html&quot;&gt;Gisselquist Technology Projects&lt;/a&gt;, 14,141
page views.&lt;/p&gt;

    &lt;p&gt;Well, I guess folks want to know what I’m up to.&lt;/p&gt;

    &lt;p&gt;This page doesn’t really have any of my commercial projects on it.  Instead,
it’s focused mostly on my open source projects.  That’s okay, but perhaps
I should coordinate adding some commercial projects here.  I mean, I’ve been
doing some really cool ASIC and SONAR stuff, both of which might be fun
to list.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;/formal/formal.html&quot;&gt;Formal page&lt;/a&gt;, 14,516 page views&lt;/p&gt;

    &lt;p&gt;As with the last page, this isn’t really an article and so I’m not numbering
it among the top ten articles in 2020-2021, even though the number of page
views this page has received would properly place it there.&lt;/p&gt;

    &lt;p&gt;This &lt;a href=&quot;/formal/formal.html&quot;&gt;formal page&lt;/a&gt; is simply an index
of formal verification articles.  For those who are interested in formal as
an end, you might find this page valuable.  For those interested in anything
that uses formal, you might wish to keep an eye on the blog–since I often
discuss how to verify various types of logic outside of the links in the
&lt;a href=&quot;/formal/formal.html&quot;&gt;formal page&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;ol start=&quot;7&quot;&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;/blog/2017/06/21/looking-at-verilator.html&quot;&gt;Taking a New Look at Verilator&lt;/a&gt;, 14,612 page views&lt;/p&gt;

    &lt;p&gt;This is my favorite Verilator article, although I haven’t revisited it in
some time.  The principles have remained much the same.  The biggest thing
that’s changed for me and my usage of Verilator has been where to find
various Verilator internal values that … I probably shouldn’t be peeking
at anyway.  I still use Verilator for almost all of my simulation needs, and
this article remains a good introduction to how I do it.&lt;/p&gt;

    &lt;p&gt;This item gets a duckduckgo.com score of #18, when searching for “Verilator”.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;ol start=&quot;6&quot;&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;/dsp/2017/08/30/cordic.html&quot;&gt;Using a CORDIC to calculate sines and cosines in an FPGA&lt;/a&gt;, 14,845 page views&lt;/p&gt;

    &lt;p&gt;I used to think that &lt;a href=&quot;/dsp/2017/08/30/cordic.html&quot;&gt;CORDICs&lt;/a&gt;
were the greatest end-all, be-all for FPGAs working with sine waves.  You
can use them to calculate sine waves of any precision–just add enough
rotation rounds.  Indeed, my own
&lt;a href=&quot;https://github.com/ZipCPU/cordic&quot;&gt;CORDIC&lt;/a&gt; core generator will do just
that–and figure out how many rounds are required for any given precision
at the same time.&lt;/p&gt;

    &lt;p&gt;Perhaps that explains why &lt;a href=&quot;https://github.com/ZipCPU/cordic&quot;&gt;this article&lt;/a&gt;
is so interesting?  It’s the default standard for generating sine and cosine
waves within an FPGA.&lt;/p&gt;

    &lt;p&gt;What’s not said is that &lt;a href=&quot;https://github.com/ZipCPU/cordic&quot;&gt;CORDICs&lt;/a&gt;
can be very expensive logically if you want a lot of
precision.  I first learned this when building a brushless DC motor system
designed to run on an iCE40.  The &lt;a href=&quot;https://github.com/ZipCPU/cordic&quot;&gt;CORDICs&lt;/a&gt;
took the majority of the design.
Just because they don’t use multiplies, doesn’t mean they don’t use logic.&lt;/p&gt;

    &lt;p&gt;Perhaps I might come back to this topic again this year, and present
something that works better?  What works better?  Well, with just one or
two multiplies, you can turn a &lt;a href=&quot;https://github.com/ZipCPU/cordic/blob/master/rtl/quadtbl.v&quot;&gt;table lookup followed by an interpolator
into an awesome sinewave
generator&lt;/a&gt;
that’ll easily best a &lt;a href=&quot;https://github.com/ZipCPU/cordic&quot;&gt;CORDIC&lt;/a&gt;
for the least logic required metric–without the scale issues that come with
using a &lt;a href=&quot;https://github.com/ZipCPU/cordic&quot;&gt;CORDIC&lt;/a&gt;.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;https://github.com/ZipCPU/cordic&quot;&gt;My Verilog CORDIC core generator&lt;/a&gt; gets a
duckduckgo.com score of #9, when searching for “CORDIC”, whereas &lt;a href=&quot;/dsp/2017/08/30/cordic.html&quot;&gt;this
article&lt;/a&gt; is #17 under
the same search.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;ol start=&quot;5&quot;&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;/blog/2019/05/29/demoaxi.html&quot;&gt;Building the perfect AXI4 slave&lt;/a&gt;, 15,067 page views&lt;/p&gt;

    &lt;p&gt;Sadly, it seems there aren’t that many good articles on building full AXI4
slaves.  Most of the Google results you get send you to &lt;a href=&quot;/formal/2019/05/13/axifull.html&quot;&gt;Xilinx’s broken
AXI4 design&lt;/a&gt;–and that
doesn’t really help.  I mean, not only is it broken, but it’s not even
fully featured.  It only handles some addressing modes and some data widths,
and under certain conditions … it’ll crash and hang your whole system
down with it.&lt;/p&gt;

    &lt;p&gt;This article provides the “something better” that’s needed, so I can
understand how it might be well loved.&lt;/p&gt;

    &lt;p&gt;The one thing this article doesn’t discuss is exclusive access, and
specifically how to modify a slave so that it will support exclusive access.
I should add that topic to my “To-do” list, since it is a problem I
managed to solve this last April (2021).&lt;/p&gt;

    &lt;p&gt;This item gets a duckduckgo.com score of #1, the top/first hit, when
searching for “axi slave”.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;ol start=&quot;4&quot;&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;/blog/2019/04/27/axi-addr.html&quot;&gt;Understanding AXI Addressing&lt;/a&gt;, 18,251 page views&lt;/p&gt;

    &lt;p&gt;As you may have gathered from above, &lt;a href=&quot;/formal/2019/05/13/axifull.html&quot;&gt;Xilinx didn’t get the addressing modes
right in their slave
template&lt;/a&gt;.  It’s worse
than that: very few AXI slaves properly implement all of the various
AXI addressing modes: FIXED, INCR, and WRAP, for all of the various AxSIZEs
the slave should be able to support.  This is a shame.  They’re not that
hard to implement.  Even better, once you figure out how to handle
these addressing modes properly–you’ve figured it out, and you can reuse
that &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axi_addr.v&quot;&gt;address handling
logic&lt;/a&gt;
over and over again.&lt;/p&gt;

    &lt;p&gt;That’s exactly the purpose of this article: how to calculate the next
address in an AXI4 burst regardless of the addressing mode.  The result is
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axi_addr.v&quot;&gt;a module&lt;/a&gt;,
developed (and even optimized) within the article, that can be then used
and reused for this purpose.  Indeed, once you have &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axi_addr.v&quot;&gt;the “next-address in
burst” module&lt;/a&gt;,
the rest is easy.&lt;/p&gt;

    &lt;p&gt;This item gets a duckduckgo.com score of #1, the top/first hit, when
searching for “axi addressing”.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;ol start=&quot;3&quot;&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;/blog/2017/29/fifo.html&quot;&gt;Getting the basic FIFO right&lt;/a&gt;,
21,426 page views&lt;/p&gt;

    &lt;p&gt;This article is well loved.  Sadly, it desperately needs to be rewritten.
The Verilog FIFO presented within the article is broken.  (The C++ software
FIFO isn’t …) Since writing this article, I’ve not only rewritten my
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/sfifo.v&quot;&gt;synchronous Verilog
FIFO&lt;/a&gt;, but I’ve
also added several features to it to make it more hardware independent.
Even better, the &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/sfifo.v&quot;&gt;new/updated synchronous 
FIFO&lt;/a&gt; is formally
verified–something missing from the first one, that would’ve caught the
errors within it.&lt;/p&gt;

    &lt;p&gt;An updated FIFO article, therefore, really needs to be on my “To-do” list
as well.  Until that time, feel free to check out the FIFO lesson in my
&lt;a href=&quot;/tutorial&quot;&gt;Verilog tutorial&lt;/a&gt;.&lt;/p&gt;

    &lt;p&gt;Much to my surprise, and perhaps explaining this articles ranking at #3
for all of 2020-2021, it gets a duckduckgo.com score of #9 when searching
for “Verilog FIFO”.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;ol start=&quot;2&quot;&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;/blog/2017/10/20/cdc.html&quot;&gt;Some Simple Clock-Doman Crossing Solutions&lt;/a&gt;, 27,077 page views&lt;/p&gt;

    &lt;p&gt;This article has now held a top spot for several years in a row.  It was the
#4 article back in 2018, when I wrote &lt;a href=&quot;/blog/2018/01/01/top-ten.html&quot;&gt;my first top-ten articles in
2017&lt;/a&gt; post.  It was the &lt;a href=&quot;/blog/2019/01/01/top-ten.html&quot;&gt;#2
article in 2018&lt;/a&gt;.
It was again the &lt;a href=&quot;/blog/2020/01/01/2019-in-review.html&quot;&gt;#2 article in 2019, the year AXI met
formal&lt;/a&gt;.&lt;/p&gt;

    &lt;p&gt;At this point, my guess is that this will remain a top-ten article for some
years to come.&lt;/p&gt;

    &lt;p&gt;This item gets a duckduckgo.com score of #8 when searching for “Clock
domain crossing”.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;ol start=&quot;1&quot;&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;/blog/2018/07/06/afifo.html&quot;&gt;Crossing clock domains with an Asynchronous FIFO&lt;/a&gt;, 27,775 page views&lt;/p&gt;

    &lt;p&gt;Coming in our number one spot, the top article read in all of 2020 and 2021
is my &lt;a href=&quot;/blog/2018/07/06/afifo.html&quot;&gt;Asynchronous FIFO&lt;/a&gt;
article.  &lt;a href=&quot;/blog/2018/07/06/afifo.html&quot;&gt;This article&lt;/a&gt;
goes over and reviews the Asynchronous FIFO article from Sunburst-Design,
and then formally verifies that the Sunburst-Design asynchronous FIFO
works–even going so far as the two write test with arbitrary clocks.
Perhaps one of the reasons why this article is so well loved is that it
actually proves several of the statements made by Sunburst-Design, perhaps
it’s just that &lt;a href=&quot;/blog/2018/07/06/afifo.html&quot;&gt;Asynchronous
FIFO&lt;/a&gt;s are exceptionally
useful, and that a single article may not be sufficient to understand one.&lt;/p&gt;

    &lt;p&gt;This item gets a duckduckgo.com score of #11 when searching for
“Asynchronous FIFO”.  Thankfully, the sunburst-design article upon which
this &lt;a href=&quot;/blog/2018/07/06/afifo.html&quot;&gt;Async FIFO&lt;/a&gt; article
is based comes in at #2.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;/tutorial/&quot;&gt;Verilog Tutorial&lt;/a&gt;, 45,454 page views&lt;/p&gt;

    &lt;p&gt;I’m not going to rank this page together with the top-ten &lt;em&gt;articles&lt;/em&gt; listed
above, but it is clearly getting the greatest number of page hits among
all pages on the ZipCPU blog.&lt;/p&gt;

    &lt;p&gt;For those not familiar with &lt;a href=&quot;/tutorial&quot;&gt;my tutorial&lt;/a&gt;, it’s
a bit different in format: I try to teach simulation and formal verification
techniques together with design techniques from the very beginning.  I also
simply Verilog a bit to do this.&lt;/p&gt;

    &lt;p&gt;For some, &lt;a href=&quot;/tutorial&quot;&gt;this is the greatest Verilog tutorial&lt;/a&gt;
out there.  For others?  Not so much.  Either way, though, it is free, and it
does come with exercises you can do at your desk either with or without
hardware.&lt;/p&gt;

    &lt;p&gt;I have started work on an &lt;a href=&quot;/tutorial/intermediate.html&quot;&gt;Intermediate
tutorial&lt;/a&gt;.  The big difference
between the beginner’s tutorial and the &lt;a href=&quot;/tutorial/intermediate.html&quot;&gt;Intermediate
tutorial&lt;/a&gt; is that the
&lt;a href=&quot;/tutorial/intermediate.html&quot;&gt;Intermediate tutorial&lt;/a&gt; focuses
on bus components: slaves and masters.  Unfortunately, this project is moving
at a snails pace.  This year I’ve only managed to finish up to lesson five of
that tutorial.  There are many lessons left to be written within it.  Worse,
I haven’t tested any of the example designs, so … your mileage might vary
when trying it out.  Still, my current partial work is available for
examination if you want to look through it.&lt;/p&gt;

    &lt;p&gt;Until then, the &lt;a href=&quot;/tutorial&quot;&gt;beginner’s tutorial&lt;/a&gt; is really
the only complete tutorial I have.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;upcoming-posts-to-look-forward-to&quot;&gt;Upcoming Posts to look forward to&lt;/h2&gt;

&lt;p&gt;I also have several articles in my “hopper”–things I’m working on, but that
are still some distance from completion.  If you are &lt;a href=&quot;https://www.patreon.com/ZipCPU&quot;&gt;sponsoring the
blog&lt;/a&gt;, feel free to write me and let me know if
you have a particular interest in one or more of these articles–or even an
article on some other topic.  Otherwise, here are some of the articles that
may (or may not) be completed this upcoming year &lt;a href=&quot;https://www.blueletterbible.org/kjv/jas/4/15/&quot;&gt;if the Lord is
willing&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Cubic splines, and the Mother Spline&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;https://github.com/ZipCPU/interpolation/issues/1&quot;&gt;Lots of people think cubic spline interpolation is the end all of
interpolation, and if they could just get cubic spline interpolation working
on an FPGA they’d have it
made&lt;/a&gt;.&lt;/p&gt;

    &lt;p&gt;My current cubic spline (draft) article presents how to generate a cubic
spline interpolator for an FPGA.  The solution is somewhat unique, in that
the data set is &lt;a href=&quot;https://zipcpu.com/dsp/2018/01/16/interpolation-is-convolution.html&quot;&gt;assumed to be infinite&lt;/a&gt;,
and the matrix solution required for the interpolation is done off-line in a
data independent fashion.  This generates the “Mother Spline” in the title.
This “Mother Spline” then makes it possible to implement a cubic spline via a
&lt;a href=&quot;/dsp/2018/05/17/slowsymf.html&quot;&gt;small convolution&lt;/a&gt;
(FIR) applied to the original data set, followed by a second convolution with
a known piecewise cubic polynomial–such as &lt;a href=&quot;https://zipcpu.com/dsp/2018/01/16/interpolation-is-convolution.html&quot;&gt;we’ve already discussed on the
blog&lt;/a&gt;.
Even better, because the majority of the spline solution is handled off line,
the resulting solution can easily be applied to any infinite data set–such
as an ongoing audio or radio frequency source.  Sadly, the solution itself
is not exact.  Perhaps that’s not so bad, though, since the solution can be
made arbitrarily close to a true cubic spline by whatever delta your
implementation requires.  In other words, it’s be good enough for
&lt;em&gt;engineering&lt;/em&gt; work, although perhaps not good enough for the mathematicians.&lt;/p&gt;

    &lt;p&gt;I’ve now worked on and off on this article off for months.  So far, it’s only
slowed down the eventual postings of other articles.  I’d still like to
finish it, though.  The last steps will be to figure out how to explain how
to generate the FIR, and then how to implement the necessary piecewise cubic.
Once done, this should be a nice contribution to the topic.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;RAW SPI Slave&lt;/p&gt;

    &lt;p&gt;This is a much simpler article than the cubic spline article.&lt;/p&gt;

    &lt;p&gt;This article is based around an &lt;a href=&quot;https://github.com/ZipCPU/wbspi/blob/master/rtl/rawslave.v&quot;&gt;SPI slave
implementation&lt;/a&gt;
that already exists, has already been built, and already passes a formal test.
That should make it easier to finish.  The key feature of
&lt;a href=&quot;https://github.com/ZipCPU/wbspi/blob/master/rtl/rawslave.v&quot;&gt;this SPI slave&lt;/a&gt;
is that it uses the SPI clock for most of its work.  Well, why not?  One of
the big criticisms I received from my article, &lt;a href=&quot;/blog/2017/08/21/rules-for-newbies.html&quot;&gt;Rules for new FPGA
designers&lt;/a&gt;, was
my recommendation that everything should use one clock, and the example
the critic provided that violated this rule was an SPI slave.  He argued
that SPI slaves should use the SPI clock for their work.  So, I decided
to see how hard the task might be.&lt;/p&gt;

    &lt;p&gt;As it turns out, doing this right is much harder than it looks.  Not only
that, but I wouldn’t have realized there were any problems were it
not for the formal proof.  &lt;a href=&quot;https://www.blueletterbible.org/kjv/jas/4/15/&quot;&gt;Lord
willing&lt;/a&gt;, this article,
when finished, will clearly outline these pitfalls.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;“It’s not my fault!”&lt;/p&gt;

    &lt;p&gt;One of the sad realities of posting open source designs is that people will
try to use them and fail–not because of any problem within the open source
design itself, but rather because of a bug within their own design.  This
seems to be quite common.&lt;/p&gt;

    &lt;p&gt;This presents a bit of an economic headache for the open source designer, a
headache which forms the topic of this article.  The problem is that the
open source design and its maintenance are “paid for” (somehow), but
finding and fixing bugs in user designs that use the open source design
are not.&lt;/p&gt;

    &lt;p&gt;This article tells the story of one such interaction.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Steps to design checkoff&lt;/p&gt;

    &lt;p&gt;This article focuses on a common tension between engineering and management.
When will the design be complete?  Management wants a schedule.  A typical
engineer’s response, however, is “When it’s complete” or perhaps, “I’m
working on it.”  Both of these are totally unacceptable to management.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;https://www.blueletterbible.org/kjv/jas/4/15/&quot;&gt;Lord willing&lt;/a&gt;,
this article will present a formal verification based road map to a
solution to this problem.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;New FIFO&lt;/p&gt;

    &lt;p&gt;I mentioned above that I need to rewrite my synchronous FIFO article, so
here’s a place holder for that rewrite.
&lt;a href=&quot;https://www.blueletterbible.org/kjv/jas/4/15/&quot;&gt;Lord willing&lt;/a&gt;, this rewrite
will include such things as how to create a &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/sfifo.v&quot;&gt;synchronous
FIFO&lt;/a&gt; from either
distributed or block RAM–with the key difference being that block RAM
requires a clock to read from memory into a register, such as an iCE40
requires, before the result can be used.  I’d also like to discuss building
a FIFO where you can write to it when full (and reading), and where you can
read from it when empty (and also writing).&lt;/p&gt;

    &lt;p&gt;In other words, it’d be nice to create a full featured
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/sfifo.v&quot;&gt;FIFO&lt;/a&gt; article.&lt;/p&gt;

    &lt;p&gt;Sadly, this one needs a lot of work.  It’s a long way from completion, so it
might take some time to get there.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;M-Band filters&lt;/p&gt;

    &lt;p&gt;One of the challenges of digital filter design is how to modify a well
designed filter in real time.  Often, the big problem of modifying the
filter is the FFT implementation the filter lies within.  The filter has
been tuned so that it can be implemented between an FFT/IFFT pair.  Any
changes to the filter in this space can cause it to violate the circular
convolution properties the filter was built with.&lt;/p&gt;

    &lt;p&gt;M-Band filters offer a way of getting around this problem, forming the
topic of this article.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Vivado Review&lt;/p&gt;

    &lt;p&gt;Some time ago, &lt;a href=&quot;https://threadreaderapp.com/thread/1407778273430544385.html&quot;&gt;I reviewed Xilinx’s release of Vivado
2021.1&lt;/a&gt;.
Specifically, I examined several known “bugs” that had existed in Vivado
based IP for years, to see if Xilinx had fixed any of those bugs.  Sadly,
&lt;a href=&quot;https://threadreaderapp.com/thread/1407778273430544385.html&quot;&gt;the review&lt;/a&gt;
was done on twitter and the graphics necessary to support it are now long
gone from the link above.&lt;/p&gt;

    &lt;p&gt;I’m likely to repeat this review sometime again in 2022, to see what bugs
they’ve fixed.  Sadly, this means I’m going to have to download another
51GB+, and possibly break several of my own designs (always a risk on any
upgrade), so I’m not very eager to do this.  We’ll see what happens.&lt;/p&gt;

    &lt;p&gt;This work will almost certainly wait for Xilinx to fix Vivado’s Y2022 bug.
That looks like it’s going to impact a large number of users.  We’ll see
how they handle it.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;For the Software Engineer who wants to build his own soft-core CPU on an FPGA&lt;/p&gt;

    &lt;p&gt;Yeah, I know, everyone wants to build their own soft-core.  It’s a fun
project, even though an older hand will often wonder just how many times
its worth rebuilding the wheel.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;https://www.blueletterbible.org/kjv/jas/4/15/&quot;&gt;Lord willing&lt;/a&gt;, this
particular article will offer some encouraging and thought provoking
words to anyone in this situation.  It’s mostly written, so we’ll see
where it goes and whether or not I complete it.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Software vs Hardware, where to draw the line?&lt;/p&gt;

    &lt;p&gt;This is a topic based on some conversations I’m having locally.  It’s been
quite thought provoking one for me.  A friend is pointing out to me that
I’ve now gotten to the point where I’ve started looking at the world like
a hammer, viewing every problem as a nail.  In my world, that means that every
digital logic problem is something to be solved in hardware / Verilog.&lt;/p&gt;

    &lt;p&gt;The reality is that there needs to be a dividing line, somewhere where it
makes more sense to do some things in software and others in hardware.
Where is this dividing line?  That would be the topic of this article.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;AXI4 slave exclusive access&lt;/p&gt;

    &lt;p&gt;Back in April of this year, I figured out how to modify my AXI property set
to handle exclusive access.  I learned a lot in the process.  I’ve since
tested the exclusive access properties on several design components.  One in
particular, the AXI4 slave I presented on the blog, is easily modified for
exclusive access.&lt;/p&gt;

    &lt;p&gt;Given that there really aren’t any other examples of exclusive access
handling that I can find on the web, this might be a unique one once shared.
It’s actually worse than that, since many of the AXI interconnects you’ll
find on the web break exclusive access–but that’s another story that may,
or may not, make it into this article.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Beating CORDIC with just two DSPs&lt;/p&gt;

    &lt;p&gt;I mentioned above that I have a sine wave generator that requires just
two DSP elements.  The &lt;a href=&quot;https://github.com/ZipCPU/cordic/blob/master/rtl/quadtbl.v&quot;&gt;logic for this generator is
posted&lt;/a&gt;, although
I haven’t mentioned it much on the blog.  It’s a curious design, though,
in this respect: it’s really easy to generate the table in such a manner
that &lt;a href=&quot;https://github.com/ZipCPU/cordic/blob/master/bench/cpp/quadtbl_tb.cpp&quot;&gt;my test
bench&lt;/a&gt;
doesn’t have sufficient capability to verify it.  The sine wave distortions
simply require an FFT too big than I can implement.  The good news is that
the two DSP’s used by this algorithm, should your device have them, often
render the logic usage much less than a similar
&lt;a href=&quot;/dsp/2017/08/30/cordic.html&quot;&gt;CORDIC&lt;/a&gt;.
Even better, you don’t have the scale issue associated with the
&lt;a href=&quot;/dsp/2017/08/30/cordic.html&quot;&gt;CORDIC&lt;/a&gt; when using this
sine wave implementation.&lt;/p&gt;

    &lt;p&gt;Not bad, huh?&lt;/p&gt;

    &lt;p&gt;The algorithm is built around &lt;a href=&quot;/dsp/2018/03/30/quadratic.html&quot;&gt;previous article(s) I’ve written on
interpolation&lt;/a&gt;, so there’s
nothing really new here, save the awesomeness of the performance of this
technique.  Well, a good explanation of what’s going on will probably still
go a long ways as well.&lt;/p&gt;

    &lt;p&gt;I just need to write it up.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;While not directly related to the blog, I would like to cut a new release
of the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; this year.  The new
release speeds up the debugging interface, and adds (optional) clock gating
and bus independence with support for both
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone&lt;/a&gt;,
&lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;AXI-Lite&lt;/a&gt;, and AXI4 buses.
Since the debug interface gets fundamentally changed by this release, this will
necessitate a major version update.  The good news is that &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/tree/zipcore&quot;&gt;the logic for this
release is complete&lt;/a&gt;.  It’s been
tested, and it works.  The bad news is that the documentation has fallen a
touch behind.  Updating this documentation, and then releasing a new version
will be my next &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; task.&lt;/p&gt;

&lt;p&gt;I guess the bottom line is that both the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; and the
&lt;a href=&quot;&quot;&gt;ZipCPU blog&lt;/a&gt; are alive and well.  There’s still future in
both of them, and I’m still going.  Indeed, Gisselquist Technology is now
going stronger than I thought I ever would be–Thanks be to God for His
blessings and “gifts”.&lt;/p&gt;
&lt;hr /&gt;&lt;p&gt;&lt;em&gt;And saying, Where is the promise of his coming? for since the fathers fell asleep, all things continue as they were from the beginning of the creation.  For this they willingly are ignorant of, that by the word of God the heavens were of old, and the earth standing out of the water and in the water: Whereby the world that then was, being overflowed with water, perished (2Peter 3:4-6)&lt;/em&gt;</description>
        <pubDate>Mon, 03 Jan 2022 00:00:00 -0500</pubDate>
        <link>https://zipcpu.com/blog/2022/01/03/2021-in-review.html</link>
        <guid isPermaLink="true">https://zipcpu.com/blog/2022/01/03/2021-in-review.html</guid>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>Quiz #19: Using disable iff in a concurrent assertion</title>
        <description>&lt;p&gt;This is a good quiz question.  Think it through.  Draw it out if you need to.
The answer might surprise you.&lt;/p&gt;
</description>
        <pubDate>Sat, 01 Jan 2022 00:00:00 -0500</pubDate>
        <link>https://zipcpu.com/quiz/2022/01/01/quiz19.html</link>
        <guid isPermaLink="true">https://zipcpu.com/quiz/2022/01/01/quiz19.html</guid>
        
        
        <category>quiz</category>
        
      </item>
    
  </channel>
</rss>
