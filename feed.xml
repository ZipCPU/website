<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>The ZipCPU by Gisselquist Technology</title>
    <description>The ZipCPU blog, featuring how to discussions of FPGA and soft-core CPU design.  This site will be focused on Verilog solutions, using exclusively OpenSource IP products for FPGA design.  Particular focus areas include topics often left out of more mainstream FPGA design courses such as how to debug an FPGA design.
</description>
    <link>https://zipcpu.com/</link>
    <atom:link href="https://zipcpu.com/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sat, 01 Jan 2022 17:51:30 -0500</pubDate>
    <lastBuildDate>Sat, 01 Jan 2022 17:51:30 -0500</lastBuildDate>
    <generator>Jekyll v4.2.0</generator>
    <image>
      <url>https://zipcpu.com/img/gt-rss.png</url>
      <title></title>
      <link></link>
    </image>
    
      <item>
        <title>Quiz #19: Using disable iff in a concurrent assertion</title>
        <description>&lt;!-- answer: &quot;2022/01/01/fv-answer19.html&quot; --&gt;

&lt;p&gt;This is a good quiz question.  Think it through.  Draw it out if you need to.
The answer might surprise you.&lt;/p&gt;
</description>
        <pubDate>Sat, 01 Jan 2022 00:00:00 -0500</pubDate>
        <link>https://zipcpu.com/quiz/2022/01/01/quiz19.html</link>
        <guid isPermaLink="true">https://zipcpu.com/quiz/2022/01/01/quiz19.html</guid>
        
        
        <category>quiz</category>
        
      </item>
    
      <item>
        <title>Creating a Simple AXI-Lite Master for the Hexbus</title>
        <description>&lt;p&gt;This post continues our series over the last three years looking into AXI and
AXI-lite interface design.  Normally I’d take a moment to recount all of the
various articles in a series as background to any new article, but if you
check the &lt;a href=&quot;/topics.html&quot;&gt;topics page&lt;/a&gt;, you’ll see I’ve now
written over 25 AXI articles.  These include a discussion on &lt;a href=&quot;/blog/2020/03/08/easyaxil.html&quot;&gt;how to build an
AXI-lite slave&lt;/a&gt;, a &lt;a href=&quot;/blog/2019/05/29/demoaxi.html&quot;&gt;high
performance AXI (full) slave&lt;/a&gt;,
&lt;a href=&quot;/dsp/2020/04/20/axil2axis.html&quot;&gt;how to debug an AXI stream based
design&lt;/a&gt;, and even how to build
both an &lt;a href=&quot;/blog/2020/03/23/wbm2axisp.html&quot;&gt;AXI-lite
master&lt;/a&gt; as well as how to
modify a general purpose &lt;a href=&quot;/zipcpu/2021/04/17/axilops.html&quot;&gt;AXI-lite
master&lt;/a&gt; for &lt;a href=&quot;/zipcpu/2021/09/30/axiops.html&quot;&gt;AXI
(full)&lt;/a&gt; performance–to
include exclusive access but not burst performance.&lt;/p&gt;

&lt;p&gt;Today, let’s look into extending our &lt;a href=&quot;https://github.com/ZipCPU/dbgbus/tree/master/hexbus&quot;&gt;debugging bus
design&lt;/a&gt; with an &lt;a href=&quot;https://github.com/ZipCPU/dbgbus/blob/master/hexbus/rtl/hbexecaxi.v&quot;&gt;AXI-lite
back end&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you’ve followed my blog from the beginning, you might remember that I’ve
spent quite a bit of time discussing what I call a
&lt;a href=&quot;https://github.com/ZipCPU/dbgbus/tree/master/hexbus&quot;&gt;debugging bus&lt;/a&gt; early on.
As I use the term, a &lt;a href=&quot;https://github.com/ZipCPU/dbgbus/tree/master/hexbus&quot;&gt;debugging
bus&lt;/a&gt;
is a way of accessing the bus within a logic design from a remote host.
Typically, I do this over a &lt;a href=&quot;/blog/2017/06/17/why-network-debugging.html&quot;&gt;serial
port&lt;/a&gt;, b
sending special commands to the design, although I have transport systems that
will work well for both SPI and
&lt;a href=&quot;https://github.com/ZipCPU/xulalx25soc/blob/master/rtl/jtagser.v&quot;&gt;JTAG&lt;/a&gt; as
well.  The design then decodes the various characters sent across the
link into bus read or bus write requests, issues the requests of the
internal bus, and then returns the results.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 1. How a debugging bus fits into a larger system&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/dbgaxil/fpga-w-dbgbus.svg&quot; alt=&quot;&quot; width=&quot;640&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Why would you ever want to do something like this?  Wouldn’t it make
more sense to just issue the commands from a soft-core CPU within the design?
Well, there are actually a lot of reasons why you might want to use a
&lt;a href=&quot;https://github.com/ZipCPU/dbgbus/tree/master/hexbus&quot;&gt;debugging bus&lt;/a&gt;.
For example …&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;You might be building a CPU.  Until that CPU works, a
&lt;a href=&quot;https://github.com/ZipCPU/dbgbus/tree/master/hexbus&quot;&gt;debugging bus&lt;/a&gt;
can give you a strong confidence that &lt;a href=&quot;/zipcpu/2017/05/20/which-came-first.html&quot;&gt;the rest of the design
works&lt;/a&gt;.  You
can even use the
&lt;a href=&quot;https://github.com/ZipCPU/dbgbus/tree/master/hexbus&quot;&gt;debugging bus&lt;/a&gt;
to &lt;a href=&quot;https://github.com/ZipCPU/zbasic/blob/master/sw/host/zipload.cpp&quot;&gt;pre-load the flash or
RAM&lt;/a&gt; for
your CPU before releasing the design from reset.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;This applies just as much to all of those Vendor CPU’s as it does to your
own homebrew CPU.  Once you place that CPU into the FPGA, you lose almost
all insight into what’s going on within the FPGA.  For example,
&lt;a href=&quot;https://forums.xilinx.com/t5/Xilinx-IP-Catalog/Fixed-Interval-Timer-doesn-t-trigger-interrupt-on-Microblaze/m-p/1082878&quot;&gt;what if your CPU wasn’t getting the interrupt you were
expecting&lt;/a&gt;?  Well, why not go and
just query the &lt;a href=&quot;/zipcpu/2019/04/02/icontrol.html&quot;&gt;interrupt controller on the
bus&lt;/a&gt; to see what’s
going on?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;When working with an external piece of hardware, and until you have that
hardware “under control”–where your design interacts with it properly and
they way you expect it to–sometimes you have to work with things to figure
out what’s going right (or wrong) with the interface.  A good example might
be &lt;a href=&quot;/blog/2019/03/27/qflexpress.html&quot;&gt;my work in a Quad SPI flash
controller&lt;/a&gt;.  Being able
to explore “what-if” scenarios from a command line can be quite powerful.
(What if I have the timing delay messed up, and it needs to be three clock
cycles instead of four?  Let’s try that …)  By using a
&lt;a href=&quot;https://github.com/ZipCPU/dbgbus/tree/master/hexbus&quot;&gt;debugging bus&lt;/a&gt;
to find and fix problems, you won’t need to take the time to rebuild your
FPGA design until you know what was going wrong with the current design.&lt;/p&gt;

    &lt;p&gt;Indeed, and as an example, someone recently tried out &lt;a href=&quot;/blog/2019/03/27/qflexpress.html&quot;&gt;my Quad SPI flash
controller&lt;/a&gt;.  So far,
he tells me that the controller works as long as he only uses the memory
mapped I/O port.  However, without being able to shut the CPU down and run
ad-hoc queries, he’s been struggling to figure out why the flash won’t handle
his arbitrary access commands.  A proper &lt;a href=&quot;https://github.com/ZipCPU/dbgbus/tree/master/hexbus&quot;&gt;debugging
bus&lt;/a&gt;
interface will help this individual.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;You’ve seen me discuss how a
&lt;a href=&quot;https://github.com/ZipCPU/dbgbus/tree/master/hexbus&quot;&gt;debugging bus&lt;/a&gt; could
be used to &lt;a href=&quot;/dsp/2020/04/20/axil2axis.html&quot;&gt;debug a signal processing
chain&lt;/a&gt;
by &lt;a href=&quot;/dsp/2019/12/21/histogram.html&quot;&gt;inspecting histograms&lt;/a&gt;
or even taking &lt;a href=&quot;/dsp/2020/03/17/cheap-spectra.html&quot;&gt;spectral
estimates&lt;/a&gt; of what’s
going on within that chain.  All this can be done from an external computer
via commands sent over a &lt;a href=&quot;https://github.com/ZipCPU/dbgbus/tree/master/hexbus&quot;&gt;debugging bus&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Of course there’s also my own favorite use for the bus: getting access to a
&lt;a href=&quot;/blog/2017/06/08/simple-scope.html&quot;&gt;bus-based internal logic
analyzer&lt;/a&gt;, such as
my &lt;a href=&quot;/blog/2017/07/08/getting-started-with-wbscope.html&quot;&gt;Wishbone
Scope&lt;/a&gt;.
(Don’t get hung up on the term
“&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone&lt;/a&gt;”.  Yes,
there is now an &lt;a href=&quot;https://github.com/ZipCPU/wbscope/blob/master/rtl/axilscope.v&quot;&gt;AXI-lite version of
it&lt;/a&gt;, and even
a &lt;a href=&quot;https://github.com/ZipCPU/wbscope/blob/master/rtl/memscope.v&quot;&gt;virtual AXI (full)
version&lt;/a&gt; which
can use SDRAM as a back end.)&lt;/p&gt;

    &lt;p&gt;Such a &lt;a href=&quot;/blog/2017/06/08/simple-scope.html&quot;&gt;bus-based
scope&lt;/a&gt; capability
requires you to have access to your design from an external location.  If
you can get access to the design externally, you can
then command the scope, adjust the window location with respect to the
trigger, and then read back the results to tell you what’s going on within
the design–even potentially after the CPU has locked up.&lt;/p&gt;

    &lt;p&gt;Once you do start using that soft-core CPU of yours within the design, you
can then also script the &lt;a href=&quot;/blog/2017/06/08/simple-scope.html&quot;&gt;logic
analyzer&lt;/a&gt; from within
the soft-core CPU’s software to capture according to whatever your software
is doing by just &lt;a href=&quot;/blog/2018/11/03/soc-fpga.html&quot;&gt;writing to the
bus&lt;/a&gt;.  Indeed, I’ve been
known to do that with my &lt;a href=&quot;https://github.com/ZipCPU/zbasic/blob/master/sw/board/cputest.c&quot;&gt;CPU test
script&lt;/a&gt;,
to provide me with a trace should any individual CPU test fail–but let’s
not get ahead of ourselves today.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In the military, we might say that such a “&lt;a href=&quot;https://github.com/ZipCPU/dbgbus/tree/master/hexbus&quot;&gt;debugging
bus&lt;/a&gt;” gives you the
ability to “&lt;a href=&quot;https://en.wikipedia.org/wiki/Command_and_control&quot;&gt;command and
control&lt;/a&gt;” your design.  You
can also use it to get
“&lt;a href=&quot;https://en.wikipedia.org/wiki/Telemetry&quot;&gt;telemetry&lt;/a&gt;“-like data
back from a running design.  Okay, the analogy doesn’t quite
work–&lt;a href=&quot;https://en.wikipedia.org/wiki/Telemetry&quot;&gt;Telemetry&lt;/a&gt; is a &lt;a href=&quot;/blog/2021/11/15/ultimate-i2c.html&quot;&gt;“push”-based
system, always broadcasting information to
listeners&lt;/a&gt;, whereas a
&lt;a href=&quot;https://github.com/ZipCPU/dbgbus/tree/master/hexbus&quot;&gt;debugging bus&lt;/a&gt;
requires a bus master to “pull” any desired information–but it’s still a
matter of getting debugging information from within the system under test.
Perhaps a better analogy might be “micromanaging” an interaction, but we won’t
push a bad metaphor quite so far.&lt;/p&gt;

&lt;h2 id=&quot;the-hexbus-design&quot;&gt;The Hexbus Design&lt;/h2&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 2. An overview of the parts and pieces in my standard debugging bus&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/wb-uart-ovw.svg&quot; alt=&quot;&quot; width=&quot;280&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;&lt;a href=&quot;/blog/2017/06/05/wb-bridge-overview.html&quot;&gt;When we started talking about a debugging bus, I offered an overview of the
debugging bus&lt;/a&gt;
I’d been using in my own designs–one I’ve called my
“&lt;a href=&quot;https://github.com/ZipCPU/openarty/blob/master/rtl/wbubus/wbubus.v&quot;&gt;wbubus&lt;/a&gt;”
since it offers a “Wishbone to UART” conversion.  Data would come in, get
decoded–possibly even
&lt;a href=&quot;/formal/2019/10/05/formal-enough.html&quot;&gt;decompressed&lt;/a&gt;,
head into a FIFO, and then from there commands would issue to the bus.
Results would then get formed from the &lt;a href=&quot;https://github.com/ZipCPU/openarty/blob/master/rtl/wbubus/wbuexec.v&quot;&gt;bus
executor&lt;/a&gt;
and sent into a
&lt;a href=&quot;https://github.com/ZipCPU/openarty/blob/master/rtl/wbubus/wbufifo.v&quot;&gt;FIFO&lt;/a&gt;,
from whence they would be mixed with &lt;a href=&quot;https://github.com/ZipCPU/openarty/blob/master/rtl/wbubus/wbuidleint.v&quot;&gt;an interrupt or idle
signal&lt;/a&gt;,
&lt;a href=&quot;https://github.com/ZipCPU/openarty/blob/master/rtl/wbubus/wbucompress.v&quot;&gt;compressed&lt;/a&gt;,
and then recoded back into bytes that could be sent back across the
&lt;a href=&quot;/formal/2019/02/21/txuart.html&quot;&gt;serial port&lt;/a&gt;.  We then
built, together, a &lt;a href=&quot;https://github.com/ZipCPU/dbgbus/tree/master/hexbus&quot;&gt;second debugging bus
design&lt;/a&gt; that I called
the “&lt;a href=&quot;https://github.com/ZipCPU/dbgbus/tree/master/hexbus&quot;&gt;hexbus&lt;/a&gt;”
design since it is designed around a simpler hexadecimal encoding.  You can
see the block diagram for this
“&lt;a href=&quot;https://github.com/ZipCPU/dbgbus/tree/master/hexbus&quot;&gt;hexbus&lt;/a&gt;” in Fig. 3 below.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left; padding: 20px&quot;&gt;&lt;caption&gt;Fig 3. The hexbus design&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/dbgaxil/hexbus.svg&quot; alt=&quot;&quot; width=&quot;280&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;That “&lt;a href=&quot;https://github.com/ZipCPU/dbgbus/tree/master/hexbus&quot;&gt;hexbus&lt;/a&gt;”
was meant to be a demonstration only design–showing you how it
might be done.  It was built around a &lt;a href=&quot;/blog/2017/06/14/creating-words-from-bytes.html&quot;&gt;very simple hexadecimal
encoding&lt;/a&gt;
that could just about &lt;a href=&quot;/blog/2017/06/22/simple-wb-interconnect.html&quot;&gt;be read and debugged
manually&lt;/a&gt;.
Together, then, we walked through all the pieces of it from
&lt;a href=&quot;/blog/2017/06/14/creating-words-from-bytes.html&quot;&gt;converting the incoming characters into 34-bit command
words&lt;/a&gt;,
&lt;a href=&quot;/blog/2017/06/08/simple-wb-master.html&quot;&gt;issuing those commands across the bus&lt;/a&gt;,
and then &lt;a href=&quot;/blog/2017/06/15/words-back-to-bytes.html&quot;&gt;recoding the 34-bit command
results&lt;/a&gt; back
for transmission across the &lt;a href=&quot;/formal/2019/02/21/txuart.html&quot;&gt;serial
port&lt;/a&gt;.  My intention, however,
was always to throw away the
“&lt;a href=&quot;https://github.com/ZipCPU/dbgbus/tree/master/hexbus&quot;&gt;hexbus&lt;/a&gt;” implementation
when I was done.  It was only meant to be a demonstration design after all.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 4. Could the hexbus protocol drive an AXI bus?&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/dbgaxil/hexaxil.svg&quot; alt=&quot;&quot; width=&quot;280&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;That was until I tried working with an iCE40.  No matter how hard I tried, I
couldn’t seem to fit &lt;a href=&quot;/blog/2017/06/05/wb-bridge-overview.html&quot;&gt;my full featured wbubus debugging
bus&lt;/a&gt;
onto &lt;a href=&quot;https://github.com/ZipCPU/icozip&quot;&gt;an iCE40 HX8K together with the
ZipCPU&lt;/a&gt;.  The two just wouldn’t fit in the
same design at the same time.  The
“&lt;a href=&quot;https://github.com/ZipCPU/dbgbus/tree/master/hexbus&quot;&gt;hexbus&lt;/a&gt;”
on the other hand was simple enough to fit.
Using the &lt;a href=&quot;https://github.com/ZipCPU/dbgbus/tree/master/hexbus&quot;&gt;hexbus&lt;/a&gt; for
debugging, the entire design, CPU + hexbus, currently fits in 4,659 LUTs–small
enough that I could probably go back and retrofit it with the
&lt;a href=&quot;/blog/2017/06/05/wb-bridge-overview.html&quot;&gt;wbubus&lt;/a&gt;
now.  It’s not the smallest iCE40 design, but debugging it isn’t all that
hard.  In other words, this throw-away design has now been well loved and well
used.&lt;/p&gt;

&lt;p&gt;For today, however, the key detail is that the
“&lt;a href=&quot;https://github.com/ZipCPU/dbgbus/tree/master/hexbus&quot;&gt;hexbus&lt;/a&gt;”
design has always been fundamentally a
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone&lt;/a&gt; design.&lt;/p&gt;

&lt;p&gt;What if we wanted to give it an &lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;AXI-lite
capability&lt;/a&gt; instead?
This will be the topic of today’s article.&lt;/p&gt;

&lt;h2 id=&quot;the-hexbus-code&quot;&gt;The Hexbus Code&lt;/h2&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 5. Hexbus line protocol&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/dbgaxil/linecode.svg&quot; alt=&quot;&quot; width=&quot;420&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Just to review, there are a couple basic commands to the
&lt;a href=&quot;https://github.com/ZipCPU/dbgbus/tree/master/hexbus&quot;&gt;hexbus&lt;/a&gt; encoding, as
illustrated in Fig. 5 on the right.  The address can be set for following
transactions by sending an “A” followed by up to 8 lower case hexadecimal
characters.  A read request consists of a simple solitary “R”,
whereas a write request starts with the letter “W” and is then followed by the
hexadecimal value to be written.  Further, I chose to use white space
characters as command separators or synchronization characters if and when
needed.  Hence, both address and write commands can end with a white space
character.  They can also end with any other non-hex character, such as the
beginning of the next command.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left; padding: 20px&quot;&gt;&lt;caption&gt;Fig 6. Internal command protocol&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/dbgaxil/internal-code.svg&quot; alt=&quot;&quot; width=&quot;420&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;By the time these commands arrive at &lt;a href=&quot;https://github.com/ZipCPU/dbgbus/blob/master/hexbus/rtl/hbexecaxi.v&quot;&gt;our new AXI-lite bus
master&lt;/a&gt;,
they are bundled into 34-bit words as shown in Fig. 6 on the left.  Commands
are determined by the first two bits of those 34-bit words.  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2'b00&lt;/code&gt;
prefixes a read request, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2'b01&lt;/code&gt; a write request, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2'b10&lt;/code&gt; a set address
request, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2'b11&lt;/code&gt; is either a reset request (handled earlier) or a don’t
care.&lt;/p&gt;

&lt;p&gt;The commands themselves arrive via a basic stream protocol, as shown in Fig. 7
below.  Once the bus command is complete, a response is then generated
and sent via a similar stream protocol to the next block in the processing
chain–the difference being that there’s no &lt;a href=&quot;https://en.wikipedia.org/wiki/Back_pressure&quot;&gt;back
pressure&lt;/a&gt; on the outgoing
responses.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 7. AXI-lite Controller Block Diagram&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/dbgaxil/blk-controller.svg&quot; alt=&quot;&quot; width=&quot;420&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;One of the challenges, and indeed vulnerabilities, associated with the
&lt;a href=&quot;https://github.com/ZipCPU/dbgbus/tree/master/hexbus&quot;&gt;hexbus&lt;/a&gt; design is that
there are no FIFO’s anywhere in the
&lt;a href=&quot;https://github.com/ZipCPU/dbgbus/tree/master/hexbus&quot;&gt;hexbus&lt;/a&gt; protocol.
Remember, this protocol is designed to be &lt;em&gt;simple&lt;/em&gt;, and to fit on really small
hardware.  This means that the stream protocol and handshakes shown above in
Fig. 7 are a misnomer:
&lt;a href=&quot;https://github.com/ZipCPU/dbgbus/tree/master/hexbus&quot;&gt;hexbus&lt;/a&gt; can’t handle
overflow anywhere in its processing.  The downstream processor &lt;em&gt;must&lt;/em&gt; be ready
to accept any response value provided.  The upstream source can only delay
values by one or two clock cycles at the most.  Further, it is the
responsibility of the &lt;a href=&quot;https://github.com/ZipCPU/dbgbus/blob/maste/hexbus/sw/hexbus.cpp&quot;&gt;host
software&lt;/a&gt;,
not the RTL, to guarantee that there are no overflows in actual operation.&lt;/p&gt;

&lt;p&gt;This block diagram in Fig. 7, together with the command protocol shown in Fig. 6
above, is where we’ll start today’s design discussion from.&lt;/p&gt;

&lt;h2 id=&quot;building-the-axi-lite-bus-master&quot;&gt;Building the AXI-Lite Bus Master&lt;/h2&gt;

&lt;p&gt;The key feature of &lt;a href=&quot;https://github.com/ZipCPU/dbgbus/blob/master/hexbus/rtl/hbexecaxi.v&quot;&gt;this AXI-lite master that we’ll be discussing
today&lt;/a&gt; is
not so much that it’s implemented internally as a state machine, but rather that
we’ll encode our current state in the AXI-lite signals themselves:  On any
write request, we’ll set &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AWVALID&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WVALID&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BREADY&lt;/code&gt; and then hold
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BREADY&lt;/code&gt; high until the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BVALID&lt;/code&gt; acknowledgment.  Likewise, on a read request,
we’ll set &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ARVALID&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RREADY&lt;/code&gt; and then hold &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RREADY&lt;/code&gt; high until we receive
our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RVALID&lt;/code&gt; response.  The “Idle” state will therefore be encoded as
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;!BREADY &amp;amp;&amp;amp; !RREADY&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We’ll expect one of two paths from idle back to idle, as shown in Fig. 8 below.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 8. AXI-lite controller state diagram&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;/img/dbgaxil/axil-fsm.svg&quot;&gt;&lt;img src=&quot;/img/dbgaxil/axil-fsm.svg&quot; alt=&quot;&quot; width=&quot;780&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Let’s start by decoding our incoming command.  We have three possible values
that can come into our core that we need to worry about, as shown in Fig. 6
above.  (Reset is handled elsewhere in the stack.)  Either we want to process
an address, a read command, or a write command.  From this we can create one
of three flags, with two caveats.  First, if the incoming strobe (valid) bit is
low, then there’s no command ready at the input, and second, if we are still
busy with the last command, then we can also ignore any incoming requests.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;localparam&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;CMD_SUB_RD&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;2'b00&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;CMD_SUB_WR&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;	&lt;span class=&quot;mb&quot;&gt;2'b01&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;CMD_SUB_ADDR&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;	&lt;span class=&quot;mb&quot;&gt;2'b10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;CMD_SUB_SPECIAL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mb&quot;&gt;2'b11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;i_cmd_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_cmd_word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;33&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CMD_SUB_ADDR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;i_cmd_rd&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_cmd_word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;33&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CMD_SUB_RD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;i_cmd_wr&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_cmd_word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;33&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CMD_SUB_WR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_cmd_stb&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o_cmd_busy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_cmd_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_cmd_rd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_cmd_wr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;3'h0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This should be familiar as your &lt;a href=&quot;/blog/2017/08/14/strategies-for-pipelining.html&quot;&gt;basic &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VALID&lt;/code&gt;/&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;!READY&lt;/code&gt; handshake that we’ve
discussed&lt;/a&gt;
often enough before.  The difference here is that &lt;a href=&quot;/blog/2019/05/22/skidbuffer.html&quot;&gt;this custom protocol doesn’t
require that the ready logic be registered, so there’s no protocol requirement
for any skidbuffers&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now we can start figuring out how to process these commands.&lt;/p&gt;

&lt;h3 id=&quot;address-processing&quot;&gt;Address Processing&lt;/h3&gt;

&lt;p&gt;The first, and perhaps easiest, command to handle is the address command.  If
ever we receive an address word, we’ll want to set the bus address.  Then,
later, when we receive an actual read or write command we’ll acknowledge
the address back across the channel.  That means we’re going to need to keep
track of the current bus address, as well as whether or not we want to
acknowledge a new address.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;M_AXI_AWADDR&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;newaddr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;So let’s break down, now, how we’ll handle a new address command.  In general,
we’ll just set our outgoing address word.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_cmd_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;M_AXI_AWADDR&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_cmd_word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;2'b00&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Well, not quite.  As it turns out, that’s a nice first pass, but we can do
better with just a touch of &lt;em&gt;compression&lt;/em&gt;.  Let’s use the two lower (unused)
address bits as a compression scheme, as illustrated in Fig. 6 above: one
bit will indicate an address &lt;em&gt;difference&lt;/em&gt;, whereas the second bit will indicate
whether or not we &lt;em&gt;increment&lt;/em&gt; addresses between commands.&lt;/p&gt;

&lt;p&gt;First, bit &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1&lt;/code&gt;.  If bit &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1&lt;/code&gt; is set we’ll allow that this command word encodes
a difference and we’ll adjust our address by this difference.  Otherwise we’ll
set it as above.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_cmd_word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
				&lt;span class=&quot;c1&quot;&gt;// New address&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;M_AXI_AWADDR&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_cmd_word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;2'b00&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
				&lt;span class=&quot;c1&quot;&gt;// Difference address&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;M_AXI_AWADDR&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_cmd_word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;2'b00&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
						&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M_AXI_AWADDR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Synchronizing the initial address will be a task of the &lt;a href=&quot;https://github.com/ZipCPU/dbgbus/blob/6531a0b3e51394a4de37379da7e1bdf566dd2908/hexbus/sw/hexbus.cpp#L290-L335&quot;&gt;software address
encoder&lt;/a&gt;:
the first address given to the
&lt;a href=&quot;https://github.com/ZipCPU/dbgbus/tree/master/hexbus&quot;&gt;hexbus&lt;/a&gt;
will never be a difference address,
whereas difference addresses may be used for subsequent address requests if
they reduce the number of bytes that need to be transmitted for any new address.&lt;/p&gt;

&lt;p&gt;Bit &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt; on the other hand will be an increment indicator.  If we leave it zero,
then we’ll naturally increment our address from one request to the next.
Otherwise, if one, we won’t adjust it from one request to the next at all.
Either way, that means we’ll need to store this value away for later.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;			&lt;span class=&quot;n&quot;&gt;inc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_cmd_word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This also means that you can set an address by hand and have the core mostly
just “do the right thing.”&lt;/p&gt;

&lt;p&gt;We can also use a flag, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;newaddr&lt;/code&gt;, to indicate that the next results from the
bus will be the result of reading or writing to this new address.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;			&lt;span class=&quot;n&quot;&gt;newaddr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now, any time an address word gets accepted by the bus, we’ll
increment the address if this &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;inc&lt;/code&gt;rement bit is set, or otherwise just leave
it the same.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_AWVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M_AXI_AWREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
					&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_ARVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M_AXI_ARREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;M_AXI_AWADDR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M_AXI_AWADDR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Likewise, whenever we get a new read or write command that will use this
new address, then we’ll then send a copy of the address over the link at
the same time we issue the bus command.  That means we can clear our new
address flag at that time as well.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_cmd_rd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_cmd_wr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;newaddr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We can also use the same logic for the read address, and so just copy the read
address value from the write address register.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;M_AXI_ARADDR&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M_AXI_AWADDR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Sometime later, we’re going to need to come back to this and make certain that,
upon a read or write command, the address response gets sent back across the
bus.  We can make a mental note of that to ourselves now by simply adding a
formal property to our design:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_past_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;($&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_cmd_rd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_cmd_wr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// A new address should generate a response headed downstream&lt;/span&gt;
		&lt;span class=&quot;cp&quot;&gt;`ASSERT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_rsp_stb&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;newaddr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;

		&lt;span class=&quot;c1&quot;&gt;// That response should include ... the new address&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;($&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;newaddr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
			&lt;span class=&quot;cp&quot;&gt;`ASSERT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_rsp_word&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RSP_SUB_ADDR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
				&lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_AWADDR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]),&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This simply states that the first step of processing any read or write command,
that is on the first clock following &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;i_cmd_rd || i_cmd_wr&lt;/code&gt;, we must
acknowledge any new/updated address–but only if the address had been changed
since the last read or write command.&lt;/p&gt;

&lt;h3 id=&quot;write-processing&quot;&gt;Write Processing&lt;/h3&gt;

&lt;p&gt;The next step is write processing.  If you’ve never built an
&lt;a href=&quot;/blog/2020/03/23/wbm2axisp.html&quot;&gt;AXI master&lt;/a&gt; before,
this will be easier than you think.  Indeed, the way we’ll build this below
it’ll be &lt;em&gt;really&lt;/em&gt; easy.  We’ll control
the valid signals, the write data, and then return an acknowledgment on success
or failure.  Oh, one more thing–we’ll set &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BREADY&lt;/code&gt; to note that we are no
longer idle, and now expecting a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BVALID&lt;/code&gt; response.&lt;/p&gt;

&lt;p&gt;First, we clear everything on reset.  This is a necessity.  AXI &lt;em&gt;requires&lt;/em&gt; a
reset, so let’s make certain we implement it here.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;M_AXI_AWVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;M_AXI_WVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;M_AXI_BREADY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;M_AXI_AWVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;M_AXI_WVALID&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;M_AXI_BREADY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The next step is going to look a bit backwards.  Chronologically we’d set
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AWVALID &amp;amp;&amp;amp; WVALID &amp;amp;&amp;amp; BREADY&lt;/code&gt; on any write command.  I’m instead going to start
with the last half of the operation, and say that if we are waiting on a write
response then …&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;We should stop waiting if/when we get that response.&lt;/li&gt;
&lt;/ol&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_BREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_BVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;M_AXI_BREADY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ol start=&quot;2&quot;&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AWVALID&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WVALID&lt;/code&gt; should also each be cleared independently when their
respective &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;xREADY&lt;/code&gt; signals go high.&lt;/li&gt;
&lt;/ol&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_AWREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;M_AXI_AWVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_WREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;M_AXI_WVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This is really the biggest gotcha of building an AXI4-lite interface: the write
address and write data channels aren’t synchronized at all.  Sure, we’ll
synchronize them both to start of this transaction, but either one of these
two channels may get accepted before the other.  This is captured by the fact
that both of these signals are handled in the same logic block, although in
separate &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;if&lt;/code&gt; statements.&lt;/p&gt;

&lt;p&gt;That’s the end of processing the burst.  Seriously?  Yeah, it really is that
easy.  No, we haven’t gotten to the write data yet–but that’s even easier.&lt;/p&gt;

&lt;p&gt;For now, let’s step back and look at how we would generate a write request
in the first place.&lt;/p&gt;

&lt;ol start=&quot;3&quot;&gt;
  &lt;li&gt;On any write request from our interface, we set all three signals high,
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AWVALID&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WVALID&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BREADY&lt;/code&gt;.  Remember, these signals are also
encoding our state machine.  We won’t return to idle again until &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BREADY&lt;/code&gt;
is cleared.&lt;/li&gt;
&lt;/ol&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_cmd_wr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;M_AXI_AWVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;M_AXI_WVALID&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;M_AXI_BREADY&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;That leaves only two signals left for the write half, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WDATA&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WSTRB&lt;/code&gt;.
In the case of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WSTRB&lt;/code&gt;, it’s easy: the
&lt;a href=&quot;https://github.com/ZipCPU/dbgbus/tree/master/hexbus&quot;&gt;hexbus&lt;/a&gt; only supports
full 32-bit word accesses–this is no different from the
&lt;a href=&quot;/blog/2017/06/05/wb-bridge-overview.html&quot;&gt;wbubus&lt;/a&gt; or any
of my other debugging buses.  As a result, there’s no way to access an 8-bit
byte within any 32-bit word using the protocol we defined above in Fig. 6.
For this reason, we can just leave &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WSTRB&lt;/code&gt; as all ones: any write will write
to all four bytes at the same time.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;M_AXI_WSTRB&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The second piece is almost just as unremarkable: if we aren’t busy, then we
can set the write data based upon any incoming command.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_BREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;M_AXI_WDATA&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_cmd_word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;31&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;There’s just one problem with this: how much downstream logic will get driven
every time &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;i_cmd_word&lt;/code&gt; changes?  There’s a cost in terms of power to every
wire that has to change.  Thus, although this is a low-logic solution, there
is also a low power solution.&lt;/p&gt;

&lt;p&gt;Perhaps the ultimate low power solution would be to only update
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WDATA&lt;/code&gt; on a new write request.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_cmd_wr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;M_AXI_WDATA&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_cmd_word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;31&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I’ve also been experimenting with forcing value to zero when not in use, for
much the same reason.  In that case, we might try:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARESETN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;M_AXI_WDATA&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_cmd_wr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;M_AXI_WDATA&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_cmd_word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;31&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_WREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;M_AXI_WDATA&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Either way, the point is that following a write request, we want to make
certain that we are then driving the bus based upon that request.  A simple
assertion at this point in the design can help us describe this.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;S_AXI_ARESETN&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_cmd_wr&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;|=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M_AXI_BREADY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M_AXI_AWVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M_AXI_WVALID&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M_AXI_WDATA&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_cmd_word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;31&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]));&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;There’s just one thing we’ve skipped, and that’s creating the write return
response.  We’ll come back to that in a moment, though, following the read
state machine.&lt;/p&gt;

&lt;h3 id=&quot;read-processing&quot;&gt;Read Processing&lt;/h3&gt;

&lt;p&gt;As it turns out, reads are even easier than writes.  On a reset, we clear
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ARVALID&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ARESETN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARESETN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;M_AXI_ARVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1'b0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;M_AXI_RREADY&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1'b0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;While waiting for a response, we’ll clear &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ARVALID&lt;/code&gt; on any &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ARREADY&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_RREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_ARREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;M_AXI_ARVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1'b0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Once we get our read response, we’ll clear &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RREADY&lt;/code&gt;–sending us back to our idle
state.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_RVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;M_AXI_RREADY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1'b0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;But how shall we begin any reads?  Simple!  If we are in our idle state,
then start a read on any request.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_cmd_rd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;M_AXI_ARVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1'b1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;M_AXI_RREADY&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1'b1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We can even capture this thought in a simple assertion.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;S_AXI_ARESETN&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_cmd_rd&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;|=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M_AXI_ARVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M_AXI_RREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;While this sort of ad-hoc assertion isn’t sufficient to pass
&lt;a href=&quot;/blog/2018/03/10/induction-exercise.html&quot;&gt;induction&lt;/a&gt;,
it’s certainly good enough to get us started when we get there.  Actually,
when we get there below, I’m going to continue using &lt;a href=&quot;/formal/2019/02/21/txuart.html&quot;&gt;immediate
assertions&lt;/a&gt;–they’re a bit
more verbose, but they can have the same effect without many of the &lt;a href=&quot;/formal/2019/02/21/txuart.html&quot;&gt;serious
drawbacks associated with formally verifying concurrent
assertions&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;All that remains is to grab and return the response to then be sent to rest
of the debugging bus design.&lt;/p&gt;

&lt;h3 id=&quot;return-processing&quot;&gt;Return Processing&lt;/h3&gt;

&lt;p&gt;Now that we’ve run the bus and accomplished our transaction, it’s important
that we return a proper response downstream.  In this case, we’ll want to send
one of several words down the debugging bus processing chain depending on
both our state, and the response we just received from the bus:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Following a system reset, we’ll immediately send a reset
confirmation downstream&lt;/li&gt;
  &lt;li&gt;On a write response, we’ll send a write acknowledgment&lt;/li&gt;
  &lt;li&gt;On a read response, we’ll need to send the RDATA value that the bus returned&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;On any &lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;error&lt;/a&gt;, we’ll want to send a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;error&lt;/a&gt;, response.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Finally, on any new address, we’ll send that new address downstream the
first time it is used&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now, how shall all these values be encoded?  I’ll admit, I spend far more time
thinking about this than perhaps I should have.&lt;/p&gt;

&lt;p&gt;If you’ll remember, some time ago I discussed &lt;a href=&quot;/zipcpu/2019/03/28/return-decoding.html&quot;&gt;minimizing logic usage when
the question was how to select from a number of potential sources–each with
a valid flag&lt;/a&gt;.
The answer I came up with at the time was to pre-calculate an index, and then
to use a case statement based upon that index to determine a return value.&lt;/p&gt;

&lt;p&gt;An alternative approach that came up in a twitter thread with Clifford was to
use a for loop, but in such a fashion that it would simply collapse into a
sum of products.  For example, if you know that only one ACK value will ever
be true at a time, you might write:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;return_value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AXI_LIST_SIZE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;return_value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;return_value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Notice how the result doesn’t depend upon any multiplexers: it’s just a giant
OR statement–a “sum” (i.e. OR) of “products” (ANDs).  As long as you, the
designer, can ensure that the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ack&lt;/code&gt; vector will only ever be one hot or zero,
then this approach can work well.&lt;/p&gt;

&lt;p&gt;Indeed, this is the approach I chose to use for the response word, returning
data to our debugging bus processing chain.  I started by initializing this
response word to zero.  Then, on any write return, I set the response word.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;rsp_word&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_BVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_BRESP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;rsp_word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;33&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;28&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RSP_BUS_ERROR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;33&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;28&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;rsp_word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;33&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RSP_WRITE_ACKNOWLEDGMENT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;33&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Note that there are two possible returns here: either there’s been a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;error&lt;/a&gt;, and a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;error&lt;/a&gt;,
return needs to be generated, or we are simply acknowledging
that a write has been completed.&lt;/p&gt;

&lt;p&gt;Given that this is the first potential value of the response word, there were
no “OR” values here–at least, not yet.  For the first word, we can just set
things independent of any prior value in the chain.&lt;/p&gt;

&lt;p&gt;We can then move on to any read response.  Here things change subtly.  Unlike
if &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BVALID&lt;/code&gt; was true above, where I could force the prior value of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rsp_word&lt;/code&gt;
to a known value, in this case of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RVALID&lt;/code&gt; I might need to set &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rsp_word&lt;/code&gt; to
completely different response word.  In this case, the synthesizer would never
know that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RVALID&lt;/code&gt; would only ever be true if &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BVALID&lt;/code&gt; were not.  So, I used
the “OR” approach outlined above to capture the idea of merging these two
return responses.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_RVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_RRESP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;rsp_word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;33&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;28&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rsp_word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;33&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;28&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
						&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RSP_BUS_ERROR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;33&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;28&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;rsp_word&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rsp_word&lt;/span&gt;
					&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RSP_SUB_DATA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M_AXI_RDATA&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;As a final potential return value, the response word needs to contain any
new address the first time we use it.  As before, we’ll simply OR this
together with the prior values.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;newaddr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;rsp_word&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rsp_word&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RSP_SUB_ADDR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
					&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mb&quot;&gt;1'b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
					&lt;span class=&quot;n&quot;&gt;M_AXI_AWADDR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1'b0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The neat thing about these “OR” functions is that they don’t create &lt;a href=&quot;/zipcpu/2019/03/28/return-decoding.html&quot;&gt;long
multiplexer chains&lt;/a&gt;.
Further, because this &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rsp_word&lt;/code&gt;, however, is built of “OR” functions, the
practical reality is that you must build it in an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;always @(*)&lt;/code&gt; block.  Within
the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;always @(*)&lt;/code&gt; block, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rsp_word&lt;/code&gt; is allowed to reference the last value of
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rsp_word&lt;/code&gt;–something that would not work in an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;always @(posedge CLK)&lt;/code&gt; block.
That also means that, now that we’ve built our response word, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rsp_word&lt;/code&gt;,
we now need to register it in a second step.&lt;/p&gt;

&lt;p&gt;For those who know me and the logic I write, you’ll know that I don’t normally
use two process blocks.  The complexity of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rsp_word&lt;/code&gt; above, however, is
enough to force us into a two process implementation.&lt;/p&gt;

&lt;p&gt;Hence, here’s the second process.  It starts with the reset.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;o_rsp_stb&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1'b1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;o_rsp_word&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RSP_RESET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_rsp_stb&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1'b1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_rsp_word&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RSP_RESET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;On any system reset, our first response down the processing chain will be to
acknowledge that reset.&lt;/p&gt;

&lt;p&gt;Otherwise, we’ll send a response downstream on either any response from the bus,
or any time we get a read or write request after a new address has been set.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_rsp_stb&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_rsp_word&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_BVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M_AXI_RVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;o_rsp_stb&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;newaddr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_cmd_rd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_cmd_wr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;o_rsp_stb&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The final step is to set the response word that will be valid if ever
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;o_rsp_stb&lt;/code&gt; is also valid.  This is the data word, set above, that will
be qualified by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;o_rsp_stb&lt;/code&gt; and ignored any time &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;o_rsp_stb&lt;/code&gt; is zero.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;n&quot;&gt;o_rsp_word&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rsp_word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This ends the basic AXI-lite bus master implementation.  A couple things to
note:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;We kept this simple, by limiting ourselves to no more than one request at
a time.  AXI-lite can handle many more, but our goal here was simplicity.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;We encoded our “state machine”’s state in the various hand shaking signals
used by AXI-lite.  While this may not feel like a conventional state machine,
it is technically a state machine.  Even better, the approach is both
simple and effective.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Although this design was intended for use with a debugging bus
implementation, the unexpected reality is that we could use this approach
to &lt;em&gt;script&lt;/em&gt; any AXI-lite interaction we wanted to create.  In other words,
this simple approach is quite a bit more powerful than I had originally
intended.&lt;/p&gt;

&lt;h2 id=&quot;verification&quot;&gt;Verification&lt;/h2&gt;

&lt;p&gt;Let’s do verification the easy way.  Any time you need to verify that an
AXI-lite implementation “works”, the easy way to verify it is to grab &lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;a copy
of the formal AXI-lite model&lt;/a&gt;
and then to simply instantiate it within your design.&lt;/p&gt;

&lt;p&gt;There’s a couple of configuration notes to setting this up.  First, we only
need two bits to be able to count up to the maximum number of transactions
on the bus.  Hence, we’ll set the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;F_LGDEPTH&lt;/code&gt; to 2 and define a couple of
values to connect to our model having this width.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;localparam&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;F_LGDEPTH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F_LGDEPTH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;faxil_awr_outstanding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;faxil_wr_outstanding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;faxil_rd_outstanding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We also need to set the address width (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C_AXI_ADDR_WIDTH&lt;/code&gt;) and data width
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(C_AXI_DATA_WIDTH)&lt;/code&gt; of the property set.  We’ll
allow the design to assume the existence of a reset &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(F_OPT_ASSUME_RESET)&lt;/code&gt;,
while also not requiring that reset to be a full 16 clock cycles
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(F_OPT_NO_RESET)&lt;/code&gt;.  (Xilinx’s AXI implementation notes require a long reset,
even though most of their IP does not.)&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;n&quot;&gt;faxil_master&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;#(&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C_AXI_ADDR_WIDTH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C_AXI_DATA_WIDTH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F_OPT_ASSUME_RESET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mb&quot;&gt;1'b1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F_OPT_NO_RESET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mb&quot;&gt;1'b1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F_LGDEPTH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F_LGDEPTH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;From here, the rest of instantiating the &lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;AXI-lite
properties&lt;/a&gt; are very
straightforward.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;faxil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_reset_n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_awvalid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_AWVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_awready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_AWREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
			&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_awaddr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_AWADDR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
			&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_awprot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_AWPROT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_wvalid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_WVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_wready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_WREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
			&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_wdata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_WDATA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
			&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_wstrb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_WSTRB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_bvalid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_BVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_bready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_BREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
			&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_bresp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_BRESP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_arvalid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_ARVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_arready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_ARREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
			&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_araddr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_ARADDR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
			&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_arprot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_ARPROT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_rvalid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_RVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_rready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_RREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
			&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_rdata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_RDATA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
			&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_rresp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_RRESP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_axi_rd_outstanding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;faxil_rd_outstanding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
			&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_axi_wr_outstanding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;faxil_wr_outstanding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
			&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_axi_awr_outstanding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;faxil_awr_outstanding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;At this point, we should be able to start running and passing proofs.
&lt;a href=&quot;/blog/2018/03/10/induction-exercise.html&quot;&gt;Induction&lt;/a&gt;
will take some more work, but we’ll get to that in a moment.  Even better,
this design is so simple that 20-40 clock steps should be sufficient for any
non-&lt;a href=&quot;/blog/2018/03/10/induction-exercise.html&quot;&gt;induction&lt;/a&gt;
proof.&lt;/p&gt;

&lt;p&gt;This is also the point where I tend to start throwing assertions at the wall,
just to make certain that things I’ve assumed during my design really are true.
For example, we chose above to capture our “state” in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BREADY&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RREADY&lt;/code&gt;.
Our goal was that if we were ever working on a write, then &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BREADY&lt;/code&gt; should
be true, and if we were ever working on a read the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RREADY&lt;/code&gt; should be true.
If neither are true, then we should be idle.  This also means that both should
never be true together.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_BREADY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_RREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Let’s break this down a bit more, though.  If &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BREADY&lt;/code&gt; is false, then we are
not in the middle of any write transactions.  The number of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AWVALID&lt;/code&gt;s that
have taken place without seeing any corresponding &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BVALID&lt;/code&gt; are zero, and the
same can be said for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WVALID&lt;/code&gt;s.  Not only that, but if &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BREADY&lt;/code&gt; is false, then
both &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AWVALID&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WVALID&lt;/code&gt; should be zero–since we’re not in the &lt;em&gt;middle&lt;/em&gt; of
any write transaction either.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_BREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;faxil_awr_outstanding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;faxil_wr_outstanding&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_AWVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_WVALID&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Where things get a bit more interesting is when &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BREADY&lt;/code&gt; is true.  In this
case, we’ll have a write address request outstanding if &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AWVALID&lt;/code&gt; has been
accepted and dropped.  The same will be true of a write data request should
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WVALID&lt;/code&gt; have been accepted and then dropped.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;faxil_awr_outstanding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_AWVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;faxil_wr_outstanding&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_WVALID&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Indeed, this is often all I have to do to verify the write half of an AXI-lite
interface.  It’s pretty easy, and nearly boilerplate.&lt;/p&gt;

&lt;p&gt;The read half isn’t all that different either.&lt;/p&gt;

&lt;p&gt;If &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RREADY&lt;/code&gt; is low, then we aren’t trying to read and so both &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ARVALID&lt;/code&gt;
and the number of read requests outstanding should both be zero.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_RREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;faxil_rd_outstanding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_ARVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If, on the other hand, we are reading and so &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RREADY&lt;/code&gt; is high, then 
either &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ARVALID&lt;/code&gt; is one or we have exactly one read request outstanding.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;faxil_rd_outstanding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_ARVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;How about reset?  Following a reset, we should be able to assume that nothing
is incoming.  Likewise, following a reset, we should be in our idle “state”
with both &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BREADY&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RREADY&lt;/code&gt; low.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_past_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;($&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;cp&quot;&gt;`ASSUME&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_cmd_stb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_BREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_RREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Did you notice how we only checked &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BVALID&lt;/code&gt; above if &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BREADY&lt;/code&gt; were  also true?
Or likewise we only checked &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RVALID&lt;/code&gt; if &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RREADY&lt;/code&gt; was also true?  Let’s add a
quick property to help guarantee that neither &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BVALID&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RVALID&lt;/code&gt; will ever
be true unless we are expecting them.  (This should also be captured by the
properties above, but an extra assertion or two won’t hurt anything.)&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_BVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_BREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_RVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_RREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;So far, we’ve focused primarily on the AXI-lite interface.  Indeed, the above
is really all that’s required to verify an AXI-lite interface.  There’s
literally nothing more to it.&lt;/p&gt;

&lt;p&gt;In the meantime, though, I’d like to assume the stream properties our incoming
interface.  This interface is essentially an AXI stream interface, although
the labels are a bit different.  For example, we used a busy instead of a
ready–but the principle remains almost identical.  Hence, following any
reset, we can assume that the STB (VALID) goes low.  Second, following any
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;STB &amp;amp;&amp;amp; BUSY&lt;/code&gt; (i.e. VALID &amp;amp;&amp;amp; !READY), pending requests need to remain that:
pending and without change.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_past_valid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_cmd_stb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;($&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_cmd_stb&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o_cmd_busy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_cmd_stb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;($&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;stable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_cmd_word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;That leaves us with one last property: that our BUSY signal will be true any
time either &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BREADY || RREADY&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_cmd_busy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_BREADY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M_AXI_RREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This, however, is one of those “Do I really need this?” assertions.  Why?
Because we defined &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;o_cmd_busy&lt;/code&gt; as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BREADY || RREADY&lt;/code&gt;.  Why then have an
assertion to verify this?&lt;/p&gt;

&lt;p&gt;Do we need such an assertion?  Probably not.  I’ve placed it in here, though,
to remind myself that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;o_cmd_busy&lt;/code&gt; has a specific definition.  There will be
consequences should I ever try to change it in the future.  This is just a
reminder of that–something to force me to think a touch harder before ever
adjusting this value.&lt;/p&gt;

&lt;h3 id=&quot;contract-checking&quot;&gt;Contract checking&lt;/h3&gt;

&lt;p&gt;Now that we know our
&lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;AXI-lite interface&lt;/a&gt;
works, let’s turn our attention to the specific functionality of this design.
Specifically, we want to know not just that the design will follow the &lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;AXI-lite
rules of the road&lt;/a&gt;, but also
that it will do what we want it to.  So, let’s check some
&lt;a href=&quot;/formal/2020/06/12/four-keys.html&quot;&gt;contract rules&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For example, we want to assert the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;newaddr&lt;/code&gt; flag following any requested
address, but also to guarantee that it returns low after we issue any bus
requests.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_past_valid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;newaddr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;($&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_cmd_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;newaddr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;($&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_cmd_rd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_cmd_wr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;newaddr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;($&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;stable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;newaddr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Following this further, on any request to read or write following a new
address request, we should also be producing a downstream response acknowledging
the new address.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_past_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;($&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_cmd_rd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_cmd_wr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;cp&quot;&gt;`ASSERT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_rsp_stb&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;newaddr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;($&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;newaddr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
			&lt;span class=&quot;cp&quot;&gt;`ASSERT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_rsp_word&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RSP_SUB_ADDR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mb&quot;&gt;1'b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
				&lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_AWADDR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]),&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Finally, the new address flag should be low while any request is pending.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_BREADY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M_AXI_RREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;newaddr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;How about resets?  Following any reset, we said we wanted to produce a
reset response output.  Here, we’ll just double check that this happens.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_past_valid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;cp&quot;&gt;`ASSERT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_rsp_stb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_rsp_word&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RSP_RESET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We can then check for write acknowledgments following &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BVALID&lt;/code&gt; and
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BRESP=OKAY&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_past_valid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_BVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_BRESP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_rsp_stb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_rsp_word&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RSP_WRITE_ACKNOWLEDGEMENT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Read acknowledgments are also (nearly) identical.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_past_valid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_RVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_RRESP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_rsp_stb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_rsp_word&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RSP_SUB_DATA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_RDATA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The last response we might return is a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;error&lt;/a&gt;.
In this case, if &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;xRESP&lt;/code&gt; is every anything other than &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OKAY&lt;/code&gt;, then it’s an
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;error&lt;/a&gt;.  (AXI-lite doesn’t allow
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;xRESP&lt;/code&gt; to ever equal &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EXOKAY=2'b01&lt;/code&gt;.)  We don’t care, here, if it’s a slave
error, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2'b10&lt;/code&gt;, or an interconnect error, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2'b11&lt;/code&gt;–a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;error&lt;/a&gt; return is a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;error&lt;/a&gt; return as far as
&lt;a href=&quot;https://github.com/ZipCPU/dbgbus/tree/master/hexbus&quot;&gt;this&lt;/a&gt;
protocol goes.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_past_valid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(($&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_BVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M_AXI_BRESP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;($&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_RVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M_AXI_RRESP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))))&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_rsp_stb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_rsp_word&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RSP_BUS_ERROR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;At this point, we should have good confidence that our design will always
return the values downstream that it’s supposed to.&lt;/p&gt;

&lt;h2 id=&quot;cover-checks&quot;&gt;Cover Checks&lt;/h2&gt;

&lt;p&gt;This leaves us one last verification step.  So far, we’ve proven that this
design will follow the &lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;AXI-lite
protocol&lt;/a&gt;.  We’ve proven this
via &lt;a href=&quot;/blog/2018/03/10/induction-exercise.html&quot;&gt;induction&lt;/a&gt;.
We’ve also guaranteed that the design will properly return appropriate values
down stream based upon what’s going on within.&lt;/p&gt;

&lt;p&gt;What we haven’t done is to prove that responses are still possible.&lt;/p&gt;

&lt;p&gt;I’ve just had one too many designs where I’ve convinced myself that the design
works when, for one reason or another, I’ve made one too many assumptions to
keep the design from working.  For example, I once assumed &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;reset&lt;/code&gt; was always
true.  It was amazing how quickly the design passed a formal check, and just
as disheartening to see that it never worked in simulation or hardware.&lt;/p&gt;

&lt;p&gt;A good cover check will help guarantee we haven’t made such mistakes.&lt;/p&gt;

&lt;p&gt;Therefore, let’s see if we can complete several writes and reads.&lt;/p&gt;

&lt;p&gt;The first step is to count the number of writes that complete.  In this case,
let’s count how many writes in a row we can go through–while disallowing any
reads.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;cvr_writes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M_AXI_RREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;cvr_writes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_BVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;cvr_writes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cvr_writes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Our goal will be to accomplish four writes before returning to idle.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;cover&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cvr_writes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;faxil_awr_outstanding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;faxil_wr_outstanding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You can see how well we did in Fig. 9 below.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 9. Cover, four writes in a row&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;/img/dbgaxil/cvr-writes-annotated.svg&quot;&gt;&lt;img src=&quot;/img/dbgaxil/cvr-writes-annotated.svg&quot; alt=&quot;&quot; width=&quot;780&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;In this case, there are four write requests, and six responses forwarded 
downstream.  The first response acknowledges a reset, and the next acknowledges
the new address.  These two responses are then followed by a regular write
acknowledgment, and then (bonus!) three
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;error&lt;/a&gt;
acknowledgments.&lt;/p&gt;

&lt;p&gt;This is also the place where I usually measure throughput as well.  In this
case, the throughput is horrible: one word can be written every three cycles.
It’s worse than that, though, since this doesn’t capture any
&lt;a href=&quot;/blog/2019/07/17/crossbar.html&quot;&gt;interconnect&lt;/a&gt;
latencies.&lt;/p&gt;

&lt;p&gt;On the other hand, the purpose of this design was never throughput–it was
low logic, and a basic demonstration of an AXI-lite master.  We’ll come back
to the logic estimate in a moment to see how well we did there.&lt;/p&gt;

&lt;p&gt;For now, let’s repeat this test with reads.  Can we cover a set of four reads
in a row?  The first step is to count them–much like we did before.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;cvr_reads&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M_AXI_BREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;cvr_reads&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_RVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;cvr_reads&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cvr_reads&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now let’s let the formal tool find us a sequence showing how four reads might
look in a row, once we’ve returned to idle.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;cover&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cvr_reads&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;faxil_rd_outstanding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;endmodule&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You can see the result of this exercise in Fig. 10 below.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 10. Cover, four reads in a row&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;/img/dbgaxil/cvr-reads-annotated.svg&quot;&gt;&lt;img src=&quot;/img/dbgaxil/cvr-reads-annotated.svg&quot; alt=&quot;&quot; width=&quot;780&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;As before, we’re getting about a 33% throughput.  There’s a reset
acknowledgment, a new address acknowledgment, a read response, and then
three read bus errors.  The 33% throughput isn’t great, and it’s certainly
nothing to write home about.  But, as before, our goal is low logic
and this is certainly that.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I’ve now mentioned several times that our purpose is low logic.  How low,
therefore, did we get?  A quick Yosys run shows that this simple and basic
&lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;AXI-lite&lt;/a&gt;
&lt;a href=&quot;https://github.com/ZipCPU/dbgbus/blob/master/hexbus/rtl/hbexecaxi.v&quot;&gt;design&lt;/a&gt;
requires no more than 148 4-LUTs.  Not bad for an iCE40, no?
Indeed, the &lt;a href=&quot;https://github.com/ZipCPU/dbgbus/tree/master/hexbus&quot;&gt;entire AXI-lite verseion of the
hexbus&lt;/a&gt; on an iCE40
(minus the serial port) requires no more than 349 4-LUTs.&lt;/p&gt;

&lt;p&gt;Surely 349 4-LUTs can be easily hidden in a larger design, no?  Surely it’s a
small price to pay for ad-hoc, external access to the bus within a design?
Other costs, however, will always add up.  Don’t forget that, in addition
to the missing serial port cost (about 135 4-LUTs), there’s also the cost of
adding yet one more master to the &lt;a href=&quot;/blog/2019/07/17/crossbar.html&quot;&gt;internal
crossbar&lt;/a&gt;–something
that can run upwards of 1500 4-LUTs by itself alone.&lt;/p&gt;

&lt;p&gt;Still, this does make for a very low logic AXI-lite master.  Remember our
last &lt;a href=&quot;/blog/2020/03/23/wbm2axisp.html&quot;&gt;AXI-lite master&lt;/a&gt;
implementation?  That was a bridge from
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone&lt;/a&gt; to
&lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;AXI-lite&lt;/a&gt;.  Comparably,
it requires 118 4-LUTs to the 148 4-LUTs used by today’s controller.  The big
difference with this controller, though, is that this one is intended for
scripting.  Therefore, there are fewer wires used to control &lt;a href=&quot;https://github.com/ZipCPU/dbgbus/blob/master/hexbus/rtl/hbexecaxi.v&quot;&gt;this
master&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Better, because this controller can be easily scripted, its uses go well beyond
the &lt;a href=&quot;https://github.com/ZipCPU/dbgbus/tree/master/hexbus&quot;&gt;debug bus&lt;/a&gt;
implementation it is designed and presented for.&lt;/p&gt;

&lt;p&gt;Before leaving, I should also point out that neither the
&lt;a href=&quot;https://github.com/ZipCPU/dbgbus/tree/master/hexbus&quot;&gt;hexbus&lt;/a&gt; nor the
&lt;a href=&quot;/blog/2017/06/05/wb-bridge-overview.html&quot;&gt;wbubus&lt;/a&gt;
is the end-all in debugging bus implementations.  The first can transfer,
at best, one 32-bit word every 10 bytes (100 baud intervals).  The
&lt;a href=&quot;/blog/2017/06/05/wb-bridge-overview.html&quot;&gt;wbubus&lt;/a&gt; is better,
but it can transfer one 32-bit word in six bytes (60 baud intervals, or 40%
faster–before compression).  I’m currently working on a newer version of the
bus which will be able to transfer one 32-bit word in five bytes (50 baud
intervals)–while still reserving one bit so as to multiplex a console channel
over the debugging bus.  Were I to implement it without console support, then
the new bus implementation would be able to transfer (worst case) one word in
45 baud intervals.  That’s a full 55% faster than the
&lt;a href=&quot;https://github.com/ZipCPU/dbgbus/tree/master/hexbus&quot;&gt;hexbus&lt;/a&gt;,
and yes, times do add up when you are transferring large amounts of information.
Indeed, that last couple of percentage points can amount to minutes of
valuable transfer time.&lt;/p&gt;

&lt;p&gt;As you can see, with a little bit of work, performance and throughput can
and do improve over time–although getting that last little bit always tends to
be somewhat of a challenge.  Perhaps that’s just the reality of any engineering
endeavor.&lt;/p&gt;
&lt;hr /&gt;&lt;p&gt;&lt;em&gt;The fear of the LORD is the beginning of knowledge: but fools despise wisdom and instruction.  (Prov 1:7)&lt;/em&gt;</description>
        <pubDate>Thu, 30 Dec 2021 00:00:00 -0500</pubDate>
        <link>https://zipcpu.com/blog/2021/12/30/dbgaxil.html</link>
        <guid isPermaLink="true">https://zipcpu.com/blog/2021/12/30/dbgaxil.html</guid>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>Envisioning the Ultimate I2C Controller</title>
        <description>&lt;p&gt;I wanted to share a quick design idea.  I think it’s an awesome &lt;em&gt;idea&lt;/em&gt;, but
the frank reality at this point is that it is only an &lt;em&gt;idea&lt;/em&gt;.  I haven’t
finished the implementation of it.  Or, rather, I have most of the
implementation complete, it takes less than 400 6–LUTs, and I haven’t yet
verified it.  Yes, verification is where the majority of the work will
lie–as always in this business.&lt;/p&gt;

&lt;p&gt;Still, the idea I’m about to share is fundamental enough it’s worth sharing.&lt;/p&gt;

&lt;h2 id=&quot;the-problem-telemetry&quot;&gt;The Problem: Telemetry&lt;/h2&gt;

&lt;p&gt;Here’s the basic problem: a client wants a small remote sensor.  This sensor
will be placed in a hostile environment (under water, on a rocket, in space,
wherever), where it will be impossible to electronically inspect or examine
it.  Because the environment this sensor will be in is so hostile to
electronics, it’s important to monitor the health, welfare, and status of
the sensor as a whole from a remote location.&lt;/p&gt;

&lt;p&gt;This means that the sensor needs to report back to the surface not only the
sensor measurements themselves, but also other things such as: temperature
(is the sensor overheating?), voltage (is it using too much power?), and
other things such as air pressure or humidity.  For example, if water ever got
into the sensor chamber, there may be a bare minimum of time to save the
sensor before it is catastrophically destroyed.&lt;/p&gt;

&lt;p&gt;You know, just the realities of life.&lt;/p&gt;

&lt;p&gt;All of these “extra” measurements then need to be grouped together into a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Telemetry&quot;&gt;telemetry&lt;/a&gt; stream, and forwarded
from the remote sensor to an operator somewhere.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Telemetry&quot;&gt;Wikipedia defines telemetry&lt;/a&gt; (today)
as: “the in situ collection of measurements or other data at remote points and
their automatic transmission to receiving equipment (telecommunication) for
monitoring.”&lt;/p&gt;

&lt;p&gt;This is a good definition for us, since this is exactly what needs to be
accomplished: multiple sensors need to be read, their readings time stamped,
and then returned via a data link.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 1. An I2C Sensor bus requires only two wires&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/ultimate-i2c/i2cbus.svg&quot; alt=&quot;&quot; width=&quot;480&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;For simple design reasons, it helps to share as many wires as possible between
various sensors, and this has lead the hardware team to connect multiple
&lt;a href=&quot;https://www.i2c-bus.org/specification&quot;&gt;I2C&lt;/a&gt; sensors across a single pair of
wires common to all the sensors as well as the FPGA–which will be acting as
the master and gathering the sensor data and reporting it.&lt;/p&gt;

&lt;p&gt;So how shall such a system be implemented?&lt;/p&gt;

&lt;h2 id=&quot;design-requirements&quot;&gt;Design Requirements&lt;/h2&gt;

&lt;p&gt;Today, therefore, we’re discussing how to implement a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Telemetry&quot;&gt;telemetry&lt;/a&gt;
system composed of measurements from a set of diverse
&lt;a href=&quot;https://www.i2c-bus.org/specification&quot;&gt;I2C&lt;/a&gt;
sensors all on the same bus.&lt;/p&gt;

&lt;p&gt;Here’s the first reality hit, though: every sensor is different.  Some sensors
have single byte addresses, some two byte addresses, and some don’t support
addresses at all.  This means that every sensor needs its own startup script
and its own configuration.&lt;/p&gt;

&lt;p&gt;Once configured, however, every sensor then needs to be polled at regular
intervals, and not all sensors need to be polled at the same interval.  In
order to meet the real time requirements of the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Telemetry&quot;&gt;telemetry&lt;/a&gt;
system, every frame collection must start at a specific time, and then complete
by a final time.  During this time, sensor measurements will be read and
reported.  This measure and report process will proceed ad infinitum.&lt;/p&gt;

&lt;p&gt;The final output reporting will be done via a network data packet, where the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Telemetry&quot;&gt;telemetry&lt;/a&gt;
data will be spread across every sensor data packet using only four
bytes per packet.  (Remember, the purpose of this system is &lt;em&gt;data&lt;/em&gt; collection,
not
&lt;a href=&quot;https://en.wikipedia.org/wiki/Telemetry&quot;&gt;telemetry&lt;/a&gt;
collection.  The
&lt;a href=&quot;https://en.wikipedia.org/wiki/Telemetry&quot;&gt;telemetry&lt;/a&gt;
needs to remain a small and minor portion of this system.)&lt;/p&gt;

&lt;h2 id=&quot;design-choices&quot;&gt;Design Choices&lt;/h2&gt;

&lt;p&gt;My first thought was to simply use a CPU for this purpose.  Why not?  The
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
will play a prominent role in the system as it is, and
&lt;a href=&quot;https://www.i2c-bus.org/specification&quot;&gt;I2C&lt;/a&gt;
is an easy enough protocol to handle via CPU.  Some might even argue that
&lt;a href=&quot;https://www.i2c-bus.org/specification&quot;&gt;I2C&lt;/a&gt;
is a tailor made protocol for a microcontroller implementation.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left; padding: 20px&quot;&gt;&lt;caption&gt;Fig 2. Problems with building real-time software&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/ultimate-i2c/rt-software.svg&quot; alt=&quot;&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Then I got to thinking about it: CPUs aren’t known for their
&lt;a href=&quot;https://en.wikipedia.org/wiki/Real-time_computing&quot;&gt;real time&lt;/a&gt;
capabilities.  While it is possible to create &lt;a href=&quot;https://en.wikipedia.org/wiki/Real-time_computing&quot;&gt;real time
software&lt;/a&gt;, were I to do
so I’d then be stuck with a CPU that could only run one program.  One wrong
tweak to that program and I’d have to re-verify the whole
&lt;a href=&quot;https://en.wikipedia.org/wiki/Real-time_computing&quot;&gt;real time&lt;/a&gt; capability
again.  Worse, I’d like to reserve the CPU for ad-hoc development tasks
along the way, and dedicating it to a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Real-time_computing&quot;&gt;real time&lt;/a&gt;
processing task like this would render it unusable for other tasks.&lt;/p&gt;

&lt;p&gt;This forces the sensor implementation into the fabric of the FPGA.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;CHOICE #1&lt;/strong&gt;: A logic based FPGA solution&lt;/p&gt;

&lt;p&gt;Unfortunately, the logic required for a hardware based solution is … not
trivial.  Such a solution may need to be reconfigured often during
development, as different sensor configurations are tried and tested until
a final configuration is chosen to deliver to the customer.&lt;/p&gt;

&lt;p&gt;The easiest way to build a re-configurable anything is to force the
configuration to be read from memory somewhere: either
&lt;a href=&quot;/blog/2018/08/16/spiflash.html&quot;&gt;flash&lt;/a&gt; or RAM.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;CHOICE #2&lt;/strong&gt;: The &lt;a href=&quot;https://www.i2c-bus.org/specification&quot;&gt;I2C&lt;/a&gt; logic will be scripted from memory&lt;/p&gt;

&lt;p&gt;The next question is, how shall this data be timed?  Specifically, we want
every data packet to start at a timestamp, provided at a regular interval.
This sensor timestamp moreover will need to be synchronized to the data
collection timestamp from the rest of the system.  The idea, therefore, is
that measurement reading will be looped, and the top of the loop starts at
a known time with respect to the rest of the systems timing.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;CHOICE #3&lt;/strong&gt;: The measurement sequence will start from an external
time–stamped signal&lt;/p&gt;

&lt;p&gt;Next design question, how shall the results be reported?&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 3. Modifying AXI Stream&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/ultimate-i2c/netpkt.svg&quot; alt=&quot;&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;This answer is given by the rest of the design: the results will be reported
via an AXI stream packet output.  If necessary, I’ll might choose to switch to
a modified AXI stream based packet protocol I’m using.  The big difference?
The modified protocol allows for a packet to be aborted if any downstream
component stalls the interface by an amount greater than any buffer within it.
In the absence of any abort conditions, though, it’s simply AXI stream.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;CHOICE #4&lt;/strong&gt;: Results will be reported via an AXI stream output.&lt;/p&gt;

&lt;p&gt;Given these few choices, it’s now fairly easy to outline the form of the design.&lt;/p&gt;

&lt;h2 id=&quot;outlining-the-design&quot;&gt;Outlining the design&lt;/h2&gt;

&lt;p&gt;With this information, I can now outline the form this design will take in
Fig. 4 below.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 4. I2C System Diagram&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/ultimate-i2c/controller.svg&quot; alt=&quot;&quot; width=&quot;480&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;From this standpoint, it looks a lot like a special purpose CPU.&lt;/p&gt;

&lt;p&gt;The first step will be to reuse a &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axilfetch.v&quot;&gt;ZipCPU instruction
fetch&lt;/a&gt; component.
From here, a small state machine can handle everything else.&lt;/p&gt;

&lt;p&gt;Indeed, I’ve now applied this approach to several projects, with generally
great success.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;I have a SONAR transmitter design that can send a scripted SONAR waveform
from memory.&lt;/p&gt;

    &lt;p&gt;In this case, the transmitter can accept instructions from either the
instruction fetch or from a slave interface.  The instructions consist of
4’bit register addresses, and 28’bit values, some with side effects.  This
allows the CPU to either control the transmitter directly, or to give it a
script to run from.&lt;/p&gt;

    &lt;p&gt;Instructions consist of things like:&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;Setting the amplitude&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Setting an optional chirp rate, for linear FM support.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Setting the frequency.  A non-zero frequency will turn the transmitter on.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Waiting for a period of time, or perhaps for an external synchronization
interrupt.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Turning off the transmitter.  In this case, setting a zero frequency
will turn the transmitter off.&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;Using this approach, the transmitter can generate basic tones,
&lt;a href=&quot;https://en.wikipedia.org/wiki/Chirp_spectrum#Linear_chirp&quot;&gt;linear FM&lt;/a&gt;,
&lt;a href=&quot;https://en.wikipedia.org/wiki/Phase-shift_keying&quot;&gt;BPSK&lt;/a&gt; and
&lt;a href=&quot;https://en.wikipedia.org/wiki/Frequency-shift_keying&quot;&gt;BFSK&lt;/a&gt; signals, and
even &lt;a href=&quot;https://en.wikipedia.org/wiki/Chirp_compression&quot;&gt;hyperbolic FM&lt;/a&gt;
signals.  The design is not only easy to build, low in logic cost, but
it’s easy to verify as well.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;This &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axilfetch.v&quot;&gt;instruction
fetch&lt;/a&gt;
approach has also been a very successful part of an &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axisgdma.v&quot;&gt;AXI scatter-gather DMA
design&lt;/a&gt; I have.
In this design, a &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axisgfsm.v&quot;&gt;small
FSM&lt;/a&gt;
(170 6-LUTs) processes the scatter-gather “table”, as it comes from the &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axilfetch.v&quot;&gt;CPU
fetch&lt;/a&gt;
controller.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;When the DMA is not in use, the &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axilfetch.v&quot;&gt;instruction fetch&lt;/a&gt;
is held in its reset state.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;The &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axisgfsm.v&quot;&gt;FSM&lt;/a&gt;
is then initialized with an address provided over an AXI-lite slave
interface.  This address is then fed to the &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axilfetch.v&quot;&gt;instruction
fetch&lt;/a&gt;
as if the CPU waas jumping to a new address.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;As table values are received, they are written to the DMA via the DMA’s
&lt;a href=&quot;/blog/2020/03/08/easyaxil.html&quot;&gt;AXI-lite control
interface&lt;/a&gt;.  This
includes the source address, destination
address, DMA length, and potentially any options to be given to the DMA,
such as generating an interrupt or continuing in spite of any error–all
coming from the table entry.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Two bits are stolen from each source address in the table.  These bits
control whether the table entry is a normal DMA entry record, whether it
is the last one in the list, whether it is to be skipped, or whether the
address is a link (i.e. pointer) to another table entry elsewhere in
memory.&lt;/p&gt;

        &lt;p&gt;Skipping entries, or jumping to a new address is again handled like a
CPU branch instruction.&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;One unique feature of the &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axilfetch.v&quot;&gt;instruction
fetch&lt;/a&gt;
that implements a table in this manner is that you do not want any form of
instruction cache.  Unlike the CPU, where an instruction cache is
highly desirable, applications like those above operate on memory that may
have just changed, so a cache only gets in the way.  Not only that, unlike a
CPU, table memory like this is typically only going to be read once–so, again,
a cache wouldn’t help here.&lt;/p&gt;

&lt;p&gt;I should also point out that, the &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axilfetch.v&quot;&gt;ZipCPU’s instruction AXI-lite
fetch&lt;/a&gt;
has been specifically tested with 8–bit instructions–even though the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
doesn’t have 8–bit instructions.  This is one of the reasons why.&lt;/p&gt;

&lt;p&gt;That’s the first step.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 5. Proposed I2C Controller Instruction Set&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/ultimate-i2c/insn-list.svg&quot; alt=&quot;&quot; width=&quot;180&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;The second step is to decide on an “instruction set”.  Ten instructions
will be sufficient for our purposes here.  Each instruction can fit in eight
bits, with only the SEND and JUMP instructions requiring subsequent immediate
values.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;CATCH&lt;/strong&gt;:  I’m not (yet) certain what to call this instruction.  My notes
currently call it an ABORT instruction, but CATCH might capture it better.
The idea is that this instruction sets the address to jump to should a
data write request ever fail to receive an ACK–sort of like the “catch” half
of a try-catch block in C++ or Java.  Likewise, if for some reason
arbitration is lost, this catch instruction would set the address we’d
return to.&lt;/p&gt;

    &lt;p&gt;If I choose to use my modified AXI stream based packet protocol, either of
these conditions would cause the outgoing packet to be aborted as well.
That way the downstream packet receiver can know that the packet is being
restarted from the top.  Without this ABORT signal, the only way to know
that a NAK or loss of &lt;a href=&quot;https://www.i2c-bus.org/specification&quot;&gt;I2C&lt;/a&gt;
arbitration happened would be to receive a packet of the wrong
length–knowing that the final (known packet-length) bytes would be correct.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;WAIT&lt;/strong&gt;:  This instruction will cause the
&lt;a href=&quot;https://www.i2c-bus.org/specification&quot;&gt;I2C&lt;/a&gt; FSM to wait for an external
synchronization signal.  This is how I intend to synchronize this
&lt;a href=&quot;https://www.i2c-bus.org/specification&quot;&gt;I2C&lt;/a&gt; controller with the rest of the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Telemetry&quot;&gt;telemetry&lt;/a&gt; frame.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;START&lt;/strong&gt;: Now we get to more regular
&lt;a href=&quot;https://www.i2c-bus.org/specification&quot;&gt;I2C&lt;/a&gt;
instructions.  This particular one will send an
&lt;a href=&quot;https://www.i2c-bus.org/specification&quot;&gt;I2C&lt;/a&gt;
start condition.  If the interface isn’t idle, then it will cause a
repeated start condition to be sent across the interface.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;**SEND &lt;DATA&gt;**:  This command would cause the following byte in the
instruction stream to be &quot;sent&quot; over the interface.  This would include the
first byte of any [I2C](https://www.i2c-bus.org/specification) transaction.
Similarly, many read transactions require an address to be sent following
the first byte, before sending a repeated start and receiving data, and that
address could be sent via a SEND command.  Finally, this command would be
very useful when sending the known and pre-determined configuration to the
device.&lt;/DATA&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;RXK (RX w/ ACK)&lt;/strong&gt;: Receive a byte of data, and ACK (acknowledge) the byte
upon completion.  This will signal to the slave that another byte is yet to
be received following this one.  Once received, the byte will be placed on
the output AXI stream packet.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;RXN (RX w/ NAK)&lt;/strong&gt;: Receive a byte of data, and NAK (negative acknowledge)
the result.  This will signal to the
&lt;a href=&quot;https://www.i2c-bus.org/specification&quot;&gt;I2C&lt;/a&gt;
slave that this is the last byte to be requested.  As before, the byte
received will be placed into an output AXI stream packet.  (As an option
I’m considering, this might also send a STOP command.  It just depends on
how complex I want to make the state machine.)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;RXLK&lt;/strong&gt; and &lt;strong&gt;RXLN&lt;/strong&gt;:  These two instructions mirror the RXK and RXN
instructions above.  They will receive a byte of data and either ACK or NAK
the result, while also sending the received byte downstream.  The
difference between these two and their previous counterparts is that these
two instructions will set the TLAST field in the AXI stream output.  The
result is that this byte will be marked as the last byte in the outgoing
AXI stream &lt;a href=&quot;https://en.wikipedia.org/wiki/Telemetry&quot;&gt;telemetry&lt;/a&gt; packet.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;STOP&lt;/strong&gt;: Send an &lt;a href=&quot;https://www.i2c-bus.org/specification&quot;&gt;I2C&lt;/a&gt;
stop condition.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;JUMP &amp;lt;ADDRESS&amp;gt;&lt;/strong&gt;: This is the only other instruction, aside from the SEND
instruction, that gets followed by an immediate address.  In this case, the
immediate bytes contain a system memory bus address to jump to.&lt;/p&gt;

    &lt;p&gt;In general, the controller would JUMP to the WAIT instruction at the top of
the &lt;a href=&quot;https://en.wikipedia.org/wiki/Telemetry&quot;&gt;telemetry&lt;/a&gt; packet, but having
a specific JUMP instruction allows for more options–such as if the loop
includes multiple WAIT instructions.  Either way, since this instruction
set has no ability for a conditional jump, the only type of loop this
instruction set will support is an infinite loop.  Also, since I’ve provided
no HALT instruction in this list, the controller will always enter into
an infinite loop.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are many other instructions I could have added, but the application
described above doesn’t require any more.  For example, I could have
implemented a wait-timer instruction with a two, three, or even four byte wait
counter.  Were I expecting bus contention, I might also consider creating an
instruction sequence for a more fine grained checkpoint-restart capability,
so that collisions could properly be recovered from.  In this case, I don’t
expect any other masters on the bus, so I see no need for such instructions
yet.&lt;/p&gt;

&lt;p&gt;For now, lets take a quick look at what an instruction stream might look
like that uses this instruction set.&lt;/p&gt;

&lt;p&gt;First, it would start with a CATCH instruction, followed by whatever
instructions are necessary to configure the various sensors.
Often, writing to a sensor simply consists of a series of bytes to be sent
to the sensor.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-asm&quot; data-lang=&quot;asm&quot;&gt;	CATCH	; Return here following any protocol errors
	; Then, for each sensor
	START
	SEND	(sensor ID)
	SEND	(sensor value address)
	SEND	(config sensor value #1)
	SEND	(config sensor value #2)
	SEND	(config sensor value #3)
	; etc.
	STOP
	; Now repeat the above for the next sensor
	; ... etc.&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Once all of the sensors have been configured, we can then switch to the
operational &lt;a href=&quot;https://en.wikipedia.org/wiki/Telemetry&quot;&gt;telemetry&lt;/a&gt; loop.  This
will start with a second CATCH instruction, followed by a WAIT instruction
to wait for the top of the loop.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-asm&quot; data-lang=&quot;asm&quot;&gt;	CATCH	; Return here following any protocol errors
loop:
	WAIT	; Wait here for an external synchronization signal&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now it’s time to read from each sensor.  Here’s a typical interaction to read
three bytes from a given sensor.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-asm&quot; data-lang=&quot;asm&quot;&gt;	START
	SEND	&amp;lt;sensor ID&amp;gt;	; Which sensor ID do we wish to read from?
	SEND	&amp;lt;address&amp;gt;	; Which address w/in sensor to read from
	START			; Send a repeated start condition
	RXK			; Read byte #1
	RXK			; Read byte #2
	RXK			; Read byte #3
	RXN			; Read byte #4, last byte
	STOP&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Not all sensors need addresses, however.  Some sensors have only one value
to be read.  In the following example, the sensor requires no address, yet
provides the last three bytes of the sequence.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-asm&quot; data-lang=&quot;asm&quot;&gt;	START
	SEND	&amp;lt;sensor ID&amp;gt;	; Which sensor ID do we wish to read from?
	START			; Send a repeated start condition
	RXK			; Read byte #1
	RXK			; Read byte #2
	RXLN			; Read byte #3, last byte of the telemetry pkt
	STOP
	JUMP			; Return to the top of our loop above.&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;At least, this is my design idea for this problem.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;As I mentioned above, I’ve been pleasantly surprised at the number of ways I’ve
found to use a &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axilfetch.v&quot;&gt;generic, cache-less, CPU instruction fetch
module&lt;/a&gt;.
This one capability has repaid me in reuse spades multiple times over with
each application I’ve used it on: scatter gather DMAs, SONAR transmit waveform
encoding, and now my draft design for an ultimate
&lt;a href=&quot;https://www.i2c-bus.org/specification&quot;&gt;I2C&lt;/a&gt;
controller listed above.&lt;/p&gt;

&lt;p&gt;Reality, however, is that very few problems will limit themselves to a set
of only &lt;a href=&quot;https://www.i2c-bus.org/specification&quot;&gt;I2C&lt;/a&gt; sensors.  The actual
problem this design was drawn from is no different.  It includes not only
&lt;a href=&quot;https://www.i2c-bus.org/specification&quot;&gt;I2C&lt;/a&gt; sensors, but also multiple
SPI sensors–all of which when put together will make for a very diverse
&lt;a href=&quot;https://en.wikipedia.org/wiki/Telemetry&quot;&gt;telemetry&lt;/a&gt; sensor set.  Still,
this same approach should also work well for scripting complex SPI sensor
interactions together.&lt;/p&gt;

&lt;p&gt;Looking over my instruction set again in hind sight, I’m tempted to split the
JUMP instruction into two parts.  The first part might be an instruction to
set the JUMP target address, and the second part would be the JUMP instruction
itself.  This would not only simplify instruction decoding, but it would also
make the instruction sequence easier to relocate to any address in
memory–without needing to go back and fix up the jump address once a
memory location was assigned to the script.&lt;/p&gt;

&lt;p&gt;One missing component of the above explanation is the bus slave component.
In this example, as with all of my examples, I like to make controllers
like this controllable.  Things that an external controller might do
include: interrupting the script and halting the controller, issuing ad-hoc
(scriptless) commands, adjusting the
&lt;a href=&quot;https://www.i2c-bus.org/specification&quot;&gt;I2C&lt;/a&gt; clock timing, and replacing the
script with another script.  An external CPU might also decide to issue
&lt;a href=&quot;https://www.i2c-bus.org/specification&quot;&gt;I2C&lt;/a&gt;
commands via direct bit banging–should such a capability be implemented.
Don’t forget, as well, that if these sensor commands are kept in some kind of
&lt;a href=&quot;/blog/2018/08/16/spiflash.html&quot;&gt;flash memory&lt;/a&gt;, then
the controller would need to be shut down in order to erase or program the
&lt;a href=&quot;/blog/2018/08/16/spiflash.html&quot;&gt;flash memory&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A second missing component from the design above is the internal logic
analyzer.  Let’s just say that, because of a &lt;a href=&quot;https://github.com/ZipCPU/wbscope/blob/master/doc/examples/hdmi-eddc/&quot;&gt;bad
experience&lt;/a&gt;
with a prior &lt;a href=&quot;https://www.i2c-bus.org/specification&quot;&gt;I2C&lt;/a&gt; controller, the
internal logic analyzer connection will be a minimum requirement of any new
implementation.  The problem I had before with the last
&lt;a href=&quot;https://www.i2c-bus.org/specification&quot;&gt;I2C&lt;/a&gt; controller, was that a bug in
the controller tended to leave the interface mid-transaction.  When I then came
back later and reloaded the FPGA or otherwise reset the design, the
&lt;a href=&quot;https://www.i2c-bus.org/specification&quot;&gt;I2C&lt;/a&gt;
bus interaction didn’t reset–the slave remained mid-ACK and wouldn’t release
the data wire.  The (compressed) logic analyzer was necessary to diagnose the
problem, and bit banging over the bus was necessary to fix it.  Although this
only lasted until I found my bug, it has left me cautious when designing
&lt;a href=&quot;https://www.i2c-bus.org/specification&quot;&gt;I2C&lt;/a&gt; controllers.&lt;/p&gt;
&lt;hr /&gt;&lt;p&gt;&lt;em&gt;For a dream cometh through the multitude of business; and a fool's voice is known by multitude of words.  (Eccl 5:3)&lt;/em&gt;</description>
        <pubDate>Mon, 15 Nov 2021 00:00:00 -0500</pubDate>
        <link>https://zipcpu.com/blog/2021/11/15/ultimate-i2c.html</link>
        <guid isPermaLink="true">https://zipcpu.com/blog/2021/11/15/ultimate-i2c.html</guid>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>Clock Gating</title>
        <description>&lt;p&gt;Most libraries contain a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Clock_gating&quot;&gt;clock gating&lt;/a&gt;
circuit within them.  These tend to be
designed by an analog hardware designer, rather than the digital designer,
for the simple reason that getting the layout right can be critical.  Such
&lt;a href=&quot;https://en.wikipedia.org/wiki/Clock_gating&quot;&gt;clock gating&lt;/a&gt;
circuits are often used as a means of power savings.&lt;/p&gt;

&lt;p&gt;The circuit itself tends to be fairly simple.  It consists of a clock input,
an enable input, a latch, an AND gate, and the resulting output clock.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clkgate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_en&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;kt&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

	&lt;span class=&quot;kt&quot;&gt;reg&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;latch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;latch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_en&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;o_clk&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;latch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Indeed, the circuit is simple enough that I like to &lt;a href=&quot;/tutorial/formal.html&quot;&gt;assign it to students
as an exercise in formal verification&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It’s important this be done right for several reasons.  First, clock glitches
are bad.  They can cause some of your circuit to experience a clock, while
other parts do not, while even other parts of the circuit are left in an
indeterminate state.  Therefore, it’s important to make certain the output
clock won’t glitch when the enable line changes–whenever it changes.
Second, it’s important that the resulting clock can be used in the same
clock domain as the original clock.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Clock_gating&quot;&gt;Clock gating&lt;/a&gt; can be a very
important part of &lt;a href=&quot;/blog/2017/10/13/fpga-v-asic.html&quot;&gt;ASIC&lt;/a&gt; 
design for power reasons.
First, it takes energy to toggle a wire–any wire–within a design.  The more
often you toggle it, the more power your design then uses.  Hence, if you
want to lower the power required by a design, then it becomes important to
keep as much of the logic within the design from toggling as possible.
Second, the greater the capacitance of the wire, the greater the energy that’s
required to toggle it.  This is especially true of a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Clock_signal#Distribution&quot;&gt;clock tree&lt;/a&gt;, where
the clock signal may need to travel through a chip-sized
&lt;a href=&quot;https://en.wikipedia.org/wiki/Clock_signal#Distribution&quot;&gt;clock tree&lt;/a&gt; to get to
a large majority of the flip flops within the chip.  If, at any point in that
&lt;a href=&quot;https://en.wikipedia.org/wiki/Clock_signal#Distribution&quot;&gt;tree&lt;/a&gt;,
the clock can be stopped then both the clock and everything depending
upon it can be kept from consuming any further dynamic power.&lt;/p&gt;

&lt;p&gt;This makes clock gating an important topic.&lt;/p&gt;

&lt;p&gt;FPGAs tend to be both unique and somewhat disadvantaged in this discussion.
Like &lt;a href=&quot;/blog/2017/10/13/fpga-v-asic.html&quot;&gt;ASIC&lt;/a&gt;s,
FPGA libraries also include
&lt;a href=&quot;https://en.wikipedia.org/wiki/Clock_gating&quot;&gt;clock gates&lt;/a&gt;.  On Xilinx Series 7
devices, for example, these are &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BUFGCE&lt;/code&gt; library elements that can be used to
&lt;a href=&quot;https://en.wikipedia.org/wiki/Clock_gating&quot;&gt;gate clocks&lt;/a&gt;.
That’s not the what makes FPGAs unique.  The difference with FPGAs is that,
unlike &lt;a href=&quot;/blog/2017/10/13/fpga-v-asic.html&quot;&gt;ASIC&lt;/a&gt;s, FPGAs come
with pre-configured &lt;a href=&quot;https://en.wikipedia.org/wiki/Clock_signal#Distribution&quot;&gt;clock
trees&lt;/a&gt; that tend to
be global (chip-wide) in scale and scope.  This fixes their capacitance,
forcing clocks to require a significant amount of energy to toggle in order to
reach the entire &lt;a href=&quot;https://en.wikipedia.org/wiki/Clock_signal#Distribution&quot;&gt;clock
tree&lt;/a&gt;.
That also means that, in order to gate a clock, you’ll need to create a second
clock from the first one–one that can be gated, and you’ll then need
to place it into a global clock buffer as well.  This second clock will only
add to your power usage–unlike an
&lt;a href=&quot;/blog/2017/10/13/fpga-v-asic.html&quot;&gt;ASIC&lt;/a&gt; where the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Clock_signal#Distribution&quot;&gt;clock tree&lt;/a&gt; might be
trimmed down so that it is only as big as it needs to be.  In other words,
there’s nothing to be gained by &lt;a href=&quot;https://en.wikipedia.org/wiki/Clock_gating&quot;&gt;gating a
clock&lt;/a&gt; within an FPGA other than
perhaps testing and verifying an
&lt;a href=&quot;/blog/2017/10/13/fpga-v-asic.html&quot;&gt;ASIC&lt;/a&gt; system that might
require &lt;a href=&quot;https://en.wikipedia.org/wiki/Clock_gating&quot;&gt;clock gating&lt;/a&gt;.
Low power in an FPGA system is often achieved therefore, not by a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Clock_gating&quot;&gt;clock gate&lt;/a&gt;,
but rather by a logic signal that can be issued to all flip-flops within a
given design region.  We might call this a “Clock Enable”, or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;i_ce&lt;/code&gt; as I tend
to call it.  When &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;i_ce&lt;/code&gt; is low, nothing transitions and energy is minimized.&lt;/p&gt;

&lt;p&gt;This FPGA clock enable power reduction mechanism lends to flip-flop structures
that look like:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_ce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;Q&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;As long as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;i_ce&lt;/code&gt; stays low, the flip-flop uses a minimum amount of power.&lt;/p&gt;

&lt;p&gt;Today, though, I’d like to share some of my experiences with using a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Clock_gating&quot;&gt;clock gating&lt;/a&gt;
circuit in simulations–independent of the ultimate hardware the design
would drive.&lt;/p&gt;

&lt;h2 id=&quot;clock-gating-in-simulation&quot;&gt;Clock Gating in Simulation&lt;/h2&gt;

&lt;p&gt;When I first tried
&lt;a href=&quot;https://en.wikipedia.org/wiki/Clock_gating&quot;&gt;clock gating&lt;/a&gt;
in simulation, my purpose was just to learn about
&lt;a href=&quot;https://en.wikipedia.org/wiki/Clock_gating&quot;&gt;clock gating&lt;/a&gt;.
Is it easy or hard?  Eventually, I’d like to be able
to add a &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/ddc09c805fe43122b78df079747c66fa8a14e255/rtl/core/zipcore.v#L2124-L2165&quot;&gt;clock gating capability to the
ZipCPU&lt;/a&gt;,
so that the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
could be used in an application requiring low power.&lt;/p&gt;

&lt;p&gt;I also started this task with a hypothesis:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Hypothesis:&lt;/strong&gt; Simulation time is proportional to the amount of signals that
have to be evaluated each cycle.&lt;/p&gt;

&lt;p&gt;For this reason, if the number of signals needing to be evaluated can be
greatly reduced due to the presence of a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Clock_gating&quot;&gt;clock gate&lt;/a&gt;,
then it only makes sense that gating any unused clocks within a simulation
will only speed up the simulation.  At least, this was my hypothesis starting
out.&lt;/p&gt;

&lt;h3 id=&quot;gating-the-zipcpus-clock&quot;&gt;Gating the ZipCPU’s clock&lt;/h3&gt;

&lt;p&gt;I decided to build my &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/ddc09c805fe43122b78df079747c66fa8a14e255/rtl/core/zipcore.v#L2124-L2165&quot;&gt;initial attempts at stopping the
clock&lt;/a&gt;
around the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;’s sleep
functionality.  Basically, the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
has a &lt;a href=&quot;/zipcpu/2018/01/01/zipcpu-isa.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WAIT&lt;/code&gt; instruction&lt;/a&gt;
that puts the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; to sleep until the
next &lt;a href=&quot;/zipcpu/2019/04/02/icontrol.html&quot;&gt;interrupt&lt;/a&gt;.  This
seemed like the perfect time to stop the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;’s clock.  Indeed, the
&lt;a href=&quot;/zipcpu/2018/01/01/zipcpu-isa.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WAIT&lt;/code&gt; instruction&lt;/a&gt;
was integrated into the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;’s
&lt;a href=&quot;/zipcpu/2018/01/01/zipcpu-isa.html&quot;&gt;instruction set&lt;/a&gt;
for just this purpose.&lt;/p&gt;

&lt;p&gt;Then, after thinking about it some more, I started wondering about what the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; should do if the
&lt;a href=&quot;/zipcpu/2017/08/25/hw-debugging.html&quot;&gt;debugging interface&lt;/a&gt;
halted the CPU externally?  Certainly, if the CPU isn’t enabled, it should
stop it’s clock as well, no?&lt;/p&gt;

&lt;p&gt;So I built some &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/ddc09c805fe43122b78df079747c66fa8a14e255/rtl/core/zipcore.v#L2124-L2165&quot;&gt;clock gating
logic&lt;/a&gt;
into the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; to see what might
happen.  Once the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
passed it’s formal checks again, I placed it into a large integrated
simulation to test it.&lt;/p&gt;

&lt;p&gt;Can anyone guess what happened?&lt;/p&gt;

&lt;p&gt;Nothing.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; never came out of reset.&lt;/p&gt;

&lt;p&gt;The problem is that the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
required a clock to acknowledge the reset, and I was starting the design with
the clock off.&lt;/p&gt;

&lt;p&gt;Oops.&lt;/p&gt;

&lt;p&gt;First lesson learned: be very careful how you handle clock enables and
the reset signal.&lt;/p&gt;

&lt;p&gt;The second problem was similarly ugly: if the clock is off, and the clock
gate control logic is controlled by the clock that is off, then you’ll never
be able to wake up.&lt;/p&gt;

&lt;p&gt;So, after a lot of work, here’s the logic I came up with:  It’s split into
two parts.  Part one is the combinatorial part.  This is used to tell us
when to wake up.  Well, that’s not quite true.  &lt;a href=&quot;/blog/2017/09/18/clocks-for-sw-engineers.html&quot;&gt;Very few things in any
digital design are truly &lt;em&gt;combinatorial&lt;/em&gt;&lt;/a&gt;.
Perhaps a better way to say it is
that part one consists of logic that will be clocked with the always–on clock,
and used to turn the gated clock on and off.  Part two is the registered part,
registered on the gated clock that is.  This is the part I use to help tame
the combinatorial logic portion.&lt;/p&gt;

&lt;p&gt;Let’s start with the combinatorial part.  This part sets an output from the CPU,
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;o_clken&lt;/code&gt;, which is then used to control the clock gate circuit externally.
It’s primarily based upon the registered value, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;r_clken&lt;/code&gt;, but with a few
exceptions.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;o_clken&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r_clken&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_dbg_we&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clear_cache&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_halt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_interrupt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Basically, we want to wake up on an
&lt;a href=&quot;/zipcpu/2019/04/02/icontrol.html&quot;&gt;interrupt&lt;/a&gt;
and we want to make sure the clock stays running unless we are asleep.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;o_clken&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* ... */&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_interrupt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Well, there’s an exception to that rule.  If the CPU is commanded to halt
from the debugging interface, then it doesn’t matter if an
&lt;a href=&quot;/zipcpu/2019/04/02/icontrol.html&quot;&gt;interrupt&lt;/a&gt; is pending
or if the CPU wants to be awake: the debug interface should always be able to
put the CPU into a deep sleep–that’s the purpose of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;i_halt&lt;/code&gt; signal.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;o_clken&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* ... */&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_halt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_interrupt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;What about a &lt;a href=&quot;/zipcpu/2017/08/25/hw-debugging.html&quot;&gt;debugging
command&lt;/a&gt;, such as
writing to a register via the debugging interface, done here by setting
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;i_dbg_we&lt;/code&gt;, or informing the CPU (while it is halted) that external memory
may have changed so the CPU can know to clear its cache?  That’s the purpose
of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;i_clear_cache&lt;/code&gt; signal.  In both cases, the
&lt;a href=&quot;/zipcpu/2017/08/25/hw-debugging.html&quot;&gt;debugger&lt;/a&gt;
needs to be able to be able to interact with the design while it’s
asleep.  For this we’ll need two additional exceptions.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;o_clken&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r_clken&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_dbg_we&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clear_cache&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* ... */&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Everything else can be stuffed into the registered signal, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;r_clken&lt;/code&gt;–part two
of our enable logic.&lt;/p&gt;

&lt;p&gt;Let’s take a look at that register, shall we?&lt;/p&gt;

&lt;p&gt;The tricky part with this register is the reset.  On a reset, the CPU should
only disable the clock if the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;i_halt&lt;/code&gt; input is requesting that we stop.
This would be the case where the CPU is configured to start up into a halted
configuration, or equivalently if the
&lt;a href=&quot;/zipcpu/2017/08/25/hw-debugging.html&quot;&gt;debugger&lt;/a&gt;
has control of the processor and issues it a reset.  In this case, a CPU
reset isn’t the same as a
&lt;a href=&quot;/blog/2020/03/14/axi-reset.html&quot;&gt;bus reset&lt;/a&gt;.
In order to keep from freezing up external buses when rebooting the CPU from
an external input in this fashion, it’s important we keep the clock enabled
until all bus operations are finished.  (Remember, &lt;a href=&quot;/blog/2020/03/14/axi-reset.html&quot;&gt;resetting an AXI bus
component typically requires resetting the entire
bus&lt;/a&gt; and everything
connected to it.)&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_halt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r_halted&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_dbg_we&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;r_clken&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_mem_busy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_halt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The second criteria here has to deal with the &lt;a href=&quot;/zipcpu/2017/08/25/hw-debugging.html&quot;&gt;debugging
interface&lt;/a&gt;.  Basically,
if the &lt;a href=&quot;/zipcpu/2017/08/25/hw-debugging.html&quot;&gt;debugging
interface&lt;/a&gt;
raises the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;i_halt&lt;/code&gt; signal, then the CPU is supposed to come to a halt.  Indeed,
the CPU will halt once it both finishes its current operation and once the
pipeline is filled again.  However, that leads to a lot of times when we can
and cannot halt.  For example, the CPU can’t halt in the middle of an
&lt;a href=&quot;/zipcpu/2021/09/30/axiops.html&quot;&gt;atomic operation&lt;/a&gt; that might
lock the bus, lest the rest of the design lock up.  Similarly, the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; can’t halt in the middle of a
&lt;a href=&quot;/zipcpu/2018/01/01/zipcpu-isa.html&quot;&gt;two part compressed
instruction&lt;/a&gt;,
nor can it halt while a divide,
&lt;a href=&quot;/zipcpu/2021/07/03/slowmpy.html&quot;&gt;multiply&lt;/a&gt;,
or &lt;a href=&quot;/zipcpu/2021/04/17/axilops.html&quot;&gt;memory operation&lt;/a&gt;
is pending.  That’s why the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
has an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;r_halted&lt;/code&gt; signal–to help tame all these conditions to something that
can be registered.  Therefore, if the CPU is halted, and the
&lt;a href=&quot;/zipcpu/2017/08/25/hw-debugging.html&quot;&gt;debug interface&lt;/a&gt;
wants it to stay halted, then we halt and ignore any other criteria.  The
exception to this rule is if we want to read from a register using the
&lt;a href=&quot;/zipcpu/2017/08/25/hw-debugging.html&quot;&gt;debugging interface&lt;/a&gt;.
In that case, we’ll need to wake up for a few clocks to read the register.&lt;/p&gt;

&lt;p&gt;That’s the first set of criteria, shown above.&lt;/p&gt;

&lt;p&gt;The next step controls when we should wake up.  In general, we’ll want to
be awake if we aren’t sleeping.  We also want to wake up on an incoming
&lt;a href=&quot;/zipcpu/2019/04/02/icontrol.html&quot;&gt;interrupt&lt;/a&gt;.  The exception
to this rule is that we don’t care about whether or not the CPU is sleeping or
an &lt;a href=&quot;/zipcpu/2019/04/02/icontrol.html&quot;&gt;interrupt&lt;/a&gt; is pending
if we’ve been commanded to halt–just like the combinatorial logic driving
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;o_clken&lt;/code&gt; above.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_halt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sleep&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_interrupt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pending_interrupt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;r_clken&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1'b1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Here, again, the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; logic attempts to tame
&lt;a href=&quot;/zipcpu/2019/04/02/icontrol.html&quot;&gt;interrupt&lt;/a&gt;
handling with two signals: a combinatorial
input, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;i_interrupt&lt;/code&gt;, and a registered signal, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pending_interrupt&lt;/code&gt;, to deal
with cases where we couldn’t immediately respond to an
&lt;a href=&quot;/zipcpu/2019/04/02/icontrol.html&quot;&gt;interrupt&lt;/a&gt; yet still
need to.&lt;/p&gt;

&lt;p&gt;In all other cases, we’ll want to halt.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;r_clken&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1'b0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Well, not quite.  There are some exceptions to that rule.  (This seems to be
the story of a CPU in general–simple logic turns into a lot of exceptions.)
For example, if we’ve locked the bus or if we are in the middle of an
&lt;a href=&quot;/zipcpu/2021/09/30/axiops.html&quot;&gt;exclusive access operation&lt;/a&gt;,
then we don’t want to shut the clock off.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_bus_lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;r_clken&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1'b1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Similarly, if we are in the middle of a two-part instruction, then we want
to complete the instruction before halting as well.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alu_phase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;r_clken&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1'b1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;a href=&quot;/zipcpu/2018/01/01/zipcpu-isa.html&quot;&gt;As you may recall&lt;/a&gt;, the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
has a set of compressed instructions.  These instructions will pack two
16-bit instructions into a single 32-bit word.  While this in itself isn’t
all that unique among CPU’s, the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;’s implementation is a bit
unusual.  Specifically, the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;’s
&lt;a href=&quot;/zipcpu/2017/11/18/wb-prefetch.html&quot;&gt;prefetch&lt;/a&gt;
will only ever issue 32-bit instructions at a time, leaving the
CPU with no (current) capability to restart one of these instructions in the
middle.  For this reason, the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
cannot halt in the middle of a pair of 16-bit instructions.  In this case,
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;alu_phase&lt;/code&gt; will be true following the first instruction in any
instruction pair.
By only gating the clock if &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;alu_phase&lt;/code&gt; is false, we help to guarantee that
these instruction pairs will always proceed to completion.&lt;/p&gt;

&lt;p&gt;Our next condition is that, if the CPU is still busy with some operation–any
operation, then we’ll want to keep the clock on until we’ve finished it.
This includes &lt;a href=&quot;/zipcpu/2021/04/17/axilops.html&quot;&gt;memory&lt;/a&gt;,
&lt;a href=&quot;/zipcpu/2017/08/11/simple-alu.html&quot;&gt;ALU&lt;/a&gt;
divide, the (not-yet-implemented) floating point
unit, writing a value to the register file, etc.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_mem_busy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alu_busy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;div_busy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fpu_busy&lt;/span&gt;
					&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wr_reg_ce&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_dbg_we&lt;/span&gt;
					&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_bus_err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;r_clken&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1'b1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_halt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r_halted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;r_clken&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1'b1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;But, in general, that’s the logic required to halt the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;’s clock.
The actual clock halting logic, however, is &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/zipcore/rtl/zipaxi.v&quot;&gt;external to the
CPU&lt;/a&gt;–so that
it can be tailored to the environment containing the CPU.  Currently, the &lt;a href=&quot;https://en.wikipedia.org/wiki/Clock_gating&quot;&gt;clock
gating&lt;/a&gt; logic is only implemented
in the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;’s
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/zipcore/rtl/zipaxi.v&quot;&gt;AXI wrapper&lt;/a&gt;–but
that may change in time if
&lt;a href=&quot;https://en.wikipedia.org/wiki/Clock_gating&quot;&gt;clock gating&lt;/a&gt;
proves to be valuable or useful.&lt;/p&gt;

&lt;h3 id=&quot;gating-an-axi-dma&quot;&gt;Gating an AXI DMA&lt;/h3&gt;

&lt;p&gt;What about an AXI component?  For example, I’ve built an
&lt;a href=&quot;/blog/2020/06/16/axiaddr-limits.html&quot;&gt;AXI DMA&lt;/a&gt; and it only
gets fired up every now and then.  Can we gate it’s clock?&lt;/p&gt;

&lt;p&gt;Sure, why not?&lt;/p&gt;

&lt;p&gt;The big difference between the approach I used for my
&lt;a href=&quot;/blog/2020/06/16/axiaddr-limits.html&quot;&gt;AXI DMA&lt;/a&gt; and the
approach I used for the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
above is that I placed the
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axidma.v&quot;&gt;DMA&lt;/a&gt;’s
&lt;a href=&quot;https://en.wikipedia.org/wiki/Clock_gating&quot;&gt;clock gate&lt;/a&gt; within the
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axidma.v&quot;&gt;DMA logic&lt;/a&gt; itself
rather than in an encapsulating wrapper.  This gave me access to both the
gated clock, the original/raw AXI clock, and the current clock gating signal.
This turned out to be quite useful, since I could then keep the
&lt;a href=&quot;/blog/2019/05/22/skidbuffer.html&quot;&gt;skidbuffers&lt;/a&gt; on the
AXI clock, and the rest of the logic on the gated clock–but more on that in
a moment.  The unfortunate part of this choice is that it also means that this
gating circuit isn’t (currently) portable across devices–but today’s focus
is really on simulation only, since I’m really still experimenting
with the whole concept in the first place.&lt;/p&gt;

&lt;p&gt;Gating the &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axidma.v&quot;&gt;DMA&lt;/a&gt;’s
clock internally had the nice benefit that I could use flip-flops to latch all
of the critical &lt;a href=&quot;https://en.wikipedia.org/wiki/Clock_gating&quot;&gt;clock
gating&lt;/a&gt; signals within the
design.  Further, as mentioned above, I could also run the
&lt;a href=&quot;/blog/2019/05/22/skidbuffer.html&quot;&gt;skidbuffers&lt;/a&gt;
on the raw AXI clock, and only read them using the gated AXI clock.  That
meant that the &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axidma.v&quot;&gt;DMA&lt;/a&gt;
didn’t have to wake up from any kind of sleep until
the clock after an incoming bus request.&lt;/p&gt;

&lt;p&gt;Speaking of latches, the second big difference in this design had to deal
with the logic for the clock gate itself.  Instead of a latch, I used a
negative edge flip-flop–as I’ll share in a moment.  The approach isn’t text
book, so I’m not convinced if I like it or not, but it’s pretty simple to build
and it passes a formal test nicely.&lt;/p&gt;

&lt;p&gt;This new/updated clock gating circuit comes in two halves.
The first half sets a register that we’ll use to control the clock gate.
As before, we’ll use a registered signal, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;clk_active&lt;/code&gt;, to handle most of
our control logic–with the exception that we want to turn the clock on given
any &lt;a href=&quot;/blog/2020/03/08/easyaxil.html&quot;&gt;AXI-lite control request on our slave
port&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The first half takes place on the positive edge of the clock.  In this
case, we will turn the clock on in response to either an incoming bus request
or, alternatively, if a registered &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;clk_active&lt;/code&gt; signal is high.  We’ll 
come back to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;clk_active&lt;/code&gt; in a moment.&lt;/p&gt;

&lt;p&gt;Here’s the portion of the gating circuit that takes place on the positive
edge of the clock.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;kt&quot;&gt;reg&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;gatep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gaten&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clk_active&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r_gate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARESETN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;gatep&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1'b1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;gatep&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clk_active&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;awskd_valid&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wskd_valid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arskd_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The second half of this circuit moves this &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gatep&lt;/code&gt; value to the negative
edge of the clock.  Note that there’s no additional logic on this path, save
for a simple reset check.  That’s important since this logic must take place
in a half clock period, rather than a whole clock period.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;negedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARESETN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;gaten&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1'b1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;gaten&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gatep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Once accomplished, we can then create a gated clock much like we did with the
latch above.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;gated_clk&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gaten&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The trick here, however, is that the non-gated logic still needs to know
if the clock has been gated.  At issue specifically are the
&lt;a href=&quot;/blog/2019/05/22/skidbuffer.html&quot;&gt;skidbuffers&lt;/a&gt;.  These
need to be able to handle any incoming signal no matter whether the clock
is on or off.  For this reason, the
&lt;a href=&quot;/blog/2019/05/22/skidbuffer.html&quot;&gt;skidbuffers&lt;/a&gt;
operate on the AXI clock, and not the gated clock.  To handle the transition,
I created another signal, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;clk_gate&lt;/code&gt; below, to indicate if the logic on the
gated clock is active on this clock cycle.
While I might set this based upon &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gaten&lt;/code&gt; above, that would involve a second
edge to edge crossing, and indeed one that’s not required.  I can
instead just move the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gatep&lt;/code&gt; signal to the next clock to know whether or not
the clock is active on a given cycle.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARESETN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;r_gate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1'b1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;r_gate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gatep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;clk_gate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r_gate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The resulting signal, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;clk_gate&lt;/code&gt;, should pass a timing check easier–assuming
this piece of logic ever hits something more than the simulator.  (It may not.)&lt;/p&gt;

&lt;p&gt;Even better, I can easily adjust my &lt;a href=&quot;/blog/2020/03/08/easyaxil.html&quot;&gt;Easy AXI-Lite
design&lt;/a&gt;
to integrate this &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;clk_gate&lt;/code&gt; signal into the
&lt;a href=&quot;/blog/2019/05/22/skidbuffer.html&quot;&gt;skidbuffers&lt;/a&gt;
control signals:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;axil_write_ready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clk_gate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;awskd_valid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wskd_valid&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXIL_BVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXIL_BREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

	&lt;span class=&quot;c1&quot;&gt;// And sometime later ...&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;axil_read_ready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clk_gate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arskd_valid&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXIL_RVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXIL_RREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The only remaining question is how to set the registered value, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;clk_active&lt;/code&gt;
that we used above to control our gating signal.  As we work through the
various logic cases, the first two answers are that this core logic will be
inactive following a reset, and it will need to be active if we are ever busy
with a memory move.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARESETN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;clk_active&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1'b0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;clk_active&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1'b0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r_busy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;clk_active&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1'b1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We’ll also have to turn the clock on if we’re ever involved in any bus
transactions.  Since this design follows the &lt;a href=&quot;/blog/2020/03/08/easyaxil.html&quot;&gt;basic EasyAXIL AXI-lite
design&lt;/a&gt;,
there aren’t any deep pipelines anywhere within the AXI-lite control
structure.  That means we can just focus on the AXI-lite signals
themselves–whether incoming from the
&lt;a href=&quot;/blog/2019/05/22/skidbuffer.html&quot;&gt;skidbuffers&lt;/a&gt;
or outgoing.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;awskd_valid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wskd_valid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arskd_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;clk_active&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1'b1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXIL_BVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXIL_RVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;clk_active&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1'b1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Those are the two designs, therefore, that I’ll be testing today: an updated
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;, and a modified &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axidma.v&quot;&gt;AXI
DMA&lt;/a&gt;,
both of which will automatically turn their clocks off if they’re ever idle.&lt;/p&gt;

&lt;h2 id=&quot;performance-tests&quot;&gt;Performance tests&lt;/h2&gt;

&lt;p&gt;When I first ran &lt;a href=&quot;https://github.com/ZipCPU/axidmacheck/tree/zipcpu&quot;&gt;my AXI DMA test
bench&lt;/a&gt; using this clock
gating, the test bench ran in 4.4 seconds with clock gating and 5.3 seconds
without.  A 20% improvement!  Wow!  That’s a big deal.  If simulation speeds
can be improved by 20% simply via clock gating, then I’d be tempted to do a
whole lot more clock gating just to get my simulations to run faster.  Think of
how much time I could save on my 5hr simulation jobs!&lt;/p&gt;

&lt;p&gt;I then ran another test, this time on a commercial design I’ve been working on.
This test took 83:45 (83 minutes, 45 seconds) without clock gating, and
88:50 with clock gating.  In this case, clock gating not only didn’t help, it
actually made things worse.  Unfortunately, my notes from this test are a bit
old and I can’t remember which design I tested or which simulator I used
anymore.  Was it
&lt;a href=&quot;/blog/2017/06/21/looking-at-verilator.html&quot;&gt;Verilator&lt;/a&gt;
or &lt;a href=&quot;http://iverilog.icarus.com/&quot;&gt;IVerilog&lt;/a&gt;?  If I was using
&lt;a href=&quot;/blog/2017/06/21/looking-at-verilator.html&quot;&gt;Verilator&lt;/a&gt;,
then did I remember to flag the clock gate control signal to
&lt;a href=&quot;/blog/2017/06/21/looking-at-verilator.html&quot;&gt;Verilator&lt;/a&gt;?
Beyond that, which design had I tested and which configuration of that design
was it?&lt;/p&gt;

&lt;p&gt;Time to start over.&lt;/p&gt;

&lt;p&gt;So, let’s be clear today: today’s first test was of my &lt;a href=&quot;https://github.com/ZipCPU/axidmacheck&quot;&gt;AXI DMA test
bench&lt;/a&gt;, using &lt;a href=&quot;https://github.com/ZipCPU/axidmacheck/tree/abc25ce841ee7db3f5dd0325f75426a89469397a&quot;&gt;this ZipCPU
branch&lt;/a&gt;.  I ran the test
using &lt;a href=&quot;/blog/2017/06/21/looking-at-verilator.html&quot;&gt;Verilator&lt;/a&gt;.
I controlled the test via &lt;a href=&quot;https://github.com/ZipCPU/axidmacheck/blob/abc25ce841ee7db3f5dd0325f75426a89469397a/sim/automaster_tb.cpp#L199-L389&quot;&gt;an external C++ test script&lt;/a&gt;, and for the first test
of the DMA only I left the CPU halted the whole time.  As I mentioned above,
today’s results initially took 4.4s with clock gating enabled and 5.3s
without.  This test involved primarily gating the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So why not try gating the
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axidma.v&quot;&gt;DMA&lt;/a&gt;?
Even better, why not try gating all of the DMAs within the design?  That means
not only the &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axidma.v&quot;&gt;memory to memory
DMA&lt;/a&gt;,
but also the &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/aximm2s.v&quot;&gt;memory to stream
(MM2S)&lt;/a&gt;,
and the &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axis2mm.v&quot;&gt;stream to memory DMA
(S2MM)&lt;/a&gt;.  The
logic is easy enough to add–especially since I’ve now worked out the details
(shown above) when testing the &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axidma.v&quot;&gt;memory to memory
DMA&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So, for a second test using the same repository, I chose to run the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; in a
&lt;a href=&quot;/blog/2017/06/21/looking-at-verilator.html&quot;&gt;Verilator&lt;/a&gt;
based simulation, inside my &lt;a href=&quot;https://github.com/ZipCPU/axidmacheck/tree/zipcpu&quot;&gt;AXI DMA test
bench&lt;/a&gt;,
gating all three AXI DMAs.  As a test case, I ran
&lt;a href=&quot;https://en.wikipedia.org/wiki/Dhrystone&quot;&gt;Dhrystone&lt;/a&gt;, and &lt;a href=&quot;/blog/2021/08/14/axiperf.html&quot;&gt;my AXI
performance monitor&lt;/a&gt;,
and configured the CPU for 4kB instruction and data caches.&lt;/p&gt;

&lt;p&gt;The results?&lt;/p&gt;

&lt;p&gt;Well, let’s just say the results were not what I was expecting or hoping for.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 1. Simulation CPU time, with and without clock gating&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/clkgate/lowpower-times.png&quot; alt=&quot;&quot; width=&quot;662&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Perhaps the first lesson learned is that this is not how a proper test should
be conducted.  I spent the entire weekend running tests, examining the results,
updating and adjusting the test, and then running the test again.  Sure, the
DMA test only took about 5s to run, but 1000 rounds of
&lt;a href=&quot;https://en.wikipedia.org/wiki/Dhrystone&quot;&gt;Dhrystone&lt;/a&gt;, followed by the simulated
serial port outputting the data (this took longer than
&lt;a href=&quot;https://en.wikipedia.org/wiki/Dhrystone&quot;&gt;Dhrystone&lt;/a&gt; itself), took about
12 minutes to run.  I’d then examine the results, adjust things, and run
the test again and again.&lt;/p&gt;

&lt;p&gt;I also adjusted a second variable while running the test.  Not only did I
turn &lt;a href=&quot;https://en.wikipedia.org/wiki/Clock_gating&quot;&gt;clock gating&lt;/a&gt;
for the DMA’s or the CPU on and off, but I also enabled
or disabled the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OPT_LOWPOWER&lt;/code&gt; option within the design.  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OPT_LOWPOWER&lt;/code&gt; is
the name of a parameter that I’ve started adding to many of my designs.
When set, the design will use extra logic to either pin values at zero or
keep them from toggling when not used.  A classic example might be &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AXI_AxADDR&lt;/code&gt;.
If &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AXI_AxVALID&lt;/code&gt; is low, why should &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AXI_AxADDR&lt;/code&gt; change?&lt;/p&gt;

&lt;p&gt;Much to my surprise, turning on and off the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OPT_LOWPOWER&lt;/code&gt; option had more of
an effect on my simulations than the clock gate.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 2. VCD file size as a function of OPT_LOWPOWER&lt;/caption&gt;&lt;tr&gt;&lt;th&gt;OPT_LOWPOWER=0 (Unused)&lt;/th&gt;&lt;th&gt;OPT_LOWPOWER=1 (active)&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/clkgate/initial-sizes.png&quot; alt=&quot;&quot; width=&quot;331&quot; /&gt;&lt;/td&gt;&lt;td&gt;&lt;img src=&quot;/img/clkgate/lowpower-sizes.png&quot; alt=&quot;&quot; width=&quot;331&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;!-- FIGURE --&gt;

&lt;p&gt;Indeed, in the final analysis my
&lt;a href=&quot;https://en.wikipedia.org/wiki/Clock_gating&quot;&gt;clock gating&lt;/a&gt;
work didn’t have much of an impact on my simulations at all.&lt;/p&gt;

&lt;p&gt;So what lessons can we draw from these tests?&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;I was not able to demonstrate any significant simulation time benefit
to be gained by &lt;a href=&quot;https://en.wikipedia.org/wiki/Clock_gating&quot;&gt;clock gating&lt;/a&gt;.
Sure, 5-6% is measurable and it was eventually consistent, but it’s not
really anything to write home about.  This itself was a bit of a
disappointment, as I was hoping to reproduce that 20% improvement in
a larger design with a more complex simulation and I wasn’t able to do so.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;/blog/2017/07/31/vcd.html&quot;&gt;VCD file&lt;/a&gt; size appears to
be a reasonable proxy for energy used by a design.&lt;/p&gt;

    &lt;p&gt;This works because a &lt;a href=&quot;/blog/2017/07/31/vcd.html&quot;&gt;VCD file&lt;/a&gt;
contains only &lt;em&gt;changed&lt;/em&gt; signals.  Signals are only written into the &lt;a href=&quot;/blog/2017/07/31/vcd.html&quot;&gt;VCD
file&lt;/a&gt; when they change.
Signals that don’t change are never updated.  As a result, if only one
small portion of a design is changing, the impact of the rest of the design
on the &lt;a href=&quot;/blog/2017/07/31/vcd.html&quot;&gt;VCD file&lt;/a&gt;
size can be very small.&lt;/p&gt;

    &lt;p&gt;This isn’t a perfect proxy, however, since some signals such as clocks
have a greater capacitance, and therefore a greater energy usage within a
design than others.  Still,
&lt;a href=&quot;/blog/2017/07/31/vcd.html&quot;&gt;VCD file&lt;/a&gt; size can be a
&lt;em&gt;useful&lt;/em&gt; indicator.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;It can be easier to gate a clock than it is to properly audit your design
for toggling signals that don’t need to be toggling.  In other words,
one might argue that
&lt;a href=&quot;https://en.wikipedia.org/wiki/Clock_gating&quot;&gt;clock gating&lt;/a&gt;
can be used as a poor man’s substitute for good low power design practice.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;My two AXI caches
&lt;a href=&quot;https://github.com/ZipCPU/blob/zipcore/rtl/core/axiicache.v&quot;&gt;[1]&lt;/a&gt;
&lt;a href=&quot;https://github.com/ZipCPU/blob/zipcore/rtl/core/axidcache.v&quot;&gt;[2]&lt;/a&gt;,
together with my &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axi2axilite.v&quot;&gt;AXI to AXI-lite
bridge&lt;/a&gt;,
all needed some low power work since they were allowing a lot of signals
to toggle unnecessarily.  Indeed, even though my brand new &lt;a href=&quot;/blog/2021/08/14/axiperf.html&quot;&gt;AXI performance
monitor&lt;/a&gt; had a &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/1c34ceb8807b0348ea242ec3d5d4aace13932483/rtl/axiperf.v#L699-L700&quot;&gt;low power
option&lt;/a&gt;, I hadn’t yet enabled it.&lt;/p&gt;

    &lt;p&gt;Worse, my &lt;a href=&quot;https://github.com/ZipCPU/blob/zipcore/rtl/core/axidcache.v&quot;&gt;AXI data
cache&lt;/a&gt; didn’t
initially work with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OPT_LOWPOWER&lt;/code&gt; set.  Under certain circumstances, it
would issue a read of a zero address, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;M_AXI_ARADDR == 0&lt;/code&gt;, simply because
I had tested for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;i_op[0]&lt;/code&gt; (a write operation) instead of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;!i_op[0]&lt;/code&gt; (a
read operation).  This seems to be a &lt;a href=&quot;/zipcpu/2019/02/04/debugging-that-cpu.html&quot;&gt;common, and rather frustrating
problem&lt;/a&gt;,
where I’ll check a design component into my repository without verifying
all of it.  I then pull it out later to use it, configure it in a way it
hasn’t yet been tested for, expect it to “just work” and then find myself
debugging the entire design in order to find and fix an unexpectedly
broken component within it.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; itself needed some
low power work.  Specifically, the
&lt;a href=&quot;/zipcpu/2021/07/03/slowmpy.html&quot;&gt;multiplies&lt;/a&gt; were &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/8aed45b765b39ed0e1da78338f7ce8a9564c4d0c/rtl/core/mpyop.v#L203-L206&quot;&gt;always
turned on and calculating&lt;/a&gt;–even
if the CPU was ignoring their results.  Similarly, the &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/8aed45b765b39ed0e1da78338f7ce8a9564c4d0c/rtl/core/idecode.v#L686-L700&quot;&gt;early branching
address&lt;/a&gt;
and the &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/8aed45b765b39ed0e1da78338f7ce8a9564c4d0c/rtl/core/idecode.v#L600-L604&quot;&gt;simulation instruction
details&lt;/a&gt;
were always calculated–even when the CPU wasn’t branching and the
simulation instruction wasn’t active.&lt;/p&gt;

    &lt;p&gt;These things are easy enough to fix, but you won’t recognize they are a
problem if you aren’t looking for them in the first place.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Small changes tended to have a big impact on the &lt;a href=&quot;/blog/2017/07/31/vcd.html&quot;&gt;VCD
file&lt;/a&gt; size.  For
example, I started with a rough 15GB &lt;a href=&quot;/blog/2017/07/31/vcd.html&quot;&gt;VCD
file&lt;/a&gt; size even with
&lt;a href=&quot;https://en.wikipedia.org/wiki/Clock_gating&quot;&gt;clock gating&lt;/a&gt;
and, through the small number of optimizations listed above, I managed to
get that file size down to 9GB.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;As for design, when designing a component for
&lt;a href=&quot;https://en.wikipedia.org/wiki/Clock_gating&quot;&gt;clock gating&lt;/a&gt;
it really helps to have access to both the gated and the ungated clock,
as well as an ungated signal to tell you whether or not the current
clock is gated.&lt;/p&gt;

    &lt;p&gt;This much cannot be stressed enough.  Having access to both sides of the
gate was very valuable.&lt;/p&gt;

    &lt;p&gt;As an example, one of my initial purposes was to examine AXI’s low power
interface signals: CSYSREQ, CSYSACK, and CACTIVE.  Indeed, one of my
earlier &lt;a href=&quot;https://en.wikipedia.org/wiki/Clock_gating&quot;&gt;clock gating&lt;/a&gt; versions
of the &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axidma.v&quot;&gt;AXI DMA&lt;/a&gt;
specifically made use of these signals.&lt;/p&gt;

    &lt;p&gt;I’ve since &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/commit/1c34ceb8807b0348ea242ec3d5d4aace13932483&quot;&gt;ripped all of that logic back out&lt;/a&gt;.&lt;/p&gt;

    &lt;p&gt;Why?  First, the &lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI specification&lt;/a&gt;
isn’t very clear on how these signals should be used.  Only
when digging elsewhere did I discover that these signals are all required
to be registered.  What good are registered signals, when the only clock you
have available to register them with comes from the gated clock domain?
A design always needs a way of exiting a low power state, and this is going
to require some amount of logic in the ungated clock domain.  Second, these
signals are supposed to require support from the AXI interconnect, and
my interconnect doesn’t (yet) support them.  Perhaps I’m missing something.
How is the interconnect to know that a bus component is or isn’t busy?
Should it always try to shut components down?  As a result, until I finally
figure out these signals, I’ve torn the capability out.  It was just one more
item that needed to be maintained, and worse it was rather dubious whether
I was accurately supporting the standard at that.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;conclusions&quot;&gt;Conclusions&lt;/h2&gt;

&lt;p&gt;While I’m sure there’s a good reason to use
&lt;a href=&quot;https://en.wikipedia.org/wiki/Clock_gating&quot;&gt;clock gating&lt;/a&gt;
out there, I’m also pretty sure I haven’t (yet) found it outside of an
&lt;a href=&quot;/blog/2017/10/13/fpga-v-asic.html&quot;&gt;ASIC&lt;/a&gt; context.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Clock_gating&quot;&gt;Clock gating&lt;/a&gt; doesn’t appear
to have any substantial impact on simulation run time–when using
&lt;a href=&quot;/blog/2017/06/21/looking-at-verilator.html&quot;&gt;Verilator&lt;/a&gt;
that is.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;If you have to allocate a second global clock buffer on an FPGA for a gated
clock, then you haven’t really gained much of a power savings–since a
large portion of any FPGA design’s power usage will be consumed by the
clock buffer.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Yes, &lt;a href=&quot;https://en.wikipedia.org/wiki/Clock_gating&quot;&gt;clock gating&lt;/a&gt;
can stop registers from toggling.  But, let me ask, should those registers
have been toggling in the first place?  To me, this feels like a cheaters
way of handling a bad engineering design.  Wouldn’t it be better to simply
clean up the design in the first place?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;That leaves low-power
&lt;a href=&quot;/blog/2017/10/13/fpga-v-asic.html&quot;&gt;ASIC&lt;/a&gt;
design as the only remaining reason I can think of for
&lt;a href=&quot;https://en.wikipedia.org/wiki/Clock_gating&quot;&gt;clock gating&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I guess my final conclusion would be that we need to come back to the topic
of low power FPGA design on this blog, and deal with it properly and fully at
that time.  There’s a lot more to low power design than gating clocks, and a
review of the tools available to the power conscious FPGA designer could be
quite valuable.&lt;/p&gt;
&lt;hr /&gt;&lt;p&gt;&lt;em&gt;And the sun stood still, and the moon stayed, until the people had avenged themselves upon their enemies. Is not this written in the book of Jasher? So the sun stood still in the midst of heaven, and hasted not to go down about a whole day. (Joshua 10:13)&lt;/em&gt;</description>
        <pubDate>Tue, 26 Oct 2021 00:00:00 -0400</pubDate>
        <link>https://zipcpu.com/blog/2021/10/26/clkgate.html</link>
        <guid isPermaLink="true">https://zipcpu.com/blog/2021/10/26/clkgate.html</guid>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>Upgrading the ZipCPU's memory unit from AXI4-lite to AXI4</title>
        <description>&lt;p&gt;Some time ago, I presented a &lt;a href=&quot;/zipcpu/2021/04/17/axilops.html&quot;&gt;very simple AXI4-lite memory
controller&lt;/a&gt; for the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;.  At the time, I mentioned that
I also had a &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/73c6fae1aac6cf941fb44b6612f2a66038917b22/rtl/core/axiops.v&quot;&gt;similar memory controller for AXI4
(not-lite)&lt;/a&gt;.
Today, let’s discuss the difference between these two controllers, to see how
AXI4 excels over AXI4-lite.  As you’ll see, a large focus of this discussion
will focus on the exclusive access capability specific to AXI4.&lt;/p&gt;

&lt;p&gt;Perhaps you’ll remember the discussion of &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/73c6fae1aac6cf941fb44b6612f2a66038917b22/rtl/core/axiops.v&quot;&gt;today’s memory
controller&lt;/a&gt;
from the article on &lt;a href=&quot;/blog/2021/08/14/axiperf.html&quot;&gt;measuring AXI4
performance&lt;/a&gt;.  In that
article, we discussed and compared the performance of the various
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; memory controllers:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;The slowest memory controller in that test was the &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/73c6fae1aac6cf941fb44b6612f2a66038917b22/rtl/core/axiops.v&quot;&gt;basic, low-logic, memory
controller&lt;/a&gt;
that we’ll be discussing today.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I also tested a &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/73c6fae1aac6cf941fb44b6612f2a66038917b22/rtl/core/axipipe.v&quot;&gt;pipelined memory controller&lt;/a&gt;.
The claim to fame of this controller is that it will allow multiple requests
to be outstanding at a time.  The primary difference between
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/73c6fae1aac6cf941fb44b6612f2a66038917b22/rtl/core/axipipe.v&quot;&gt;this pipelined controller&lt;/a&gt;
and the &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/73c6fae1aac6cf941fb44b6612f2a66038917b22/rtl/core/axiops.v&quot;&gt;basic
controller&lt;/a&gt; in today’s discussion is that the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/73c6fae1aac6cf941fb44b6612f2a66038917b22/rtl/core/axipipe.v&quot;&gt;pipelined controller&lt;/a&gt;
contains a FIFO and some extra counters in order to keep track of the
outstanding transactions.  When running
&lt;a href=&quot;https://en.wikipedia.org/wiki/Dhrystone&quot;&gt;Dhrystone&lt;/a&gt;, the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; is about 9% faster when using
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/73c6fae1aac6cf941fb44b6612f2a66038917b22/rtl/core/axipipe.v&quot;&gt;the pipelined controller&lt;/a&gt;
rather than the &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/73c6fae1aac6cf941fb44b6612f2a66038917b22/rtl/core/axiops.v&quot;&gt;basic
controller&lt;/a&gt;
we’ll be discussing today.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I also presented an &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/73c6fae1aac6cf941fb44b6612f2a66038917b22/rtl/core/axidcache.v&quot;&gt;AXI Data Cache based memory
controller&lt;/a&gt;.  Despite being a very basic and simple
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/73c6fae1aac6cf941fb44b6612f2a66038917b22/rtl/core/axidcache.v&quot;&gt;data cache implementation&lt;/a&gt;,
the performance of a 4kB &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/73c6fae1aac6cf941fb44b6612f2a66038917b22/rtl/core/axidcache.v&quot;&gt;data
cache&lt;/a&gt;
still beat out &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/73c6fae1aac6cf941fb44b6612f2a66038917b22/rtl/core/axiops.v&quot;&gt;today’s basic controller&lt;/a&gt; by 27%.
This should help illustrate one of the fundamental lessons of CPU logic
design: you can buy CPU speed with logic.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 1. Which board should I buy to study CPU design?&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/axiops/which-board.svg&quot; alt=&quot;&quot; width=&quot;480&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;As I noted in &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/doc/chexpo-2021.pdf&quot;&gt;my recent briefing to ChipExpo
2021&lt;/a&gt;, I
currently have no good AXI4 master for testing the
&lt;a href=&quot;/blog/2019/04/27/axi-addr.html&quot;&gt;AXI WRAP&lt;/a&gt; capability of a
slave.  The natural master one might have for this would be a CPU cache
implementation, much like my &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/73c6fae1aac6cf941fb44b6612f2a66038917b22/rtl/core/axidcache.v&quot;&gt;AXI data
cache&lt;/a&gt;,
so you might see an upgrade in the near future so that it will support this
capability.&lt;/p&gt;

&lt;p&gt;For now, however, I’d like to focus on the differences between the &lt;a href=&quot;/zipcpu/2021/04/17/axilops.html&quot;&gt;basic
AXI4-lite memory controller&lt;/a&gt;
for the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; and its &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/73c6fae1aac6cf941fb44b6612f2a66038917b22/rtl/core/axiops.v&quot;&gt;AXI4 (not-lite)
counterpart&lt;/a&gt;.
There are three big differences that we’ll discuss today, as well as two
features that I’d like to discuss because I didn’t end up using them.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;The big new feature from AXI4 over and above AXI4-lite is exclusive
access.  Exclusive access support is a required capability in order to
support
&lt;a href=&quot;https://en.wikipedia.org/wiki/Linearizability&quot;&gt;atomic actions&lt;/a&gt; on a
busy &lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;,
yet without bringing the other users of the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
to a halt.  This is something I haven’t really blogged about
before, so these changes should be interesting to discuss.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;One of the non-trivial differences in the upgrade from AXI4–lite to AXI4
was associated with setting the AxSIZE field.  This &lt;em&gt;should&lt;/em&gt; have been
trivial.  Subtle requirements, both from the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
and the CPU, guaranteed that this piece of the design was far from trivial,
and so I’d like to spend a moment discussing why the AxSIZE field was a
challenge.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;AXI offers two prominent features that I did not really use in my controller:
IDs and multibeat bursts via AxLEN.  The story of these two features, and
particularly why I didn’t use AxLEN to implement bursts, is important
for discussion.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;This still leaves us with a lot of unused features, so we’ll then quickly
drive those to default values in order to close out the differences between
the two designs.  That leaves only a small discussion at the end regarding
what default values should be chosen.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;That’s our basic outline, so let’s go ahead and dive into the changes
required to add exclusive access to this design.&lt;/p&gt;

&lt;h2 id=&quot;exclusive-access&quot;&gt;Exclusive Access&lt;/h2&gt;

&lt;p&gt;The &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; has a very simple exclusive access capability.  It’s one of the
few functionalities that require a multi-instruction sequence.&lt;/p&gt;

&lt;p&gt;An &lt;a href=&quot;https://en.wikipedia.org/wiki/Linearizability&quot;&gt;atomic operation&lt;/a&gt;
in the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; is a four instruction
sequence, starting with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LOCK&lt;/code&gt; instruction.  The other three instructions
are a load, an &lt;a href=&quot;/zipcpu/2017/08/11/simple-alu.html&quot;&gt;ALU&lt;/a&gt;
operation, and then a store instruction as shown in the following
pseudo-assembly:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-asm&quot; data-lang=&quot;asm&quot;&gt;	LOCK
	LOAD	(Addr),Rdata	; Load something into Rdata
	ALU	Rx,Rdata	; Operate on Rdata
	STORE	Rdata,(Addr)	; Store the result in the original address&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This format has been sufficient to implement a large number of
&lt;a href=&quot;https://en.wikipedia.org/wiki/Linearizability&quot;&gt;atomic operations&lt;/a&gt;.
For example, an atomic increment can be written as,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-asm&quot; data-lang=&quot;asm&quot;&gt;	LOCK
	LW	(R1),R2
	ADD	1,R2
	SW	R2,(R1)&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Such an instruction sequence could easily form the basis of a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Semaphore_%28programming%29&quot;&gt;semaphore&lt;/a&gt;
implementation.&lt;/p&gt;

&lt;p&gt;A similar instruction sequence known as a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Test-and-set&quot;&gt;test and set&lt;/a&gt; can be written as,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-asm&quot; data-lang=&quot;asm&quot;&gt;	LDI	1,R3
	LOCK
	LW	(R1),R2
	TEST	R2
	SW.Z	R3,(R1)&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This operation reads a value from memory, checks to see if it is zero, and then
writes a one to the memory if it is.  This sequence is useful for seeing if
a resource is available, and then marking it as in use if it is.  The register
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;R2&lt;/code&gt; can then be checked to know if the resource was available.  Even better,
the result of this comparison has been conveniently left in the condition codes.&lt;/p&gt;

&lt;p&gt;This is about as simple as it gets.&lt;/p&gt;

&lt;p&gt;The actual implementation of this sequence is fairly simple as well–when
implemented in 
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone&lt;/a&gt;.  Indeed,
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone&lt;/a&gt; exclusive
access is quite easy: just hold the CYC line high between the load and the
subsequent store, and nothing else will have access to that resource.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
goes a bit further in its implementation: it guarantees that the
lock sequence will not be interrupted.  Therefore, even if the lock sequence
is executed from user mode (with interrupts enabled), the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LOCK&lt;/code&gt; instruction
disables interrupts for the three instructions following.&lt;/p&gt;

&lt;p&gt;This makes &lt;a href=&quot;https://en.wikipedia.org/wiki/Linearizability&quot;&gt;atomic&lt;/a&gt;
memory access simple when using the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;: the instruction sequence is
simplified, and the
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone&lt;/a&gt; interaction
necessary to support it is also quite simple.&lt;/p&gt;

&lt;p&gt;Mapping this simplicity into AXI4 was not nearly so easy.&lt;/p&gt;

&lt;p&gt;AXI4 &lt;a href=&quot;https://en.wikipedia.org/wiki/Linearizability&quot;&gt;atomic&lt;/a&gt;
access semantics are quite different.  AXI4, for example, doesn’t
allow you to lock the &lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
and keep other users from accessing memory (for example) during your operation.
Instead, AXI4 implements something called &lt;em&gt;exclusive access&lt;/em&gt;.  Exclusive
access operations are described via a sequence of operations:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;First, the CPU issues an exclusive access read.  This is a read request
(a load instruction) from the CPU where &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ARLOCK&lt;/code&gt; is set.  When the slave
sees this request, it copies down the details of the request and returns
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RRESP=EXOKAY&lt;/code&gt; when returning the request.&lt;/p&gt;

    &lt;p&gt;If the slave doesn’t support exclusive access requests, then it simply
processes the read as normal and returns &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RRESP=OKAY&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;If the slave observes any subsequent writes to this address, it will
invalidate this lock.  Similarly, if the slave receives a subsequent
read request with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ARLOCK&lt;/code&gt; set, the lock will move to a different address.&lt;/p&gt;

    &lt;p&gt;On its face, this &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/b3145001959c36a206a884243770be5c8c17e5da/rtl/demofull.v#L836-L965&quot;&gt;forces the slave to track one exclusive access address
for every AxID value that it supports&lt;/a&gt;.
Alternatively, the slave can monitor a single address and then keep track
of the AxID of the last exclusive access request together with the address
details of the request.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Some time after the exclusive access read request, the CPU will issue the
subsequent write request.  This request &lt;em&gt;must&lt;/em&gt; match the read request:
same address, same &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AxLEN&lt;/code&gt;, same &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AxSIZE&lt;/code&gt;, same &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AxBURST&lt;/code&gt;, etc.  The
slave will then compare these values to the values given by the last
exclusive access read request.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;If the values match and nothing has been written to that address since the
read, then the request succeeds and the value is written to
memory.  This would be the case if nothing else had written to this
memory since the previous exclusive access read.  In this case, the
slave returns &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BRESP=EXOKAY&lt;/code&gt; to let the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt; master know that the
operation has been successful.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Alternatively, if the 1) values don’t match or 2) if something has written
to one of the addresses in the burst since the read, then the exclusive
access write request fails.  The slave then returns &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BRESP=OKAY&lt;/code&gt; &lt;em&gt;and
doesn’t update any memory&lt;/em&gt;.&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The next step takes place in the CPU.  When the CPU sees the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BRESP=OKAY&lt;/code&gt;,
rather than a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BRESP=EXOKAY&lt;/code&gt; response, then it needs to repeat the
exclusive access request again and again until it succeeds.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now, how should the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
be modified to handle exclusive access?&lt;/p&gt;

&lt;p&gt;A look at both ARM and Microblaze architectures didn’t help.  These
architectures both require an instruction sequence that’s closer tied to the
hardware than the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;’s
&lt;a href=&quot;/zipcpu/2018/01/01/zipcpu-isa.html&quot;&gt;ISA&lt;/a&gt; allowed.
First, they require special exclusive access load and store instructions.
Following the exclusive access store instruction, the CPU must then check an
internal register flag to see if the operation was successful, and branch
if it was not.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-asm&quot; data-lang=&quot;asm&quot;&gt;	DMB ish			; Memory barrier
loop:
	LDREX	R2,[R3]		; Load w/ exclusive access
	ADD	R0,R2,R1	; An atomic add, R0 &amp;lt;= R2 + R1
	STREX	R12,R0,[R3]	; Store the result, R0, with exclusive access
	CMP	R12,#0		; Check for the EXOKAY flag in R12
	BNE	loop		; Loop if the STREX didn't return EXOKAY
	DMB	ish		; Memory barrier&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This requires both a longer instruction sequence, but also a more complex
instruction decoder and hence a larger bit field for the relevant opcode.&lt;/p&gt;

&lt;p&gt;This was unacceptable for me: I wanted to keep the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; simple.  For that reason, I
didn’t want to add any more instructions to the &lt;a href=&quot;/zipcpu/2018/01/01/zipcpu-isa.html&quot;&gt;ZipCPU’s instruction
set&lt;/a&gt;, nor did I want to
support a different instruction sequence, additional special registers,
or special register fields.&lt;/p&gt;

&lt;p&gt;This lead me to design a solution based upon the state diagram in Fig. 2 below.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 2. ZipCPU's exclusive access state machine&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/axiops/exaccess-fsm.svg&quot; alt=&quot;&quot; width=&quot;760&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Here’s how it works in detail:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;When issued, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LOCK&lt;/code&gt; instruction would send its instruction address to
the memory unit.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The load instruction would be implemented as one might expect.  Indeed,
issuing the read is identical to &lt;a href=&quot;/zipcpu/2021/04/17/axilops.html&quot;&gt;the previous
controller&lt;/a&gt;, save for a
couple details–such as setting &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ARLOCK&lt;/code&gt; and so forth.
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ARLOCK&lt;/code&gt; would be set, etc.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The first change comes if the load instruction does not return
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RRESP=EXOKAY&lt;/code&gt;.  The AXI4 specification says that the master &lt;em&gt;may&lt;/em&gt; treat
this as an &lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;error&lt;/a&gt; condition.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 3. AXI4 Specification: Should RRESP != EXOKAY be treated as an error?&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/axiops/axi-rresp.png&quot; alt=&quot;&quot; width=&quot;760&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;When I first read this, I understood that the slave must return &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RRESP=OKAY&lt;/code&gt;
   if it doesn’t support exclusive access operations, but otherwise the answer
   wasn’t constrained.  My first slave implementation, therefore, would return
   &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RRESP=OKAY&lt;/code&gt; if the slave supported exclusive access but a current write
   in progress would prevent this exclusive access operation from succeeding.
   Hence, I would only return &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RRESP=EXOKAY&lt;/code&gt; if the operation was going to
   succeed.&lt;/p&gt;

&lt;p&gt;Upon further review, this initial AXI4 slave implementation was broken.
   Practically, the slave &lt;em&gt;must&lt;/em&gt; return &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EXOKAY&lt;/code&gt; if an exclusive access
   operation might ever succeed for the given address.&lt;/p&gt;

&lt;p&gt;The problem comes into play when you try to answer the question of what
   the CPU should do on an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RRESP=OKAY&lt;/code&gt; response.  If the CPU doesn’t treat
   &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RRESP=OKAY&lt;/code&gt; as an &lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;error&lt;/a&gt;,
   then &lt;em&gt;it will get stuck in an endless loop!&lt;/em&gt;
   Hence, a request for exclusive access that returns &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RRESP=OKAY&lt;/code&gt; &lt;em&gt;must&lt;/em&gt;
   generate a &lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
   &lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;error&lt;/a&gt; return to the CPU.&lt;/p&gt;

&lt;ol start=&quot;4&quot;&gt;
  &lt;li&gt;
    &lt;p&gt;On the other hand, if the CPU receives &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RRESP=EXOKAY&lt;/code&gt; then things proceed
as before: the value from memory is returned to the CPU, written into the
CPU’s register set, and then the CPU performs the
&lt;a href=&quot;/zipcpu/2017/08/11/simple-alu.html&quot;&gt;ALU&lt;/a&gt;
operation on the memory value.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The store instruction then starts out as expected as well: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AWLOCK&lt;/code&gt; is
set, and the write request is issued.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The next change takes place while the store operation is ongoing: during
this time, the CPU &lt;em&gt;must&lt;/em&gt; stall to wait and see what the result of this
operation will be.  It cannot be allowed to continue with further
instructions since they might need to be rolled back if the write ever
failed.  While some CPU’s might be able to undo or “roll-back” any following
instructions, the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; has no such
ability–hence, it cannot continue until this operation finishes
successfully.&lt;/p&gt;

    &lt;p&gt;For this reason, the memory controller must signal a stall to the CPU.&lt;/p&gt;

    &lt;p&gt;In order to keep from rewriting any more of my memory interface than
necessary, I abused the read-in-progress signal, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;o_rdbusy&lt;/code&gt;, for this
purpose.  Hence, while an exclusive write operation is ongoing, the CPU
is told that a read is in progress.  This prevents the CPU from continuing,
lest it attempt to perform an operation on a register whose value is yet
to be returned from the read request.&lt;/p&gt;

    &lt;p&gt;The second interface change is that, during this time, additional memory
operations are disallowed by the memory controller.  Only one outstanding
write operation is allowed during an exclusive access write of any type.
While this doesn’t really impact the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/73c6fae1aac6cf941fb44b6612f2a66038917b22/rtl/core/axiops.v&quot;&gt;axiops&lt;/a&gt;
controller we are discussing today, it does have a bit of an impact on &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/73c6fae1aac6cf941fb44b6612f2a66038917b22/rtl/core/axipipe.v&quot;&gt;the
pipelined memory controller&lt;/a&gt;
by prohibiting the pipeline from every becoming more than a single write
deep when using an exclusive access write.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;If the exclusive access store completes with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BRESP=EXOKAY&lt;/code&gt;, the
stalls outlined above are quietly released and the CPU continues as before.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;On the other hand, if the exclusive store completes with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BRESP=OKAY&lt;/code&gt;, then
the &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/73c6fae1aac6cf941fb44b6612f2a66038917b22/rtl/core/axiops.v&quot;&gt;memory controller&lt;/a&gt;
returns a value to the CPU–much like it might return a value from a read
instruction.  The value returned is the value of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LOCK&lt;/code&gt; instruction’s
address, and this value is then written to the program counter.  Yes, the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;’s
&lt;a href=&quot;/zipcpu/2018/01/01/zipcpu-isa.html&quot;&gt;instruction set&lt;/a&gt;
allows loads directly to the &lt;a href=&quot;https://en.wikipedia.org/wiki/Program_counter&quot;&gt;program
counter&lt;/a&gt;.  This just forces
the exclusive access store operation to masquerade as such a read on failure.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;At least, that was the plan I decided on to make this work.  I specifically
liked the fact that this plan didn’t require any changes to the &lt;a href=&quot;/zipcpu/2018/01/01/zipcpu-isa.html&quot;&gt;instruction
set&lt;/a&gt;,
nor to the instruction decoder.  Indeed, the only change required to the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/73c6fae1aac6cf941fb44b6612f2a66038917b22/rtl/core/zipcore.v&quot;&gt;CPU’s core&lt;/a&gt;,
that of passing the &lt;a href=&quot;https://en.wikipedia.org/wiki/Program_counter&quot;&gt;program
counter&lt;/a&gt; of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LOCK&lt;/code&gt;
instruction, was an easy/minor change to make.&lt;/p&gt;

&lt;p&gt;Let’s therefore take a peek at how these details might be implemented in the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/73c6fae1aac6cf941fb44b6612f2a66038917b22/rtl/core/axiops.v&quot;&gt;memory controller&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The first step is to set the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AxLOCK&lt;/code&gt; flag on any lock request.  We’ll start
by clearing this value if either the memory controller doesn’t support
exclusive accesses or if the value is reset.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;axlock&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1'b0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OPT_LOCK&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARESETN&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OPT_LOWPOWER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;axlock&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1'b0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The next step takes place only if &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BREADY || RREADY&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_BREADY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M_AXI_RREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Something is outstanding&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OPT_LOWPOWER&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_BVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M_AXI_RVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;axlock&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axlock&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_lock&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M_AXI_RVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;As a point of reference from &lt;a href=&quot;/zipcpu/2021/04/17/axilops.html&quot;&gt;our last
article&lt;/a&gt;, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BREADY&lt;/code&gt;
and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RREADY&lt;/code&gt; flags are being used as part of an implicit state machine to tell
us if an operation is ongoing.  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BREADY&lt;/code&gt;, therefore, is only set if a write
operation is ongoing.  Likewise &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RREADY&lt;/code&gt; is only set if a read operation is
ongoing.  For this reason, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BREADY || RREADY&lt;/code&gt; check above is our way of
testing if an operation is ongoing.&lt;/p&gt;

&lt;p&gt;If an operation is ongoing then we really don’t need to change anything.
However, if we’re trying to keep our power down, then it might make sense to
clear the lock flag at the end of the exclusive access write operation.&lt;/p&gt;

&lt;p&gt;Otherwise, if there’s no operation ongoing, then we’ll want to set the
lock flag on any incoming memory request.  Here, again, we split the logic
into two possibilities: if we don’t care about arbitrarily toggling this
value, that is if &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OPT_LOWPOWER&lt;/code&gt; isn’t set and we are optimizing for low
area, then we just set &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;axlock&lt;/code&gt; based upon the CPU’s lock request independent
of whether or not a new request is being made.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// New memory operation&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// Initiate a request&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OPT_LOWPOWER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;axlock&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OPT_LOWPOWER&lt;/code&gt; is set, then we are going to try to minimize the number of
times anything toggles, including &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;axlock&lt;/code&gt;.
Therefore we’ll set &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;axlock&lt;/code&gt; on any new memory request arriving
with the lock flag set, but otherwise clear the flag if an incoming lock
request will not result in an outgoing request.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_stb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;axlock&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_cpu_reset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o_err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w_misaligned&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;axlock&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1'b0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;M_AXI_AWLOCK&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;M_AXI_ARLOCK&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This signal is then used to set the AXI &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AWLOCK&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ARLOCK&lt;/code&gt; signals.&lt;/p&gt;

&lt;p&gt;One of the AXI rules about exclusive access requests, however, is that all
exclusive access requests must be aligned.  It is a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt; protocol violation to
issue an exclusive access request for an unaligned address.  Hence, we’ll need
to return a &lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;error&lt;/a&gt;
to the CPU on any request for exclusive access to an unaligned memory address.
This is controlled by the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;w_misalignment_err&lt;/code&gt; flag below.&lt;/p&gt;

&lt;p&gt;Normally, this &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;w_misalignment_err&lt;/code&gt; flag is set on any unaligned access if the
CPU is configured to generate a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;error&lt;/a&gt; on any unaligned request.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// Return an error if a request requires two beats and we&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// don't support breaking the request into two, or ...&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;w_misalignment_err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OPT_ALIGNMENT_ERR&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w_misaligned&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;To that logic, we add the exclusive access check for an unaligned access.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OPT_LOCK&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;// Return an error on any lock request for an unaligned&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;// address--no matter how it is unaligned.&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;casez&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
			&lt;span class=&quot;mb&quot;&gt;2'b0?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w_misalignment_err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
			&lt;span class=&quot;mb&quot;&gt;2'b10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w_misalignment_err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
			&lt;span class=&quot;nl&quot;&gt;default:&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;w_misalignment_err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1'b0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;endcase&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;While the &lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
operation is ongoing, the memory controller must tell the
CPU that it is busy with the request.  This is done via the “read-busy”
signal, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;o_rdbusy&lt;/code&gt;.  We’d nominally set this flag if &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RREADY&lt;/code&gt; were true,
indicating that a read operation was ongoing, with the exception being if the
CPU ever needed to flush pending responses from the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;–such
as if the CPU had received a reset independent of a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt; reset, or following a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;error&lt;/a&gt; of any type.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;n&quot;&gt;o_rdbusy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M_AXI_RREADY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r_flushing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/73c6fae1aac6cf941fb44b6612f2a66038917b22/rtl/core/axiops.v#L319-L351&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;r_flushing&lt;/code&gt; signal&lt;/a&gt;
is one of the biggest differences between the
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone&lt;/a&gt; memory
controller and the
&lt;a href=&quot;/zipcpu/2021/04/17/axilops.html&quot;&gt;AXI controller&lt;/a&gt;:
AXI doesn’t allow &lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
aborts.  Hence, if a transaction is ongoing when the
CPU is reset, or likewise if a transaction is ongoing when an
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;error&lt;/a&gt; condition is received, then
the CPU wants to abort any outstanding transactions.  Since AXI doesn’t have a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
abort capability, we’ll instead &lt;em&gt;flush&lt;/em&gt; the returns.  That is, we count how
many requests are outstanding, and then wait for this value to return to zero
before returning back to operation again.&lt;/p&gt;

&lt;p&gt;Keep in mind, this &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;o_rdbusy&lt;/code&gt; signal is different from the busy signal,
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;o_busy&lt;/code&gt;.  If &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;o_busy&lt;/code&gt; is true, the memory controller won’t accept any new
requests, and it won’t switch from &lt;a href=&quot;/zipcpu/2018/01/01/zipcpu-isa.html&quot;&gt;user to supervisor
mode&lt;/a&gt;–choosing instead
to wait until all requests are complete.  If &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;o_rdbusy&lt;/code&gt; is true, on the other
hand, then the CPU must also stall and wait on a read return.&lt;/p&gt;

&lt;p&gt;That was before AXI exclusive access support.&lt;/p&gt;

&lt;p&gt;Now we need to declare ourselves busy during exclusive access writes as well.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;n&quot;&gt;o_rdbusy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_BREADY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M_AXI_RREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r_flushing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;o_rdbusy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1'b0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;That’s because we might need to write to the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Program_counter&quot;&gt;program counter&lt;/a&gt; register once
the exclusive access store instruction completes, assuming it didn’t receive
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BRESP=EXOKAY&lt;/code&gt;, just like a normal read might.  This then forces the CPU to
stall waiting on the end of the exclusive access write, whereas it might
otherwise have continued onto its next instruction even though a write
operation might have been outstanding.&lt;/p&gt;

&lt;p&gt;Once the exclusive access operation completes, we’ll need to either raise
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;o_valid&lt;/code&gt;, to indicate a read has completed and the result is to be written
to a CPU register (such as the &lt;a href=&quot;https://en.wikipedia.org/wiki/Program_counter&quot;&gt;program
counter&lt;/a&gt;), or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;o_err&lt;/code&gt; to
cause the CPU to recognize a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;error&lt;/a&gt; and trap, or neither if
the write completes successfully.&lt;/p&gt;

&lt;p&gt;The semantics for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;o_valid&lt;/code&gt; are a touch different
&lt;a href=&quot;/zipcpu/2021/04/17/axilops.html&quot;&gt;from before&lt;/a&gt;.
&lt;a href=&quot;/zipcpu/2021/04/17/axilops.html&quot;&gt;Before&lt;/a&gt; we’d return
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;o_valid&lt;/code&gt; once any read operation completed to indicate that a read result
was ready to be copied into a CPU register.  Now, when using exclusive access,
we’ll also need to declare a successful read result if the write operation
failed.  Remember, if the write operation fails to receive &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BRESP=EXOKAY&lt;/code&gt; then
we need to write a new &lt;a href=&quot;https://en.wikipedia.org/wiki/Program_counter&quot;&gt;program
counter&lt;/a&gt;
value to the CPU and cause it to jump to the beginning of the LOCK operation
to repeat it–hence we need to set &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;o_valid&lt;/code&gt; in that case to indicate a valid
read return.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_valid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_RVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M_AXI_RRESP&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EXOKAY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_BVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M_AXI_BRESP&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OKAY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Finally, during an exclusive access sequence we’ll need to generate an error
return on any &lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;error&lt;/a&gt; we receive.  Likewise, if an
exclusive access read return is anything other than  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EXOKAY&lt;/code&gt; then we’ll
also return an &lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;error&lt;/a&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_BVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M_AXI_BRESP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
			 &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_RVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M_AXI_RRESP&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EXOKAY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Such errors will force the CPU to have an exception.  If the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; is in user mode, it will simply
set an bus error exception flag and switch to supervisor mode.  If the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; is in supervisor mode, however,
it will either 1) halt on an exception for the debugger, or
2) reboot–depending on how it was configured at build time.&lt;/p&gt;

&lt;p&gt;Note that if the write operation completes successfully with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BRESP=EXOKAY&lt;/code&gt;,
then &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;o_rdbusy&lt;/code&gt; will quietly be dropped without setting either &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;o_valid&lt;/code&gt; or
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;o_err&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;That leaves three final parts to the exclusive access implementation: the
return register, and two pieces of logic required for the return register’s
value.&lt;/p&gt;

&lt;p&gt;Normally, the memory controller keeps track of the return register on any
read, so the CPU can be told where to write the read result back to.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_stb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_wreg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_oreg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The need for this interface is driven by the &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/73c6fae1aac6cf941fb44b6612f2a66038917b22/rtl/core/axipipe.v&quot;&gt;pipelined memory
controller&lt;/a&gt;’s
implementation, where this value is kept in a FIFO.  In the case of &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/73c6fae1aac6cf941fb44b6612f2a66038917b22/rtl/core/axiops.v&quot;&gt;today’s
simplified controller&lt;/a&gt;,
we simply keep track of which CPU register to write the return into in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;o_wreg&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;When using exclusive access, we also want the CPU to execute a jump to the
original &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LOCK&lt;/code&gt; instruction on a failed write return.  Hence, on any exclusive
access write request, we set the return CPU register index to be the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Program_counter&quot;&gt;program counter&lt;/a&gt;’s register
index.  In the case of the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;,
&lt;a href=&quot;/zipcpu/2018/01/01/zipcpu-isa.html&quot;&gt;the bottom four bits of the program counter’s index is
15&lt;/a&gt; leading to the logic
listed below.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_stb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_wreg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_oreg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OPT_LOCK&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_stb&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_lock&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;o_wreg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;4'hf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The last exclusive access change is to keep track of the address to restart
from on a write failure.  For this, we’ll first introduce a new register:
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;r_pc&lt;/code&gt;.  On the first load, as the exclusive access sequence begins, we’ll
record the address of the initial &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LOCK&lt;/code&gt; instruction given to the memory
controller by the CPU.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OPT_LOCK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;r_pc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_stb&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_lock&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;r_pc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_restart_pc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The next step is to determine the return value to be returned to the CPU.
Nominally, this return value would simply be &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RDATA&lt;/code&gt;.  The logic below,
however, is just a touch more complex.&lt;/p&gt;

&lt;p&gt;First, we’ll zero the return value if &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OPT_LOWPOWER&lt;/code&gt; is set and there won’t
be any return.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OPT_LOWPOWER&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_RREADY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OPT_LOCK&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_BREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARESETN&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r_flushing&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_cpu_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;More interesting is what we do on a write return.  On any exclusive access
write return failure, where &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BRESP == OKAY&lt;/code&gt; rather then &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EXOKAY&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;o_result&lt;/code&gt;
is set to the &lt;a href=&quot;https://en.wikipedia.org/wiki/Program_counter&quot;&gt;program counter&lt;/a&gt;
value captured above in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;r_pc&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OPT_LOCK&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M_AXI_BVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OPT_LOWPOWER&lt;/span&gt;
					&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axlock&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M_AXI_BRESP&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OKAY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;o_result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;o_result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r_pc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The rest of the read return logic is only activated on an actual read return.
It’s the same logic that we &lt;a href=&quot;/zipcpu/2021/04/17/axilops.html&quot;&gt;originally
presented&lt;/a&gt;, so we’ll skip
the details here.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_RVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The big lesson to be learned here, regarding how to implement an
exclusive access sequence, is that the sequence is really a state machine.
Fig. 4 below shows the basic four-state machine controlling an exclusive
access request.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 4.  Basic exclusive access state machine&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/axiops/axilock.svg&quot; alt=&quot;&quot; width=&quot;480&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Once you realize that it’s just a basic state machine, verification gets
easy.  Indeed, my own verification properties simply tie assertions (and
assumptions) to the various states of this machine, as shown below.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 5.  Exclusive access state machine based properties&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/axiops/awlock-assertions.svg&quot; alt=&quot;&quot; width=&quot;480&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;That leads us to the next big change going from AXI-lite to AXI: the AxSIZE
field.&lt;/p&gt;

&lt;h2 id=&quot;updating-axsize&quot;&gt;Updating AxSIZE&lt;/h2&gt;

&lt;p&gt;On its surface, the AxSIZE field should be fairly simple.  If the CPU wants to
write a byte to or read a byte from memory, then the size should be &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;3'b000&lt;/code&gt;
(one byte).  If the transaction calls for two bytes of memory, then the size
should be &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;3'b001&lt;/code&gt; (16’bit word), and if the transaction calls for four bytes
of memory then the size should be &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;3'b010&lt;/code&gt; (32’bit word).  This only makes
sense.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 6. Bytes in an aligned access&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/axiops/szaligned.png&quot; alt=&quot;&quot; width=&quot;446&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Sadly, the formal tool found several problems with this “only makes sense”
design.&lt;/p&gt;

&lt;p&gt;The first problem was my own fault.  Once I got the design to work, I then
wanted to add “features”.  The feature that triggered this problem was the
unaligned feature, not shown in Fig. 6 above.  Handling an unaligned request
requires (potentially) turning a single request to write a 2-byte or 4-byte word
into multiple 32-bit transactions.&lt;/p&gt;

&lt;p&gt;Fig. 7 below shows three examples of how an unaligned 32-bit access can be
spread across two separate but successive AXI4 beats.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 7. Unaligned 32-bit word accesses require two beats&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/axiops/szunalignword.png&quot; alt=&quot;&quot; width=&quot;383&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;The second problem was my desire to make the design
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
width independent.  In the past, I’ve seen memory requests to/from a 64-bit
memory get wasted by only issuing 32-bit commands to the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
at a time.  If I just made the memory controller in such a way that the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
width could be parameterized,
then I might get some more efficiency from my memory controller.&lt;/p&gt;

&lt;p&gt;At this point, I might not have noticed any problems save that I had recently
built a &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axi2axilsub.v&quot;&gt;bus
downsizer&lt;/a&gt;–a
bridge to transition a &lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
from one width to a smaller width.  &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axi2axilsub.v&quot;&gt;This
bridge&lt;/a&gt;
breaks an AXI4 request into (potentially) multiple requests.  Knowing where
each request begins and how many requests to issue, however, depends upon
the AxSIZE parameter.&lt;/p&gt;

&lt;p&gt;Remembering how this
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axi2axilsub.v&quot;&gt;downsizer&lt;/a&gt;
worked forced me to look a bit deeper at how AxSIZE might be set.&lt;/p&gt;

&lt;p&gt;As an example, let’s suppose we have a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
width of 64-bits that needs to be reduced to 32-bits.  In this case, if AxSIZE
indicates that the transaction is 64 bits wide &lt;em&gt;and&lt;/em&gt; the AxADDR field
indicates that the first 32-bits of the transaction will be used, then the
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axi2axilsub.v&quot;&gt;downsizer&lt;/a&gt;
will transform the transaction into two 32-bit transactions–each requiring
one clock per request and one clock per return.&lt;/p&gt;

&lt;p&gt;Fig. 8 shows two examples of this.  In the first example, the bus word needs
to be broken into two 32-bit accesses.  In the second example, a single
32-bit access is sufficient.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 8. Transactions before and after downsizing&lt;/caption&gt;&lt;tr&gt;&lt;th&gt;Original transaction on a 64-bit Bus&lt;/th&gt;&lt;th&gt;Same transaction, after downsizing to 32-bits&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td colspan=&quot;2&quot;&gt;Word size transaction, starting at AxAddr[1:0] == 3, requires two beats on a 32-bit bus&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td align=&quot;center&quot;&gt;&lt;img src=&quot;/img/axiops/szword64.3.png&quot; alt=&quot;&quot; width=&quot;255&quot; /&gt;&lt;/td&gt;&lt;td align=&quot;center&quot;&gt;&lt;img src=&quot;/img/axiops/szword32.3.png&quot; alt=&quot;&quot; width=&quot;253&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td colspan=&quot;2&quot;&gt;Halfword transaction, starting at AxAddr[2:0] == 5, downsizes to a single beat on a 32-bit bus&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td align=&quot;center&quot;&gt;&lt;img src=&quot;/img/axiops/szword64.5.png&quot; alt=&quot;&quot; width=&quot;255&quot; /&gt;&lt;/td&gt;&lt;td align=&quot;center&quot;&gt;&lt;img src=&quot;/img/axiops/szword32.5.png&quot; alt=&quot;&quot; width=&quot;253&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;On the other hand, if AxSIZE either indicates that any transaction has only
32-bits or equivalently if the AxADDR indicates that only the upper 32-bits
will be impacted, then the
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axi2axilsub.v&quot;&gt;downsizer&lt;/a&gt;
will only transform the transaction into a single 32-bit transaction.
In other words, there is efficiency to be had by keeping the transaction
size specified in AxSIZE as small as possible.&lt;/p&gt;

&lt;p&gt;This problem is only compounded the larger the size difference is between the
two buses.  For example, if the first
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt; is
64-bits but the smaller
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt; is
only 8-bits, then the downsizer might have to break the request up into eight
smaller transactions–but, again, this all depends upon both AxSIZE and AxADDR.&lt;/p&gt;

&lt;p&gt;So, how did this work out?&lt;/p&gt;

&lt;p&gt;Well, I first built the logic below–much as I indicated above.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;c1&quot;&gt;// CPU_DATA_WIDTH for the ZipCPU is always 32-bits--independent&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// of the final bus size.  The final bus size must be at least&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// 32-bits, but may be arbitrarily larger.&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;localparam&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;DSZ&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;clog2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CPU_DATA_WIDTH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;axsize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DSZ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARESETN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;axsize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DSZ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_BREADY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_RREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;casez&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
		&lt;span class=&quot;mb&quot;&gt;2'b0?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axsize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;3'b010&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// Word&lt;/span&gt;
		&lt;span class=&quot;mb&quot;&gt;2'b10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axsize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;3'b001&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// Half-word&lt;/span&gt;
		&lt;span class=&quot;mb&quot;&gt;2'b11&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axsize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;3'b000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// Byte&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;endcase&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;M_AXI_AWSIZE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axsize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;M_AXI_ARSIZE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axsize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This worked great–up until I tried to enable misaligned transactions.  When
I did that, I came across the transaction shown below in Fig. 9.&lt;/p&gt;

&lt;!-- Show an illegal transaction: Halfword to address 1 --&gt;
&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 9. This transaction would be illegal if AxSIZE=3'b001 (16-bit)&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/axiops/szhalfill.png&quot; alt=&quot;&quot; width=&quot;253&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Was this transaction legal?&lt;/p&gt;

&lt;p&gt;On the one hand, its a two-byte transaction bound to two bytes, therefore it
looks legal.  On the other hand, if this were a burst transaction, &lt;a href=&quot;/blog/2019/04/27/axi-addr.html&quot;&gt;the second
beat would necessarily start at address
two&lt;/a&gt;–breaking the word in
two, so that two separate beats would be writing to the same word.&lt;/p&gt;

&lt;p&gt;That didn’t make sense.&lt;/p&gt;

&lt;p&gt;So, I did some digging.  I discovered a discrepancy between the AXI4 standard
I was using and the more recent AXI4 standards when it came to determining
the second address in a burst.  The second address of a burst is always the
next aligned address, given the alignment specified by AxSIZE.&lt;/p&gt;

&lt;p&gt;That was enough for me.  I now marked this transaction as an illegal
transaction, adjusted my formal properties to handle it, and then went back
to adjusting the CPU again to handle it.  Thankfully, I could quickly reverify
all of my AXI designs against this updated standard and nothing failed–save
the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;’s new AXI memory controllers.&lt;/p&gt;

&lt;p&gt;It was now time to come back and try to get the AxSIZE field right again–this
time with some more explicit formal properties.&lt;/p&gt;

&lt;p&gt;My second approach, therefore, was to simply expand the transaction size if I
ever noticed an unaligned transaction.  In this approach, I thought I might
just merge the two halfwords together, and split any unaligned word requests
into two beats.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;casez&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
		&lt;span class=&quot;mb&quot;&gt;2'b0?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;axsize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;3'b010&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// Word&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;axsize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;3'b010&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Split into two beats&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
		&lt;span class=&quot;mb&quot;&gt;2'b10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;axsize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;3'b001&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// Half-word&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;axsize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;3'b010&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Expand to 32-bit size&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
		&lt;span class=&quot;mb&quot;&gt;2'b11&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axsize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;3'b000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// Byte&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;endcase&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Here, I noticed three things.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Byte requests can never be misaligned.  Their size can always be &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;3'b000&lt;/code&gt;,
and they’ll never trigger a misaligned request requiring two beats.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Expanding the transaction to two 32’bit words works great, but only on a
32-bit bus.  On a 64-bit bus, we might still be able to keep the two
transactions in a single beat.&lt;/p&gt;

    &lt;p&gt;It’s worse than &lt;em&gt;might&lt;/em&gt;, however, since my read/write logic depends upon
transactions taking two beats being split over &lt;em&gt;two bus-sized words&lt;/em&gt;.&lt;/p&gt;

    &lt;p&gt;This means that, if the transaction could at all fit into a single
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt; word,
then it needed to be placed into a single
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt; word.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;There’s another problem as well: the halfword transaction might also need
to be split into two beats.  Just expanding it to two bytes isn’t sufficient
if the two bytes won’t fit in the bus word.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;My next approach was then to try merging requests into a single
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
word where possible.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;casez&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
		&lt;span class=&quot;mb&quot;&gt;2'b0?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;axsize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;3'b010&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// Word&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w_misaligned&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;axsize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;3'b011&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 64-bit width&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
		&lt;span class=&quot;mb&quot;&gt;2'b10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;axsize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;3'b001&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// Half-word&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;axsize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;3'b010&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 32-bit width&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In this approach, I use the flag &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;w_misaligned&lt;/code&gt;.  This flag is intended to
capture whether or not the request needs to be split into two beats.  Hence,
if the request doesn’t need to be split, then I simply keep the original
width.&lt;/p&gt;

&lt;p&gt;Unfortunately, this doesn’t work either.  What happens if a half-word
transaction needs to cross over two 32-bit fields on the 64-bit
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;?  Similarly, what would
happen if a word size transaction needed to cross two 64-bit fields on a 128-bit
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;?&lt;/p&gt;

&lt;!-- FIGURE!  Illegal transaction --&gt;
&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 10. This 16-bit transaction would be illegal if AxSIZE=2 (32-bit)&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/axiops/szhalfill.64.png&quot; alt=&quot;&quot; width=&quot;253&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Frankly, I never would’ve thought of this if I hadn’t adjusted my formal
properties earlier.  Unfortunately, this led to a very complex calculation of
AxSIZE based on the size of the transaction and how far off the transaction
would be, as shown in Fig. 11 below.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 11. Minimum AxSIZE values for a 64-bit bus&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/axiops/sztable.png&quot; alt=&quot;&quot; width=&quot;679&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;At this point, I gave up and just tried to simplify things as much as possible.
It’s not that the logic required to implement the table was too complex, but
rather it was becoming too complex to be generic across all
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt; sizes.
The one guaranteed solution to this problem was to simply bump the AxSIZE value
up from the minimum required size to that of a full
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt; word if the request was
ever misaligned &lt;em&gt;and&lt;/em&gt; was not going to be broken into two words.  If the
request was going to be broken into two words, it could still keep its original
size since each word would (of necessity) contain fewer bytes than the original
size would require.&lt;/p&gt;

&lt;p&gt;This led me to the following logic.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;localparam&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;AXILSB&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;clog2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C_AXI_DATA_WIDTH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;localparam&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;DSZ&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;clog2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

	&lt;span class=&quot;c1&quot;&gt;// M_AXI_AxSIZE&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;reg&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;axsize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;axsize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DSZ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARESETN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;axsize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DSZ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_BREADY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_RREADY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OPT_LOWPOWER&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_stb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Let me stop here, for a moment, because I just added a new requirement to
the logic we’ve been building: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;!OPT_LOWPOWER || i_stb&lt;/code&gt;.  As I mentioned
when discussing exclusive access above, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OPT_LOWPOWER&lt;/code&gt; parameter is
part of my ongoing effort to build logic that can work in both low power
environments and low logic environments.  In general, I force things to
zero on low power.  Here, I simply only allow the AxSIZE parameter to
change on a &lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt; request
(i.e. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;i_stb&lt;/code&gt;), or I simplify the logic if I don’t care about low power and
allow it to change any time for the savings of a LUT or two.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;casez&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
		&lt;span class=&quot;mb&quot;&gt;2'b0?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;axsize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;3'b010&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// Word&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w_misaligned&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;axsize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AXILSB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
		&lt;span class=&quot;mb&quot;&gt;2'b10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;axsize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;3'b001&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// Half-word&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w_misaligned&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;axsize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AXILSB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
		&lt;span class=&quot;mb&quot;&gt;2'b11&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axsize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;3'b000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// Byte&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;endcase&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;There is, however, one exception to the AxSIZE rule and that exception is if
the CPU is running &lt;a href=&quot;https://en.wikipedia.org/wiki/Endianness&quot;&gt;big-endian&lt;/a&gt;
software.  Remember, the AXI4
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt; is by nature
&lt;a href=&quot;https://en.wikipedia.org/wiki/Endianness&quot;&gt;little endian&lt;/a&gt;,
and the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
&lt;a href=&quot;/zipcpu/2018/01/31/cpu-build.html&quot;&gt;tool chain&lt;/a&gt; is &lt;a href=&quot;https://en.wikipedia.org/wiki/Endianness&quot;&gt;big
endian&lt;/a&gt;.  Adjusting the CPU to make
the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Endianness&quot;&gt;little endian&lt;/a&gt; is actually
quite easy to do–that’s not a problem at all.  Adjusting the
&lt;a href=&quot;/zipcpu/2018/01/31/cpu-build.html&quot;&gt;tool chain&lt;/a&gt;
(GAS, GCC, C-Lib)?  That takes more work.  As a result, I’m running the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; in a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Endianness&quot;&gt;big endian&lt;/a&gt; configuration on a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Endianness&quot;&gt;little endian&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;.
The result has been more than a hassle.&lt;/p&gt;

&lt;p&gt;This also means that, when writing to the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;, the address requested
doesn’t necessarily correspond with the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
address.  For example, writing a halfword
to address 0 (&lt;a href=&quot;https://en.wikipedia.org/wiki/Endianness&quot;&gt;big endian&lt;/a&gt;) means
that it writes to address 2
(&lt;a href=&quot;https://en.wikipedia.org/wiki/Endianness&quot;&gt;little endian&lt;/a&gt;).
Part of my solution has been to clip all address requests so that they are
aligned and just move the words/bytes into place as necessary.  That also
forces the size parameter to always reference the full size of the bus, as
shown below.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SWAP_WSTRB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// CPU is running big-endian&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;axsize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DSZ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;M_AXI_AWSIZE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axsize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;M_AXI_ARSIZE&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M_AXI_AWSIZE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;No, this &lt;a href=&quot;https://en.wikipedia.org/wiki/Endianness&quot;&gt;big vs little endian&lt;/a&gt;
“solution” does not follow the recommendations of
the AXI4 specification, but it 1) works, and 2) was easier to do than
adjusting every other slave my my design as the AXI specification
requires.&lt;/p&gt;

&lt;p&gt;The logic above is now my current solution to setting AxSIZE.  It’s not
elegant, but it works and it keeps with the low logic spirit of the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;two-unused-features-axlen-and-axid&quot;&gt;Two unused features: AxLEN and AxID&lt;/h2&gt;

&lt;p&gt;The two AXI features
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/73c6fae1aac6cf941fb44b6612f2a66038917b22/rtl/core/axiops.v&quot;&gt;this design&lt;/a&gt;
doesn’t use are the AxLEN and AxID fields.
Let me explain why, starting with the AxID field.&lt;/p&gt;

&lt;p&gt;AxID is perhaps best known for its out of order feature.  If two packets
are requested, whether they be reads or writes, if their AxID’s are different
then their returns may come back out of order.  If their AxID’s are the
same, however, they requests must come back in the order they were issued.
This feature helps to create multiple virtual channels through the AXI
interconnect.  It can also be a real challenge when it comes to formally
verifying a design–but that’s another story.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 12. Most slaves can just mirror the given AxIDs onto their returns&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/axiops/id-reflection.svg&quot; alt=&quot;&quot; width=&quot;280&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Handling AxIDs is fairly easy within a slave: the slave just needs to return
the requests given to it with the AxIDs provided.  This is called mirroring,
and its fairly easy to do: incoming requests just go into a FIFO having the
depth of the slave’s pipeline.  Upon return, the request is simply returned
with the ARID provided with the request.  It’s that simple.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left; padding: 15px&quot;&gt;&lt;caption&gt;Fig 13. What happens when a bus element misbehaves?&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/axiops/dropped-pkts.svg&quot; alt=&quot;&quot; width=&quot;320&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Where AxIDs become difficult to handle is within the interconnect.  The
interconnect must guarantee that any two packets with the same AxID are
always returned in order.  This creates some derived requirements within the
interconnect: The first is that the interconnect cannot switch arbitration
from a given master, ID, slave combination to another slave until all of the
returns have been received for the first master, ID, and slave combination.
This forces the interconnect to contain a counter for every master, ID pair
to count the number of requests made minus responses received.  Only when the
counter indicates there are no outstanding requests for a given master, ID
pair, is the interconnect allowed to reallocate that channel to a new slave.
A second derived requirement is that the interconnect must stall the
upstream master before its counter ever overruns.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 14. Transactions from multiple sources within the same master can easily be separated by ID&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/axiops/multi-master.svg&quot; alt=&quot;&quot; width=&quot;320&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;These aren’t problems within the source–that is within the original AXI4
master.  In any given source, such as within a CPU, there’s a bit of a
different purpose for AxIDs.  Inside the source, each different master can be
assigned a different and unique ID.  For example, the instruction fetch can
be given one ID and the memory controller another, as illustrated in Fig. 14 on
the right.  In a scatter gather DMA, the &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/ec864d4e445b0566695791e2550bd54591601cf0/rtl/axisgdma.v#L128&quot;&gt;table reader could be given one
ID&lt;/a&gt; and &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/ec864d4e445b0566695791e2550bd54591601cf0/rtl/axisgdma.v#L126-L127&quot;&gt;the underlying DMA another&lt;/a&gt;.
In both cases, the master/source is simplified by only issuing requests to
and receiving responses from a single ID.  This is also what we’ll do here:
we’ll assign a fixed ID to the &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/73c6fae1aac6cf941fb44b6612f2a66038917b22/rtl/core/axiops.v&quot;&gt;memory controller&lt;/a&gt;.
This will also simplify our logic.  By using a single ID,
1) we can verify the AXI interface against a single ID channel.  Further, we
can also 2) ignore the RID and BID returns knowing that we’ll never get a
return for an ID we haven’t requested.&lt;/p&gt;

&lt;p&gt;That handles the AxID field: it’s just a constant.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;parameter&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;AXI_ID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;M_AXI_AWID&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AXI_ID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;M_AXI_ARID&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AXI_ID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;But what about AxLEN?&lt;/p&gt;

&lt;p&gt;Just for background, the AxLEN field is used to indicate that the AXI4 &lt;a href=&quot;/blog/2020/06/16/axiaddr-limits.html&quot;&gt;bus
master wants to issue a burst request of (AxLEN+1)
beats&lt;/a&gt;.  Both the
interconnect and the &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/b3145001959c36a206a884243770be5c8c17e5da/rtl/demofull.v&quot;&gt;ultimate
slave&lt;/a&gt;
can then use this value to optimize the transaction–knowing that more beats
are coming from a given request.&lt;/p&gt;

&lt;p&gt;This is another feature we won’t use.  This is also a feature that confuses a
lot of CPU users, leading to a common question: Why isn’t the CPU
(&lt;a href=&quot;https://en.wikipedia.org/wiki/MicroBlaze&quot;&gt;Microblaze&lt;/a&gt;, ARM, etc.) issuing
burst requests of the FPGA?&lt;/p&gt;

&lt;p&gt;For this, let me offer several observations.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The CPU never knows how many accesses will be made of the
  &lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;What of the case of a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;memcpy()&lt;/code&gt; library call, however, where the CPU knows
  that a lot of data needs to be moved?  Can’t a burst instruction be used
  there?&lt;/p&gt;

&lt;p&gt;The answer here, again, is no.  Remember, a CPU will only ever execute
  one instruction at a time.  Even dual issue CPUs are designed to maintain
  the appearance of only ever issuing one instruction at a time.  To
  illustrate how this affects things, consider the following
  (super-simplified) memory move routine in
  &lt;a href=&quot;/zipcpu/2018/01/01/zipcpu-isa.html&quot;&gt;ZipCPU assembly&lt;/a&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-asm&quot; data-lang=&quot;asm&quot;&gt;_simple_memcpy:	// R1=DST, R2=SRC, R3=LEN
	CMP	0,R3	// Return immediately on a zero length copy
	RTN.Z
_move_loop:
	LW	(R2),R4	// Read from the source
	SW	R4,(R1)	// Write the value to the destination
	ADD	4,R2	// Update the source pointer
	ADD	4,R1	// Update destination pointer
	SUB	1,R3	// Update the remaining length
	BNZ	_move_loop	// Repeat if more remains to copy
	RTN 		// All done, return&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now, looking through this, remember that the &lt;em&gt;hardware&lt;/em&gt; only ever sees
one instruction of this sequence at any given time.  Nowhere in this
instruction sequence is there an instruction to indicate a &lt;em&gt;burst&lt;/em&gt; transaction
of more than one beat.  Worse, never in the CPU pipeline will it see two
loads or two stores in a row.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left; padding: 25px&quot;&gt;&lt;caption&gt;Fig 15. Might a multiple-move-register instruction use AxLEN?&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/axiops/movem.svg&quot; alt=&quot;&quot; width=&quot;320&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Keep in mind, this is a very &lt;em&gt;simplified&lt;/em&gt; memory copy example.  A real memory
copy can be much more complex.  For example, in this simplified example we’ve
assumed that the two pointers are aligned on a word boundary (32bits for the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;), and that the length is
specified in a number of words.  Similarly, there are some optimizations that
could be made to this function.  For example, if we could verify that the
number of words to be copied would be greater than one each time through the
loop, then we might manage to pipeline the memory copy to issue more than one
load (or store) at a time–but that’s still not a burst operation for the same
reason: nowhere in this set of instructions does the CPU &lt;em&gt;hardware&lt;/em&gt; get told
how much memory the software wishes to copy.&lt;/p&gt;

&lt;p&gt;In other words, the nature of a CPU simply leaves us out of luck here.&lt;/p&gt;

&lt;ol start=&quot;2&quot;&gt;
  &lt;li&gt;
    &lt;p&gt;A data cache is only subtly different.  In the case of a data cache,
  and even then only when &lt;em&gt;reading&lt;/em&gt; from memory, you can read more data than
  you need.  Indeed, you can read an entire cache line at a time.  This allows
  you to use burst reads nicely to your advantage.  The problem here, however,
  is that you can only issue burst read requests of &lt;em&gt;memory&lt;/em&gt;.  If you make a
  mistake and issue a burst read of a &lt;a href=&quot;https://en.wikipedia.org/wiki/Memory-mapped_I/O&quot;&gt;memory mapped
  peripheral&lt;/a&gt;, such as the
  serial port’s data FIFO, then you might invoke a &lt;a href=&quot;https://en.wikipedia.org/wiki/Side_effect_(computer_science)&quot;&gt;side
  effect&lt;/a&gt; you
  aren’t intending–such as accidentally clearing the unread data from the
  serial port when just trying to read how much data is available in that FIFO.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;There is one potential place in &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/73c6fae1aac6cf941fb44b6612f2a66038917b22/rtl/core/axiops.v&quot;&gt;this design&lt;/a&gt;
  where we might use an AXI burst, and that’s when reading (or writing) to an
  unaligned address.  As an example, suppose we wished to write 4 bytes to
  address 1.  Such a request would either need to cause a
  &lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
  &lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;error&lt;/a&gt;,
  due to the unaligned request, or else 2) it would need to be broken into two
  requests.  If the request was broken into two adjacent requests as illustrated
  in Fig. 7 above, then it might make sense to use AxLEN=1.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The problem with this choice is that AXI has a requirement that burst
  requests may not cross 4kB boundaries.  That means that, in order to turn an
  unaligned request into a two beat burst, the CPU would need extra logic to
  use singleton requests anytime the 4kB boundary were being crossed but burst
  requests at other times.&lt;/p&gt;

&lt;p&gt;If it costs all that work, why not just issue a pair of singleton requests
  in the first place?  I mean, you need to build that logic into the memory
  controller anyway to handle the 4kB boundary crossing!&lt;/p&gt;

&lt;p&gt;Now, let’s add to this discussion my own background with a stripped down
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone&lt;/a&gt;.
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone&lt;/a&gt;, as I use it,
has no capability for burst requests like AXI.  This has not slowed down either
my &lt;a href=&quot;/blog/2019/07/17/crossbar.html&quot;&gt;interconnect implementations&lt;/a&gt;
or &lt;a href=&quot;/zipcpu/2017/05/29/simple-wishbone.html&quot;&gt;my slave implementations&lt;/a&gt;.
If necessary, &lt;a href=&quot;/blog/2019/03/27/qflexpress.html&quot;&gt;a slave can just take a peek at the next request
address&lt;/a&gt;
to derive any details of a burst as it arrives.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left; padding: 15px&quot;&gt;&lt;caption&gt;Fig 15. Would a flash controller benefit from burst transactions?&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/axiops/flash-burst.svg&quot; alt=&quot;&quot; width=&quot;420&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;As a result, &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/73c6fae1aac6cf941fb44b6612f2a66038917b22/rtl/core/axiops.v&quot;&gt;this non-cached memory
controller&lt;/a&gt;
leaves &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AxLEN==0&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;My &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/73c6fae1aac6cf941fb44b6612f2a66038917b22/rtl/core/axidcache.v&quot;&gt;AXI4 data cache implementation&lt;/a&gt;?
That’s the one example I have where &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/bc9051269ecaadee271469968bb9bb550e8b3e25/rtl/core/axidcache.v#L553-L608&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ARLEN&lt;/code&gt; may be set to something greater
than zero&lt;/a&gt;.
In that case, however, 1) the &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/73c6fae1aac6cf941fb44b6612f2a66038917b22/rtl/core/axidcache.v&quot;&gt;cache
implementation&lt;/a&gt;
offers no support for unaligned requests, and 2) &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/73c6fae1aac6cf941fb44b6612f2a66038917b22/rtl/core/axidcache.v&quot;&gt;the data
cache&lt;/a&gt;
needs to &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/bc9051269ecaadee271469968bb9bb550e8b3e25/rtl/core/axidcache.v#L323-L333&quot;&gt;separate &lt;em&gt;memory&lt;/em&gt; requests from &lt;em&gt;peripheral&lt;/em&gt;
requests&lt;/a&gt;.
&lt;em&gt;Memory&lt;/em&gt; requests can be cached, and they get burst read support.  Yes, that’s
right, &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/73c6fae1aac6cf941fb44b6612f2a66038917b22/rtl/core/axidcache.v&quot;&gt;the cache&lt;/a&gt;
only provides burst &lt;em&gt;read&lt;/em&gt; support, there’s no burst write support–since
the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;’s &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/73c6fae1aac6cf941fb44b6612f2a66038917b22/rtl/core/axidcache.v&quot;&gt;AXI4 data
cache&lt;/a&gt;
is a write-through cache.  Writes go directly to the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
as outlined above.  &lt;em&gt;Peripheral&lt;/em&gt; requests also fundamentally use the
same logic we’ve just outlined above as well.&lt;/p&gt;

&lt;h2 id=&quot;remaining-signals&quot;&gt;Remaining signals&lt;/h2&gt;

&lt;p&gt;These leaves only a small number of remaining signals: AxBURST, WLAST, AxQOS,
and AxCACHE.&lt;/p&gt;

&lt;p&gt;I’ve set &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;M_AXI_AWBURST&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2'b01&lt;/code&gt;, also known as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;INCR&lt;/code&gt;(ement).
It could’ve just as easily been set to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2'b00&lt;/code&gt; for a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FIXED&lt;/code&gt; address burst
since we’re only issuing singleton requests.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;localparam&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AXI_INCR&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;2'b01&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;M_AXI_AWBURST&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AXI_INCR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;M_AXI_ARBURST&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AXI_INCR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Similarly, since we’re not using bursts, I can also set &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WLAST&lt;/code&gt; to one.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;M_AXI_WLAST&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;What about AxQOS?  Frankly, this seems to me like a feature of an &lt;a href=&quot;https://www.reddit.com/r/FPGA/comments/egkrce/is_axi_too_complicated/&quot;&gt;over
designed, overly complex bus&lt;/a&gt;
structure.  I have only a small number of designs that have even implemented
QOS.  It’s a challenge to implement, so I’ve really only used it in arbiters
to help arbitration.  Even at that, the four bit comparison in addition to
the arbitration can be a hassle to accomplish, so most of my designs ignore it.&lt;/p&gt;

&lt;p&gt;In this case, I simply set it to a fixed constant, zero, but one that
can be adjusted when the design is built if necessary.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;parameter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;OPT_QOS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;M_AXI_AWQOS&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OPT_QOS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;M_AXI_ARQOS&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OPT_QOS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I also do the same thing with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AxPROT&lt;/code&gt;.  The difference here is that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AxPROT[0]&lt;/code&gt;
must be zero to indicate that this is a data access.  As for the other bits,
secure/non-secure or privileged vs non-privileged, I have yet to find a good
description/reference for what those refer to.  For the time being, therefore,
I’m leaving these bits at zero.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;localparam&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;AXI_UNPRIVILEGED_NONSECURE_DATA_ACCESS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;3'h0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;localparam&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;OPT_PROT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AXI_UNPRIVILEGED_NONSECURE_DATA_ACCESS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;M_AXI_AWQOS&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OPT_PROT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;M_AXI_ARQOS&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OPT_PROT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;That leaves &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AxCACHE&lt;/code&gt;.  Here again is a signal for which … I’m not sure what
the right answer is.  The &lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI4
specification&lt;/a&gt; just leaves me confused.
What I do know is that Xilinx recommends an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AxCACHE&lt;/code&gt; value of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;4'h3&lt;/code&gt;
(normal, non-cacheable, bufferable).  On the other hand, I want to make sure
any lock requests make it all the way to the device.  Therefore, I set
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AxCACHE&lt;/code&gt; to zero for lock requests–forcing any exclusive access request
to go through any intermediate caching all the way to the device.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;localparam&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;AXI_NON_CACHABLE_BUFFERABLE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;4'h3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;localparam&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;AXI_DEVICE_NON_BUFFERABLE&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;4'h0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;M_AXI_AWCACHE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M_AXI_AWLOCK&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AXI_DEVICE_NON_BUFFERABLE&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AXI_NON_CACHABLE_BUFFERABLE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;M_AXI_ARCACHE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M_AXI_ARLOCK&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AXI_DEVICE_NON_BUFFERABLE&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AXI_NON_CACHABLE_BUFFERABLE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You may notice that a lot of these signals just maintain constant values.
That’s a lot of what I’ve seen when working with AXI4: &lt;a href=&quot;https://www.reddit.com/r/FPGA/comments/egkrce/is_axi_too_complicated/&quot;&gt;there are a lot of
signals that just … don’t need to be
there&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;These are therefore the basic modifications necessary to convert an &lt;a href=&quot;/zipcpu/2021/04/17/axilops.html&quot;&gt;AXI4-lite
CPU memory controller&lt;/a&gt;
into a &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/73c6fae1aac6cf941fb44b6612f2a66038917b22/rtl/core/axiops.v&quot;&gt;full AXI4 memory controller&lt;/a&gt;.
Perhaps the most important new feature is the support for
&lt;a href=&quot;https://en.wikipedia.org/wiki/Linearizability&quot;&gt;atomic&lt;/a&gt;
accesses via AXI’s exclusive access capability.  Filling in the details of
the size, explaining why we’re not using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AxLEN &amp;gt; 0&lt;/code&gt;, and the rest of the
(mostly unused) ports filled out the rest of our discussion.&lt;/p&gt;

&lt;p&gt;This is not to say that all AXI4 memory controllers need to look like
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/73c6fae1aac6cf941fb44b6612f2a66038917b22/rtl/core/axiops.v&quot;&gt;this one&lt;/a&gt;.
Indeed, some of our choices only make sense in a minimum logic implementation,
such as &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/73c6fae1aac6cf941fb44b6612f2a66038917b22/rtl/core/axiops.v&quot;&gt;this
one&lt;/a&gt;
is intended to be.  These include the choice to only issue one request at a
time, as well as the choice not to cache any results.  Lord willing and with
enough interest, we’ll can come back at a later time and discuss improving
upon &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/73c6fae1aac6cf941fb44b6612f2a66038917b22/rtl/core/axiops.v&quot;&gt;this memory controller&lt;/a&gt;
in one of these two fashions.&lt;/p&gt;

&lt;p&gt;The problem, however, is that without exclusive access support in the slave
it doesn’t matter whether or not the master (i.e. the CPU) supports it or not.
Xilinx’s Memory Interface Generator (MIG) DDR3 SDRAM controller doesn’t support
AXI exclusive access requests, nor does their block RAM controller.
That means, for now, that if you want exclusive access support you’ll need a
non-Xilinx memory controller.&lt;/p&gt;

&lt;p&gt;To handle this need, I’ve converted my &lt;a href=&quot;/blog/2019/05/29/demoaxi.html&quot;&gt;demonstration AXI4
slave&lt;/a&gt; to offer this support.
You can see &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/b3145001959c36a206a884243770be5c8c17e5da/rtl/demofull.v#L836-L965&quot;&gt;the changes required here&lt;/a&gt;.
I’ve also got an SRAM controller with exclusive access support, based upon the
same &lt;a href=&quot;/blog/2019/05/29/demoaxi.html&quot;&gt;demo AXI slave&lt;/a&gt;, that I
anticipate posting as well in the near future.&lt;/p&gt;

&lt;p&gt;For now, the changes required to make exclusive access work in a slave will
have to remain the topic of another article.&lt;/p&gt;

&lt;hr /&gt;&lt;p&gt;&lt;em&gt;And if a man also strive for masteries, yet is he not crowned, except he strive lawfully.  (2Tim 2:5)&lt;/em&gt;</description>
        <pubDate>Thu, 30 Sep 2021 00:00:00 -0400</pubDate>
        <link>https://zipcpu.com/zipcpu/2021/09/30/axiops.html</link>
        <guid isPermaLink="true">https://zipcpu.com/zipcpu/2021/09/30/axiops.html</guid>
        
        
        <category>zipcpu</category>
        
      </item>
    
      <item>
        <title>Quiz #18: Failures in clocked immediate assertions</title>
        <description>&lt;p&gt;This Quiz follows from the same example as
&lt;a href=&quot;/quiz/2021/08/05/quiz17.html&quot;&gt;Quiz #17&lt;/a&gt;
before it.  The big thing you need to remember is that the contents of the
trace are irrelevant.  What is relevant to the question are the various
sections of the trace: A, B, and C, and that the trace was created via a
&lt;em&gt;formal&lt;/em&gt; verification tool.&lt;/p&gt;

&lt;p&gt;Section “C” is the last formal time step in the trace, section “B” is the
singular timestep before that, and section “A” is everything else.&lt;/p&gt;
</description>
        <pubDate>Sat, 11 Sep 2021 00:00:00 -0400</pubDate>
        <link>https://zipcpu.com/quiz/2021/09/11/quiz18.html</link>
        <guid isPermaLink="true">https://zipcpu.com/quiz/2021/09/11/quiz18.html</guid>
        
        
        <category>quiz</category>
        
      </item>
    
      <item>
        <title>AXI Handshaking Rules</title>
        <description>&lt;p&gt;I’m going to try to keep this article short, while still answering the question:
what is the bare minimum you need to know when using an AXI handshake?&lt;/p&gt;

&lt;p&gt;We’ll start with the basics, there are masters and slaves.  “Slave” ports are
those that receive data, whereas “master” ports transmit or send data to
slaves.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 1. AXI stream data flow direction: masters feed slaves&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/slave-rules/mvslave.svg&quot; alt=&quot;&quot; width=&quot;420&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;I’ve tended to follow the convention found in Xilinx’s examples of prefixing
my master ports with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;M_*_&lt;/code&gt; and my slave ports with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;S_*_&lt;/code&gt;.  I’ll then
often fill in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;*&lt;/code&gt; part of the middle with some name reminding me which
interface is being described.  For example, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;S_VID_TVALID&lt;/code&gt; would be the
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TVALID&lt;/code&gt; signal found on the slave video interface.  The result is a signal
list, for AXI stream, looking something like that in Fig. 2 below.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 2. AXI stream signals&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/slave-rules/axis-signals.png&quot; alt=&quot;&quot; width=&quot;605&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;In most cases, only the clock, reset, valid, ready, and data signals are
required of an interface.  In packet interfaces, or &lt;a href=&quot;/blog/2021/03/20/xilinx-forums.html&quot;&gt;whenever using Xilinx’s
stream DMAs&lt;/a&gt;, the
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TLAST&lt;/code&gt; signal is also required.  Video interfaces also use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TUSER&lt;/code&gt;
signal to indicate a start of frame.&lt;/p&gt;

&lt;p&gt;The rest of the signals are optional, and I’ve rarely found a use for them.&lt;/p&gt;

&lt;p&gt;Today, however, I want to focus on the handshake signals.  Therefore we’ll
group these signals into three categories: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TVALID&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TREADY&lt;/code&gt;, and we’ll
lump everything else into the signal &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TDATA&lt;/code&gt;.  This is simply because the
handshaking signals create rules on all of the payload signals equally.&lt;/p&gt;

&lt;p&gt;Further, while I will be discussing AXI stream handshakes today, all of our
rules will also apply to AXI and AXI-lite handshakes as well.  Indeed, some
of the examples and illustrations I will be using further on come from
non-stream designs.&lt;/p&gt;

&lt;h2 id=&quot;the-rules&quot;&gt;The rules&lt;/h2&gt;

&lt;p&gt;So let’s start the basic handshaking rules.  Indeed, I like to think of these
as the bare minimum number you need to know in order to build an AXI handshake.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;xVALID&lt;/code&gt; must be cleared following any reset.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Nothing happens unless &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;xVALID &amp;amp;&amp;amp; xREADY&lt;/code&gt;.&lt;/p&gt;

    &lt;p&gt;Just as a point of notation here, I’m following the AXI4 specifications
convention of using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;xVALID&lt;/code&gt; to refer to an AXI stream channel of some
type.  In this case, I might have said &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;M_AXIS_TVALID &amp;amp;&amp;amp; M_AXIS_TREADY&lt;/code&gt;
or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;S_AXIS_TVALID &amp;amp;&amp;amp; S_AXIS_TREADY&lt;/code&gt;, but I’ve just shortened things with
the abbreviation above to try to simplify things.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Something &lt;em&gt;always&lt;/em&gt; happens anytime &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;xVALID &amp;amp;&amp;amp; xREADY&lt;/code&gt; – &lt;em&gt;&lt;a href=&quot;/formal/2019/04/16/axi-mistakes.html&quot;&gt;Be careful
not to add any other conditions to this
check&lt;/a&gt;
lest you miss a handshake!&lt;/em&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Nothing can change unless &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;!xVALID || xREADY&lt;/code&gt;.&lt;/p&gt;

    &lt;p&gt;This is more of a master rule than one for a slave, but still quite
important.  We’ll come back to this more in a moment.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;xREADY&lt;/code&gt; signal must be registered.  Use a
&lt;a href=&quot;/blog/2019/05/22/skidbuffer.html&quot;&gt;skidbuffer&lt;/a&gt;
if necessary to avoid any throughput impacts.&lt;/p&gt;

    &lt;p&gt;Okay, this isn’t quite what’s required by the specification.  Rather, this
is a consequence of what the specification does require.  The specification
simply requires that, “On master and slave interfaces, there must be no
combinatorial paths between input and output signals.”&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 3. Combinatorial paths are not allowed between AXI inputs and outputs&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/tweets/axi-spec-registered.png&quot; alt=&quot;&quot; width=&quot;614&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;ol start=&quot;6&quot;&gt;
  &lt;li&gt;
    &lt;p&gt;(Recommendation only:) &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;READY&lt;/code&gt; should be held high when the design is
idle, and only lowered (if required) following &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VALID &amp;amp;&amp;amp; READY&lt;/code&gt;.&lt;/p&gt;

    &lt;p&gt;This works great for AXI streams.  It even works well for the AXI read
address channel.  It’s just a bit harder to do with the write address and
write data channels if you don’t have a
&lt;a href=&quot;/blog/2019/05/22/skidbuffer.html&quot;&gt;skidbuffer&lt;/a&gt;
available to you.  We’ll discuss this problem more in a moment.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;example-slave-logic&quot;&gt;Example Slave logic&lt;/h2&gt;

&lt;p&gt;If all you do is follow those basic rules, you’ll pretty much be forced
into some basic logic forms.  Let’s look at the form of a slave logic
handler, and then we’ll look at the master logic next.&lt;/p&gt;

&lt;p&gt;Within a slave, therefore, you are likely to have logic blocks that look like
the following:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// Logic to determine S_AXIS_TREADY&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXIS_TVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXIS_TREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// plus nothing!&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// Do something&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Some time ago, I &lt;a href=&quot;/formal/2019/04/16/axi-mistakes.html&quot;&gt;wrote about the problem associated with adding conditions
to the handshake check&lt;/a&gt;.
Since that time, the worst problem I’ve seen with this handshake has been with
AXI memory mapped slaves that can only handle a read or a write request at a
given time, but never both.  So let’s discuss how to handle that situation
quickly.&lt;/p&gt;

&lt;p&gt;For example, &lt;a href=&quot;https://github.com/jofrfu/tinyTPU/blob/b8df109e7bf1c358e89dee7fbf9cc0d65786b6fb/src/vhdl/AXI/tinyTPU_v1_0_S00_AXI.vhd#L353-L366&quot;&gt;this VHDL design is quite broken&lt;/a&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-vhdl&quot; data-lang=&quot;vhdl&quot;&gt;	&lt;span class=&quot;n&quot;&gt;FSM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;STATE_cs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- not listing all items here&lt;/span&gt;
	  &lt;span class=&quot;k&quot;&gt;variable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AW_VALID_ARVALID&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;std_logic_vector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;downto&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;AWVALID_ARVVALID&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_AWVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ARVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;STATE_cs&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;is&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IDLE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;-- Skipping irrelevant lines ...&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;S_AXI_AWREADY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'1'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;S_AXI_ARREADY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'1'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;-- ...&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AWVALID_ARVALID&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;is&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&quot;10&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;
				&lt;span class=&quot;c1&quot;&gt;-- ...&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;STATE_ns&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WRITE_ADDRESS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&quot;01&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;
				&lt;span class=&quot;c1&quot;&gt;-- ...&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;STATE_ns&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WRITE_ADDRESS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;others&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;
				&lt;span class=&quot;c1&quot;&gt;-- ...&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;STATE_NS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IDLE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;-- ...&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;process&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FSM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;c1&quot;&gt;-- ...&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;SEQ_LOG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;process&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;is&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;'event&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'1'&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ARESETN&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'0'&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;STATE_cs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IDLE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
				&lt;span class=&quot;c1&quot;&gt;-- ...&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
				&lt;span class=&quot;c1&quot;&gt;-- ...&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;STATE_cs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;STATE_ns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Notice, here, how the designer allowed both &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AWVALID &amp;amp;&amp;amp; AWREADY&lt;/code&gt; and
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ARVALID &amp;amp;&amp;amp; ARREADY&lt;/code&gt; to be true at the same time.  If ever the two were
both true at the same time, both of the bursts would be lost.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 4. If a read and write burst are both received on the same cycle, both will be dropped&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/slave-rules/tinytpu.png&quot; alt=&quot;&quot; width=&quot;447&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;My favorite approach to dealing with this situation is to use two combinatorial
wires to control reading from the AW and AR
&lt;a href=&quot;/blog/2019/05/22/skidbuffer.html&quot;&gt;skidbuffers&lt;/a&gt;
respectively.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;c1&quot;&gt;// Accept writes, but only if there are no pending reads&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;axil_write_ready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;skid_awvalid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;skid_wvalid&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_BVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_BREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axil_read_ready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;axil_read_ready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;skid_arvalid&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_RVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_RREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This approach fits nicely into the framework we’ve already established in the
&lt;a href=&quot;/blog/2020/03/08/easyaxil.html&quot;&gt;Easy AXI-lite template&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This isn’t the only valid approach.  Many Xilinx IP’s handle this situation by
quietly buffering the request that wasn’t accepted so that it can be handled
later.  They then come back to this buffered request once they finish
handling the one they’ve chosen to handle and before raising &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;xREADY&lt;/code&gt; again.&lt;/p&gt;

&lt;p&gt;That’s how they handle it when it works.&lt;/p&gt;

&lt;p&gt;Then there’s their AXI QUAD SPI IP design.  This design tries to do something
very similar, only … they weren’t consistent in how they built their logic.
Hence, in this example, some of their logic prioritizes writes over reads.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-vhdl&quot; data-lang=&quot;vhdl&quot;&gt;	&lt;span class=&quot;n&quot;&gt;rnw_cmb&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI4_ARVALID&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI4_AWVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;-- ...&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;axi_length_cmb&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI4_ARLEN&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rnw_cmb&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'1'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;S_AXI4_AWLEN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;But when you get to their actual state machine, they choose to process reads
before writes.  First, though, here’s the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wr_transaction&lt;/code&gt; signal that you’ll
see referenced by the state machine below.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-vhdl&quot; data-lang=&quot;vhdl&quot;&gt;&lt;span class=&quot;n&quot;&gt;wr_transaction&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI4_AWVALID&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI4_WVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now that you know what `wr_transaction is, you can look inside their
state machine to see how reads get prioritized over writes:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-vhdl&quot; data-lang=&quot;vhdl&quot;&gt;	&lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IDLE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI4_ARVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'1'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;-- ...&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;elsif&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wr_transaction&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'1'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;-- ...&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;-- ...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The result is that, if the IP ever gets both a read request and a write
request at the same time, it will process and return the read request
with the AXI burst parameters of the write request–such as the burst’s
length, for example.&lt;/p&gt;

&lt;p&gt;The point here is simple: If &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AWVALID &amp;amp;&amp;amp; AWREADY&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ARVALID &amp;amp;&amp;amp; ARREADY&lt;/code&gt;
then a transaction has been accepted.  If both are true, then you need to make
sure you are processing both transactions properly, or at least buffering one
for later processing.&lt;/p&gt;

&lt;h2 id=&quot;example-master-logic&quot;&gt;Example Master logic&lt;/h2&gt;

&lt;p&gt;From the perspective of a master, the logic forms are just a touch different.
In this case, I’m more set in my ways.  Indeed, I’ve gotten to the point
where I always use the following logic form for any AXI master handshake.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;c1&quot;&gt;// OPT_LOWPOWER is a parameter telling me when to force unused signals&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// to a known value, to reduce any unnecessary signal toggling within&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// an FPGA.&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;parameter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OPT_LOWPOWER&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1'b0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ARESETN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;M_AXIS_TVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXIS_TVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M_AXIS_TREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;M_AXIS_TVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;next_valid_signal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OPT_LOWPOWER&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ARESETN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;M_AXIS_TDATA&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXIS_TVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M_AXIS_TREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;M_AXIS_TDATA&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;next_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OPT_LOWPOWER&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;M_AXIS_TDATA&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Of course, this assumes the existence of the (possibly combinatorial) signals
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;next_valid_signal&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;next_data&lt;/code&gt;.  No, that doesn’t mean I’m a die hard
believer in two process state machines–but that’s another story for another
day.&lt;/p&gt;

&lt;p&gt;I will say that most of the AXI handshaking bugs I come across in masters
come from not following this form.&lt;/p&gt;

&lt;p&gt;For example, you can find the following logic in Xilinx’s AXI stream master
template design:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;axis_tlast&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read_pointer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NUMBER_OF_ITEMS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ARESETN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;axis_tlast_delay&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1'b0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;axis_tlast_delay&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axis_tlast&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;M_AXIS_TLAST&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axis_tlast_delay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;See the bug?  If not, check out Fig. 5 below.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 5. Xilinx's broken AXI stream master: TLAST changes when it should be stalled&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/xilinx-vivado/broken-tlast-trace-annotated.png&quot; alt=&quot;&quot; width=&quot;834&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;If &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;M_AXIS_TVALID &amp;amp;&amp;amp; !M_AXIS_TREADY&lt;/code&gt; on the penultimate beat of the burst,
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;M_AXIS_TLAST&lt;/code&gt; will get set while the channel is supposed to be stalled  &lt;em&gt;in
violation of the protocol&lt;/em&gt;.  You might find yourself surprised later when the
data packet arrives with the wrong number of items in it.&lt;/p&gt;

&lt;p&gt;These sorts of problems aren’t limited to AXI stream designs, nor are they
limited to Xilinx’s templates.  For example, here’s the same sort of bug
in their AXI Ethernet-lite IP.  Again, this bug is due to the fact that
they didn’t follow the form above.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-vhdl&quot; data-lang=&quot;vhdl&quot;&gt;  &lt;span class=&quot;n&quot;&gt;AXI4_RDATA_GEN&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C_S_AXI_PROTOCOL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&quot;AXI4&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;generate&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;AXI_READ_OUTPUT_P&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;process&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;is&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;'event&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'1'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
              &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARESETN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RST_ACTIVE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
                  &lt;span class=&quot;n&quot;&gt;S_AXI_RDATA&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;others&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;'0'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
              &lt;span class=&quot;k&quot;&gt;elsif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_RREADY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'1'&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
                  &lt;span class=&quot;n&quot;&gt;S_AXI_RDATA&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IP2Bus_Data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
              &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;process&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AXI_READ_OUTPUT_P&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In this case, if &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;S_AXI_RVALID&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;S_AXI_RREADY&lt;/code&gt; are both low, the requested
data will not be placed on the bus.  Instead, the design will read the wrong
data from the IP on the first beat of any return burst.&lt;/p&gt;

&lt;p&gt;If you simply follow the logic templates above, you won’t make this mistake.&lt;/p&gt;

&lt;h2 id=&quot;capturing-the-rules-in-formal-properties&quot;&gt;Capturing the rules in formal properties&lt;/h2&gt;

&lt;p&gt;These basic handshaking rules are also really easy to capture in some simple
formal properties.&lt;/p&gt;

&lt;p&gt;For example, we can check whether or not &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TVALID&lt;/code&gt; is properly reset.
The first step to such a check is to assume the existence of an initial
reset.  For this, we can use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;f_past_valid&lt;/code&gt;.  This is simply a piece of helper
logic that I often create.  It’s just something that is clear on the first
cycle, set on every other cycle, and only used during formal verification.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;kt&quot;&gt;reg&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;f_past_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;f_past_valid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;f_past_valid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;On that very first cycle, we can assume that the reset must be active.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_past_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ARESETN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This is the only reset constraint required.  Beware, though, the formal
solver might toggle your reset line later when you aren’t expecting it.&lt;/p&gt;

&lt;p&gt;We can also use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;f_past_valid&lt;/code&gt; to handle initial value checks.  In particular,
if &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;f_past_valid&lt;/code&gt; is clear then our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TVALID&lt;/code&gt; logic should have any initial
value we’ve given to it–zero.  Similarly, if the reset was active on the last
cycle the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TVALID&lt;/code&gt; should also be low.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_past_valid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ARESETN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXIS_TVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This check, however, assumes that you’ve set &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;M_AXIS_TVALID&lt;/code&gt; to zero initially.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;M_AXIS_TVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1'b0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;a href=&quot;https://www.reddit.com/r/FPGA/comments/p719jl/initial_statements_in_verilog/&quot;&gt;If you’d rather not use initial values&lt;/a&gt;,
the check is easily modified to except the first clock cycle from the check.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_past_valid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ARESETN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_past_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXIS_TVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In this case, the assertion is only checked on clock cycles following the
first one.  Since the first clock cycle includes the reset, this guarantees
that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;M_AXIS_TVALID&lt;/code&gt; is clear on the second clock cycle and so we know
our property holds.&lt;/p&gt;

&lt;p&gt;While AXI does not require an asynchronous reset, it does permit one.  The
check is easily modified to handle an environment with an asynchronous reset.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ARESETN&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ARESETN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXIS_TVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Reading this out, it says that if the reset is ever active then &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;M_AXIS_TVALID&lt;/code&gt;
should be clear.  Likewise, if the reset was active on the last clock cycle,
then &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;M_AXIS_TVALID&lt;/code&gt; should also be clear.&lt;/p&gt;

&lt;p&gt;From this beginning, we can turn our attention to the handshake itself.&lt;/p&gt;

&lt;p&gt;Here, the rule is simple: if the stream stalled on the last cycle,
then all of the values must remain the same on this cycle.  That means that
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;M_AXIS_TVALID&lt;/code&gt; must remain true, and everything else must remain stable.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;($&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXIS_TVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXIS_TREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXIS_TVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;($&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;stable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXIS_TDATA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If you had more than just the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;M_AXIS_DATA&lt;/code&gt; connection, you’d also want to
assert these are stable as well.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;c1&quot;&gt;//&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// Assert the same for any other associated&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// data that might be present: TLAST, TID,&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// TDEST, TSTRB, TKEEP, TUSER, etc.&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;//&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// Only asssert the signals you actually have in&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// your interface.&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;($&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;stable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXIS_TLAST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;($&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;stable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXIS_TSTRB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;($&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;stable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXIS_TKEEP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;($&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;stable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXIS_TID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;($&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;stable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXIS_TDEST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;($&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;stable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXIS_TUSER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;There.  That’s all that’s required of an AXI stream handshake.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Getting AXI handshaking right is a basic requirement of working with anything
AXI related.  The logic templates above should help anyone in that journey.
As you can see from the examples, however, there are plenty of ways of getting
this wrong.&lt;/p&gt;

&lt;hr /&gt;&lt;p&gt;&lt;em&gt;A prudent man foreseeth the evil, and hideth himself: but the simple pass on, and are punished. Prov 22:3, 27:12&lt;/em&gt;</description>
        <pubDate>Sat, 28 Aug 2021 00:00:00 -0400</pubDate>
        <link>https://zipcpu.com/blog/2021/08/28/axi-rules.html</link>
        <guid isPermaLink="true">https://zipcpu.com/blog/2021/08/28/axi-rules.html</guid>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>Measuring AXI latency and throughput performance</title>
        <description>&lt;p&gt;Performance.&lt;/p&gt;

&lt;p&gt;Why are you using an FPGA?  Performance.&lt;/p&gt;

&lt;p&gt;Why are you building an
&lt;a href=&quot;/blog/2017/10/13/fpga-v-asic.html&quot;&gt;ASIC&lt;/a&gt;?
Performance.  Low power, design security and size may also play a role here,
but performance is still a big component.&lt;/p&gt;

&lt;p&gt;Frankly, if you could do it some other, cheaper way, you’d do it the cheaper
way.  Digital logic design isn’t easy, and therefore it’s not cheap.&lt;/p&gt;

&lt;p&gt;That endless persuit of more and better performance forms the backdrop for
everything we will be discussing today.  Specifically, you’ll never have
good performance if you cannot measure your performance.&lt;/p&gt;

&lt;p&gt;So, today, let’s talk about measuring the performance of the interface
between an AXI &lt;a href=&quot;/blog/2021/06/28/master-examples.html&quot;&gt;master&lt;/a&gt;
and &lt;a href=&quot;/blog/2019/05/29/demoaxi.html&quot;&gt;slave&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Before diving into the topic, though, let me just share that this is an
ongoing project of mine.  I’ve now gone through several iterations of the
measures I’ll be presenting below.  Yes, I’m becoming convinced of their
effectiveness–or I wouldn’t be writing.  Well, that’s not quite true.  I
was going to present a preliminary draft of these measures–but I think what I
have now is even better than that.  So, today, we’ll look at what these measures
are, and then use them to tell us something about how effective a particular
bus structure is.&lt;/p&gt;

&lt;p&gt;With that as a background, let’s dive right in.&lt;/p&gt;

&lt;h2 id=&quot;axi-performance-model&quot;&gt;AXI Performance Model&lt;/h2&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 1. Connecting the AXI Performance monitor&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;/img/axiperf/aximonitor.svg&quot;&gt;&lt;img src=&quot;/img/axiperf/aximonitor.svg&quot; alt=&quot;&quot; width=&quot;320&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;My goal is to be able to attach to any AXI link in a system &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axiperf.v&quot;&gt;a performance
monitor&lt;/a&gt;.  This
is a simple Verilog module with an &lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;AXI-lite control
interface&lt;/a&gt; that monitors
a full AXI interface.  A simple write to the performance monitor will start it
recording statistics, and then a second write at some later time will tell
it to stop recording statistics.  That much should be simple.&lt;/p&gt;

&lt;p&gt;That’s not the challenge.&lt;/p&gt;

&lt;p&gt;The challenge is knowing what statistics to collect short of needing the
entire &lt;a href=&quot;/blog/2017/07/31/vcd.html&quot;&gt;simulation trace&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;first-attempt-basic-statistics&quot;&gt;First Attempt: Basic statistics&lt;/h3&gt;

&lt;p&gt;As a first pass at measuring performance, we can simply count both the number
of bytes (and beats) transferred during our observation window together
with the size of the window.  We’ll even go one step further and count the
number of bursts transferred.&lt;/p&gt;

&lt;p&gt;To give this some meaning, let’s define some terms:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Beat: A “beat” in AXI is one clock cycle where either &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WVALID &amp;amp;&amp;amp; WREADY&lt;/code&gt;,
for writes, or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RVALID &amp;amp;&amp;amp; RREADY&lt;/code&gt; for reads.&lt;/p&gt;

    &lt;p&gt;The number of beats over a given time period, assuming the bus is idle at
both the beginning and ending of the time period, should also equal to the
sum of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(AWLEN+1)&lt;/code&gt;s every time &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AWVALID &amp;amp;&amp;amp; AWREADY&lt;/code&gt; for writes, or
alternatively the sum of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(ARLEN+1)&lt;/code&gt;s on every cycle that
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ARVALID &amp;amp;&amp;amp; ARREADY&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Burst: A “burst” is a single AXI request.  These can be counted by
the number of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AWVALID &amp;amp;&amp;amp; AWREADY&lt;/code&gt; cycles for writes, or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ARVALID &amp;amp;&amp;amp; ARREADY&lt;/code&gt;
cycles for reads.&lt;/p&gt;

    &lt;p&gt;As with beats, there are other measures we could use to count bursts.  For
example, we might also count &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WVALID &amp;amp;&amp;amp; WREADY &amp;amp;&amp;amp; WLAST&lt;/code&gt; or
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BVALID &amp;amp;&amp;amp; BREADY&lt;/code&gt; cycles when counting write bursts, or
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RVALID &amp;amp;&amp;amp; RREADY &amp;amp;&amp;amp; RLAST&lt;/code&gt; cycles when counting read bursts.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;From the outputs of these first basic counters, we might calculate some simple
performance measures, such as:&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/axiperf/eqn-raw-throughput.png&quot; alt=&quot;&quot; width=&quot;294&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;or&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/axiperf/eqn-avg-burst.png&quot; alt=&quot;&quot; width=&quot;359&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;or&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/axiperf/eqn-efficiency.png&quot; alt=&quot;&quot; width=&quot;391&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Now, suppose the throughput you’ve measured isn’t the throughput you were
hoping for.  Which module needs fixing?  Should you invest your energy into
updating the slave or updating the master?  This suggests we might want
another three measures:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;Write not ready&lt;/em&gt;: If the master hasn’t raised &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WVALID&lt;/code&gt; by the time
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AWVALID &amp;amp;&amp;amp; AWREADY&lt;/code&gt; then the master is delinquent in providing write data.
Likewise, the master is also delinquent if it fails to provide write data
on every clock cycle between the first &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WVALID&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WVALID &amp;amp;&amp;amp; WLAST&lt;/code&gt; where
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WVALID&lt;/code&gt; is low.&lt;/p&gt;

    &lt;p&gt;In these cases, the master is throttling the write speed.  This
isn’t necessarily a &lt;em&gt;bad&lt;/em&gt; thing, but if you are monitoring AXI bus
performance then you will really want to know where the bottlenecks
in any transfer are coming from.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;Write &lt;a href=&quot;https://en.wikipedia.org/wiki/Back pressure&quot;&gt;back pressure&lt;/a&gt;&lt;/em&gt;:
If &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BVALID &amp;amp;&amp;amp; !BREADY&lt;/code&gt; are ever true, than the master is throttling a
write return.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;Read &lt;a href=&quot;https://en.wikipedia.org/wiki/Back pressure&quot;&gt;back pressure&lt;/a&gt;&lt;/em&gt;: If
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RVALID &amp;amp;&amp;amp; !RREADY&lt;/code&gt; are ever true, than the master is throttling a
read return.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Another fairly simple, but ad hoc, measure could capture how well the AXI
master and slave were able to pipeline.  For that, one might just count the
maximum number of outstanding bursts.  The more bursts the master issues that
the slave allows to be outstanding, the deeper the slave’s pipeline must be.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/axiperf/eqn-pipeline-depth.png&quot; alt=&quot;&quot; width=&quot;471&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;While these are useful metrics, there’s a lot of things these simple measures
don’t capture.  For example, do we really want to count against our throughput
the cycles when no transfers have been requested?  Wouldn’t it make more sense
to therefore measure throughput instead as,&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/axiperf/eqn-real-throughput.png&quot; alt=&quot;&quot; width=&quot;370&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;where an active clock cycle started upon some request and then ended when
the request was complete?&lt;/p&gt;

&lt;p&gt;We also discussed examples where the master was throttling our throughput.
Can we expand that concept so that we can tell when the slave is throttling
throughput?&lt;/p&gt;

&lt;h3 id=&quot;second-pass-a-first-order-approximation&quot;&gt;Second Pass: A first order approximation&lt;/h3&gt;

&lt;p&gt;Therefore, let’s see if we can’t expand these measures into a proper first
order model of transaction time.  In other words, let’s see if we can model
every bus transactions using a simple linear model:&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/axiperf/eqn-transaction-time.png&quot; alt=&quot;&quot; width=&quot;524&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;The idea is that, if we can properly identify the two coefficients in this
model, burst latency and throughput, then we should be able to predict how
long any transaction might take.  Of course, this assumes that the model
fits–but we’ll have to come back to that more in detail later.&lt;/p&gt;

&lt;p&gt;To illustrate this idea, let’s consider Fig. 2 below showing an AXI read burst.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 2. Decomposing performance into two parts&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;/img/axiperf/read-model-annotated.svg&quot;&gt;&lt;img src=&quot;/img/axiperf/read-model-annotated.svg&quot; alt=&quot;&quot; width=&quot;560&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Here, in this burst, you can see how it neatly divides into two parts: a
latency portion between the beginning of the request and the first data beat,
and then a response portion where the data beats are returned.  No, the model
isn’t perfect.  The read throughput is arguably one beat every three cycles,
but the 36% measure shown above is at least easy enough to measure and it’s
probably close enough for a first attempt at AXI performance measurement.&lt;/p&gt;

&lt;p&gt;This model, by itself, nicely fits several use cases.  For example, consider
the following memory speeds:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/2018/08/16/spiflash.html&quot;&gt;A SPI-type NOR flash memory&lt;/a&gt;.
In this case, the controller must first issue an 8’b command to the SPI
memory.  This command will be followed by a 24’b address.  After command
and address cycles are complete, there may be a couple of unused cycles.
After all of these cycles, a SPI based flash should be able to return one
byte every eight SCK cycles.&lt;/li&gt;
&lt;/ul&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/axiperf/tbl-spi-flash.png&quot; alt=&quot;&quot; width=&quot;372&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;ul&gt;
  &lt;li&gt;A &lt;a href=&quot;/blog/2019/03/27/qflexpress.html&quot;&gt;QSPI flash controller&lt;/a&gt;.
If you go directly into QSPI mode via some form of eXecute In Place (XIP)
option in the controller, then you can skip the command cycles.  The 24
address cycles might now be accomplished in QSPI mode, leading us to 6
cycles of latency.  Once the command is complete, a byte can be produced
every other SCK cycle.&lt;/li&gt;
&lt;/ul&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/axiperf/tbl-qspi-flash.png&quot; alt=&quot;&quot; width=&quot;372&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;ul&gt;
  &lt;li&gt;An SDRAM.  Most SDRAMs require an ACTIVATE cycle to activate a given row,
followed by the memory request using that row.  In &lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/rtl/arrowzip/wbsdram.v&quot;&gt;my own SDRAM
controller&lt;/a&gt;,
the SDRAM can only return 16-data bits.  In total, the controller has a five
clock latency, followed by a throughput then of one 32-bit word every other
clock cycle.&lt;/li&gt;
&lt;/ul&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/axiperf/tbl-sdram.png&quot; alt=&quot;&quot; width=&quot;334&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;/blog/2019/05/29/demoaxi.html&quot;&gt;A block RAM controller&lt;/a&gt;.
This one should be easy, no?  In the case of a block RAM, you have everything
working to your advantage.  However, Xilinx’s AXI block RAM controller
requires 3 cycles of latency per burst.&lt;/p&gt;

    &lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/axiperf/tbl-xilbkram.png&quot; alt=&quot;&quot; width=&quot;331&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

    &lt;p&gt;&lt;a href=&quot;/blog/2019/05/29/demoaxi.html&quot;&gt;My own block RAM controller&lt;/a&gt;
is a bit different.  It pipelines requests.  As a result, the latency will be
hidden during subsequent accesses.  So, for this one we might write:&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/axiperf/tbl-bkram.png&quot; alt=&quot;&quot; width=&quot;331&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;ul&gt;
  &lt;li&gt;Interconnect.  This is one of the things I really want to measure.  From
what I know of &lt;a href=&quot;/blog/2019/07/17/crossbar.html&quot;&gt;my own
interconnect&lt;/a&gt;, I expect
three cycles of (pipelined) latency per burst–the first is used to &lt;a href=&quot;/zipcpu/2019/09/03/address-assignment.html&quot;&gt;decode
the address&lt;/a&gt;,
and the second two are &lt;a href=&quot;/blog/2019/05/22/skidbuffer.html&quot;&gt;required by the AXI
protocol&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/axiperf/tbl-axixbar.png&quot; alt=&quot;&quot; width=&quot;473&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;That’s what I think it should achieve.  But … does it?&lt;/p&gt;

&lt;p&gt;Still, the model seems to fit several potential slave interactions–enough
so that it looks like it might be useful.  Therefore, let’s see if we can build
a linear AXI performance model.  Let’s start these efforts by considering
Fig. 2, shown again below, as a reference.  This time, however, our goal is
going to be to categorize every clock cycle used by this transaction so
that we can then draw conclusions about the performance of the bus at a
later time.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 3. Decomposing performance into two parts&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;/img/axiperf/rdburst-annotated.svg&quot;&gt;&lt;img src=&quot;/img/axiperf/rdburst-annotated.svg&quot; alt=&quot;&quot; width=&quot;560&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Using this model, we’ll define &lt;em&gt;latency&lt;/em&gt; as the time following when the master
first raises &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ARVALID&lt;/code&gt; for reads until the first &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RVALID&lt;/code&gt; is available.
Latency will be expressed in clock cycles per burst.  We’ll then define
&lt;em&gt;throughput&lt;/em&gt; as the number of beats transmitted divided by the time between
the first &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RVALID&lt;/code&gt; and the last &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RVALID &amp;amp;&amp;amp; RREADY &amp;amp;&amp;amp; RLAST&lt;/code&gt;.  Unlike latency,
however, we’ll define throughput in terms of a percentage.  Of those clock
cycles between &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RVALID&lt;/code&gt; and the end of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RVALID &amp;amp;&amp;amp; RREADY &amp;amp;&amp;amp; RLAST&lt;/code&gt;, the
throughput will be defined as the percentage of clock cycles in which a beat
of data was transferred.&lt;/p&gt;

&lt;p&gt;Using these metrics, the best AXI slave will have a latency of zero,
and a throughput of 100%–assuming the master doesn’t slow it down with any
&lt;a href=&quot;https://en.wikipedia.org/wiki/Back pressure&quot;&gt;back pressure&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We’ll use a similar model for writes, although we will need to modify it
just a touch as shown in Fig. 4 below.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 4. Decomposing write performance into latency and throughput components&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;/img/axiperf/wrburst-annotated.svg&quot;&gt;&lt;img src=&quot;/img/axiperf/wrburst-annotated.svg&quot; alt=&quot;&quot; width=&quot;560&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 5. How shall write latency be defined?&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/axiperf/which-write-latency.svg&quot; alt=&quot;&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;In the case of writes, latency comes in two parts.  There’s the latency between
the first &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AWVALID&lt;/code&gt; and the first &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WVALID &amp;amp;&amp;amp; WREADY&lt;/code&gt;.  Once &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WVALID &amp;amp;&amp;amp; WREADY&lt;/code&gt;
have been received, the time from then until &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WVALID &amp;amp;&amp;amp; WREADY &amp;amp;&amp;amp; WLAST&lt;/code&gt; will
be a measure of our throughput.  After measuring write throughput, there will
then at least one additional cycle of latency until &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BVALID &amp;amp;&amp;amp; BREADY&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;At a first glance, this model seems simple enough: count the number of latency
cycles and the number of throughput cycles.  Then, with an appropriate scale
factor, we should be able to calculate these coefficients:&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/axiperf/eqn-measures.png&quot; alt=&quot;&quot; width=&quot;456&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Let’s try it out and see what happens!&lt;/p&gt;

&lt;h2 id=&quot;data-collection-methodology&quot;&gt;Data Collection Methodology&lt;/h2&gt;

&lt;p&gt;Our basic method will be to examine evey AXI signal, on a clock by clock basis,
and to bin each cycle, as I illustrated in Fig’s 3 and 4 above.  We’ll then
count the number of clock cycles in each of a set of various categories.  To
make this work, though, we’re going to need to make certain that no clock
cycle is counted in more than one bin.  Let me therefore present the two bin
classifications that I am (currently) using.&lt;/p&gt;

&lt;p&gt;First, let me start with the read classification, since that one is easier
to follow.  Fig. 6 below shows a table, allowing every AXI beat on the read
channels to be classified.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 6. Categorizing AXI read cycles&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;/img/axiperf/rdcategories.svg&quot;&gt;&lt;img src=&quot;/img/axiperf/rdcategories.svg&quot; alt=&quot;&quot; width=&quot;560&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;In this table, empty boxes represent “don’t care” criteria.&lt;/p&gt;

&lt;p&gt;Those who are familiar with AXI will recognize the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ARVALID&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ARREADY&lt;/code&gt;,
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RVALID&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RREADY&lt;/code&gt; signals heading up this table.  These are to be expected.
The two new flags in this chart capture the state of a transaction.  The
bursts in flight flag measures whether or not &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RVALID&lt;/code&gt; has been true for a
given burst so far, but &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RVALID &amp;amp;&amp;amp; RLAST&lt;/code&gt; has not yet been true.  Hence, if a
burst is in flight but the data isn’t (yet) available, then we have a
throughput problem.  This is illustrated by the “Slow read link” name above,
and by the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SL&lt;/code&gt; cycles in Fig. 3 above.  The second measure is whether or not
a burst is outstanding.  An outstanding burst is one for whom
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ARVALID &amp;amp;&amp;amp; ARREADY&lt;/code&gt; has been received, but for which &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RVALID&lt;/code&gt; has yet to be
asserted.  Therefore, any time a burst is outstanding, but before the return
is in flight, we’ll call that clock cycle a latency cycle.  These are the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LG&lt;/code&gt;
cycles in Fig. 3 above.&lt;/p&gt;

&lt;p&gt;Now, if we’ve done this right, then all of the cycles above will add up to
the total number of cycles from capture start to capture end.  This will
allow us some additional measures as well.  For example, what percentage
of time is the bus being used, or similarly what percentage of time is being
spent waiting for the return leg to start responding?&lt;/p&gt;

&lt;p&gt;What can these bins tell us?&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;READ IDLE: This tells us how busy the bus is.  This is simple enough.  If you
want to move a lot of information but spend the majority of time with the
bus idle, then maybe you want to consider using &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axidma.v&quot;&gt;an AXI
DMA&lt;/a&gt; instead of
a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;memcpy()&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;READ BEAT: This one of the most important bins, since it tells us how
much data we are putting through the interface.  In a busy bus, you will want
the READ BEAT bin to occur as often as you can–simply because it means
you are then getting high throughput.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;READ STALL: This is the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Back_pressure&quot;&gt;back pressure&lt;/a&gt; measure.
This is due to the master telling the slave that it’s not ready to receive
data.  A good master won’t do this, but there are times when
&lt;a href=&quot;https://en.wikipedia.org/wiki/Back_pressure&quot;&gt;back pressure&lt;/a&gt;
is required: clock domain crossings, waiting for return arbitration in the
interconnect, etc.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;SLOW LINK: This is our measure of the read data not being available.  Those
examples above, such as from the SPI flash, that didn’t achieve full bus
performance would’ve been due to a slow link after the first clock cycle
of the burst.  In this case, the slave has started to provide read data,
and so the first beat of the read burst has been returned, but the slave
doesn’t (yet) have the data ready for the next beat of the burst.  Unlike
the read stall, which was the master’s problem, a slow link is the fault
of the slave.  This doesn’t necessarily mean the &lt;em&gt;controller&lt;/em&gt; is at fault,
it might just be that the hardware can only go so fast in the first place.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;READ LAG: This measure counts the beats between &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ARVALID &amp;amp;&amp;amp; ARREADY&lt;/code&gt; and the
first &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RVALID&lt;/code&gt;.  This is the component we would normally think of as the bus
latency.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;READ ADDR STALL: Counts the number of beats where &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ARVALID &amp;amp;&amp;amp; !ARREADY&lt;/code&gt;.
This can happen for a lot of reasons–notably when a burst is already
outstanding and the slave can’t handle more than one burst at a time.  For
this reason, we only count read address stalls when nothing else is
outstanding.  That makes this an indication of a poor AXI implementation
in the slave–typically indicating that the slave doesn’t allow &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ARREADY&lt;/code&gt; to
idle high, but in some cases (like &lt;a href=&quot;https://www.xilinx.com/products/intellectual-property/axi_lite_ipif.html&quot;&gt;Xilinx’s IPIF interface
bridge&lt;/a&gt;)
it might simply be an indication that the slave is working on the burst
already but just hasn’t let the master know that it has accepted the request.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;READ ADDR CYCLE: This simply counts the first &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ARVALID &amp;amp;&amp;amp; ARREADY&lt;/code&gt; of every
burst.  It’s subtly different from a read burst count, simply because we only
count &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ARVALID &amp;amp;&amp;amp; ARREADY&lt;/code&gt; when the interface is otherwise idle.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;From these measures, we should be able to calculate:&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/axiperf/eqn-rd-measures.png&quot; alt=&quot;&quot; width=&quot;647&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;You may have noticed that this categorization prioritizes certain conditions
over other possibilities.  For example, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ARVALID&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ARREADY&lt;/code&gt; bins are
both don’t care bins when &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RVALID&lt;/code&gt; is high.  That’s because the link speed
is, at that time, driven by the speed of the return.  Additional packets that
arrive (should) go into a pipeline somewhere in the processing queue.  We
don’t pay attention to them at all–at least not until they start to impact
the return.&lt;/p&gt;

&lt;p&gt;Indeed, our choice here becomes one of the many decisions that need to be made
when trying to measure AXI performance, decisions which subtly prioritize
performance in one part of the spectrum perhaps to the detriment of measuring
performance in other cases.  Our choices have limited the bus to one of
six possible bus cycles on every clock.&lt;/p&gt;

&lt;p&gt;The problem only gets worse when we get to the write channel.  In the case
of the write channel, we have three separate channels that need to be
somehow prioritized: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AW*&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;W*&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;B*&lt;/code&gt;.  Worse, AXI imposes no particular
order between &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AW*&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;W*&lt;/code&gt;.  How then shall we allocate blame between
master and slave, or rather, how shall we then tally meaningful performance
metrics in this environment?&lt;/p&gt;

&lt;p&gt;Fig. 7 below shows you my solution to this problem.  Yes, it is much more
complicated than reads are, as you can see by the existence of fifteen bins
versus the seven we had before.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 7. Categorizing AXI write cycles&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;/img/axiperf/wrcategories.svg&quot;&gt;&lt;img src=&quot;/img/axiperf/wrcategories.svg&quot; alt=&quot;&quot; width=&quot;760&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Let me take a moment, again, to explain the new columns.  The first one,
outstanding address, is a flag that will be true between the first
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AWVALID &amp;amp;&amp;amp; AWREADY&lt;/code&gt; and the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BVALID &amp;amp;&amp;amp; BREADY&lt;/code&gt; associated with the last
outstanding transaction.  It indicates that there’s an outstanding write
address request, and therefore an outstanding write burst, that has not yet
completed.  The second one is similar.  This one will be true between the first
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WVALID &amp;amp;&amp;amp; WREADY&lt;/code&gt; and the last &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BVALID &amp;amp;&amp;amp; BREADY&lt;/code&gt;.  These two flags are useful
when trying to figure out the synchronization between the two channels.  For
example, if the outstanding address is true but the outstanding write data is
not, then the address arrived before the write data.
The write in progress flag is very similar to the bursts in flight flag
from the read side.  This flag will be true from the first &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WVALID&lt;/code&gt;
signal until its associated &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WVALID &amp;amp;&amp;amp; WREADY &amp;amp;&amp;amp; WLAST&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;As with the read channel, we are prioritizing throughput over all other
conditions.  For this reason the first write categories all contain
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WVALID&lt;/code&gt;.  These are prioritized over &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BVALID&lt;/code&gt; or even &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AWVALID&lt;/code&gt; cycles.&lt;/p&gt;

&lt;p&gt;Let’s examine these categories in more detail.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;WRITE BEAT: This is simply a count of every write beat.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;EARLY WRITE BEAT: This is a special category of write beat.  Unlike our
other categories, this one duplicates some of the counts of one other
category, notable the WRITE BEATs count above.  I’ve added this one to the
mix so that we can capture the concept of the write data showing up before
the address.  (This didn’t happen in any of my tests …)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;WRITE STALL #1: There are two different types of write stalls that we
recognize.  In both cases, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WVALID &amp;amp;&amp;amp; !WREADY&lt;/code&gt; will indicate a write stall.
In this first case, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AWVALID &amp;amp;&amp;amp; AWREADY&lt;/code&gt; has already taken place, so that
we now have an outstanding burst that this stalled data is assigned to.&lt;/p&gt;

    &lt;p&gt;This is what you might think of as a normal write stall.  It’s driven by
the slave’s inability to keep up with the masters data rate.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;WRITE STALL #2: Like the write stall above, this is also a measure of the
total number of write stalls.  Where this measure differs is that this stall
captures those cases where a write is in progress already.  In order to
differentiate this from the stall above, these stalls are only in the
case where the write address has not shown up yet.&lt;/p&gt;

    &lt;p&gt;Since most slaves can’t do anything but buffer write data until the
associated address shows up, stalls here may be more a reflection of slave
stalling until the address is available, verses the slave stalling due to
a true lack of throughput.  Once the slave’s buffer fills up, these stalls
are really a problem with the master not providing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AWVALID&lt;/code&gt;–not with any
capability in the slave.&lt;/p&gt;

    &lt;p&gt;In my own AXI designs, the slave’s write buffer tends to be a simple
&lt;a href=&quot;/blog/2019/05/22/skidbuffer.html&quot;&gt;skid buffer&lt;/a&gt;, so once
you get past the first beat the slave will always need to stall until the
address is available.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;SLOW WRITE: In this case, an address has been provided to the slave in
addition to the first write beat of data.  The problem here is that the
master has been unable to keep the slave’s write data channel full.&lt;/p&gt;

    &lt;p&gt;I generally design my AXI masters to avoid issuing an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AWVALID&lt;/code&gt; until they
can keep &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WVALID&lt;/code&gt; full throughout the whole burst.  The problem with issuing
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AWVALID&lt;/code&gt; early, and then not having the data when you need it, is that it
can otherwise lock up the channel for all other users.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;EARLY WRITE ADDR: This is the case where the write address shows up before
the data.  There’s nothing wrong with this per se, except that the slave
can’t yet act on this address until the data (eventually) shows up.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;WRITE ADDR STALL: As you might expect, this is the case where
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AWVALID &amp;amp;&amp;amp; !AWREADY&lt;/code&gt;.  However, in this case, there is a catch.  We’re only
going to count this as a write address stall if the channel isn’t otherwise
busy.  Once a burst has started, the slave may need to stall the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AW*&lt;/code&gt;
channel simply because it might not be able to handle more than one burst
at a time.  By excluding those cases, we’re instead catching any examples
of a slave that doesn’t use a
&lt;a href=&quot;/blog/2019/05/22/skidbuffer.html&quot;&gt;skid buffer&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;WRITE DATA LAG: Once the write address has been accepted, any lag between
the address and the data is going to add to our latency measure.  We’ll call
this the write data lag.  If you look at Fig. 4 above, you’ll see that there
is one beat marked &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LG&lt;/code&gt;.  This would be a beat of write data lag.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;WRITE ADDR LAG #1: If the write data shows up before the address, we again
have a latency situation–this time, though, with the data ahead of the
address.  What makes this latency measure unusual is that the entire write
burst has been received–since there’s no longer any write in progress.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;WRITE ADDR LAG #2: This measure is a bit more what we might expect–the first
write data has shown up and so we are mid-burst, but the address hasn’t
shown up yet.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;EARLY DATA STALL: It may be to the slave’s advantage to stall the data
channel until after the address has been received.  Indeed, you may remember
that I did so in &lt;a href=&quot;/blog/2019/05/29/demoaxi.html&quot;&gt;my own AXI (full) slave
demo&lt;/a&gt;.  Even though there
may be good reasons for this, however, it’s still a write data stall that
we’re going to need to keep track of.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;B CHANNEL LAG: That brings us to our three &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;B*&lt;/code&gt; channel statistics.  These
are specially constructed so that they are only counted when none of the
other conditions above are counted.  In the case of this first measure,
the B channel lag counts the case where all the data has been received but
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BVALID&lt;/code&gt; has yet to be set.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;B CHANNEL STALL: As with the B channel lag, this stall only applies once
all the data has been received and no more &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WVALID&lt;/code&gt; data is incoming.
This is an indication that the master is not yet able to receive a response,
but that the slave has the response ready and available for the master
to consume.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;B CHANNEL END OF BURST: Just for completion, we also need to keep track
of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BVALID &amp;amp;&amp;amp; BREADY&lt;/code&gt; cycles when nothing else is happening.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;WRITE IDLES: This finishes out the count of all cycles, so that we’ve somehow
categorized every clock cycle–idle cycles, data cycles, and lag cycles.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Put together, we should be able to identify latency and throughput.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/axiperf/eqn-wr-measures.png&quot; alt=&quot;&quot; width=&quot;719&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;h3 id=&quot;ad-hoc-measures&quot;&gt;Ad hoc Measures&lt;/h3&gt;

&lt;p&gt;Just for good measure, I added a couple ad hoc measures to this list
to see if I could get even more insight into how a given link was working.&lt;/p&gt;

&lt;p&gt;Here are some of the additional and extra read measures I’m currently
keeping track of:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Maximum read burst size.  In general, a slave can often optimize data
handling if it knows where the next request is coming from, or perhaps
if it knows ahead of time that the data will be read in order.  The
larger the burst size, the easier it can be to do this.  Therefore,
knowing the maximum burst size is a useful measure of how well burst
reads are being employed.&lt;/p&gt;

    &lt;p&gt;This would certainly be the case when interacting with Xilinx’s block RAM
controller.  Since it doesn’t pipeline requests, you would need large burst
requests to get good throughput numbers from it.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Maximum number of ID’s that have bursts in flight at any given time.  This
is a measure of the out of order nature of the return channel.  The more out
of order the read channel is, the more burst ID’s that may be outstanding
at any given time.&lt;/p&gt;

    &lt;p&gt;Unfortunately, &lt;a href=&quot;/blog/2019/07/17/crossbar.html&quot;&gt;my own AXI
interconnect&lt;/a&gt; doesn’t
yet forward requests downstream from multiple AXI masters.  Instead, it will
only allocate one master to a slave at a time.  This limits the maximum
number of outstanding burst ID’s to those created by a single master alone.
No, it’s not as powerful as an AXI interconnect can be, but it does work,
and it is open source (Apache 2).  Perhaps when I finish my current contract
I’ll have a chance to come back to it and finish adding this feature in.
Until then, our tests below won’t be able to register much here.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Likewise, here are some extra write measures I’m going to keep track of as well:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Write bias.  This is designed to capture the extent to which the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AW*&lt;/code&gt;
channel shows up before the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;W*&lt;/code&gt; channel.  Hence, if &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AW*&lt;/code&gt; is ahead of
the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;W*&lt;/code&gt; channel I add one, otherwise if &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;W*&lt;/code&gt; is ahead of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AW*&lt;/code&gt; I subtract
one.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The maximum number of outstanding write bursts at any given time.  This is
intended to provide an indication of the allowed AXI pipeline depth.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Maximum write burst size.  This is a measure of the extent to which bursts
are being used.  It’s a compliment to the ratio of write beats to write
bursts.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Whether or not any of these measures will be valuable is still something
I’m looking into.&lt;/p&gt;

&lt;h2 id=&quot;adjusting-the-easyaxil-design&quot;&gt;Adjusting the EasyAXIL design&lt;/h2&gt;

&lt;p&gt;This is the section where I typically present a design of some type.
In this case, I’ll be sharing the &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axiperf.v&quot;&gt;AXI performance
monitor&lt;/a&gt; design
I’ve been working with.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axiperf.v&quot;&gt;This particular
design&lt;/a&gt;
is now one of many AXI designs I’ve built following the
&lt;a href=&quot;/blog/2020/03/08/easyaxil.html&quot;&gt;EasyAXIL prototype&lt;/a&gt;.  The
&lt;a href=&quot;/blog/2020/03/08/easyaxil.html&quot;&gt;EasyAXIL AXI-lite prototype&lt;/a&gt;
is just really easy to work with, while also achieving good performance on an
&lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;AXI-lite bus&lt;/a&gt;.
Because this design repeats the signaling logic from the
&lt;a href=&quot;/blog/2020/03/08/easyaxil.html&quot;&gt;EasyAXIL design&lt;/a&gt;,
I’ll skip that portion of the presentation below.  Feel free to check out the
&lt;a href=&quot;/blog/2020/03/08/easyaxil.html&quot;&gt;EasyAXIL article&lt;/a&gt;
for more information on how the
&lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;AXI-lite signals&lt;/a&gt;
are generated.  For now, it’s important to remember that the internal
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;axil_write_ready&lt;/code&gt; signal indicates that we are currently processing a beat of
write information whereas the internal &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;axil_read_ready&lt;/code&gt; signal indicates we
are reading a beat of information.  In both of these cases, the address will
be in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;awskd_addr&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;arskd_addr&lt;/code&gt; respectively after removing the (unused)
least significant address bits.  Similarly, the write data will be found in
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wskd_data&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wskd_strb&lt;/code&gt; respectively.&lt;/p&gt;

&lt;p&gt;Speaking of writes, let’s just look at how this core handles writes to its
&lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;AXI-lite interface&lt;/a&gt;.
In general, there are only three registers controlled by the write interface:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;clear_request&lt;/code&gt;: If the user ever sets this register, we’ll automatically
reset all of our counters.  The reset will complete once the bus returns
to idle.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;start_request&lt;/code&gt;: This register requests we start accumulating AXI data.
The signal will remain high until the bus becomes idle and any (potentially)
pending &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;clear_request&lt;/code&gt; has completed.  At that time the design will start
accumulating its statistics.&lt;/p&gt;

    &lt;p&gt;Waiting for the bus to become idle is a necessary requirement, lest our
statistics be incomplete.  Beware, however, that our &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axiperf.v&quot;&gt;performance
monitor&lt;/a&gt;
might be downstream of the link we are monitoring.  For example, what if
this &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axiperf.v&quot;&gt;performance
monitor&lt;/a&gt; is
attached to a CPU via its data bus connection?  In such cases, even the
request to start monitoring would then only be provided in the middle of
a bus transaction!  This makes idle tracking all the more important.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;stop_request&lt;/code&gt;: Once data acquisition is complete, a stop request requests
we stop accumulating data.  As with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;start_request&lt;/code&gt;, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;stop_request&lt;/code&gt;
signal will be sticky and remain set until the bus becomes idle.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There is the possibility that our bus utilization counters will overflow.
I currently have these counters set to a maximum of 256 outstanding bursts.
Overflowing this number seems like it would be highly unusual.  However, if
this ever happens, this performance measurement design will of necessity lock
up until the next bus reset.  By “lock up”, I mean that it will refuse to make
further measurements.  We’ll come back to this again in a moment.  For now,
just know that if this ever happens you may need to increase the size of
the counters used to keep track of the number of outstanding bursts–not the
number of beats received or outstanding, but the number of outstanding bursts.&lt;/p&gt;

&lt;p&gt;Now, here’s how we use these flags together:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;idle_bus&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;clear_request&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1'b0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clear_request&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;idle_bus&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;start_request&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;stop_request&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;These three flags are all self clearing.  Therefore, the first thing we’ll
do is to clear them.  The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;clear_request&lt;/code&gt; can complete only when the bus
is idle–otherwise our counters will be all messed up.  Similarly, start and
stop requests are just that: requests.  They remain requests until the bus
is both idle and any pending clearing request is complete.  Once the bus
becomes idle, then accumulation can start or stop.&lt;/p&gt;

&lt;p&gt;The next step is to handle any write requests.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axil_write_ready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;awskd_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;mh&quot;&gt;5'h1f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wskd_strb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
				&lt;span class=&quot;c1&quot;&gt;// Start, stop, clear, reset&lt;/span&gt;
				&lt;span class=&quot;c1&quot;&gt;//&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;clear_request&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clear_request&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;idle_bus&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
					&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wskd_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wskd_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;stop_request&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wskd_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;start_request&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;wskd_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stop_request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
			&lt;span class=&quot;nl&quot;&gt;default:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;endcase&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Note that we’re only responding to the last address in the &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axiperf.v&quot;&gt;performance
monitor&lt;/a&gt;’s
address space.  Writes to bit zero
of that address will either start or stop data collection.  A write to bit
one clears the accumulators.  From this, the usage looks like: write &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1&lt;/code&gt;
to start, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt; to stop, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2&lt;/code&gt; to clear and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;3&lt;/code&gt; to clear and then start.&lt;/p&gt;

&lt;p&gt;On a reset, we’ll also clear all of these request registers.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARESETN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;clear_request&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1'b0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;stop_request&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1'b0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;start_request&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1'b0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This logic isn’t perfect, but it’s probably good enough.  For example, what
happens if you write a start request while the design is already running?
Or if you issue a stop request before the start request completes and the
design actually starts?  I may come back later and adjust this logic subtly for
these corner cases, but like I said, it’s probably good enough for now.  (At
least it won’t cause the bus to seize up, like &lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;Xilinx’s AXI-lite template
does&lt;/a&gt;.)&lt;/p&gt;

&lt;p&gt;The read interface for &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axiperf.v&quot;&gt;this performance
monitor&lt;/a&gt;
isn’t really all that different from many others: it’s a giant case statement
depending upon the AXI address.  Remember, though, when reading
this case statement below, that the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;arskd_addr&lt;/code&gt; address is not the original
AXI address.  Bits &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[1:0]&lt;/code&gt; have been stripped off to make this a word address.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;axil_read_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OPT_LOWPOWER&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARESETN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;axil_read_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXIL_RVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXIL_RREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;axil_read_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arskd_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;mh&quot;&gt;5'h00&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;active_time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LGCNT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;axil_read_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LGCNT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;active_time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LGCNT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
				&lt;span class=&quot;c1&quot;&gt;// OVERFLOW!&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;axil_read_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
		&lt;span class=&quot;mh&quot;&gt;5'h01&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axil_read_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wr_max_outstanding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
					&lt;span class=&quot;n&quot;&gt;rd_max_outstanding_bursts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
					&lt;span class=&quot;n&quot;&gt;wr_max_burst_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
					&lt;span class=&quot;n&quot;&gt;rd_max_burst_size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;mh&quot;&gt;5'h02&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axil_read_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LGCNT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wr_idle_cycles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;mh&quot;&gt;5'h03&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axil_read_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LGCNT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wr_awburst_count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;mh&quot;&gt;5'h04&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axil_read_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LGCNT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wr_beat_count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;mh&quot;&gt;5'h05&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axil_read_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LGCNT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wr_aw_byte_count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;mh&quot;&gt;5'h06&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axil_read_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LGCNT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wr_w_byte_count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;//&lt;/span&gt;
		&lt;span class=&quot;mh&quot;&gt;5'h07&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axil_read_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LGCNT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wr_slow_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;mh&quot;&gt;5'h08&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axil_read_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LGCNT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wr_stall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;mh&quot;&gt;5'h09&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axil_read_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LGCNT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wr_addr_lag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;mh&quot;&gt;5'h0a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axil_read_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LGCNT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wr_data_lag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;mh&quot;&gt;5'h0b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axil_read_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LGCNT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wr_awr_early&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;mh&quot;&gt;5'h0c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axil_read_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LGCNT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wr_early_beat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;mh&quot;&gt;5'h0d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axil_read_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LGCNT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wr_addr_stall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;mh&quot;&gt;5'h0e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axil_read_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LGCNT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wr_early_stall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;mh&quot;&gt;5'h0f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axil_read_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LGCNT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wr_b_lag_count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;mh&quot;&gt;5'h10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axil_read_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LGCNT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wr_b_stall_count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;mh&quot;&gt;5'h11&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axil_read_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LGCNT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wr_b_end_count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;//&lt;/span&gt;
		&lt;span class=&quot;mh&quot;&gt;5'h12&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;// Sign extend the write bias&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wr_bias&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LGCNT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;axil_read_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;axil_read_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LGCNT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wr_bias&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// Reserved for the first write lag&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// 5'h13: axil_read_data[LGCNT-1:0] &amp;lt;= wr_first_lag;&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;//&lt;/span&gt;
		&lt;span class=&quot;mh&quot;&gt;5'h14&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axil_read_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LGCNT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rd_idle_cycles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;mh&quot;&gt;5'h15&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axil_read_data&lt;/span&gt;	&lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C_AXIL_DATA_WIDTH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C_AXI_ID_WIDTH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mb&quot;&gt;1'b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;rd_max_responding_bursts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;mh&quot;&gt;5'h16&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axil_read_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LGCNT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rd_burst_count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;mh&quot;&gt;5'h17&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axil_read_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LGCNT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rd_beat_count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;mh&quot;&gt;5'h18&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axil_read_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LGCNT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rd_byte_count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;mh&quot;&gt;5'h19&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axil_read_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LGCNT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rd_ar_cycles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;mh&quot;&gt;5'h1a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axil_read_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LGCNT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rd_ar_stalls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;mh&quot;&gt;5'h1b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axil_read_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LGCNT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rd_r_stalls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;mh&quot;&gt;5'h1c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axil_read_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LGCNT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rd_lag_counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;mh&quot;&gt;5'h1d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axil_read_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LGCNT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rd_slow_link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;mh&quot;&gt;5'h1e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axil_read_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LGCNT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rd_first_lag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;mh&quot;&gt;5'h1f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axil_read_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;c1&quot;&gt;// pending_idle,&lt;/span&gt;
				&lt;span class=&quot;c1&quot;&gt;// pending_first_burst,&lt;/span&gt;
				&lt;span class=&quot;c1&quot;&gt;// cleared,&lt;/span&gt;
				&lt;span class=&quot;mh&quot;&gt;28'h0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;perf_err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;triggered&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;clear_request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;start_request&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;nl&quot;&gt;default:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;endcase&lt;/span&gt;

		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OPT_LOWPOWER&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axil_read_ready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;axil_read_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In general we’re just returning various counter values.  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LGCNT&lt;/code&gt; above is the
parameterized width of the various counters.  I use it to help
guarantee that any unused bits are set to zero.&lt;/p&gt;

&lt;p&gt;There are three exceptions to this rule.&lt;/p&gt;

&lt;p&gt;The first exception is the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;active_time&lt;/code&gt; counter.  This counts how many
cycles the &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axiperf.v&quot;&gt;performance
monitor&lt;/a&gt;
has been actively counting.  If this counter
ever rolls over, then all measurements are likely suspect.  (All other
accumulators will have values less than this one.)  For this reason, we’ll
check for rollover and set this value to all ones if it ever happens.  Anything
less than all ones, therefore, is an indication of a valid performance
measurement.&lt;/p&gt;

&lt;p&gt;The second exception is the write bias count.  This is a count of the number
of times the write address shows up prior to the write data.  It’s a signed
number, however, since the write data might show up first.  Therefore, we
need to check the sign bit of this value and sign extend it as necessary.&lt;/p&gt;

&lt;p&gt;The third exception has to do with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OPT_LOWPOWER&lt;/code&gt; parameter.  This is
an option I’ve been working with as part of an ongoing experiment to use
a little bit of extra logic to force values, particularly those with a
potential high fanout, to zero unless they are qualified as having some meaning
or other.  In this case, if &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RVALID&lt;/code&gt; isn’t also going to transition high, then
let’s not allow these flip-flops to toggle either.  This will lead to a later
assertion that if &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;!RVALID&lt;/code&gt; then &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RDATA&lt;/code&gt; must equal zero.&lt;/p&gt;

&lt;p&gt;That’s the &lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;AXI-lite
handling&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The next piece of this logic is the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;triggered&lt;/code&gt; flag.  I use this to help
guarantee that data are only accumulated between times when the logic is idle.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARESETN&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clear_request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;triggered&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;idle_bus&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start_request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;triggered&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1'b1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stop_request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;triggered&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This allows our counters to all have the general form of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;active_time&lt;/code&gt;
counter below.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARESETN&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clear_request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;active_time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;triggered&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;active_time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LGCNT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;active_time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;active_time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;active_time&lt;/code&gt; counter captures the total number of clock cycles that
our collection is active.  This is the only counter we have that uses more
than &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LGCNT&lt;/code&gt; bits–allowing us an ability to detect overflow in any of our
accumulators if ever the high order of this one counter is set.&lt;/p&gt;

&lt;p&gt;We’ll need one more control signal before diving into the gathering of
statistics, and that is the flag to tell us if the bus is idle or not.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARESETN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;r_idle_bus&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;perf_err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;r_idle_bus&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_AWVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M_AXI_WVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M_AXI_ARVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;r_idle_bus&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wr_aw_outstanding&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_BVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M_AXI_BREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wr_w_outstanding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_BVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M_AXI_BREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rd_outstanding_bursts&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_RVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M_AXI_RREADY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M_AXI_RLAST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;r_idle_bus&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;idle_bus&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r_idle_bus&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_AWVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_WVALID&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_ARVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Let me point out quickly here, to no one’s surprise I’m sure, that I’ve
adopted Xilinx’s AXI nomenclature.  I’ve therefore prefixed my
&lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;AXI-lite slave&lt;/a&gt;
signals with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;S_AXIL_&lt;/code&gt;, whereas the signals of the bus we are monitoring are
all prefixed with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;M_AXI_&lt;/code&gt;.  Hence, the check above is to determine if the
bus we are monitoring is idle or not.&lt;/p&gt;

&lt;p&gt;In general, if any valid request signal is high than the bus isn’t idle.&lt;/p&gt;

&lt;p&gt;We’ll get to some of the counters used in this logic in a moment.  For
now, understand that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wr_aw_outstanding&lt;/code&gt; is a measure of the number of
bursts outstanding on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AW*&lt;/code&gt; channel and the other &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;*_outstanding*&lt;/code&gt;
counters are similarly defined.&lt;/p&gt;

&lt;p&gt;Let’s talk about the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;perf_err&lt;/code&gt; signal for a moment.  This signal indicates
an unrecoverable error in the performance monitor logic.&lt;br /&gt;
This is the error indicating a bus idle tracking counter overflow.
It’s based upon overflow measures for three counters: the number of outstanding
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AW*&lt;/code&gt; bursts, the number of outstanding &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;W*&lt;/code&gt; bursts, and the number of
outstanding read bursts.  If any of these counters ever overflow, then we can
no longer tell when the bus is idle and therefore no longer know when to start
or stop measuring bus performance.&lt;/p&gt;

&lt;p&gt;As a result, once &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;perf_err&lt;/code&gt; gets set, then the bus will never return idle
until the next reset.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARESETN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;perf_err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wr_aw_err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wr_w_err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rd_err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;perf_err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Let’s now move on to the various counters, starting with the write half
of the interface.&lt;/p&gt;

&lt;h3 id=&quot;write-accumulators&quot;&gt;Write Accumulators&lt;/h3&gt;

&lt;p&gt;I’m not sure that there’s necessarily a good order to present accumulators
for the write transactions, so we’ll just kind of work our way through them
in a seemingly pseudo-random fashion.&lt;/p&gt;

&lt;p&gt;Our first statistic captures the maximum write burst size.  This is useful
for knowing to what extent burst accesses were used on a given link.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;wr_max_burst_size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARESETN&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clear_request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;wr_max_burst_size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;triggered&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_AWVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M_AXI_AWLEN&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wr_max_burst_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;wr_max_burst_size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M_AXI_AWLEN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wr_awburst_count&lt;/code&gt; is a count of the number of burst requests that the design
has received in total.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;wr_awburst_count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARESETN&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clear_request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;wr_awburst_count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;triggered&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M_AXI_AWVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M_AXI_AWREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;wr_awburst_count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wr_awburst_count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wr_beat_count&lt;/code&gt; counts the number of write beats, that is the number of times
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WVALID &amp;amp;&amp;amp; WREADY&lt;/code&gt; are true–regardless of how much information is contained
in any given beat.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;wr_beat_count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARESETN&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clear_request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;wr_beat_count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;triggered&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M_AXI_WVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M_AXI_WREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;wr_beat_count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wr_beat_count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In order to measure the effects of narrow bursts, we’ll keep track of how
many bytes may be transmitted in total.  This may well be less than the
number of bytes the bus is capable of transmitting.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARESETN&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clear_request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;wr_aw_byte_count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;triggered&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M_AXI_AWVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M_AXI_AWREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;wr_aw_byte_count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wr_aw_byte_count&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;24'b0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M_AXI_AWLEN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}+&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;32'h1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M_AXI_AWSIZE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This now captures the maximum number of bytes that may be transmitted, given
the burst information.  But what if the bus doesn’t set &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AWSIZE&lt;/code&gt; appropriately?
The bus might contain less than a word of information in that case.  Knowing
how much data is contained in any given beat is an important measure, so let’s
capture that by counting the number of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WSTRB&lt;/code&gt; bits that are high in any given
beat.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;wstrb_count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ik&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ik&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C_AXI_DATA_WIDTH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ik&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ik&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_WSTRB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ik&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;wstrb_count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wstrb_count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We’ll then accumulate this &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wstrb_count&lt;/code&gt; into a total write byte count.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARESETN&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clear_request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;wr_w_byte_count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;triggered&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M_AXI_WVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M_AXI_WREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;wr_w_byte_count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wr_w_byte_count&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LGCNT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C_AXI_DATA_WIDTH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mb&quot;&gt;1'b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wstrb_count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We also need to keep track of whether or not the bus is idle from a write
perspective.  This is different from our regular performance counters, in
that this counter is never reset by anything other than an actual bus reset.&lt;/p&gt;

&lt;p&gt;Since there’s the potential that this counter might overflow, we’ll check
for and keep track of a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wr_aw_err&lt;/code&gt; here.  If there is a counter overflow
in this counter, however, &lt;em&gt;ALL&lt;/em&gt; statistics following will be suspect.
Indeed, we’d then never know when the bus is idle in order to start or stop
counting.  This makes this a rather catastrophic error–and one that can only
ever be fixed on a reset–and only avoided by using a wider burst counter.&lt;/p&gt;

&lt;p&gt;With that aside, let’s keep track of how many bursts are outstanding.
We’ll start by looking at the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AW*&lt;/code&gt; channel, and accumulate this value
into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wr_aw_outstanding&lt;/code&gt;.  As is &lt;a href=&quot;/blog/2017/06/12/minimizing-luts.html&quot;&gt;my
custom&lt;/a&gt;, I’ll
also use a flag, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wr_aw_zero_outstanding&lt;/code&gt;, to keep track of when this counter
is zero.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;wr_aw_outstanding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;wr_aw_zero_outstanding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;wr_aw_err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARESETN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;wr_aw_outstanding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;wr_aw_zero_outstanding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;wr_aw_err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wr_aw_err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M_AXI_AWVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M_AXI_AWREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;M_AXI_BVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M_AXI_BREADY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;mb&quot;&gt;2'b10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wr_aw_err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wr_aw_outstanding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wr_aw_outstanding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;wr_aw_zero_outstanding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
	&lt;span class=&quot;mb&quot;&gt;2'b01&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;wr_aw_outstanding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wr_aw_outstanding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;wr_aw_zero_outstanding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wr_aw_outstanding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
	&lt;span class=&quot;nl&quot;&gt;default:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;endcase&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The next step is to keep track of the maximum number of outstanding
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AW*&lt;/code&gt; bursts in a counter called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wr_aw_max_outstanding&lt;/code&gt;.  Unlike
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wr_aw_outstanding&lt;/code&gt; above, this is one of our accumulators.  Therefore it gets
zeroed on either a reset or a clear, and it only accumulates once we’ve been
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;triggered&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;wr_aw_max_outstanding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARESETN&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clear_request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;wr_aw_max_outstanding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;triggered&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wr_aw_max_outstanding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wr_aw_outstanding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;wr_aw_max_outstanding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wr_aw_outstanding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We’ll now repeat these same two calculations above, but this time looking at
the maximum number of bursts present on the write data channel instead of
the write address channel.&lt;/p&gt;

&lt;p&gt;As before, the first measure is independent of whether or not we have been
triggered.  This measure counts the number of write bursts that are outstanding.
We used this above to know if the channel was idle.  As such, it must
always count–whether or not we are triggered, and any overflow must be
flagged as an &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axiperf.v&quot;&gt;performance
monitor&lt;/a&gt;
error requiring a bus reset.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;wr_w_outstanding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;wr_w_zero_outstanding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;wr_w_err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARESETN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;wr_w_outstanding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;wr_w_zero_outstanding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;wr_w_err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wr_w_err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M_AXI_WVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M_AXI_WREADY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M_AXI_WLAST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;M_AXI_BVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M_AXI_BREADY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;mb&quot;&gt;2'b10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wr_w_err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wr_w_outstanding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wr_w_outstanding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;wr_w_zero_outstanding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
	&lt;span class=&quot;mb&quot;&gt;2'b01&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;wr_w_outstanding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wr_w_outstanding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;wr_w_zero_outstanding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wr_w_outstanding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
	&lt;span class=&quot;nl&quot;&gt;default:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;endcase&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We’ll also keep track of the maximum number of outstanding bursts on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;W*&lt;/code&gt;
channel.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;wr_w_max_outstanding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARESETN&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clear_request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;wr_w_max_outstanding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;triggered&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wr_w_outstanding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wr_in_progress&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
					&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wr_max_outstanding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;wr_w_max_outstanding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wr_w_outstanding&lt;/span&gt;
						&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wr_in_progress&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Note that this calculation depends on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wr_in_progress&lt;/code&gt; flag that we
alluded to above.  We’ll get to that in a moment.  We need that
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wr_in_progress&lt;/code&gt; flag here in order to include the burst that is currently
in process when calculating this maximum number of outstanding values.&lt;/p&gt;

&lt;p&gt;The next question is, what is the total maximum number of all outstanding
bursts?  This number is a bit trickier, since the maximum number might
take place on either the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AW*&lt;/code&gt; channel or the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;W*&lt;/code&gt; channel.  Therefore, let’s
take a second clock to resolve between these two possible maximum values,
and place the absolute maximum burst count into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wr_max_outstanding&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;wr_now_outstanding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wr_w_max_outstanding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wr_aw_max_outstanding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wr_now_outstanding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;wr_now_outstanding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wr_aw_max_outstanding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;wr_max_outstanding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARESETN&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clear_request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;wr_max_outstanding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;triggered&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wr_now_outstanding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wr_max_outstanding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;wr_max_outstanding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wr_now_outstanding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We’ve alluded to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wr_in_progress&lt;/code&gt; signal several times now.  This is the
signal used in Fig. 7 above to indicate if we were mid-write data packet.
As with many of the other signals, this one is fairly simple to calculate–it’s
just a simple 1-bit signal.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;wr_in_progress&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARESETN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;wr_in_progress&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_WVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_WREADY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M_AXI_WLAST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;wr_in_progress&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;wr_in_progress&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In this definition, there are two important conditions.  The first one is
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WVALID&lt;/code&gt; but not &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WREADY &amp;amp;&amp;amp; WLAST&lt;/code&gt;.  In this case, a burst is beginning or
in progress.  However, if &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WREADY &amp;amp;&amp;amp; WLAST&lt;/code&gt; then we’ve just received the
last beat of this burst and so there’s no longer any write data burst in
progress.&lt;/p&gt;

&lt;p&gt;The biggest group left, however, is the group we introduced in our write
signal table in Fig. 7 above.  For brevity, we’ll ignore the basic reset and
setup logic for these register counters.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// Reset these counters initially&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARESETN&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clear_request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// Reset the counters on a reset or clear request&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;triggered&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Once we ignore this setup, we get directly to the meat of counting our
critical performance measures.  These should read very similar to our
table above in Fig. 7.  Indeed, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;casez&lt;/code&gt; expression below turns the
logic essentially into Fig. 7, so that when building these expressions I
often cross referenced the two to know that I was getting them right.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;casez&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wr_aw_zero_outstanding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wr_w_zero_outstanding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;wr_in_progress&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;M_AXI_AWVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M_AXI_AWREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;M_AXI_WVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;M_AXI_WREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;M_AXI_BVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;M_AXI_BREADY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;mb&quot;&gt;9'b0000?0???&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wr_idle_cycles&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wr_idle_cycles&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;//&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Throughput measures&lt;/span&gt;
	&lt;span class=&quot;mb&quot;&gt;9'b1?1??0???&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wr_slow_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wr_slow_data&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;mb&quot;&gt;9'b1????10??&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wr_stall&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wr_stall&lt;/span&gt;      &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// Stall #1&lt;/span&gt;
	&lt;span class=&quot;mb&quot;&gt;9'b0?1??10??&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wr_stall&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wr_stall&lt;/span&gt;      &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// Stall #2&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;//&lt;/span&gt;
	&lt;span class=&quot;mb&quot;&gt;9'b0??0?11??&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wr_early_beat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wr_early_beat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// Before AWV&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// 9'b?????11??: wr_beat   &amp;lt;= wr_beat       + 1;	// Elsewhere&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;//&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Lag measures&lt;/span&gt;
	&lt;span class=&quot;mb&quot;&gt;9'b000110???&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wr_awr_early&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wr_awr_early&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;mb&quot;&gt;9'b000100???&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wr_addr_stall&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wr_addr_stall&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;mb&quot;&gt;9'b100??0???&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wr_data_lag&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wr_data_lag&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;mb&quot;&gt;9'b010??0???&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wr_addr_lag&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wr_addr_lag&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;mb&quot;&gt;9'b0?1??0???&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wr_addr_lag&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wr_addr_lag&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;mb&quot;&gt;9'b0?0??10??&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wr_early_stall&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wr_early_stall&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;mb&quot;&gt;9'b110??0?0?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wr_b_lag_count&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wr_b_lag_count&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;mb&quot;&gt;9'b110??0?10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wr_b_stall_count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wr_b_stall_count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;mb&quot;&gt;9'b110??0?11&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wr_b_end_count&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wr_b_end_count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;//&lt;/span&gt;
	&lt;span class=&quot;nl&quot;&gt;default:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;endcase&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;As I mentioned above, it’s thanks to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;casez()&lt;/code&gt; statement at the beginning
of this block that it follows the figure quite closely.  (Yes, some of the
lines are out of order, and the names are a bit different–but it is the
same thing.)&lt;/p&gt;

&lt;p&gt;The last item of interest is the write bias–measuring how often the write
address is accepted prior to the write data.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;wr_bias&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARESETN&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clear_request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;wr_bias&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;triggered&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wr_aw_zero_outstanding&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_AWVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_AWREADY&lt;/span&gt;
					&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_WVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_WREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wr_w_zero_outstanding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wr_in_progress&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;//&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;// Write address precedes data -- bias towards address&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;//&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;wr_bias&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wr_bias&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wr_aw_zero_outstanding&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_AWVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_ARREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_WVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_AWVALID&lt;/span&gt;
					&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_WREADY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_AWREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wr_w_zero_outstanding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wr_in_progress&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;//&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;// Data precedes data -- bias away from the address&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;//&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;wr_bias&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wr_bias&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;These should be sufficient to give us a detailed insight into how well
requests are responding to our bus.&lt;/p&gt;

&lt;h3 id=&quot;read-accumulators&quot;&gt;Read Accumulators&lt;/h3&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left; padding: 25px&quot;&gt;&lt;caption&gt;Fig 8. A common AXI misconception found on Xilinx's forums&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;/img/axiperf/ddr3-limitation.svg&quot;&gt;&lt;img src=&quot;/img/axiperf/ddr3-limitation.svg&quot; alt=&quot;&quot; width=&quot;360&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Let’s now move on to the read side of the AXI bus.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;As you’ll recall&lt;/a&gt;, the AXI
bus has independent read and write halves.  As such, the measures below are
completely independent of the write measures above.  The only place where
the two come together &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axiperf.v&quot;&gt;in this
design&lt;/a&gt;
is when determining whether or not the bus is idle in order to start (or stop)
data collection.&lt;/p&gt;

&lt;p&gt;This doesn’t necessarily mean that the end physical device can support both
directions, just that we are measuring performance in the middle of a link
that supports reads and writes simultaneously.&lt;/p&gt;

&lt;p&gt;Our first measure, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rd_max_burst_size&lt;/code&gt;, simply looks for the maximum size
burst.  You can think of this as a measure of how well burst transactions
are being used on this link.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARESETN&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clear_request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;rd_max_burst_size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;triggered&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_ARVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M_AXI_ARLEN&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rd_max_burst_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;rd_max_burst_size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M_AXI_ARLEN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Next, we’ll count up how many bursts we’ve seen in total into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rd_burst_count&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARESETN&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clear_request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;rd_burst_count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;triggered&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M_AXI_RVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M_AXI_RREADY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M_AXI_RLAST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;rd_burst_count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rd_burst_count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rd_byte_count&lt;/code&gt; is a bit different.  Unlike writes, there’s no read strobe
signal to accumulate.  Instead, the masters and slaves on the bus need to keep
track of which values on the bus are valid and which are not.  We don’t
have access to that information here.  What we do have access to is the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ARSIZE&lt;/code&gt;
field.  We can use that to count the number of read bytes requested.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARESETN&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clear_request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;rd_byte_count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;triggered&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_ARVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M_AXI_ARREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;rd_byte_count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rd_byte_count&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;24'h0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M_AXI_ARLEN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;32'h1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M_AXI_ARSIZE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Note that, if &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ARSIZE&lt;/code&gt; is always the size of the bus, then the number of bytes
requested will simply be the sum of all of the read beats times the size of
the bus in bytes.&lt;/p&gt;

&lt;p&gt;Speaking of read beats, we’ll need that counter as well.  As I just mentioned,
though, if &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ARSIZE&lt;/code&gt; is a constant, than this counter and the one above
will always be proportional to one another.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;rd_beat_count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARESETN&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clear_request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;rd_beat_count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;triggered&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_RVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M_AXI_RREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;rd_beat_count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rd_beat_count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This brings us to our counter of the number of outstanding bursts.  As with
the counters of the current number of outstanding write address or write data
bursts, this counter is only reset on a bus reset.  It’s used for determining
if the bus is idle or not and so we need its value even if the bus is busy.
Also, as with those counters, if this counter ever overflows then we’ll no
longer be able to tell when the bus is idle and the &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axiperf.v&quot;&gt;performance
monitor&lt;/a&gt;
will be irreparably broken until the next bus reset.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;rd_outstanding_bursts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;rd_err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARESETN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;rd_outstanding_bursts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;rd_err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rd_err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M_AXI_ARVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M_AXI_ARREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;M_AXI_RVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M_AXI_RREADY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M_AXI_RLAST&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;mb&quot;&gt;2'b10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rd_err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rd_outstanding_bursts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rd_outstanding_bursts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;mb&quot;&gt;2'b01&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rd_outstanding_bursts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rd_outstanding_bursts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;nl&quot;&gt;default:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;endcase&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;From here, it’s not much more work to calculate the maximum number of
outstanding read bursts at any given time.  This will be one of our performance
measures, capturing the extent to which the read channel is pipelined in the
first place.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARESETN&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clear_request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;rd_max_outstanding_bursts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;triggered&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rd_outstanding_bursts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rd_max_outstanding_bursts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;rd_max_outstanding_bursts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rd_outstanding_bursts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;A &lt;a href=&quot;/blog/2019/05/29/demoaxi.html&quot;&gt;good AXI slave&lt;/a&gt;
will be able to process as many outstanding read bursts as
it takes to keep its read pipeline full.  This measure, however, might be
a bit misleading since it captures nothing about &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ARLEN&lt;/code&gt; in the process.
So we’ll need to use it with a grain of salt.  It’s really more of an
&lt;em&gt;indicator&lt;/em&gt; of pipelining, rather than a true measure of a slaves pipeline
capabilities.&lt;/p&gt;

&lt;p&gt;The next step, however, is a bit more challenging.  We need to keep track of
whether or not a read is in progress at any given time.  We’ll consider a read
to be in progress from the time the first read data value is returned
(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RVALID &amp;amp;&amp;amp; (!RREADY || !RLAST)&lt;/code&gt;) until the last read data value is returned
(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RVALID &amp;amp;&amp;amp; RREADY &amp;amp;&amp;amp; RLAST&lt;/code&gt;).  The only problem is … how shall we deal
with AXI ID’s?  More specifically, AXI allows read data to be returned out of
order.  It may be that there are multiple bursts being returned, across
different ID’s, all at the same time.  That means, then, that we’ll need
to keep track of these counters on a &lt;em&gt;per ID&lt;/em&gt; basis.  That’s not a problem
when you have 1-16 ID’s.  However, it may render this &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axiperf.v&quot;&gt;performance
monitor&lt;/a&gt;
unusable at the output of the PS within an ARM-based system, if the PS is
producing an ID width of 16, and so requiring us to maintain counters for
65,536 separate ID’s.&lt;/p&gt;

&lt;p&gt;This may force us to come back to this &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axiperf.v&quot;&gt;performance
monitor&lt;/a&gt;
at a later time in order to address this limitation.&lt;/p&gt;

&lt;p&gt;For now, let’s just count the number of outstanding bursts on each individual
channel.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;generate&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gk&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C_AXI_ID_WIDTH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PER_ID_READ_STATISTICS&lt;/span&gt;

		&lt;span class=&quot;c1&quot;&gt;// rd_outstanding_bursts_id[gk], rd_nonzero_outstanding_id[gk]&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;rd_outstanding_bursts_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;rd_nonzero_outstanding_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARESETN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;rd_outstanding_bursts_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;rd_nonzero_outstanding_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M_AXI_ARVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M_AXI_ARREADY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_ARID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;M_AXI_RVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M_AXI_RREADY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M_AXI_RLAST&lt;/span&gt;
					&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_RID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;mb&quot;&gt;2'b10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;rd_outstanding_bursts_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
					&lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rd_outstanding_bursts_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;rd_nonzero_outstanding_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1'b1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
		&lt;span class=&quot;mb&quot;&gt;2'b01&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;rd_outstanding_bursts_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
					&lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rd_outstanding_bursts_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;rd_nonzero_outstanding_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
					&lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rd_outstanding_bursts_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
		&lt;span class=&quot;nl&quot;&gt;default:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;endcase&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You may wish to note that we haven’t checked for overflow here.  That’s
simply because these counters have the same width as the 
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rd_outstanding_bursts&lt;/code&gt; master counter above.  If we can guarantee that
the master counter never overflows, then none of these will overflow
either.&lt;/p&gt;

&lt;p&gt;We’re also going to keep track of whether or not a burst is in flight on this
or any channel.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;rd_bursts_in_flight&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARESETN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;rd_bursts_in_flight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_RVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M_AXI_RID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_RREADY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M_AXI_RLAST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;rd_bursts_in_flight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1'b0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;rd_bursts_in_flight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1'b1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;endgenerate&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Looking back at Fig. 6, we’ll need this value.  It’s just that Fig. 6 doesn’t
reflect the fact that whether or not a burst is in flight is an AXI ID
dependent statistic.  Here you can see that it must be.&lt;/p&gt;

&lt;p&gt;Our next measure is to determine the maximum number of read bursts in flight
at any given time.  This is a measure of how out of order the read link
is.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;rd_total_in_flight&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ik&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ik&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C_AXI_ID_WIDTH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ik&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ik&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rd_bursts_in_flight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ik&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;rd_total_in_flight&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rd_total_in_flight&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OPT_LOWPOWER&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARESETN&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;triggered&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;rd_responding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;rd_responding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rd_total_in_flight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rd_responding&lt;/code&gt; value is precisely that–a measure of the maximum number
of read bursts that are responding at any given time.&lt;/p&gt;

&lt;p&gt;Now that we know this value, we can calculate it’s maximum.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARESETN&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clear_request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;rd_max_responding_bursts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;triggered&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rd_responding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rd_max_responding_bursts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;rd_max_responding_bursts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rd_responding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rd_r_stalls&lt;/code&gt; measure counts how often the master stalls the read
return channel.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARESETN&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clear_request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;rd_r_stalls&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;triggered&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M_AXI_RVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_RREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;rd_r_stalls&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rd_r_stalls&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In general, &lt;a href=&quot;https://en.wikipedia.org/wiki/Back_pressure&quot;&gt;back pressure&lt;/a&gt;
is a &lt;em&gt;bad&lt;/em&gt; thing, although there are some times that it may be required.
This counter, then, will be an indication that we may need to dig deeper
into what’s going on with our bus to know why the master is generating
&lt;a href=&quot;https://en.wikipedia.org/wiki/Back_pressure&quot;&gt;back pressure&lt;/a&gt; in the first
place.&lt;/p&gt;

&lt;p&gt;This brings us to our last counters, the rest of the per cycle counters
outlined in Fig. 6 above.&lt;/p&gt;

&lt;p&gt;As before, we’ll skip the boilerplate initialization and reset logic for
brevity.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// Initially clear accumulators&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARESETN&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clear_request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// Clear read accumulators&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;triggered&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We’ve already counted read beats and read stalls above, therefore the only
other cycles of interest will be those for which &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RVALID&lt;/code&gt; is low.&lt;/p&gt;

&lt;p&gt;This includes the number of cycles, following the first &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RVALID&lt;/code&gt;, where
the slave isn’t producing any data.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_RVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rd_bursts_in_flight&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;rd_slow_link&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rd_slow_link&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Note that the check above is across all possible read ID’s, since
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rd_bursts_in_flight&lt;/code&gt; signal is a vector of single-bit flags indexed by
the AXI read ID.&lt;/p&gt;

&lt;p&gt;We’ll also want to know how many &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ARVALID&lt;/code&gt;s have been received for which we
are still waiting on the associated data.  Again, this check has to be done
across all possible AXI IDs.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;			&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rd_nonzero_outstanding_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;rd_lag_counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rd_lag_counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If no reads have been requested, and no reads are in progress, then all that’s
left is to look at the cases where &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ARVALID&lt;/code&gt; and/or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ARREADY&lt;/code&gt; are true.&lt;/p&gt;

&lt;p&gt;If &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ARVALID&lt;/code&gt; is low, then nothing’s going on.  This cycle is idle.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;			&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_ARVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;rd_idle_cycles&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rd_idle_cycles&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;On the other hand, if &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ARVALID&lt;/code&gt; is high but the slave is stalling the bus
with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;!ARREADY&lt;/code&gt;, that’s something we might be able to speed up with a 
&lt;a href=&quot;/blog/2019/05/22/skidbuffer.html&quot;&gt;skid buffer&lt;/a&gt;,
so we need to keep track of it.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;			&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_ARVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_ARREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;rd_ar_stalls&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rd_ar_stalls&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Remember, this isn’t the total amount of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ARVALID &amp;amp;&amp;amp; !ARREADY&lt;/code&gt; clock cycles.
Instead, this is some distance into a cascaded if structure.  That’s to help
us disassociate read address stalls that might be caused by other potential
activity on the bus–such as an ongoing read already in progress forcing this
request to stall–from read address stalls that need to be looked into.&lt;/p&gt;

&lt;p&gt;Finally, if &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ARVALID &amp;amp;&amp;amp; ARREADY&lt;/code&gt; then this is the first cycle of a read.  As
with the read address stalls, this is different from the count of all
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ARVALID &amp;amp;&amp;amp; ARREADY&lt;/code&gt; cycles, which is our burst count above.  Instead, this
is a count of the number of times the channel goes from completely idle to
having something in it.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;			&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;rd_ar_cycles&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rd_ar_cycles&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;After using this &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axiperf.v&quot;&gt;performance
monitor&lt;/a&gt; for a
while, I decided I needed one more measure as well.  This is the measure from
the first &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ARVALID&lt;/code&gt; signal, when the read side is otherwise idle, to the first
corresponding &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RVALID&lt;/code&gt; signal.&lt;/p&gt;

&lt;p&gt;To grab this statistic, I first created a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rd_first&lt;/code&gt; measure.  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rd_first&lt;/code&gt; is
set true on the first &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ARVALID&lt;/code&gt; when the read bus is idle.  It’s then
cleared by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RVALID&lt;/code&gt;.  During this time, we’ll accumulate an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rd_first_lag&lt;/code&gt;
counter.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARESETN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;rd_first&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1'b1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_RVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;rd_first&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1'b0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_ARVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rd_nonzero_outstanding_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;rd_first&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1'b1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARESETN&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clear_request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;rd_first_lag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;triggered&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rd_first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;rd_first_lag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rd_first_lag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This statistic turned into one of the gold mines of this &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axiperf.v&quot;&gt;performance
monitor&lt;/a&gt;,
providing the read latency measures I was expecting and calculating based
upon known AXI slave performance–but more on that in a moment.&lt;/p&gt;

&lt;p&gt;Altogether, that’s the Verilog implementation of our &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axiperf.v&quot;&gt;performance
monitor&lt;/a&gt;.  Now
we need to hook it up and try to measure something useful to see how close
these measures are to anything meaningful.&lt;/p&gt;

&lt;h2 id=&quot;test-setup&quot;&gt;Test Setup&lt;/h2&gt;

&lt;p&gt;I decided to test &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axiperf.v&quot;&gt;this performance
monitor&lt;/a&gt;
on my &lt;a href=&quot;https://github.com/ZipCPU/axidmacheck&quot;&gt;AXI DMA Check design&lt;/a&gt;, as
diagrammed in Fig. 9 below.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 9. The design under test: A CPU and a bunch of RAM&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;/img/axiperf/cpu-blocks.svg&quot;&gt;&lt;img src=&quot;/img/axiperf/cpu-blocks.svg&quot; alt=&quot;&quot; width=&quot;780&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;The &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; enabled version of the
design remains, for the time being, in a &lt;a href=&quot;https://github.com/ZipCPU/axidmacheck/tree/zipcpu&quot;&gt;special ZipCPU branch of the
repository&lt;/a&gt;, where I’ve
been testing out the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;’s AXI
memory controllers–but I’m likely to merge it soon enough.&lt;/p&gt;

&lt;p&gt;It should surprise no one that I used
&lt;a href=&quot;https://github.com/ZipCPU/autofpga&quot;&gt;AutoFPGA&lt;/a&gt; to connect several of these
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axiperf.v&quot;&gt;performance
monitor&lt;/a&gt;s
to the bus.  You can find the &lt;a href=&quot;https://github.com/ZipCPU/axidmacheck/blob/zipcpu/autodata/axiperf.txt&quot;&gt;generic performance monitor AutoFPGA
configuration here&lt;/a&gt;.
From this basic configuration, I can easily modify the configuration to
connect the &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axiperf.v&quot;&gt;performance
monitor&lt;/a&gt;
to &lt;a href=&quot;https://github.com/ZipCPU/axidmacheck/blob/zipcpu/autodata/cpuperf.txt&quot;&gt;both the CPU’s instruction and data
interfaces&lt;/a&gt;,
and the &lt;a href=&quot;https://github.com/ZipCPU/axidmacheck/blob/zipcpu/autodata/ramperf.txt&quot;&gt;AXI block RAM
interface&lt;/a&gt;.
There’s also configuration files to connect the &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axiperf.v&quot;&gt;performance
monitor&lt;/a&gt;
to the various AXI DMAs within &lt;a href=&quot;https://github.com/ZipCPU/axidmacheck&quot;&gt;this
design&lt;/a&gt;: the &lt;a href=&quot;https://github.com/ZipCPU/axidmacheck/blob/zipcpu/autodata/dmaperf.txt&quot;&gt;AXI MM2MM
DMA&lt;/a&gt;,
&lt;a href=&quot;https://github.com/ZipCPU/axidmacheck/blob/zipcpu/autodata/s2mmperf.txt&quot;&gt;S2MM
DMA&lt;/a&gt;,
and the &lt;a href=&quot;https://github.com/ZipCPU/axidmacheck/blob/zipcpu/autodata/mm2sperf.txt&quot;&gt;MM2S
DMA&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;That’s the good news.  The not so good news?  I don’t yet have a test
case that includes the DMAs.  However, I did have a copy of
&lt;a href=&quot;https://en.wikipedia.org/wiki/Dhrystone&quot;&gt;Dhrystone&lt;/a&gt; lying around–so I figured
I’d test this on &lt;a href=&quot;https://en.wikipedia.org/wiki/Dhrystone&quot;&gt;Dhrystone&lt;/a&gt; to see
how well it worked.&lt;/p&gt;

&lt;p&gt;From the configuration file, you can find the &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axiperf.v&quot;&gt;AXI performance
monitor&lt;/a&gt;
C header insert:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#ifndef	AXIPERF_H
#define	AXIPERF_H
&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#define	AXIPERF_START		1
#define	AXIPERF_STOP		0
#define	AXIPERF_CLEAR		2
#define	AXIPERF_TRIGGERED	4
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;AXIPERF_S&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;p_active&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p_burstsz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p_wridles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p_awrbursts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p_wrbeats&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;p_awbytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p_wbytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p_wrslowd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p_wrstalls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p_wraddrlag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;p_wrdatalag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p_awearly&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p_wrearlyd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p_awstall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;p_wr_early_stall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p_wrblags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p_wrbstall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p_wrbend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;p_wrbias&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p_wrunused&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;p_rdidles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p_rdmaxb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p_rdbursts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p_rdbeats&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p_rdbytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;p_arcycles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p_arstalls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p_rdrstalls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p_rdlag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p_rdslow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;p_rdfirst_lag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;p_control&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AXIPERF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;#endif&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This defines the names I’m going to give to the various registers of the &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axiperf.v&quot;&gt;AXI
performance
monitor&lt;/a&gt;.
We’ll use these in a moment.&lt;/p&gt;

&lt;p&gt;Before we can use them, though, we’ll need to know their addresses in the
system address map.   Once
&lt;a href=&quot;https://github.com/ZipCPU/autofpga&quot;&gt;AutoFPGA&lt;/a&gt; &lt;a href=&quot;/zipcpu/2019/09/03/address-assignment.html&quot;&gt;assigned
addresses&lt;/a&gt;,
it created the following lines in a &lt;a href=&quot;https://github.com/ZipCPU/axidmacheck/blob/zipcpu/sw/board/board.h&quot;&gt;board definition file&lt;/a&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;volatile&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AXIPERF&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_ramperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AXIPERF&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x00800700&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;volatile&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AXIPERF&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_cpuiperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AXIPERF&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x00800580&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;volatile&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AXIPERF&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_mm2sperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AXIPERF&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x00800680&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;volatile&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AXIPERF&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_dmaperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AXIPERF&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x00800600&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;volatile&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AXIPERF&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_s2mmperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AXIPERF&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x00800780&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;volatile&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AXIPERF&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_cpudperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AXIPERF&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x00800500&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;From this, we can reference the performance registers via such expressions
as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_cpuiperf-&amp;gt;p_active&lt;/code&gt; for the CPU’s instruction bus &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axiperf.v&quot;&gt;performance
monitor&lt;/a&gt;’s
first register, or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_ramperf-&amp;gt;p_control&lt;/code&gt; for the control register on the link
between the
&lt;a href=&quot;/blog/2019/07/17/crossbar.html&quot;&gt;crossbar&lt;/a&gt; and the &lt;a href=&quot;/blog/2019/05/29/demoaxi.html&quot;&gt;AXI block
RAM controller&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The next step is to modify
&lt;a href=&quot;https://en.wikipedia.org/wiki/Dhrystone&quot;&gt;Dhrystone&lt;/a&gt;.  In order to not modify
the actual benchmark itself, we’ll only adjust the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Dhrystone&quot;&gt;Dhrystone&lt;/a&gt; software before the
benchmark test starts and again after the benchmark completes.&lt;/p&gt;

&lt;p&gt;For measuring time, the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; provides
several of &lt;a href=&quot;/zipcpu/2018/04/17/ziptimer.html&quot;&gt;timers&lt;/a&gt; and
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/peripherals/zipcounter.v&quot;&gt;counters&lt;/a&gt;.
There are four &lt;a href=&quot;/zipcpu/2018/04/17/ziptimer.html&quot;&gt;timers&lt;/a&gt;:
three count-down &lt;a href=&quot;/zipcpu/2018/04/17/ziptimer.html&quot;&gt;timers&lt;/a&gt;,
and one special &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/peripherals/zipjiffies.v&quot;&gt;&lt;em&gt;jiffies&lt;/em&gt;
timer&lt;/a&gt; that probably deserves an article all of its own.
There are also &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/peripherals/zipcounter.v&quot;&gt;several
counters&lt;/a&gt;–one
to count instructions, one to count clock ticks, and two others that … aren’t
nearly as relevant.  These were designed for monitoring CPU performance although
this capability hasn’t nearly been exercised well enough yet.  All four of
these &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/peripherals/zipcounter.v&quot;&gt;counters&lt;/a&gt; are basic, &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/peripherals/zipcounter.v&quot;&gt;simple one-up
counters&lt;/a&gt;.
If you write a value to them, you’ll then initialize the counter to that value,
but in all other cases the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/peripherals/zipcounter.v&quot;&gt;counters&lt;/a&gt;
just count up the number of times their respective event occurs.&lt;/p&gt;

&lt;p&gt;So, here are some macros to reference the addresses of two of the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/peripherals/zipcounter.v&quot;&gt;counters&lt;/a&gt;
and the first of the three &lt;a href=&quot;/zipcpu/2018/04/17/ziptimer.html&quot;&gt;timers&lt;/a&gt;–timer A.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#define	INSN_COUNTER	_axilp-&amp;gt;z_mac_icnt
#define	TICK_COUNTER	_axilp-&amp;gt;z_mac_ck
#define	ZTIMER	_axilp-&amp;gt;z_tma&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Why use macros?  I suppose they aren’t really required.  However, by
creating a macro like this, then I can easily adjust where in the design’s
address space macro points.  I can then use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;meld&lt;/code&gt; if necessary to compare
software versions from one design and board/address layout to another.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Dhrystone&quot;&gt;Dhrystone&lt;/a&gt; itself references macros
(or functions) for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Start_Timer()&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Stop_Timer()&lt;/code&gt;.  We can define these
based upon our count down
&lt;a href=&quot;/zipcpu/2018/04/17/ziptimer.html&quot;&gt;timer&lt;/a&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ZTIMER&lt;/code&gt;
above.  We’ll define &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Start_Timer()&lt;/code&gt; to set the
&lt;a href=&quot;/zipcpu/2018/04/17/ziptimer.html&quot;&gt;timer&lt;/a&gt; to its maximum
possible value.  It will then start counting down.  When we come back later to
measure the elapsed time, we’ll subtract the ending counter from the beginning
counter to get a number of elapsed clock ticks.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#define	Start_Timer()	ZTIMER = 0x7fffffff; Begin_Time = 0x7fffffff;
#define	Stop_Timer()	End_Time = Begin_Time - ZTIMER; Begin_Time=0&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Those are the macros we’ll be using.&lt;/p&gt;

&lt;p&gt;Now, before the &lt;a href=&quot;https://en.wikipedia.org/wiki/Dhrystone&quot;&gt;Dhrystone&lt;/a&gt; run
begins, we’ll fire up our three &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axiperf.v&quot;&gt;performance
monitor&lt;/a&gt;s:
one on my &lt;a href=&quot;/blog/2019/05/29/demoaxi.html&quot;&gt;block RAM&lt;/a&gt;,
another on the CPU’s instruction bus master, and a third on the CPU’s data
bus master.  We’ll also clear the instruction and tick
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/peripherals/zipcounter.v&quot;&gt;counters&lt;/a&gt;,
and then start our &lt;a href=&quot;/zipcpu/2018/04/17/ziptimer.html&quot;&gt;timer&lt;/a&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;	&lt;span class=&quot;n&quot;&gt;_ramperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_control&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AXIPERF_START&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;_cpuiperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_control&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AXIPERF_START&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;_cpudperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_control&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AXIPERF_START&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;INSN_COUNTER&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;TICK_COUNTER&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;Start_Timer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Once the &lt;a href=&quot;https://en.wikipedia.org/wiki/Dhrystone&quot;&gt;Dhrystone&lt;/a&gt; benchmark
completes, we’ll stop the
&lt;a href=&quot;/zipcpu/2018/04/17/ziptimer.html&quot;&gt;timer&lt;/a&gt; and measure the
number of ticks that have elapsed.  We can do the same with the instruction
and clock cycle
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/peripherals/zipcounter.v&quot;&gt;counters&lt;/a&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;	&lt;span class=&quot;n&quot;&gt;Stop_Timer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;insn_count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;INSN_COUNTER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;tick_count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TICK_COUNTER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;User_Time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;End_Time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Begin_Time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We’ll then stop the &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axiperf.v&quot;&gt;performance
monitor&lt;/a&gt;s
as well.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;	&lt;span class=&quot;n&quot;&gt;_ramperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_control&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AXIPERF_STOP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;_cpuiperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_control&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AXIPERF_STOP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;_cpudperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_control&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AXIPERF_STOP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Remember the &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axiperf.v&quot;&gt;performance
monitor&lt;/a&gt;s
don’t stop on a dime.  They won’t stop until the busses they monitor are clear.&lt;/p&gt;

&lt;p&gt;The next step is kind of unusual for FPGA work.  I mean, it isn’t really, but
it feels that way.  What’s unusual?  It requires a C-library call.  Why should
that be unusual?  Because the C-library is non-trivial in size and complexity.
FPGAs can often be austere in what resources they have available to them.
Still, the C-library’s convenience isn’t easily matched.  The same is true
for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;float&lt;/code&gt; data type.  While the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; has no
native floating point support, GCC provides a convenient soft floating point
library that can be very useful for something like this.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;	&lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;Clock_Speed&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;100e6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;Elapsed_time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;User_Time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HZ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;Microseconds&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;User_Time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Mic_secs_Per_Second&lt;/span&gt; 
			&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HZ&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Number_Of_Runs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;Dhrystones_Per_Second&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HZ&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Number_Of_Runs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;User_Time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;DMIPS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Dhrystones_Per_Second&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1757&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// Dhrystone scale factor&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;DMIPS_Per_MHz&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DMIPS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;// Simulated 100MHz clock&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Clock ticks used                          : &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%ld (0x%08lx)&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;User_Time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;User_Time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Microseconds for one run through Dhrystone: &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%10.1f &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Microseconds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Dhrystones per Second:                      &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%10.0f &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Dhrystones_Per_Second&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;DMIPS                :                      &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%10.4f &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DMIPS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;DMIPS per MHz        :                      &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%10.4f &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DMIPS_Per_MHz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Insn Count           :                      &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%10d&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;insn_count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Clock Count          :                      &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%10d&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tick_count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The next step is to output the various performance counters.  For now, I’m
just dumping all the counters to the console.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;	&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Category&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;AXI RAM&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t\t&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;CPU-INSN&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;CPU-DATA&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;AllBurstSiz&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;0x%08x&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;0x%08x&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;0x%08x&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	  &lt;span class=&quot;n&quot;&gt;_ramperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_burstsz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_cpuiperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_burstsz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_cpudperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_burstsz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;TotalCycles&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;0x%08x&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;0x%08x&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;0x%08x&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	  &lt;span class=&quot;n&quot;&gt;_ramperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_active&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_cpuiperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_active&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_cpudperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_active&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;WrIdles&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t\t&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;0x%08x&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;0x%08x&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;0x%08x&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	  &lt;span class=&quot;n&quot;&gt;_ramperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_wridles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_cpuiperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_wridles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_cpudperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_wridles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;AwrBursts&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;0x%08x&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;0x%08x&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;0x%08x&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	  &lt;span class=&quot;n&quot;&gt;_ramperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_awrbursts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_cpuiperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_awrbursts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_cpudperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_awrbursts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;WrBeats&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t\t&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;0x%08x&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;0x%08x&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;0x%08x&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	  &lt;span class=&quot;n&quot;&gt;_ramperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_wrbeats&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_cpuiperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_wrbeats&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_cpudperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_wrbeats&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;AwrBytes&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;0x%08x&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;0x%08x&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;0x%08x&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	  &lt;span class=&quot;n&quot;&gt;_ramperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_awbytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_cpuiperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_awbytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_cpudperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_awbytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;WrBytes&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t\t&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;0x%08x&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;0x%08x&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;0x%08x&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	  &lt;span class=&quot;n&quot;&gt;_ramperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_wbytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_cpuiperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_wbytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_cpudperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_wbytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;WrSlowData&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;0x%08x&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;0x%08x&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;0x%08x&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	  &lt;span class=&quot;n&quot;&gt;_ramperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_wrslowd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_cpuiperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_wrslowd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_cpudperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_wrslowd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;WrStalls&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;0x%08x&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;0x%08x&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;0x%08x&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	  &lt;span class=&quot;n&quot;&gt;_ramperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_wrstalls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_cpuiperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_wrstalls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_cpudperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_wrstalls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;WrAddrLag&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;0x%08x&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;0x%08x&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;0x%08x&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	  &lt;span class=&quot;n&quot;&gt;_ramperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_wraddrlag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_cpuiperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_wraddrlag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_cpudperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_wraddrlag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;WrDataLag&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;0x%08x&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;0x%08x&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;0x%08x&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	  &lt;span class=&quot;n&quot;&gt;_ramperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_wrdatalag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_cpuiperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_wrdatalag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_cpudperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_wrdatalag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;AwEarly&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t\t&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;0x%08x&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;0x%08x&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;0x%08x&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	  &lt;span class=&quot;n&quot;&gt;_ramperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_awearly&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_cpuiperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_awearly&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_cpudperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_awearly&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;WrEarlyData&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;0x%08x&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;0x%08x&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;0x%08x&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	  &lt;span class=&quot;n&quot;&gt;_ramperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_wrearlyd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_cpuiperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_wrearlyd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_cpudperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_wrearlyd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;AwStall&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t\t&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;0x%08x&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;0x%08x&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;0x%08x&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	  &lt;span class=&quot;n&quot;&gt;_ramperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_awstall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_cpuiperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_awstall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_cpudperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_awstall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;EWrStalls&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;0x%08x&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;0x%08x&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;0x%08x&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	  &lt;span class=&quot;n&quot;&gt;_ramperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_wr_early_stall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_cpuiperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_wr_early_stall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_cpudperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_wr_early_stall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;WrBLags&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t\t&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;0x%08x&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;0x%08x&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;0x%08x&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	  &lt;span class=&quot;n&quot;&gt;_ramperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_wrblags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_cpuiperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_wrblags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_cpudperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_wrblags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;WrBStall&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;0x%08x&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;0x%08x&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;0x%08x&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	  &lt;span class=&quot;n&quot;&gt;_ramperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_wrbstall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_cpuiperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_wrbstall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_cpudperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_wrbstall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;WrBEND&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t\t&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;0x%08x&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;0x%08x&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;0x%08x&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	  &lt;span class=&quot;n&quot;&gt;_ramperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_wrbend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_cpuiperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_wrbend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_cpudperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_wrbend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;WrBias&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t\t&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;0x%08x&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;0x%08x&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;0x%08x&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	  &lt;span class=&quot;n&quot;&gt;_ramperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_wrbias&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_cpuiperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_wrbias&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_cpudperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_wrbias&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;-------------------------------&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;RdIdles&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t\t&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;0x%08x&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;0x%08x&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;0x%08x&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	  &lt;span class=&quot;n&quot;&gt;_ramperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_rdidles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_cpuiperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_rdidles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_cpudperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_rdidles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;RdMaxB&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t\t&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;0x%08x&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;0x%08x&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;0x%08x&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	  &lt;span class=&quot;n&quot;&gt;_ramperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_rdmaxb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_cpuiperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_rdmaxb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_cpudperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_rdmaxb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;RdBursts&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;0x%08x&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;0x%08x&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;0x%08x&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	  &lt;span class=&quot;n&quot;&gt;_ramperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_rdbursts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_cpuiperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_rdbursts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_cpudperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_rdbursts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;RdBeats&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t\t&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;0x%08x&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;0x%08x&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;0x%08x&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	  &lt;span class=&quot;n&quot;&gt;_ramperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_rdbeats&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_cpuiperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_rdbeats&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_cpudperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_rdbeats&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;RdBytes&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t\t&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;0x%08x&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;0x%08x&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;0x%08x&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	  &lt;span class=&quot;n&quot;&gt;_ramperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_rdbytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_cpuiperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_rdbytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_cpudperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_rdbytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ARCycles&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;0x%08x&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;0x%08x&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;0x%08x&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	  &lt;span class=&quot;n&quot;&gt;_ramperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_arcycles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_cpuiperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_arcycles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_cpudperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_arcycles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ARStalls&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;0x%08x&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;0x%08x&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;0x%08x&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	  &lt;span class=&quot;n&quot;&gt;_ramperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_arstalls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_cpuiperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_arstalls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_cpudperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_arstalls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;RStalls&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t\t&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;0x%08x&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;0x%08x&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;0x%08x&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	  &lt;span class=&quot;n&quot;&gt;_ramperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_rdrstalls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_cpuiperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_rdrstalls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_cpudperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_rdrstalls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;RdLag&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t\t&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;0x%08x&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;0x%08x&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;0x%08x&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	  &lt;span class=&quot;n&quot;&gt;_ramperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_rdlag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_cpuiperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_rdlag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_cpudperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_rdlag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;RdSlow&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t\t&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;0x%08x&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;0x%08x&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;0x%08x&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	  &lt;span class=&quot;n&quot;&gt;_ramperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_rdslow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_cpuiperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_rdslow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_cpudperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_rdslow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;RdFirst&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t\t&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;0x%08x&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;0x%08x&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;0x%08x&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	  &lt;span class=&quot;n&quot;&gt;_ramperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_rdfirst_lag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_cpuiperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_rdfirst_lag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_cpudperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_rdfirst_lag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The problem with these output lines is that none of them are
&lt;a href=&quot;https://www.gnu.org/software/octave/index&quot;&gt;Octave&lt;/a&gt; readable.  This meant that,
during my experiments, I needed to cut/copy/paste these numbers into my
&lt;a href=&quot;https://www.gnu.org/software/octave/index&quot;&gt;Octave&lt;/a&gt; analysis file, while
also reformatting them.  When this just got too annoying to do, I added the
&lt;a href=&quot;https://www.gnu.org/software/octave/index&quot;&gt;Octave&lt;/a&gt; formatting to my
C program test script.&lt;/p&gt;

&lt;p&gt;Then, after working with the numbers some more, I reduced them further into
the following statistics that I’ll be reporting.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Write latency&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;	&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_ramperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_awearly&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_ramperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_awstall&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_ramperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_wrdatalag&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_ramperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_wraddrlag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_ramperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_wrearlyd&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_ramperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_wrblags&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_ramperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_wrbstall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;dnm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_ramperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_awrbursts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dnm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dnm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%sperf_wrlag = [ %1d / %1d,&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prefix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dnm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_cpuiperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_awearly&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_cpuiperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_awstall&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_cpuiperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_wrdatalag&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_cpuiperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_wraddrlag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_cpuiperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_wrearlyd&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_cpuiperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_wrblags&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_cpuiperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_wrbstall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;dnm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_cpuiperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_awrbursts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dnm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dnm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot; %1d / %1d,&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dnm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_cpudperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_awearly&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_cpudperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_awstall&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_cpudperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_wrdatalag&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_cpudperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_wraddrlag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_cpudperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_wrearlyd&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_cpudperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_wrblags&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_cpudperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_wrbstall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;dnm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_cpudperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_awrbursts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dnm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dnm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot; %1d / %1d ];&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dnm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;Write efficiency&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;	&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_ramperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_wrbeats&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;dnm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_ramperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_active&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_ramperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_wrbend&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_ramperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_wridles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dnm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dnm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%sperf_wreff = [ %1d / %1d,&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prefix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dnm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_cpuiperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_wrbeats&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;dnm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_cpuiperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_active&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_cpuiperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_wrbend&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_cpuiperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_wridles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dnm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dnm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot; %1d / %1d,&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dnm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_cpudperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_wrbeats&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;dnm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_cpudperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_active&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_cpudperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_wrbend&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_cpudperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_wridles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dnm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dnm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot; %1d / %1d ];&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dnm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;Write throughput&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;	&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_ramperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_wrbeats&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;dnm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_ramperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_wrbeats&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_ramperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_wrslowd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_ramperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_wrstalls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dnm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dnm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%sperf_wrthruput = [ %1d / %1d,&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prefix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dnm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_cpuiperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_wrbeats&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;dnm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_cpuiperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_wrbeats&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_cpuiperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_wrslowd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_cpuiperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_wrstalls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dnm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dnm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot; %1d / %1d,&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dnm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_cpudperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_wrbeats&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;dnm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_cpudperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_wrbeats&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_cpudperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_wrslowd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_cpudperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_wrstalls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dnm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dnm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot; %1d / %1d ];&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dnm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;Write bias: Is the write address routinely proceeding the data, or the other
way around?&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;	&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_ramperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_wrbias&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;dnm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_ramperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_awrbursts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dnm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dnm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%sperf_wrbias = [ %1d / %1d,&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prefix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dnm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_cpuiperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_wrbeats&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;dnm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_cpuiperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_awrbursts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dnm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dnm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot; %1d / %1d,&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dnm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_cpudperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_wrbeats&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;dnm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_cpudperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_awrbursts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dnm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dnm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot; %1d / %1d ];&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dnm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;Read lag: How many cycles are we spinning per burst waiting for read data to
become available?&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;	&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_ramperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_arstalls&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_ramperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_rdlag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;dnm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_ramperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_rdbursts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dnm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dnm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%sperf_rdlag = [ %1d / %1d,&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prefix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dnm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_cpuiperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_arstalls&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_cpuiperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_rdlag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;dnm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_cpuiperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_rdbursts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dnm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dnm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot; %1d / %1d,&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dnm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_cpudperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_arstalls&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_cpudperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_rdlag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;dnm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_cpudperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_rdbursts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dnm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dnm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot; %1d / %1d ];&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dnm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;Read latency: How many cycles does it take to get the first data response
back from the bus?&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;	&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_ramperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_rdfirst_lag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;dnm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_ramperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_arcycles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dnm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dnm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%sperf_rdlatency = [ %1d / %1d,&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prefix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dnm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_cpuiperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_rdfirst_lag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;dnm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_cpuiperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_arcycles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dnm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dnm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot; %1d / %1d,&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dnm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_cpudperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_rdfirst_lag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;dnm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_cpudperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_arcycles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dnm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dnm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot; %1d / %1d ];&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dnm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;Read efficiency: Out of all of the read cycles, what percentage are actually
transmitting read data?&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;	&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_ramperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_rdbeats&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;dnm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_ramperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_arcycles&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_ramperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_arstalls&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_ramperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_rdlag&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_ramperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_rdbeats&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_ramperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_rdrstalls&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_ramperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_rdslow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dnm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dnm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%sperf_rdeff = [ %1d / %1d,&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prefix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dnm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_cpuiperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_rdbeats&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;dnm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_cpuiperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_arcycles&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_cpuiperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_arstalls&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_cpuiperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_rdlag&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_cpuiperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_rdbeats&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_cpuiperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_rdrstalls&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_cpuiperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_rdslow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dnm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dnm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot; %1d / %1d,&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dnm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_cpudperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_rdbeats&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;dnm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_cpudperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_arcycles&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_cpudperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_arstalls&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_cpudperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_rdlag&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_cpudperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_rdbeats&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_cpudperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_rdrstalls&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_cpudperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_rdslow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dnm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dnm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot; %1d / %1d ];&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dnm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;Read throughput: Once a data transmission starts, how fast can we keep it
going?&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;	&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_ramperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_rdbeats&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;dnm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_ramperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_rdslow&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_ramperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_rdrstalls&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_ramperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_rdbeats&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dnm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dnm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%sperf_rdthruput = [ %1d / %1d,&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prefix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dnm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_cpuiperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_rdbeats&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;dnm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_cpuiperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_rdslow&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_cpuiperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_rdrstalls&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_cpuiperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_rdbeats&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dnm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dnm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot; %1d / %1d,&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dnm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_cpudperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_rdbeats&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;dnm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_cpudperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_rdslow&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_cpudperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_rdrstalls&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_cpudperf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_rdbeats&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dnm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dnm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot; %1d / %1d ];&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dnm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The difficult part of this logic is that the C code has no way of knowing
which test setup I’m currently running.  To handle that, I’ve been changing the
variable prefix (manually) to one of: “big”, “dc”, “pipe”, “op”, or “sg”–names
that will be explained in the analysis script itself.&lt;/p&gt;

&lt;p&gt;In a future version, I’d be more likely to place all the computations
in software, and perhaps even skip the outputs.  However, for now I’ve found
it useful to analyze all of the various performance counters by hand
using &lt;a href=&quot;https://www.gnu.org/software/octave/index&quot;&gt;Octave&lt;/a&gt;.  This has been
very helpful during development, especially while my metrics have been
changing.&lt;/p&gt;

&lt;h2 id=&quot;the-tests&quot;&gt;The Tests&lt;/h2&gt;

&lt;p&gt;In all, I ran five tests, each with a different configuration of the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;.  Let me start, however, by
introducing the components I was testing, and after that their configurations.&lt;/p&gt;

&lt;p&gt;Here are the components I chose to test:&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 10. A well written and verified module is as good as gold when it can be re-used&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/axiperf/fetch-gold.svg&quot; alt=&quot;&quot; width=&quot;320&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/0115687b43bcbdb5e88e4d1e458b69c992868c9b/rtl/core/axilfetch.v&quot;&gt;AXILFETCH&lt;/a&gt;:
This is a basic instruction fetch.  We’ve discussed instruction fetch design
before: first for a &lt;a href=&quot;/zipcpu/2017/11/18/wb-prefetch.html&quot;&gt;basic Wishbone instruction
fetch&lt;/a&gt;,
and then again for a &lt;a href=&quot;/zipcpu/2018/03/21/dblfetch.html&quot;&gt;pipelined Wishbone instruction
fetch&lt;/a&gt;.&lt;/p&gt;

    &lt;p&gt;This &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/0115687b43bcbdb5e88e4d1e458b69c992868c9b/rtl/core/axilfetch.v&quot;&gt;particular AXI-lite based instruction fetch
design&lt;/a&gt;
modifies these original instruction fetch designs from ones driving a
Wishbone bus to driving an AXI-lite bus.  The fetch then parameterizes the
difference between these two original algorithms.&lt;/p&gt;

    &lt;p&gt;It also adds a third fetch algorithm–one where the fetch will issue up to
some number of instructions at a time.  As configured for this test, it will
issue up to four requests at a time.  As each instruction is then consumed by
the CPU’s pipeline, it will then issue another request in order to keep its
pipeline instruction FIFO full.&lt;/p&gt;

    &lt;p&gt;This design has a couple of drawbacks.  The first is that all instruction
requests are for singletons, that is with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ARLEN=0&lt;/code&gt;.  The second is that
any CPU branch instruction will render any ongoing operations obsolete, and
so the pipeline then needs to be flushed.  The third, and perhaps most
important drawback, is that (when using &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/0115687b43bcbdb5e88e4d1e458b69c992868c9b/rtl/core/axilfetch.v&quot;&gt;this
module&lt;/a&gt;)
instructions aren’t cached at all.  For every instruction the CPU executes,
it will need to issue a fetch.&lt;/p&gt;

    &lt;p&gt;The advantage of this
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/0115687b43bcbdb5e88e4d1e458b69c992868c9b/rtl/core/axilfetch.v&quot;&gt;AXILFETCH&lt;/a&gt; design?
Low logic.  Indeed, some of the other configurations, mentioned above, have
even lower logic than the FIFO mode I’m using for this test.  No matter how
it is configured, though, this is a very useful fetch routine, and a nice
one for small spaces where performance may not matter as much as area.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/0115687b43bcbdb5e88e4d1e458b69c992868c9b/rtl/core/axiicache.v&quot;&gt;AXIICACHE&lt;/a&gt;.
This is a very basic instruction cache.  A couple properties help to
define it’s performance:&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;CPU instruction access can be fully pipelined, with no stalls, as long
  as the instructions are being fetched from the same cache line.&lt;/li&gt;
      &lt;li&gt;Instruction fetches take a single extra clock to cross cache lines,
  and so these will stall the CPU for one cycle.  This includes most early
  branches.&lt;/li&gt;
      &lt;li&gt;On a cache miss, the I-cache goes to the bus with a burst read request.
  The read request is done in order–&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/0115687b43bcbdb5e88e4d1e458b69c992868c9b/rtl/core/axiicache.v&quot;&gt;this particular
  implementation&lt;/a&gt;
  does not make use of AXI’s WRAP memory feature.&lt;/li&gt;
      &lt;li&gt;Following &lt;a href=&quot;https://www.amazon.com/Computer-Architecture-Quantitative-John-Hennessy/dp/012383872X&quot;&gt;Hennessy and Patterson’s recommendation&lt;/a&gt;,
  I’ve made the cache line size eight bus words.  (In this test, the bus
  width &lt;em&gt;is&lt;/em&gt; the instruction width.)  In hindsight after staring at a lot
  of performance data, this is probably not the optimal value for
  &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/0115687b43bcbdb5e88e4d1e458b69c992868c9b/rtl/core/axiicache.v&quot;&gt;this ICACHE implementation&lt;/a&gt;,
  but that’s how it has been configured for this test.&lt;/li&gt;
      &lt;li&gt;Another simplification is that the CPU doesn’t receive any instructions
  from the cache until the entire cache line is filled.&lt;/li&gt;
      &lt;li&gt;Finally, this is a 1-WAY cache.  Every address in memory that exists in
  the cache will always exist in the same place in cache memory.&lt;/li&gt;
    &lt;/ol&gt;

    &lt;p&gt;&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/0115687b43bcbdb5e88e4d1e458b69c992868c9b/rtl/core/axiicache.v&quot;&gt;The cache&lt;/a&gt;,
is designed to be simple and basic, along with much of the rest
of the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;’s design in general.
Still, because it is a cache, it uses many more resources than the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/0115687b43bcbdb5e88e4d1e458b69c992868c9b/rtl/core/axilfetch.v&quot;&gt;AXILFETCH&lt;/a&gt;
design above.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Those are the two instruction fetch designs we’ll be comparing.&lt;/p&gt;

&lt;p&gt;On the data side of the CPU, we’ll be comparing three separate approaches to
interacting with the bus.  These are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/0115687b43bcbdb5e88e4d1e458b69c992868c9b/rtl/core/axiops.v&quot;&gt;AXIOPS&lt;/a&gt;.
I &lt;a href=&quot;/zipcpu/2021/04/17/axilops.html&quot;&gt;presented a very similar design on the blog not that long
ago&lt;/a&gt;.  It’s a basic
memory controller, but a limited one since it only ever allows a single
transaction to be outstanding at any given time.  This controller is my
lowest logic memory controller, and designed specifically for that purpose:
minimum area.  There are two differences between
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/0115687b43bcbdb5e88e4d1e458b69c992868c9b/rtl/core/axiops.v&quot;&gt;this memory controller&lt;/a&gt;
and &lt;a href=&quot;/zipcpu/2021/04/17/axilops.html&quot;&gt;the one I presented earlier&lt;/a&gt;:
First, this controller supports AXI exclusive access, and second, it
will try to set/adjust AxSIZE appropriately based upon the instruction.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/0115687b43bcbdb5e88e4d1e458b69c992868c9b/rtl/core/axipipe.v&quot;&gt;AXIPIPE&lt;/a&gt;.
This controller is more advanced than the
&lt;a href=&quot;/zipcpu/2021/04/17/axilops.html&quot;&gt;AXIOPS&lt;/a&gt; one,
but still not cached.  &lt;a href=&quot;/zipcpu/2021/04/17/axilops.html&quot;&gt;This
controller&lt;/a&gt; has the
advantage of supporting multiple read or multiple write operations
to be outstanding at any given time–just never both.&lt;/p&gt;

    &lt;p&gt;Getting this right took a bit of work in order to guarantee there would
be no out of order memory hazards in the CPU.  That’s also one of the reasons
this design will never handle both reads and writes at the same time.&lt;/p&gt;

    &lt;p&gt;To be part of a string of memory operations, the memory operations need
to come from adjacent instructions with no other instructions between them.
Read operations all need to use the same base register.  This, sadly, has
consequences when it comes to benchmark performance since the compiler
doesn’t optimize instructions well for this purpose.  Still, as you’ll see
below it’s much faster than the
&lt;a href=&quot;/zipcpu/2021/04/17/axilops.html&quot;&gt;AXIOPS&lt;/a&gt; implementation
above.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/0115687b43bcbdb5e88e4d1e458b69c992868c9b/rtl/core/axidcache.v&quot;&gt;AXIDCACHE&lt;/a&gt;.
This is a basic AXI data cache, fitted for the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;.  Some key design criteria
include:&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;This is a &lt;em&gt;write through&lt;/em&gt; cache.  All writes go directly to the bus.&lt;/li&gt;
      &lt;li&gt;All accesses to addresses that are not cachable, such as those
referencing peripheral I/O memory, go directly to the bus as well.&lt;/li&gt;
      &lt;li&gt;Cache reads take two clock cycles if reading from the last active cache
  line.  They take three cycles if reading from any other cache line.&lt;/li&gt;
      &lt;li&gt;On the third cycle of any cache read, the cache can detect if the
  requested address is not in the cache.  That’s when the bus makes a cache
  request.&lt;/li&gt;
      &lt;li&gt;As with the instruction cache, cache lines are 8 bus words in length.&lt;/li&gt;
      &lt;li&gt;Also, as with the instruction cache, this is a 1-WAY cache.&lt;/li&gt;
      &lt;li&gt;Finally, all bus requests use the &lt;a href=&quot;/blog/2019/04/27/axi-addr.html&quot;&gt;AXI INCRement addressing mode&lt;/a&gt;.  This cache
  doesn’t use
  &lt;a href=&quot;/blog/2019/04/27/axi-addr.html&quot;&gt;WRAP mode&lt;/a&gt;.
  (&lt;a href=&quot;/blog/2019/04/27/axi-addr.html&quot;&gt;WRAP mode&lt;/a&gt;
  mode might make for a nice but future performance improvement, though …)&lt;/li&gt;
    &lt;/ol&gt;

    &lt;p&gt;Finally, I should note that when I first fired up this cache, the
performance was so poor that I had to rebuild the write logic for better
performance.  As a result, write requests are (now) pipelined.  This means
that &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/0115687b43bcbdb5e88e4d1e458b69c992868c9b/rtl/core/axidcache.v&quot;&gt;the cache&lt;/a&gt;
will allow multiple write requests to be outstanding at any given time.
This was such a necessary performance fix, that I doubt I’ll go back and
ever undo it.&lt;/p&gt;

    &lt;p&gt;What is not pipelined (yet) are read operations.
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/0115687b43bcbdb5e88e4d1e458b69c992868c9b/rtl/core/axidcache.v&quot;&gt;This cache&lt;/a&gt;
can only ever handle one read request at a time.  This is a serious
performance bottleneck when accessing peripheral I/O memory, but not one
that really impacted today’s bus performance tests since we’ll be focusing
on the interaction with main memory.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A third design component also plays heavily into our results, and that is the
&lt;a href=&quot;/blog/2019/07/17/crossbar.html&quot;&gt;AXI Crossbar&lt;/a&gt; I’m using.
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axixbar.v&quot;&gt;This crossbar&lt;/a&gt;
is very different from the Xilinx interconnect you might be used to.  It’s
sort of a cross between Xilinx’s maximum performance and minimum area
implementations.  Unlike their minimum area version, &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axixbar.v&quot;&gt;this
crossbar&lt;/a&gt;
never combines the channel arbitration between read and write channels.  Reads
are always arbitrated separate from writes, so that a read operation will
never impact a write operation.  The second big difference is that &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axixbar.v&quot;&gt;this
crossbar&lt;/a&gt;
can’t handle out of order transactions from multiple masters.  (It can from a
single master, but then what’s the point?)  This means that if the CPU
data controller has requested a read operation, the CPU instruction fetch
might need to wait for the data read to complete before the
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axixbar.v&quot;&gt;crossbar&lt;/a&gt;
grants arbitration to the
&lt;a href=&quot;/blog/2019/05/29/demoaxi.html&quot;&gt;block RAM&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Using these basic designs, the five configurations I tested are, in order from
fastest to slowest:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;256kB &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/0115687b43bcbdb5e88e4d1e458b69c992868c9b/rtl/core/axiicache.v&quot;&gt;AXIICACHE&lt;/a&gt; + 256kB &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/0115687b43bcbdb5e88e4d1e458b69c992868c9b/rtl/core/axidcache.v&quot;&gt;AXIDCACHE&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;This exceptionally large cache size configuration isn’t likely to fit well
into any cheap FPGA, but it does make for a useful test case to know how
much better a design could work if it had more cache space.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;4kB &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/0115687b43bcbdb5e88e4d1e458b69c992868c9b/rtl/core/axiicache.v&quot;&gt;AXIICACHE&lt;/a&gt; + 4kB &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/0115687b43bcbdb5e88e4d1e458b69c992868c9b/rtl/core/axidcache.v&quot;&gt;AXIDCACHE&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;This is a more typical cache configuration.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;4kB &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/0115687b43bcbdb5e88e4d1e458b69c992868c9b/rtl/core/axiicache.v&quot;&gt;AXIICACHE&lt;/a&gt; + &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/0115687b43bcbdb5e88e4d1e458b69c992868c9b/rtl/core/axipipe.v&quot;&gt;AXIPIPE&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;4kB &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/0115687b43bcbdb5e88e4d1e458b69c992868c9b/rtl/core/axiicache.v&quot;&gt;AXIICACHE&lt;/a&gt; + &lt;a href=&quot;/zipcpu/2021/04/17/axilops.html&quot;&gt;AXIOPS&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/0115687b43bcbdb5e88e4d1e458b69c992868c9b/rtl/core/axilfetch.v&quot;&gt;AXILFETCH&lt;/a&gt; + &lt;a href=&quot;/zipcpu/2021/04/17/axilops.html&quot;&gt;AXIOPS&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;Althought this isn’t quite as cheap as the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; memory
logic can get, it does get pretty close to it.  (If you want to get much
cheaper, you might need to shut off pipelining and set the fetch limit to
a single instruction.)&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;At this point, it’s time to run some tests.  The output, shown below for the
slowest test case, looks pretty bland.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;Clock ticks used                          : 3632051 (0x00376bb3)
Microseconds for one run through Dhrystone:       36.3 
Dhrystones per Second:                           27533 
DMIPS                :                         15.6703 
DMIPS per MHz        :                          0.1567 
Insn Count           :                          391011
Clock Count          :                         3632203

Category	AXI RAM		CPU-INSN	CPU-DATA
AllBurstSiz	0x01020000	0x00050000	0x01010000
TotalCycles	0x0037fe62	0x0037fe62	0x0037fe62
WrIdles		0x0033f30e	0x0037fe62	0x002f0257
AwrBursts	0x0001591c	0x00000000	0x00015947
WrBeats		0x0001591c	0x00000000	0x00015947
AwrBytes	0x00056470	0x00000000	0x0005651c
WrBytes		0x0003e13b	0x00000000	0x0003e1e7
WrSlowData	0x00000000	0x00000000	0x00000000
WrStalls	0x00000000	0x00000000	0x00000000
WrAddrLag	0x00000000	0x00000000	0x00000000
WrDataLag	0x00000000	0x00000000	0x00000000
AwEarly		0x00000000	0x00000000	0x00000000
WrEarlyData	0x00000000	0x00000000	0x00000000
AwStall		0x00000000	0x00000000	0x00000000

EWrStalls	0x0001591c	0x00000000	0x00000000
WrBLags		0x00000000	0x00000000	0x0006497d
WrBStall	0x00000000	0x00000000	0x00000000
WrBEND		0x0001591c	0x00000000	0x00015947
WrBias		0x0001591c	0x00000000	0x00000000
-------------------------------
RdIdles		0x00181b8a	0x000ecea0	0x00200e1a
RdMaxB		0x00000000	0x00000000	0x00000000
RdBursts	0x0011c154	0x000fac46	0x00021865
RdBeats		0x0011c154	0x000fac46	0x00021865
RdBytes		0x00470550	0x003eb118	0x00086194
ARCycles	0x000669da	0x00028237	0x00021865
ARStalls	0x00000000	0x00000000	0x00000000
RStalls		0x00000000	0x00000000	0x00000000
RdLag		0x0007b7aa	0x00170145	0x0013bf7e
RdSlow		0x00000000	0x00000000	0x00000000

sgperf_wrlag = [ 0 / 88348, 0 / 1, 412029 / 88391 ];
sgperf_wreff = [ 88348 / 176696, 0 / 1, 88391 / 500420 ];
sgperf_wrthruput = [ 88348 / 88348, 0 / 1, 88391 / 88391 ];
sgperf_rdlag = [ 505770 / 1163604, 1507653 / 1027142, 1294206 / 137317 ];
sgperf_rdlatency = [ 840628 / 420314, 1142118 / 164407, 1431523 / 137317 ];
sgperf_rdeff = [ 1163604 / 2089688, 1027142 / 2699202, 137317 / 1568840 ];
sgperf_rdthruput = [ 1163604 / 1163604, 1027142 / 1027142, 137317 / 137317 ];&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;So, how did we do?  That’ll be the topic of the next section.&lt;/p&gt;

&lt;h2 id=&quot;results&quot;&gt;Results&lt;/h2&gt;

&lt;p&gt;Let’s now take some time to go through the results of our performance tests.&lt;/p&gt;

&lt;h3 id=&quot;total-throughput&quot;&gt;Total throughput&lt;/h3&gt;

&lt;p&gt;Just to illustrate the problems with a total throughput measure, such as the
one we started out discussing, I decided to capture and chart the total
throughput for this test.  This is defined by the number of beats transferred
divided by the number of clock cycles in the test.&lt;/p&gt;

&lt;p&gt;It’s not pretty, nor is it that useful.&lt;/p&gt;

&lt;p&gt;You can see the raw read throughput in Fig. 11.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 11. Raw Read Throughput (beats per cycle)&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/axiperf/tbl-rd-raw.png&quot; alt=&quot;&quot; width=&quot;679&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;The raw write throughput, defined similarly, shown in Fig. 12 below.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 12. Raw Write throughput (beats per cycle)&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/axiperf/tbl-wr-raw.png&quot; alt=&quot;&quot; width=&quot;590&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Just to prove that this throughput measure isn’t very useful, I found a
repeating sequence of 989 clock cycles.  In this sequence, there were a set
of 41 reads spaced 23 cycles apart, followed by one write beat.  This sequence
then repeated many times over.  Notice how dense such a sequence is, or rather
isn’t: one write beat takes place every 989 cycles.  Our bus is actually much
faster than that.  On top of that, the CPU had to do some calculations in the
meantime as well, so … the statistic is really quite meaningless.&lt;/p&gt;

&lt;p&gt;At another location, I found a set of 5,163 clock cycles for 64 read bursts.
After these cycles, the bus was then idle for another 18,846 cycles.  This
is actually really good performance, since this was from one of the cached
tests.  The first 64 read bursts filled the appropriate cache lines, and then
those lines were used during the next 18,846 clock cycles.  The challenge
with total throughput here, is which measure would you use?  The 2%
bus throughput measure, derived from (18846+5163)/64, or the 10% measure
derived from 5163/64?&lt;/p&gt;

&lt;p&gt;The true answer is neither, since neither statistic really tells us anything
about what was taking place on the bus during this time.&lt;/p&gt;

&lt;p&gt;In hindsight, if you look back at the throughput measure, the &lt;em&gt;low&lt;/em&gt; throughput
measure is actually the best indication we have of good cache performance, since
a good cache will make it so that the CPU doesn’t need to use the bus at all.
Less than 1% throughput, for a cache therefore, is really a good thing.&lt;/p&gt;

&lt;p&gt;Perhaps we might have learned more if we had limited our operation to a
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;memcpy()&lt;/code&gt; routine, but that’s more of a specialized measurement than what
we are looking at today.&lt;/p&gt;

&lt;h3 id=&quot;actual-throughput&quot;&gt;Actual Throughput&lt;/h3&gt;

&lt;p&gt;If we instead limit the throughput measure to the number of beats divided by
the number of clock cycles devoted to those beats alone, we’ll get something
useful.  Before showing the numbers, though, let me remind you that my
goal in bus operations has always been 100% throughput.  That also means
that &lt;a href=&quot;/blog/2019/05/29/demoaxi.html&quot;&gt;my AXI block RAM&lt;/a&gt;
model can achieve 100% throughput in bench testing.  How do you think it did
in practice?&lt;/p&gt;

&lt;p&gt;Here’s the read throughput numbers:&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 13. Read throughput (Beats / Cycle)&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/axiperf/tbl-rd-throughput.png&quot; alt=&quot;&quot; width=&quot;578&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Much as I might expect, these numbers are kind of boring.  The read throughput
statistics above simply show that I’ve achieved the 100% throughput I had
intended.&lt;/p&gt;

&lt;p&gt;Not very interesting.&lt;/p&gt;

&lt;p&gt;What gets more interesting, through, are the write throughput numbers.  These
were a bit unexpected.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 14. Write throughput (Beats / Cycle)&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/axiperf/tbl-wr-throughput.png&quot; alt=&quot;&quot; width=&quot;585&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;I’ll admit, these numbers gave me a bit of a pause.  Why shouldn’t I be getting
100% throughput?  I had designed this &lt;a href=&quot;/blog/2019/05/29/demoaxi.html&quot;&gt;AXI block RAM
controller&lt;/a&gt;
to achieve a 100% throughput, but the measures indicate I was getting
something less.&lt;/p&gt;

&lt;p&gt;To find out what was going on, I had to do a bit of digging.  Fig. 15 below
shows what I found: the write channel had stalls and delays within it that I
wasn’t expecting.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 15. Write channel alignment stalls limit throughput&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;/img/axiperf/cpu-wr-stalls-annotated.svg&quot;&gt;&lt;img src=&quot;/img/axiperf/cpu-wr-stalls-annotated.svg&quot; alt=&quot;&quot; width=&quot;780&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;If you’ll remember, &lt;a href=&quot;/blog/2019/05/29/demoaxi.html&quot;&gt;the RAM&lt;/a&gt;
can’t perform a write until both data and address
are available.  To make this happen, I designed the write channel so that
it was one cycle delayed from the read channel.  As long as the write
channel could stay so delayed, we could maintain 100% throughput.&lt;/p&gt;

&lt;p&gt;So, let’s walk through the delays in this figure.&lt;/p&gt;

&lt;p&gt;The first delay takes place within the
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axixbar.v&quot;&gt;interconnect&lt;/a&gt;.
The &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axixbar.v&quot;&gt;interconnect&lt;/a&gt;
can’t forward any requests downstream until it has first decoded the slave’s
address, and then second it has to win arbitration to be granted access to
the slave.  Unlike the &lt;a href=&quot;/blog/2019/05/29/demoaxi.html&quot;&gt;RAM
controller&lt;/a&gt;, however,
the &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axixbar.v&quot;&gt;interconnect&lt;/a&gt;
balances the write address and write data channels during this time.  This
is the yellow ellipse, shown in Fig. 15 above.&lt;/p&gt;

&lt;p&gt;The problem isn’t really the yellow ellipse, it’s the many red ones.&lt;/p&gt;

&lt;p&gt;The problem starts because the write address and data from both the CPU and the
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axixbar.v&quot;&gt;interconnect&lt;/a&gt;
is are aligned together, but that’s not good enough for the &lt;a href=&quot;/blog/2019/05/29/demoaxi.html&quot;&gt;block RAM
controller&lt;/a&gt;.  The &lt;a href=&quot;/blog/2019/05/29/demoaxi.html&quot;&gt;block RAM
controller&lt;/a&gt;
then needs to stall the write data channel by one cycle in order to use it.&lt;/p&gt;

&lt;p&gt;This stall then propagates back through the
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axixbar.v&quot;&gt;interconnect&lt;/a&gt;
to the CPU.&lt;/p&gt;

&lt;p&gt;In the CPU, however, this creates a bit of an additional problem, since the
CPU insists that all memory operations start on a fresh cycle.  There’s no
buffer inside the CPU for unaligned write address and write data operations.
Hence, the last &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AWVALID&lt;/code&gt; is delayed when the CPU cannot issue a new
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AWVALID &amp;amp;&amp;amp; WVALID&lt;/code&gt;.  This then propagates back down stream into an additional
delay on the channel beyond what the &lt;a href=&quot;/blog/2019/05/29/demoaxi.html&quot;&gt;block RAM
controller&lt;/a&gt; required, but
as a clear consequence of both it and the fact that the
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axixbar.v&quot;&gt;interconnect&lt;/a&gt;
had no FIFOs within it–only
&lt;a href=&quot;/blog/2019/05/22/skidbuffer.html&quot;&gt;skid buffer&lt;/a&gt;s.&lt;/p&gt;

&lt;p&gt;Put together, we have seven clocks from the CPU used to send five beats of
data, for an overall 71% throughput for this burst.  Since most of the other
CPU writes were for single beats, the total throughput recovers somewhat
from this number.&lt;/p&gt;

&lt;p&gt;While I might say, thankfully, this only happens about 3% of the time, it’s
really not anything to be thankful for.  The 3% of the time when this happens
just happens to be those few times when the CPU can pipeline its writes
so that multiple write operations can be strung together.  Typically this
happens at the prologue to a function, although it can happen elsewhere.  This
CPU “feature” is supposed to be associated with better performance.  Usually
it achieves it, although not this time.&lt;/p&gt;

&lt;p&gt;Let’s just say that I’m going to add this to my list of things to fix.
The &lt;a href=&quot;/blog/2019/05/29/demoaxi.html&quot;&gt;block RAM controller&lt;/a&gt;’s
performance shouldn’t be causing cascading stalls throughout a larger system.&lt;/p&gt;

&lt;h3 id=&quot;latency&quot;&gt;Latency&lt;/h3&gt;

&lt;p&gt;Latency, however, is where things start getting really interesting.
&lt;a href=&quot;/blog/2019/05/29/demoaxi.html&quot;&gt;As you may recall&lt;/a&gt;,
the read routine requires an extra clock cycle after
the read request before it can produce an output.  Therefore, we expect a
latency of 1.0 from this routine.  The
&lt;a href=&quot;/blog/2019/07/17/crossbar.html&quot;&gt;interconnect&lt;/a&gt;
introduces three cycles
of latency going in, and an additional one coming back out.  So, we might
expect read latencies of one and five cycles depending on which side of the
interconnect we are on.&lt;/p&gt;

&lt;p&gt;Further, if you look at Fig. 16 below, you’ll see that some of the
numbers there reflect these predictions.  Unfortunately, only &lt;em&gt;some&lt;/em&gt; of these
numbers reflect these predictions.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 16. Read latency (cycles per burst&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/axiperf/tbl-rd-latency.png&quot; alt=&quot;&quot; width=&quot;679&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;What happened?&lt;/p&gt;

&lt;p&gt;Let’s look.&lt;/p&gt;

&lt;p&gt;First, the measure here that made the least sense to me was the 11 cycle read
latency, so I went and dug into that one first.&lt;/p&gt;

&lt;p&gt;As it turns out, the 11 cycles were dominated by reads from the console
peripheral, as the CPU polled the console peripheral to see if space was
available in the transmit queue.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 17. UART transmit FIFO polling latency&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/axiperf/uart-read.svg&quot; alt=&quot;&quot; width=&quot;498&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;In this case, the CPU would issue a request and it would take two cycles to
come out of the interconnect.  Another cycle was required to bridge the
request from AXI to AXI-lite, and then another two cycles to go through the
AXI-lite interconnect.  Once the request finally got to the peripheral, the
peripheral didn’t have a
&lt;a href=&quot;/blog/2019/05/22/skidbuffer.html&quot;&gt;skid buffer&lt;/a&gt;
attached, so it took another cycle to get through the peripheral.  (Why
should a UART peripheral need to be fast?) Once the peripheral finished
the read, it then took one cycle per layer to get back from there to the CPU.&lt;/p&gt;

&lt;p&gt;The fact that the performance was dominated by these peripheral reads is
actually a good story, not a bad one.  Remember, this measurement is the
worst on the data cache test.  What that means is that the data cache worked
so well, that the cache only needed to issue 12 (burst) read requests of
memory.  (The instruction cache had to issue more, issuing 50 read requests
of memory.) These requests required 5 cycles of latency.  However, these
five cycles of latency for 12 requests had to then be averaged with another
1,557 cycles of console port polling.  Guess which reads dominated the
statistic?&lt;/p&gt;

&lt;p&gt;But what about the bursts with a latency less than one cycle?  This is also
another good news story, as shown in Fig. 18 below.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 18. CPU read latency in the presence of singleton reads&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/axiperf/cpui-axil.svg&quot; alt=&quot;&quot; width=&quot;780&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;In these cases, the controller was issuing multiple reads at a time.  Remember,
I chose to define latency as the number of latency cycles &lt;em&gt;divided by the number
of bursts&lt;/em&gt;.  Since the number of bursts is higher, the latency is therefore
much lower.  In the case of Fig. 18 above, you either have 6 beats of latency
taking place over 9 burst requests, or 11 cycles of latency divided by 9
requests.  Either way you look at it, the latency measure will be less than one.&lt;/p&gt;

&lt;p&gt;This should also explain the write latency–from the CPUs perspective.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 19. Write latency (cycles per burst)&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/axiperf/tbl-wr-latency.png&quot; alt=&quot;&quot; width=&quot;585&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;The big difference here is that the write latency, from the perspective of the
CPU, often includes the
&lt;a href=&quot;/blog/2019/07/17/crossbar.html&quot;&gt;interconnect&lt;/a&gt;
delay–which tends to mask the
latency performance of a singleton request somewhat.&lt;/p&gt;

&lt;p&gt;But, how did the write latency end up at zero from the RAM’s perspective?
The simple answer is that all of the RAM’s write latency was hidden by the
write throughput measures, and counted against throughput.&lt;/p&gt;

&lt;p&gt;Looking back over read latency measures in Fig. 16, however, shows that I’m
not really answering the question I wanted.  Because the latency beats
are getting averaged by the number of bursts those beats cross, the latency
number I’m expecting has been somewhat obscured.&lt;/p&gt;

&lt;p&gt;How shall I determine the actual read latency of a given peripheral then?&lt;/p&gt;

&lt;p&gt;This was where I came up with the first-request latency measure that I’ve
now started using for reads.  Although this measure was an after-thought,
it seems to capture more of what I’m looking for: the time from the first
request to the first response.  This measure is shown in Fig. 20 below.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 20. Latency from first read request to first response&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/axiperf/tbl-rd-first-latency.png&quot; alt=&quot;&quot; width=&quot;679&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Indeed, this is closer to what I was expecting–even though it’s not nearly
as useful when predicting CPU performance in this context.  First, notice that
the &lt;a href=&quot;/blog/2019/05/29/demoaxi.html&quot;&gt;block RAM controller&lt;/a&gt;’s
performance is exactly what I would expect: One clock.  The other numbers,
however, aren’t quite as clean.  This may be due to bus contention between
the CPU’s instruction and data buses, but I haven’t dug in deep enough to
certain (yet).&lt;/p&gt;

&lt;h3 id=&quot;efficiency&quot;&gt;Efficiency&lt;/h3&gt;

&lt;p&gt;While efficiency wasn’t one of my primary measures, I chose to include it in
the end because it’s a very simple measure of the bus.  Specifically,
efficiency as defined below is the number of beats transferred divided
by the number of clocks the bus is active.  It’s only subtly different from
our throughput measures–with the big difference being that the efficiency
measure below includes any latency as part of the measure.&lt;/p&gt;

&lt;p&gt;Looking at the read efficiency in Fig. 21 below, you can see that the
&lt;a href=&quot;/blog/2019/05/29/demoaxi.html&quot;&gt;block RAM controller&lt;/a&gt;
has done fairly well at 80%.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 21. Read efficiency (beats / cycles used)&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/axiperf/tbl-rd-efficiency.png&quot; alt=&quot;&quot; width=&quot;679&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;This means that the
&lt;a href=&quot;/blog/2019/05/29/demoaxi.html&quot;&gt;block RAM controller&lt;/a&gt;
can return 8 beats on average in 10 cycles.&lt;/p&gt;

&lt;p&gt;Shouldn’t it be able to do more?  Well, yes, it was designed to have a 100%
throughput, and we said it had achieved that above.  This &lt;em&gt;efficiency&lt;/em&gt; number,
however, also captures the effects of the
&lt;a href=&quot;/blog/2019/07/17/crossbar.html&quot;&gt;interconnect&lt;/a&gt;’s
single source limitation: both the &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/0115687b43bcbdb5e88e4d1e458b69c992868c9b/rtl/core/axiicache.v&quot;&gt;instruction
cache&lt;/a&gt;
and the &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/0115687b43bcbdb5e88e4d1e458b69c992868c9b/rtl/core/axidcache.v&quot;&gt;data cache&lt;/a&gt;
only ever issue read requests for eight beats at a time, and the
&lt;a href=&quot;/blog/2019/07/17/crossbar.html&quot;&gt;interconnect&lt;/a&gt;
won’t connect another AXI master to the
&lt;a href=&quot;/blog/2019/05/29/demoaxi.html&quot;&gt;block RAM controller&lt;/a&gt;
during this time.  Instead, the
&lt;a href=&quot;/blog/2019/07/17/crossbar.html&quot;&gt;interconnect&lt;/a&gt; waits
until the last beat from the CPU instruction master/source has been returned
before switching which master is connected to the
&lt;a href=&quot;/blog/2019/05/29/demoaxi.html&quot;&gt;block RAM controller&lt;/a&gt;.
This means that, from the
&lt;a href=&quot;/blog/2019/05/29/demoaxi.html&quot;&gt;RAM&lt;/a&gt;’s perspective, each of
these cache requests takes two cycles of setup plus another eight cycles of
data.  This measure captures that performance.&lt;/p&gt;

&lt;p&gt;If for this reason alone, the efficiency is a valuable measure.&lt;/p&gt;

&lt;p&gt;But what happened with the 8% efficiency of the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/0115687b43bcbdb5e88e4d1e458b69c992868c9b/rtl/core/axidcache.v&quot;&gt;data cache&lt;/a&gt;?
Again, this follows from Fig. 17 above.  If the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/0115687b43bcbdb5e88e4d1e458b69c992868c9b/rtl/core/axidcache.v&quot;&gt;data cache&lt;/a&gt;
is spending it’s bus time polling from a UART with a less than optimized
bus response simply because the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/0115687b43bcbdb5e88e4d1e458b69c992868c9b/rtl/core/axidcache.v&quot;&gt;cache&lt;/a&gt;
works so well that it doesn’t need to fetch data from the bus,
then that’s a good thing.  The number just looks bad.&lt;/p&gt;

&lt;p&gt;What bout the 38-57% efficiencies shown from the perspective of the CPU
instruction fetch interface?  Well, if we allow that a cache access requires
10 cycles for 8 beats in the RAM, and we add another 4 cycles for the 
interconnect, then we have 14 cycles for 8 beats.  That’s the 57% efficiency
seen.  Efficiency, however, gets harder to determine when the CPU keeps
deciding, mid-access, that it wants more instructions–such as Fig. 18 showed
above.  Indeed, this figure alone would explain a 43% efficiency showing that
this low-logic approach isn’t nearly as efficient as we might want.&lt;/p&gt;

&lt;p&gt;Fig. 22 below shows our calculated write efficiency.&lt;/p&gt;

&lt;!-- Expecting write efficiency of : RAM 1/3, CPU-D 1/7 --&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 22. Write efficiency (beats / cycles used)&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/axiperf/tbl-wr-efficiency.png&quot; alt=&quot;&quot; width=&quot;585&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;To understand these numbers, consider the single write burst shown in Fig. 23
below, in addition to the burst I’ve already presented in Fig. 15 above.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 23. Write efficiency of a single beat&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/axiperf/cpud-wr-single-annotated.svg&quot; alt=&quot;&quot; width=&quot;420&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;At its most basic, the single write beat of Fig. 23 working its way through the 
&lt;a href=&quot;/blog/2019/05/29/demoaxi.html&quot;&gt;block RAM controller&lt;/a&gt;
will only ever get a 33% efficiency.  From the perspective of the CPU, that
efficiency goes down to 14%.  The question here isn’t why the write efficiency
in the table in Fig. 22 is so low, but rather why is it so good?&lt;/p&gt;

&lt;p&gt;The answer to that question let me refer you back to Fig. 15, where in spite
of the stalls rippling through the system the 
&lt;a href=&quot;/blog/2019/05/29/demoaxi.html&quot;&gt;RAM controller&lt;/a&gt; is still
able to support 5 write beats in 7 cycles (71%), and from the CPU data
controller’s perspective, 5 write beats in 12 cycles (42%).&lt;/p&gt;

&lt;p&gt;The fact that our efficiency is higher than 33% or 14% respectively is due
to the CPU’s ability push multiple data beats through the bus pipeline at the
same time.  Perhaps you may recall &lt;a href=&quot;/zipcpu/2019/02/09/cpu-blinky.html&quot;&gt;this same discussion some time ago
with respect to the Wishbone bus and
blinky&lt;/a&gt;?  Pipeline
bus operations are definitely the way to go–if you have the area resources
to support them.  The more operations you can push onto the bus at once,
the better your performance will be.&lt;/p&gt;

&lt;h2 id=&quot;conclusions&quot;&gt;Conclusions&lt;/h2&gt;

&lt;p&gt;While I don’t expect this to be the last word on AXI performance measurement,
the measures presented above have certainly encouraged me to look deeper
into how well the bus was working.  The process has also helped me understand
how well the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;’s new bus
infrastructure worked in a simple setting.&lt;/p&gt;

&lt;p&gt;I certainly learned a lot of things in this process.&lt;/p&gt;

&lt;p&gt;Some of these lessons learned were to be expected:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Raw throughput measures are next to useless.  When a CPU is using data
  and instruction caches, it is a good thing when the CPU is not using the
  bus.  Performance measures shouldn’t penalize such masters for not using
  the bus.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Individual burst performance isn’t necessarily indicative of system
  performance.  As an example, consider the write performance in Fig. 23 and
  compare it with the write performance of Fig. 15.  The correct answer was
  some combination of the two.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;There’s a lot of performance lost in the
  &lt;a href=&quot;/blog/2019/07/17/crossbar.html&quot;&gt;interconnect&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This is a conclusion we came across some time back when examining &lt;a href=&quot;/zipcpu/2019/02/09/cpu-blinky.html&quot;&gt;why
  a CPU makes blinky run so
  slow&lt;/a&gt;.  AXI IDs are
  supposed to be able to mitigate some of this problem in busy systems, but
  my own &lt;a href=&quot;/blog/2019/07/17/crossbar.html&quot;&gt;interconnect&lt;/a&gt; will
  need an upgrade to support this feature.&lt;/p&gt;

&lt;p&gt;These were the lessons I was expecting to see.  There are a bunch of other
things I came across during this exercise that I wasn’t expecting.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;When the cache works well, system performance will be dominated by the slower
  parts of the system.  Yes, I was quite surprised by the exceptionally
  large read latencies observed when running under the cache.  The fact that
  these latencies were dominated by the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;printf()&lt;/code&gt;’s that run at the end
  &lt;a href=&quot;https://en.wikipedia.org/wiki/Dhrystone&quot;&gt;Dhrystone&lt;/a&gt;, after the bench mark
  speed test is complete, was a complete surprise to me.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Efficiency, a measure that combines throughput and latency together, is
  a valuable combined measure.  The efficiency measure I came up with was, in
  many ways, an after thought–yet it seems to be the most concise measure of
  performance I came up with.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;My &lt;a href=&quot;/blog/2019/05/29/demoaxi.html&quot;&gt;“Perfect AXI slave” block RAM
  controller&lt;/a&gt; isn’t nearly as
  perfect as I thought it was.  Delaying the write data channel certainly has
  consequences that back up throughout the system.  I may therefore need to
  come back to this &lt;a href=&quot;/blog/2019/05/29/demoaxi.html&quot;&gt;“Perfect AXI
  slave”&lt;/a&gt; and adjust it so
  that it can handle balanced write address and write data channels.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Another solution to the problem of the write data and address channels being
  unbalanced would be placing a couple of FIFOs into my
  &lt;a href=&quot;/blog/2019/07/17/crossbar.html&quot;&gt;interconnect&lt;/a&gt;.  So far,
  I’ve been loathe to do so for several reasons.  Chief among these reasons
  is latency: I’m not sure I want to add to the latency of the entire system
  by adding another clock (or two) of latency on each channel sufficient to
  support the FIFO and keep it off of the critical path.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Thankfully, with the performance measures we’ve discussed today, I should now
  be able to answer the question of whether or not an additional delay
  improves overall bus performance overall or not.&lt;/p&gt;

&lt;p&gt;This leaves me with two pieces of unfinished business.  First, the measures
we’ve built today are great for a dual port RAM, but perhaps not nearly as good
for a single port RAM where the read and write channels need to be joined
at some point.  The problem is that, from the perspective of a single data
channel, the time required to wait for access to the RAM in the desired
direction is just counted as stalls.  There’s no way to account the two
together (currently) to get a combined read measure.&lt;/p&gt;

&lt;p&gt;Finally, I’ve been more than tempted to connect &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axiperf.v&quot;&gt;this performance
monitor&lt;/a&gt;
to some Vendor components.  For example, [FlorentW] wrote an article discussing
&lt;a href=&quot;https://forums.xilinx.com/t5/Design-and-Debug-Techniques-Blog/AXI-Basics-5-Create-an-AXI4-Lite-Sniffer-IP-to-use-in-Xilinx/ba-p/1064306&quot;&gt;how to connect a performance monitor&lt;/a&gt;
to the AXI links within a design using Xilinx’s interconnect and IP integrator.
That should lead to a lot of fun measurements, and might finally allow me to
measure the performance of their DDR3 controller, whether with or without the
PS, or even the performance of their DMA controller against my own.&lt;/p&gt;

&lt;p&gt;Indeed, just being able to measure bus performance is really only the first
step in a much longer journey.  Now I have lots of things to measure the
performance of, and so a lot of work still to follow.&lt;/p&gt;
&lt;hr /&gt;&lt;p&gt;&lt;em&gt;Who hath laid the measures thereof, if thou knowest?  or who hath stretched the line upon it? (Job 38:2)&lt;/em&gt;</description>
        <pubDate>Sat, 14 Aug 2021 00:00:00 -0400</pubDate>
        <link>https://zipcpu.com/blog/2021/08/14/axiperf.html</link>
        <guid isPermaLink="true">https://zipcpu.com/blog/2021/08/14/axiperf.html</guid>
        
        
        <category>blog</category>
        
      </item>
    
  </channel>
</rss>
