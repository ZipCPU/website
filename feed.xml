<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>The ZipCPU by Gisselquist Technology</title>
    <description>The ZipCPU blog, featuring how to discussions of FPGA and soft-core CPU design.  This site will be focused on Verilog solutions, using exclusively OpenSource IP products for FPGA design.  Particular focus areas include topics often left out of more mainstream FPGA design courses such as how to debug an FPGA design.
</description>
    <link>https://zipcpu.com/</link>
    <atom:link href="https://zipcpu.com/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Mon, 13 Feb 2023 21:29:59 -0500</pubDate>
    <lastBuildDate>Mon, 13 Feb 2023 21:29:59 -0500</lastBuildDate>
    <generator>Jekyll v4.2.0</generator>
    <image>
      <url>https://zipcpu.com/img/gt-rss.png</url>
      <title></title>
      <link></link>
    </image>
    
      <item>
        <title>Debugging the Hard Stuff</title>
        <description>&lt;p&gt;There are a couple of really hard problems in digital design.  These include
debugging &lt;a href=&quot;/dsp/2018/10/02/fft.html&quot;&gt;FFT&lt;/a&gt;s,
cryptographic algorithms, and &lt;a href=&quot;https://en.wikipedia.org/wiki/Error_correction_code&quot;&gt;Error Correction Coding
(ECC)&lt;/a&gt;.
Debugging a good compression algorithm is also a solid runner up, but it’s
not quite as difficult as the others.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/eccdbg/dbgchallenge.svg&quot; alt=&quot;&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;What makes these problems hard is the debugging challenge: put simply,
given a failing design, pinpoint the line (or lines) of failing logic.
This debugging challenge is hard because these particular problems don’t
break down easily into visually reducible sub-problems.  That is, it can
be a real challenge when working with problems like these is to first
identify the problem in the trace, and then to be able to walk backwards
from there to the bug.&lt;/p&gt;

&lt;p&gt;Take, for example, an &lt;a href=&quot;/dsp/2018/10/02/fft.html&quot;&gt;FFT&lt;/a&gt;.
Some time ago, a user came to me telling me my
&lt;a href=&quot;/dsp/2018/10/02/fft.html&quot;&gt;FFT&lt;/a&gt;
was broken.  Nonsense I said, it works fine for me.  So he sent me a &lt;a href=&quot;/blog/2017/07/31/vcd.html&quot;&gt;VCD
trace&lt;/a&gt;, and sure enough, the
I&lt;a href=&quot;/dsp/2018/10/02/fft.html&quot;&gt;FFT&lt;/a&gt; of an
&lt;a href=&quot;/dsp/2018/10/02/fft.html&quot;&gt;FFT&lt;/a&gt; wasn’t producing the
input again.
It wasn’t even close.  The challenge here was that this user had introduced
random data into the system.  Because it was &lt;em&gt;random&lt;/em&gt;, it was hard to tell at
every stage what the &lt;em&gt;right&lt;/em&gt; answer should’ve been and therefore where in
the algorithm did the design break.&lt;/p&gt;

&lt;p&gt;How then do you debug these complex algorithms?&lt;/p&gt;

&lt;h2 id=&quot;to-debug-build-new-tools-when-necessary&quot;&gt;To debug: Build new tools when necessary&lt;/h2&gt;

&lt;p&gt;Remember, the goal is to find the one (or more) lines of HDL that are broken.&lt;/p&gt;

&lt;p&gt;Recently, I was asked to do some
&lt;a href=&quot;https://en.wikipedia.org/wiki/Error_correction_code&quot;&gt;ECC&lt;/a&gt;
work.  It started out simple: here’s a working
&lt;a href=&quot;https://en.wikipedia.org/wiki/Error_correction_code&quot;&gt;ECC&lt;/a&gt;
design, now generate a piece of software that will replicate it.
Okay, there’s more to the backstory.  The
&lt;a href=&quot;https://en.wikipedia.org/wiki/Error_correction_code&quot;&gt;ECC&lt;/a&gt;
was part of a non-volatile memory controller, and the customer wanted to
pre-load the device at the factory with data and valid
&lt;a href=&quot;https://en.wikipedia.org/wiki/Error_correction_code&quot;&gt;ECC&lt;/a&gt;
parity bits.  Not a problem, right?  Most, but not all,
&lt;a href=&quot;https://en.wikipedia.org/wiki/Error_correction_code&quot;&gt;ECC&lt;/a&gt;
is just straight linear algebra over &lt;a href=&quot;https://en.wikipedia.org/wiki/GF%282%29&quot;&gt;Galois Field 2
(GF2)&lt;/a&gt;, so this should be basic, no?&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;padding: 25px; float: left&quot;&gt;&lt;caption&gt;Fig 1. ECC wraps the CRC, which then wraps the user data&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/eccdbg/eccpkt.svg&quot; alt=&quot;&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;The problems got worse from there.  Gee, Dr. Dan, since you’re an
&lt;a href=&quot;https://en.wikipedia.org/wiki/Error_correction_code&quot;&gt;ECC&lt;/a&gt; expert (Wait, what?
I am?), why not maintain some logic for me?  Here’s your first task: a
customer wants 32-bit error correction.  Our standard 16-bit error correction
isn’t good enough for this customer.  Then, once that task was done, the next
task was for a customer who wanted even more error correction than just
32-bits per packet.  Then there was the customer who wanted not just
&lt;a href=&quot;https://en.wikipedia.org/wiki/Error_correction_code&quot;&gt;ECC&lt;/a&gt;, but an
&lt;a href=&quot;https://en.wikipedia.org/wiki/Error_correction_code&quot;&gt;ECC&lt;/a&gt; protected
&lt;a href=&quot;https://en.wikipedia.org/wiki/Cyclic_redundancy_check&quot;&gt;CRC&lt;/a&gt;
so that he could tell if the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Error_correction_code&quot;&gt;ECC&lt;/a&gt; ever failed.&lt;/p&gt;

&lt;p&gt;This is all well and good, but how do you debug this stuff?  Remember, the
debugging challenge is to find the line (or lines) of HDL (VHDL or Verilog)
containing the bug.  Also remember, I didn’t write the original logic–I’m
just the one getting paid to maintain it.&lt;/p&gt;

&lt;p&gt;Here’s the method I came up with:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Start with a golden reference.&lt;/p&gt;

    &lt;p&gt;This may seem like the hardest part at first.  I mean, if you are building
an algorithm for the first time, how will you know that your golden
reference works properly in the first place?&lt;/p&gt;

    &lt;p&gt;It helps to start with the references from others.  &lt;a href=&quot;https://www.amazon.com/Numerical-Recipes-Scientific-Computing-Second/dp/0521431085/&quot;&gt;Numerical Recipes in
C &lt;/a&gt;
publishes the C source of an
&lt;a href=&quot;/dsp/2018/10/02/fft.html&quot;&gt;FFT&lt;/a&gt; algorithm that I’ve since
used often.  There’s even a &lt;a href=&quot;https://www.amazon.com/Numerical-Recipes-Art-Scientific-Computing/dp/8175960965&quot;&gt;Numerical Recipes in
C++&lt;/a&gt;,
which I would expect is the same recipes but with an updated coding
standard.  Then there’s the “Advanced Encryption Standard” (AES), which
includes an appendix showing what the outputs should look like at each
stage of the encryption standard given a known key and a known input.
There’s also at least one &lt;a href=&quot;https://opencores.org/projects/tiny_aes&quot;&gt;AES algorithm on
OpenCores&lt;/a&gt; that you might use.
In general, references are available for your work with digital design,
you might just need to spend some time looking for them.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Add debug &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$display&lt;/code&gt; statements to the design, and make them both human
readable and computer friendly.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Use those debug statements to feed the golden reference.&lt;/p&gt;

    &lt;p&gt;This is the key feature I’ll be discussing in a moment.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Now look for the first difference between the reference and any broken 
trace.&lt;/p&gt;

    &lt;p&gt;Remember, the golden reference &lt;em&gt;works&lt;/em&gt;.  Therefore, any discrepancy or
other difference between the golden reference and your design will be
something you want to dig into.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Let’s walk through how this works, by discussing the last
&lt;a href=&quot;https://en.wikipedia.org/wiki/Error_correction_code&quot;&gt;ECC&lt;/a&gt;
problem I worked on: adding a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Cyclic_redundancy_check&quot;&gt;CRC&lt;/a&gt;
to a memory controller, prior to the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Error_correction_code&quot;&gt;ECC&lt;/a&gt;
parity generator and then checking it at the back end.&lt;/p&gt;

&lt;p&gt;What made this
&lt;a href=&quot;https://en.wikipedia.org/wiki/Cyclic_redundancy_check&quot;&gt;CRC&lt;/a&gt;
task challenging was that the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Error_correction_code&quot;&gt;ECC&lt;/a&gt;
parity bits were packed together–even across byte boundaries.  The
&lt;a href=&quot;https://en.wikipedia.org/wiki/Cyclic_redundancy_check&quot;&gt;CRC&lt;/a&gt; bits, therefore,
needed to be packed together with the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Error_correction_code&quot;&gt;ECC&lt;/a&gt;
parity bits.  Not only that, both needed to be gathered together and assembled
separate from the data itself.  Together, this created data blocks looking
somewhat like Fig. 2 below when transmitted.  (Note that the Fig 2. is not
drawn to scale by any means.)&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 2. Data backs consisted of data blocks, followed by CRC then parity&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/eccdbg/packet.svg&quot; alt=&quot;&quot; width=&quot;780&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;The original algorithm I was given handled this via a combined shift
register and memory implementation that had grown to over 2k lines
of Verilog.  It read like a series of cascaded case statements: if this
&lt;a href=&quot;https://en.wikipedia.org/wiki/Error_correction_code&quot;&gt;ECC&lt;/a&gt;
option, this data block size, the data block number, then adjust these bits,
etc.)  Indeed, by the time I started working with this logic, it had
gotten so repetitive that I was using a C++ program to write and update these
thousands of lines of Verilog for me.  Now, this may have been fine originally,
for the simple &lt;a href=&quot;https://en.wikipedia.org/wiki/Error_correction_code&quot;&gt;ECC&lt;/a&gt;
codes this controller was originally built to handle, but the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Error_correction_code&quot;&gt;ECC&lt;/a&gt;
bit-vector had now grown to over 7k bits, each individually accessed, and none
able to be optimized into memory properly.  It got so bad that this part of
the algorithm was starting to dominate the total area cost–and I was going to
add &lt;a href=&quot;https://en.wikipedia.org/wiki/Cyclic_redundancy_check&quot;&gt;CRC&lt;/a&gt;s
to this mess?  No, that wasn’t going to happen–not without a rewrite.&lt;/p&gt;

&lt;p&gt;So, I rewrote the algorithm with a proper gearbox coupled with a proper FIFO.
Moreover, in the hopes that I might be able to reuse the implementation, I
built the gearboxes using standard interfaces: AXI stream, VALID, READY, LAST,
etc, and I even parameterized the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Cyclic_redundancy_check&quot;&gt;CRC&lt;/a&gt;
size so the customer could change it at a later time if they wished to.  All
told, the new implementation took just over 1k Verilog lines of code, and at
least half of that was either comments or formal properties.  That meant
there was a rough 4x reduction in the number of lines of code.  Does this
mean the design is simpler?  In this case, definitely!  It was both simpler
to understand, easier to see what was going on within it, and therefore
simpler to maintain.  The giant tables had been replaced.  The new design
also used less area, so we’re good all around.&lt;/p&gt;

&lt;p&gt;But, how to debug this?&lt;/p&gt;

&lt;p&gt;To give you an idea, then general test setup I was given looked something like
Fig. 3 below.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 3. Test bench setup&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/eccdbg/dbgpath.svg&quot; alt=&quot;&quot; width=&quot;780&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;A test bench script would drive the entire test.  This script would generate
commands to write pseudorandom data to the memory device.  Then, once all the
data had been written, the script would command an error generator to
insert errors into the read path, and then generate commands to read from
the memory device.  The results would be compared against the data written to
the device.  If (and &lt;em&gt;only&lt;/em&gt; if) the number of errors inserted was beyond the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Error_correction_code&quot;&gt;ECC&lt;/a&gt;’s
correction ability, then the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Cyclic_redundancy_check&quot;&gt;CRC&lt;/a&gt;
failure flag was to be set.  In all other cases, the data returned from the
device was required to match the data sent to it.&lt;/p&gt;

&lt;p&gt;Now consider all the steps involved in this process, and ask yourself where
and how would you debug all of this?&lt;/p&gt;

&lt;p&gt;The (obvious) answer should be: starting with unit tests.  Each individual
unit should be tested and verified separately, and known to work before
being integrated into the larger whole.  For unit tests, I turn to formal
methods.  One of the things I like about formal methods is that, any time you
get a property (i.e. an assertion) failure, that failure will lead you directly
to the failed assertion, which is usually nearby the logic it defends, and so
formal methods will typically find bugs in about 5-10 steps.  In my case here,
the gearboxes required 40 steps.  Why so many?  Because of a technical problem.
Formal methods don’t handle division very well, and a full induction description
would require that the formal methods implement a divide.  As a result, I
didn’t get induction working.  Still, 40 time steps was enough to give me
strong confidence the gearboxes worked.&lt;/p&gt;

&lt;p&gt;My next step was to use a bench test with
&lt;a href=&quot;/blog/2017/06/21/looking-at-verilator.html&quot;&gt;Verilator&lt;/a&gt;.
You can see this basic setup in Fig. 4 below.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 4. Verilog unit testing&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/eccdbg/vgolden.svg&quot; alt=&quot;&quot; width=&quot;780&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;In this case, the &lt;em&gt;unit&lt;/em&gt; under test was the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Error_correction_code&quot;&gt;ECC&lt;/a&gt;
block separated from the
rest of the design.  In particular, this unit testing approach allowed me
to separate my test from the AXI bus interface, the device interface, and the
device model.  Data came into the test design via the AXI stream protocol,
and then the same protocol was used to take data back out once encoded or
decoded.  Still, as you can see from the figure, the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Error_correction_code&quot;&gt;ECC&lt;/a&gt;
block under test wasn’t quite the &lt;em&gt;working&lt;/em&gt; design given to me, but
rather my modified version of it, now containing
&lt;a href=&quot;https://en.wikipedia.org/wiki/Cyclic_redundancy_check&quot;&gt;CRC&lt;/a&gt;
generation and checking.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 5. Test vector choice&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/eccdbg/tbdesign.svg&quot; alt=&quot;&quot; width=&quot;420&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;One key to this type of testing was the test vectors chosen.  For example,
when building an &lt;a href=&quot;/dsp/2018/10/02/fft.html&quot;&gt;FFT&lt;/a&gt;,
you’ll want to use both impulses and sine waves.  Since this is
&lt;a href=&quot;https://en.wikipedia.org/wiki/Error_correction_code&quot;&gt;ECC&lt;/a&gt;, i.e. linear math
over &lt;a href=&quot;https://en.wikipedia.org/wiki/GF%282%29&quot;&gt;GF2&lt;/a&gt;, I started with vectors of
all zeros, and then vectors with a single bit set, and only then a small number
of countable bits set.  From there I moved on to all bits set and then random
settings.&lt;/p&gt;

&lt;p&gt;What if the design fails with random data?  In that case, you just reduce the
random data vector back to the relevant basis vectors, and try again.&lt;/p&gt;

&lt;p&gt;Thankfully, it wasn’t too difficult to get this
&lt;a href=&quot;/blog/2017/06/21/looking-at-verilator.html&quot;&gt;Verilator&lt;/a&gt;
based test bench working.
In general, the trace led me straight to any bugs–well, that and the fact that
I knew that the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Error_correction_code&quot;&gt;ECC&lt;/a&gt;
algorithm worked initially, so the only thing that could’ve
broken would be associated with one of my changes.  That meant that this
&lt;a href=&quot;/blog/2017/06/21/looking-at-verilator.html&quot;&gt;Verilator&lt;/a&gt;
test bench could then become my “golden reference” model.&lt;/p&gt;

&lt;p&gt;Once things worked in this “golden” model, I could then integrate this updated
design back into the memory controller it was originally a part of. 
Not only that, but remember this was a maintenance task.  In other words,
I needed to modify logic someone else had written years ago, logic that
I wasn’t familiar with–a recipe for problems, no?&lt;/p&gt;

&lt;p&gt;This brings us back to the integrated test bench design shown in Fig. 3.
The good news is that we come into this integrated test design with something
known to work.&lt;/p&gt;

&lt;p&gt;Now, let me point out a problem with the type of integrated testing shown in
Fig. 3: the test bench script won’t notice any data failures until late in
the process.  This is just the nature of the perspective of a black box.
Data will first need to be written to a staging area, then pushed through
the device path, transferred to the external memory device model, then
transferred back, then copied out of the controller–and only then would any
errors be noted and flagged–all in good &lt;a href=&quot;https://en.wikipedia.org/wiki/Black-box_testing&quot;&gt;black box testing
fashion&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This wonderful &lt;a href=&quot;https://en.wikipedia.org/wiki/Black-box_testing&quot;&gt;black box
testing&lt;/a&gt;
fashion might be great for proving that a
design does what it is supposed to, but it is horrible for telling you what
fails when it fails.  Why?  Because the failure isn’t noticed until microseconds
of simulation time later, and only after thousands of data transfers.  That’s
a lot of trace you have to back through manually to find any bugs.  There’s
another word for that: pain.&lt;/p&gt;

&lt;p&gt;This is where the debugging statements came into the design.  To show you what
I mean, the following lines have been clipped from the design.  First,
as every word went into the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Error_correction_code&quot;&gt;ECC&lt;/a&gt;, and now the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Cyclic_redundancy_check&quot;&gt;CRC&lt;/a&gt;+&lt;a href=&quot;https://en.wikipedia.org/wiki/Error_correction_code&quot;&gt;ECC&lt;/a&gt;
algorithm, I dumped it to the simulation log.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;localparam&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;OPT_ECC_DEBUG&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1'b1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OPT_ECC_DEBUG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GEN_ECC_DEBUG&lt;/span&gt;
		&lt;span class=&quot;kt&quot;&gt;integer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ik&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset_n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ecc_enabled&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tx_data_valid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tx_data_ready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ECC-TX: %08x&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ecc_data_tx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We can call this test point #1.&lt;/p&gt;

&lt;p&gt;Once an entire block of data had gone through the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Error_correction_code&quot;&gt;ECC&lt;/a&gt;
encoder, it would then generate parity bits.  I dumped these to the same
log as well.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset_n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ecc_enabled&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tx_parity_valid&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tx_parity_ready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
			&lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ECC-TX: RES&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ik&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ik&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PARITY_BITS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ik&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ik&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot; %04x&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tx_parity_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ik&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
			&lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;(This test point doesn’t get a number, because my diagram in Fig. 3
doesn’t really show this part of the path very well.)&lt;/p&gt;

&lt;p&gt;I repeated the same process on receive.  As data came into the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Error_correction_code&quot;&gt;ECC&lt;/a&gt; decoder,
it was also dumped to the log.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset_n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rx_data_valid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ecc_enabled&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rx_data_last&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ECC-RX: %08x -- LAST at %t&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
							&lt;span class=&quot;n&quot;&gt;rx_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
				&lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ECC-RX: %08x&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rx_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We can call this test point #2.&lt;/p&gt;

&lt;p&gt;Before moving on, I should point out a key feature of this test point that
I don’t want to pass up, and that is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$time&lt;/code&gt;.  One of the challenges of
working with both simulation logs and trace files together is synchronizing the
two.  That’s where &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$time&lt;/code&gt; comes in handy, and I’ve gotten to using it in
this manner often.  Because this test point outputs &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$time&lt;/code&gt;, I can now use
the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$time&lt;/code&gt; in this log to find the associated step in the trace and to
then see the context associated with this &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$display()&lt;/code&gt; function call.&lt;/p&gt;

&lt;p&gt;Finally, when the decoder made it’s error correction decisions, those were
also dumped to the log.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset_n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ecc_enabled&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ecc_data_valid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ecc_data_ready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ECC-MASK: %08x&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ecc_data_mask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We can call this test point #3.&lt;/p&gt;

&lt;p&gt;For reference, you can see all of these test points in Fig. 6 below.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 6. Test points&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/eccdbg/testpoints.svg&quot; alt=&quot;&quot; width=&quot;780&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;The first step to analyzing this log file was to search for all lines
starting with “ECC-“.  In the future, if I do this again, I’ll probably write
to a specific
&lt;a href=&quot;https://en.wikipedia.org/wiki/Error_correction_code&quot;&gt;ECC&lt;/a&gt;
log file, but for now these messages were dumped together
with the rest of the simulation log.  The good news is that the rest of the
simulation log provides the context for what’s going on.  The bad news is that
dumping 16kB of data for an
&lt;a href=&quot;https://en.wikipedia.org/wiki/Error_correction_code&quot;&gt;ECC&lt;/a&gt;
engine doesn’t make a pseudo human-readable log any more legible.  Because
of the mess this makes of the simulation log, I’ve gated all of this logic
with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OPT_ECC_DEBUG&lt;/code&gt; parameter and only turn the parameter on when I
need to.&lt;/p&gt;

&lt;p&gt;Even before building any better capabilities, this helped: it allowed me to
see the data going into the gearboxes, and then coming out again.  I could
then make sure that things were lined up properly.&lt;/p&gt;

&lt;p&gt;It wasn’t enough.&lt;/p&gt;

&lt;p&gt;One particular problem was that the TX and RX data were so far separated in
time.  That made it difficult to tell whether any problem lied between
&lt;a href=&quot;https://en.wikipedia.org/wiki/Error_correction_code&quot;&gt;ECC&lt;/a&gt; components, such
as in the transmitter to the device, the memory model, the test-bench error
generator, or the receive logic on the other end.  However, it wasn’t all
that hard to generate a simple C++ program to process this pseudo human-readable
data, to place the TX data next to the RX data and then notice if anything had
changed.  This one piece of software alone helped me catch nearly all of my
bugs.  (Remember, I started with a &lt;em&gt;working&lt;/em&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Error_correction_code&quot;&gt;ECC&lt;/a&gt;
design–that means most bugs should be confined to my changes alone.
Unfortunately, I changed a lot of stuff.)&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 7. Feeding the golden reference model&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/eccdbg/binfile.svg&quot; alt=&quot;&quot; width=&quot;780&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;That software alone, however, wasn’t sufficient.  It was close, but not quite
there, and this is where today’s particular problem comes into play: because
&lt;a href=&quot;https://en.wikipedia.org/wiki/Error_correction_code&quot;&gt;ECC&lt;/a&gt;
is a challenge to debug, I needed to know more of what was going on &lt;em&gt;inside&lt;/em&gt;
the &lt;a href=&quot;https://en.wikipedia.org/wiki/Error_correction_code&quot;&gt;ECC&lt;/a&gt;
algorithm.  This is where the third debugging step comes
into play: feeding the golden reference model.  That is, I adjusted my
log reading program so that it could generate a binary file that could then
be ingested into my golden reference model, as shown in Fig. 7 above.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;padding: 25px; float: left&quot;&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/eccdbg/feedref.svg&quot; alt=&quot;&quot; width=&quot;420&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;At one point, it was only by comparing the trace coming out of the golden
reference model with the one from my larger integrated test environment that
I found the bug.  One of the bugs I found was even in
the &lt;a href=&quot;/blog/2017/06/21/looking-at-verilator.html&quot;&gt;Verilator&lt;/a&gt;
translation of my Verilog, and so I thank the
&lt;a href=&quot;/blog/2017/06/21/looking-at-verilator.html&quot;&gt;Verilator&lt;/a&gt;
team, and in this case Mr. Snyder in particular, for fixing it quickly.&lt;/p&gt;

&lt;h2 id=&quot;customers&quot;&gt;Customers&lt;/h2&gt;

&lt;p&gt;I wish I could say this was the end of the story: the design worked, and should
now be shipped.  Sadly, it wasn’t.  Three further problems then turned the
simple update listed above into a nightmare for both my team and our customer.&lt;/p&gt;

&lt;p&gt;First, as a simple background, let me set the stage: I offered to make this
maintenance upgrade for a simple two weeks of work.  The updates were simple
enough, they should’ve only taken two weeks.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/eccdbg/requirements.svg&quot; alt=&quot;&quot; width=&quot;420&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;It was only once those two weeks were over that the challenges began.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Once I was ready to turn in the work, the customer started demanding
other changes.  (Changes that they had no intention of paying for …)
Worse, they were asking for fundamental changes which would force me
back to the drawing board for this design.&lt;/p&gt;

    &lt;p&gt;The laughable part of these demands?  In the same breath they asked for
a fundamental redesign, they also asked for the current design to be
shipped in order to support their RTL freeze date in less than two more
weeks.  Then they were upset when we didn’t deliver according to their
schedule, when they were the ones who changed the requirements mid-task.
Seriously.  You just can’t make this stuff up.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;One problem I wasn’t expecting was that the memory device model implemented
address regions not present in the actual memory device.  Adding a four byte
&lt;a href=&quot;https://en.wikipedia.org/wiki/Cyclic_redundancy_check&quot;&gt;CRC&lt;/a&gt; required all
of the addresses within to be updated to make room for these extra four
bytes.  How many places did these addresses need to be updated in?  Let’s
just say that I really dislike &lt;a href=&quot;https://en.wikipedia.org/wiki/Magic_number_(programming)&quot;&gt;magic
numbers&lt;/a&gt;, since
their usage in this project by the prior developer made this part of the
update all the more painful.&lt;/p&gt;

    &lt;p&gt;You can read some more of &lt;a href=&quot;/blog/2022/09/21/vlog-wait.html&quot;&gt;my thoughts on test bench design
here&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The last problem was a repository merge nightmare.  Sadly, I had made my
changes to a design that wasn’t the “latest” design–the customer had
submitted changes to the design that I was unaware of.  I didn’t discover
this until after I had turned my changes in.  Then I discovered I was
about two versions behind the official latest version.  Bugs discovered
here were …  anything but what I was expecting.&lt;/p&gt;

    &lt;p&gt;For example, one of the test scripts depended upon a 1000 clock cycle
reset.  This script would wait 100 cycles, then set a “fixed” value that
needed to be referenced when the design came out of reset.  The test bench
script then then waited for the signal that this (optional) startup process
had taken place.  Not knowing this, I had come along and tried to speed
up the simulation by switching to a 3-cycle reset and … all kinds of
regression hell broke lose when the two “working” designs needed to be
merged.  Was there any documentation discussing why a 1000 clock cycle
reset was necessary, or why a key reset input wouldn’t get set until 100
clock cycles into the simulation?  Well, one might hope.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The end result was that I spent another 2-3 months, beyond the 2-week update
task, working on the test bench, rebuilding the model, fixing &lt;a href=&quot;https://en.wikipedia.org/wiki/Magic_number_(programming)&quot;&gt;magic
numbers&lt;/a&gt;,
fixing &lt;a href=&quot;https://en.wikipedia.org/wiki/Rule_of_three_(computer_programming)&quot;&gt;the many places the same task was
accomplished&lt;/a&gt; in error, and more.&lt;/p&gt;

&lt;p&gt;My simple two week task?  Sure, it took two weeks to do.  It then took another
two months arguing with the customer over what the requirements needed to be.
Another month was then spent chasing down bugs associated with merging
the repository, and then another two were spent dealing with further
consequences of the original merge as they continued to ripple through the
&lt;a href=&quot;/blog/2022/09/21/vlog-wait.html&quot;&gt;test model and test script
library&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;And the customer?  The customer wanted to know why the design couldn’t be
delivered the same afternoon that I submitted my changes to the official
repository.  Worse, they are now convinced that the problems associated with
these updates are due to the unreliability of the IP they purchased, rather
than rippling consequences of the changes they made working their way
through the design.&lt;/p&gt;

&lt;h2 id=&quot;conclusions&quot;&gt;Conclusions&lt;/h2&gt;

&lt;p&gt;When faced with a really &lt;em&gt;hard&lt;/em&gt; HDL problem, consider using a golden
reference model and comparing your design against that reference.  Any
differences between the two should lead you directly to any bugs.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/tweets/bible/diligence.svg&quot; alt=&quot;&quot; width=&quot;420&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;As for difficult customers?  Be honest.  Smile, and do your best.  There will
be other customers.&lt;/p&gt;

&lt;p&gt;Oh, and the end of this tale?  I’m now working to port those same changes to
another controller, which means I get to reuse both my golden reference model,
as well as the software I used to reformat the data into something that could
be ingested into it.  Once I post this article, I’ll go back to looking for
the differences between the two.  The good Lord only knows what I’ll find
at this point.&lt;/p&gt;

&lt;hr /&gt;&lt;p&gt;&lt;em&gt;Be careful for nothing; but in every thing by prayer and supplication with thanksgiving let your requests be made known unto God.&lt;/em&gt;</description>
        <pubDate>Mon, 13 Feb 2023 00:00:00 -0500</pubDate>
        <link>https://zipcpu.com/blog/2023/02/13/eccdbg.html</link>
        <guid isPermaLink="true">https://zipcpu.com/blog/2023/02/13/eccdbg.html</guid>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>Your soft-core CPU won't boot.  Where should you start debugging?</title>
        <description>&lt;p&gt;When I first decided to start &lt;a href=&quot;/about/gisselquist-technology.html&quot;&gt;Gisselquist
Technology&lt;/a&gt;, one of my
first internal projects was to see if I could get the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Linux&quot;&gt;Linux&lt;/a&gt; kernel to boot from a read-only
file system–to promote longevity on a flash device, using a kernel that I
could swap out remotely at a later time via a call to
&lt;a href=&quot;https://wiki.archlinux.org/title/kexec&quot;&gt;kexec()&lt;/a&gt;.  I intended to
do this using a &lt;a href=&quot;https://beagleboard.org/black&quot;&gt;Beagle Board Black&lt;/a&gt;, and then
to sell the capability to a customer as something they could do with their
own internally developed boards.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left; padding: 25px&quot;&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/no-boot/blank-screen.svg&quot; alt=&quot;&quot; width=&quot;320&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;So, I made a bunch of kernel configuration changes, and then tried to boot
my newly configured kernel.&lt;/p&gt;

&lt;p&gt;Nothing happened.&lt;/p&gt;

&lt;p&gt;I just stared at a blank screen.&lt;/p&gt;

&lt;p&gt;At the time, I had no idea where to start.&lt;/p&gt;

&lt;p&gt;Since that time, I’ve gone on to build &lt;a href=&quot;/about/zipcpu.html&quot;&gt;my own
CPU&lt;/a&gt;.  In other words, I’ve now had
to deal with this problem many times over, where I “start” my CPU and
nothing happens.  No, I haven’t gone back to the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Linux&quot;&gt;Linux&lt;/a&gt;
kernel, but I’ve
still had the same basic problem.&lt;/p&gt;

&lt;p&gt;There is one key difference, however: with a soft-core CPU, 1) I know my
hardware (I never knew the ARM that well), and 2) I can run a
&lt;a href=&quot;/blog/2018/08/22/what-is-simulation.html&quot;&gt;simulation&lt;/a&gt;
of that hardware and &lt;a href=&quot;/blog/2017/07/08/getting-started-with-wbscope.html&quot;&gt;get a
trace&lt;/a&gt;
leading me straight to the problem.  (Yes, this is a
painful approach, but it is a reliable one.)&lt;/p&gt;

&lt;p&gt;So, let me offer you some of the lessons I’ve learned while trying to debug
the startup of the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;.
Specifically, how shall the CPU be debugged between when it is released from
reset and the first (successful) call to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;printf()&lt;/code&gt;?&lt;/p&gt;

&lt;h2 id=&quot;how-to-debug-a-boot-failure&quot;&gt;How to debug a boot failure&lt;/h2&gt;

&lt;p&gt;So, let’s look into how one might debug a “boot failure”.  In this case, by
“boot failure”, I mean that you’ve “loaded” both your soft-core CPU either
into &lt;a href=&quot;/blog/2018/08/22/what-is-simulation.html&quot;&gt;simulation&lt;/a&gt;
or onto an FPGA, and your program onto your memory device
and then something goes wrong between &lt;a href=&quot;/zipcpu/2017/07/14/cpu-debugging-needs.html&quot;&gt;releasing the CPU from
reset&lt;/a&gt;
and the first console output.  The question here and now is, how do you
debug that?  I mean, a CPU represents a lot of logic to dig through, and
there’s a lot of software between reset and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main()&lt;/code&gt;.  How do you go about
narrowing down the problem to find the bug?&lt;/p&gt;

&lt;p&gt;Here’s some of the approaches I’ve found valuable.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Start at the &lt;a href=&quot;/zipcpu/2018/03/21/dblfetch.html&quot;&gt;instruction
fetch&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;My first step is almost always to look at a
&lt;a href=&quot;/blog/2018/08/22/what-is-simulation.html&quot;&gt;simulation&lt;/a&gt;
trace of the &lt;a href=&quot;/zipcpu/2018/03/21/dblfetch.html&quot;&gt;instruction
fetch&lt;/a&gt;.&lt;/p&gt;

    &lt;p&gt;For this, you’ll first need a hex dump of the program you are trying to run.
I usually get this from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;objdump -S -D &amp;lt;program&amp;gt;&lt;/code&gt;.  Indeed, I use this
command so often, I have a &lt;a href=&quot;https://github.com/ZipCPU/zbasic/blob/dc132be3af68e430bf6f915880d1d7256e0f307f/sw/board/Makefile#L80-L81&quot;&gt;common “make”
target&lt;/a&gt;
that I will use to produce this dump file.&lt;/p&gt;

    &lt;p&gt;Now, looking at the dump file, open a &lt;a href=&quot;/blog/2017/07/31/vcd.html&quot;&gt;simulation
trace&lt;/a&gt; and look at the
address and value of the first several instructions coming from the
&lt;a href=&quot;/zipcpu/2018/03/21/dblfetch.html&quot;&gt;instruction fetch&lt;/a&gt;
and going to the CPU’s core.  These address/value pairs
should match a dump of your executable file.&lt;/p&gt;

    &lt;p&gt;If they don’t match, that should tell you where to look next:&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;Reset problems&lt;/p&gt;

        &lt;p&gt;Are you getting any instructions from the
&lt;a href=&quot;/zipcpu/2018/03/21/dblfetch.html&quot;&gt;instruction fetch&lt;/a&gt;
at all?  If not, you might have a bug in your &lt;a href=&quot;/zipcpu/2017/08/25/hw-debugging.html&quot;&gt;reset
control&lt;/a&gt;.
Does the CPU come out of reset at all?  If it does, does it come out
of reset reading from the right address?&lt;/p&gt;

        &lt;p&gt;It can be a challenge to get a CPU, configured to boot from a
&lt;a href=&quot;/blog/2019/03/27/qflexpress.html&quot;&gt;flash memory&lt;/a&gt;
address, to start from a different address describing some other memory
that might be easier to work with–such as block RAM.  I often do this to
initially verify the CPU, before verifying the
&lt;a href=&quot;/blog/2019/03/27/qflexpress.html&quot;&gt;flash memory&lt;/a&gt;, but
getting a program to load and start properly from somewhere other than the
reset address can be a true test of both the loader and the &lt;a href=&quot;/zipcpu/2017/07/26/cpu-sim-debugger.html&quot;&gt;CPU’s
debugging port&lt;/a&gt;.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Loader&lt;/p&gt;

        &lt;p&gt;Did your software get loaded into the right place?  That is, if the CPU
is coming out of reset properly, and if it is reading from the right
addresses, is it getting the right values?  If not, then this is worth
chasing down through the
&lt;a href=&quot;/blog/2017/07/31/vcd.html&quot;&gt;VCD trace&lt;/a&gt;.
You might find that you haven’t loaded the right values into memory in
the first place.  (Or … you might also find that either your
&lt;a href=&quot;/zipcpu/2018/03/21/dblfetch.html&quot;&gt;instruction fetch&lt;/a&gt;
unit, your
&lt;a href=&quot;/blog/2019/07/17/crossbar.html&quot;&gt;interconnect&lt;/a&gt;, or
your memory controller are broken ….)&lt;/p&gt;

        &lt;p&gt;In my case, I often need to be reminded that the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; is a &lt;a href=&quot;https://en.wikipedia.org/wiki/Endianness&quot;&gt;big 
endian&lt;/a&gt; machine while my host
computer is a x86 type of &lt;a href=&quot;https://en.wikipedia.org/wiki/Endianness&quot;&gt;little
endian&lt;/a&gt; machine.  Sometimes
a translation is required between the two.&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/no-boot/nfs.svg&quot; alt=&quot;&quot; width=&quot;420&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Memory controller problems&lt;/p&gt;

    &lt;p&gt;Before you start your CPU, it’s often worth double checking the load
interface.  After writing to address XYZ, for example, can you read the
same value back from address XYZ that you have just written to it?  This
problem may be indistinguishable from a loader problem.  In both cases,
values will be read from memory, but they won’t be the right values.&lt;/p&gt;

    &lt;p&gt;To tell the difference between loader and memory controller problems, pick
one address that the
&lt;a href=&quot;/zipcpu/2018/03/21/dblfetch.html&quot;&gt;fetch&lt;/a&gt;
returns in error and track what’s written to it.
If the loader puts the right value into it, but the memory controller
returns something else, then you know to look into your memory controller
for the bug.  We’ll come back to this again in a moment.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left; padding: 25px&quot;&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/no-boot/financial.svg&quot; alt=&quot;&quot; width=&quot;420&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;You can often dig into this bug using a &lt;a href=&quot;/2017/06/05/wb-bridge-overview.html&quot;&gt;debugging
  bus&lt;/a&gt;: While &lt;a href=&quot;/zipcpu/2017/07/14/cpu-debugging-needs.html&quot;&gt;holding
  the CPU in
  reset&lt;/a&gt;,
  write to the memory that will hold it’s program and then
  read the memory values back out.  They should match.  This doesn’t always
  work, however, since the CPU might use types of accesses to the memory
  that the &lt;a href=&quot;/2017/06/05/wb-bridge-overview.html&quot;&gt;debug bus&lt;/a&gt;
  &lt;a href=&quot;/2021/12/30/dbgaxil.html&quot;&gt;doesn’t support–things like
  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ARLEN&amp;gt;0&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ARBURST=WRAP&lt;/code&gt;&lt;/a&gt;–but
  it’s at least a good start.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/no-boot/why-auto.svg&quot; alt=&quot;&quot; width=&quot;420&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Bus addressing&lt;/p&gt;

    &lt;p&gt;There’s always the possibility that you have an error in how the
&lt;a href=&quot;/blog/2019/07/17/crossbar.html&quot;&gt;bus interconnect&lt;/a&gt;
was set up.  Perhaps the
&lt;a href=&quot;/blog/2019/07/17/crossbar.html&quot;&gt;bus interconnect&lt;/a&gt;
is routing the CPU’s reset address to the wrong slave, perhaps you have
the wrong number of address wires driving the slave.  Either way, you’ll
see this problem when tracing the instruction request from the CPU back
to the bus slave responding to it.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;ol start=&quot;2&quot;&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Crt0&quot;&gt;CRT0&lt;/a&gt; is just a bunch of memory copies.  Look for the loops.&lt;/p&gt;

    &lt;p&gt;The first piece of software any CPU starts is often known as
&lt;a href=&quot;https://en.wikipedia.org/wiki/Crt0&quot;&gt;CRT0&lt;/a&gt;.  This
is the software that sits between reset and main().  This is the software
responsible for placing your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main()&lt;/code&gt; program into memory.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left; padding: 25px&quot;&gt;&lt;caption&gt;Fig 1. CRT0 is primarily a bunch of memory copies&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/no-boot/crt0.svg&quot; alt=&quot;&quot; width=&quot;480&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;The first thing
   &lt;a href=&quot;https://en.wikipedia.org/wiki/Crt0&quot;&gt;CRT0&lt;/a&gt;
   needs to do is to configure your RAM or ROM controllers.  The next step
   is usually a series of memory copies.&lt;/p&gt;

&lt;p&gt;On many computers, &lt;a href=&quot;https://en.wikipedia.org/wiki/Crt0&quot;&gt;CRT0&lt;/a&gt;
   is written in assembler.  While I tried to avoid that with the
   &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;, there’s still &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/bc3ced1d51c975b20877d39aac0a578a461835f5/sim/zipsw/zlib/crt0.c#L165-L219&quot;&gt;a small
   assembly routine required&lt;/a&gt;
   before I can transition to the C function that performs the actual
   memory copies–&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/bc3ced1d51c975b20877d39aac0a578a461835f5/sim/zipsw/zlib/crt0.c#L266&quot;&gt;a function I’ve named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_bootloader&lt;/code&gt;&lt;/a&gt;.
   The small assembler script is responsible for any hardware configurations
   necessary to get the RAM running, for then setting the
   &lt;a href=&quot;https://en.wikipedia.org/wiki/Stack_register&quot;&gt;stack pointer&lt;/a&gt;,
   and finally for calling the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_bootloader&lt;/code&gt; function.  This is marked
   as step 1 in Fig. 1 above.  Because this step is so small, typically
   less than 20 instructions, it can easily be debugged using the
   &lt;a href=&quot;/blog/2017/07/31/vcd.html&quot;&gt;VCD trace file&lt;/a&gt; if necessary.&lt;/p&gt;

&lt;p&gt;This is not the case with the step that follows.&lt;/p&gt;

&lt;p&gt;The first step of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_bootloader&lt;/code&gt; function, marked as step 2 in Fig. 1,
   is a big memory copy.  It will &lt;a href=&quot;https://github.com/ZipCPU/zbasic/blob/dc132be3af68e430bf6f915880d1d7256e0f307f/sw/zlib/crt0.c#L324-L333&quot;&gt;copy instruction memory from ROM to RAM&lt;/a&gt;,
   and then again to &lt;a href=&quot;https://github.com/ZipCPU/zbasic/blob/dc132be3af68e430bf6f915880d1d7256e0f307f/sw/zlib/crt0.c#L324-L333&quot;&gt;copy any pre-initialized global variables from ROM to
   RAM&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Debugging this memory copy can be a challenge.&lt;/p&gt;

&lt;p&gt;So how do you go about debugging a
   &lt;a href=&quot;https://cplusplus.com/reference/cstring/memcpy/&quot;&gt;memcpy()&lt;/a&gt;?
   That piece of software 
   is just a huge loop!  The CPU may be copying millions of bytes, and
   so staring at this trace can quickly get frustrating.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/no-boot/zippc.svg&quot; alt=&quot;&quot; width=&quot;420&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Here’s the trick: instruct your
   &lt;a href=&quot;/blog/2017/07/31/vcd.html&quot;&gt;VCD&lt;/a&gt;
   &lt;a href=&quot;https://gtkwave.sourceforge.net&quot;&gt;viewer&lt;/a&gt;
   (I use &lt;a href=&quot;http://gtkwave.sourceforge.net&quot;&gt;GTKWave&lt;/a&gt;)
   to display the CPU instruction address register, often called the &lt;a href=&quot;https://en.wikipedia.org/wiki/Program_counter&quot;&gt;program
   counter or PC (for short)&lt;/a&gt;,
   as an “analog” waveform.  Then zoom out.  Watch how this waveform changes,
   and you’ll quickly find where the loop begins and ends.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Make sure the bus doesn’t freeze up while reading.  This is often a sign
that you didn’t formally verify a bus component.  It could be either
&lt;a href=&quot;https://zipcpu.com/zipcpu/2021/04/17/axilops.html&quot;&gt;CPU’s memory
controller&lt;/a&gt;, the
hardware memory controller, or the
&lt;a href=&quot;/blog/2019/07/17/crossbar.html&quot;&gt;interconnect&lt;/a&gt; between
the two.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Look for loops that do not end.  This is often a sign that either the
CPU can’t execute the instructions you think it can, or that the CPU
is reading the wrong data from memory.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Now debug the beginning and ending of these loops&lt;/p&gt;

    &lt;p&gt;If the first word is correctly copied into memory but the last word is not,
then bisect the loop as many times as necessary to find the bug.  Perhaps
you are copying from a device that isn’t as big as you think it is?
Perhaps you have an incorrect copy size?&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;One problem I’ve often had here can be traced to trying to use one
   &lt;a href=&quot;https://en.wikipedia.org/wiki/Crt0&quot;&gt;CRT0&lt;/a&gt;
   routine for many hardware situations.  For example, sometimes I’ll have a
   high speed (block RAM) address range to copy memory to in addition to a
   (slower speed) SDRAM address range.  To tell the difference, I need to
   check this block RAM address against NULL &lt;em&gt;after linking&lt;/em&gt;.  However, GCC
   will often &lt;em&gt;assume&lt;/em&gt; the address is not NULL (because of how I’ve declared
   it), and so skip this comparison.  In this case, the CPU didn’t run all the
   &lt;a href=&quot;https://cplusplus.com/reference/cstring/memcpy/&quot;&gt;memcpy()&lt;/a&gt;’s I had
   requested.  Looking over how
   &lt;a href=&quot;https://github.com/ZipCPU/zbasic/blob/dc132be3af68e430bf6f915880d1d7256e0f307f/sw/zlib/crt0.c&quot;&gt;CRT0&lt;/a&gt;
   got translated to assembly should show you if the NULL checks were removed
   by the compiler or not.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left; padding: 25px&quot;&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/no-boot/know-assembly.svg&quot; alt=&quot;&quot; width=&quot;420&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;After copying program memory and initial variables, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_bootloader&lt;/code&gt;
   routine then needs to &lt;a href=&quot;https://github.com/ZipCPU/zbasic/blob/dc132be3af68e430bf6f915880d1d7256e0f307f/sw/zlib/crt0.c#L335-L343&quot;&gt;zero
   out&lt;/a&gt;.
   the &lt;a href=&quot;https://en.wikipedia.org/wiki/.bss&quot;&gt;BSS data segment&lt;/a&gt;.  This basically
   requires a glorified
   &lt;a href=&quot;https://cplusplus.com/reference/cstring/memset/&quot;&gt;memset()&lt;/a&gt;,
   which can be debugged in the same fashion as the
   &lt;a href=&quot;https://cplusplus.com/reference/cstring/memcpy/&quot;&gt;memcpy()&lt;/a&gt; above.&lt;/p&gt;

&lt;ol start=&quot;3&quot;&gt;
  &lt;li&gt;
    &lt;p&gt;Verify the &lt;a href=&quot;/zipcpu/2018/03/21/dblfetch.html&quot;&gt;instruction
fetch&lt;/a&gt; following the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Crt0&quot;&gt;CRT0&lt;/a&gt; routine&lt;/p&gt;

    &lt;p&gt;Once &lt;a href=&quot;https://github.com/ZipCPU/zbasic/blob/dc132be3af68e430bf6f915880d1d7256e0f307f/sw/zlib/crt0.c&quot;&gt;CRT0&lt;/a&gt;
completes, that is once both the (alternative)
&lt;a href=&quot;https://cplusplus.com/reference/cstring/memcpy/&quot;&gt;memcpy()&lt;/a&gt; and
&lt;a href=&quot;https://cplusplus.com/reference/cstring/memset/&quot;&gt;memset()&lt;/a&gt;
functions complete, the CPU should jump to the beginning of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main()&lt;/code&gt;.
This is illustrated as step 4 in Fig. 1 above, and shown in Fig. 2 below.
Therefore, let’s go back to the &lt;a href=&quot;/zipcpu/2018/03/21/dblfetch.html&quot;&gt;instruction
fetch&lt;/a&gt;
and see that it does so.&lt;/p&gt;

    &lt;p&gt;Does the CPU return from the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_bootloader&lt;/code&gt; properly?  Or did
the return address get overwritten somehow?&lt;/p&gt;

    &lt;p&gt;Are the instructions provided to the CPU the correct ones?&lt;/p&gt;

    &lt;p&gt;In one case, I used the DMA to copy data from the
&lt;a href=&quot;/blog/2019/03/27/qflexpress.html&quot;&gt;flash&lt;/a&gt;
to a DDR3 SDRAM via Xilinx’s DDR3 controller.  When I struggled to get the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; software to work, I called
a &lt;a href=&quot;https://github.com/ZipCPU/zbasic/blob/dc132be3af68e430bf6f915880d1d7256e0f307f/sw/zlib/syscalls.c#L54-L68&quot;&gt;software serial port output
routine&lt;/a&gt;
from within &lt;a href=&quot;https://en.wikipedia.org/wiki/Crt0&quot;&gt;CRT0&lt;/a&gt; to help me debug what
was going on.  In that case, the serial port output routine
I used wanted to insert carriage return characters before newlines, and
so it needed to know if the last character was a carriage return.  This
value was supposed to be kept in SDRAM memory–the very memory I
was trying to use and load.  This shouldn’t be a problem, I reasoned,
since at most I might output an extra carriage return, and the
&lt;a href=&quot;https://cplusplus.com/reference/cstring/memcpy/&quot;&gt;memcpy()&lt;/a&gt;
routine would eventually overwrite this value with the correct one anyway.&lt;/p&gt;

    &lt;p&gt;The problem, however, was that using this memory region caused the CPU
to read memory &lt;em&gt;into the data cache before&lt;/em&gt; the DMA completed.  This
left me with with a corrupt copy of data memory in the cache once the
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_bootloader&lt;/code&gt; completed.  In other words, don’t forget to clear the
cache once the DMA completes any memory copies.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;ol start=&quot;4&quot;&gt;
  &lt;li&gt;
    &lt;p&gt;SIM instructions&lt;/p&gt;

    &lt;p&gt;Many CPU’s, to include both &lt;a href=&quot;https://openrisc.io&quot;&gt;OpenRISC&lt;/a&gt; and the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;, have special simulation
only instructions.  These are basically &lt;a href=&quot;https://en.wikipedia.org/wiki/NOP_(code)&quot;&gt;NOOP
instructions&lt;/a&gt; that will cause
the CPU to perform a special task in simulation only.  In the case of the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;, the instruction
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NOUT&lt;/code&gt; can be used to dump a character to the simulation console.  The
instruction &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NDUMP&lt;/code&gt; can be used to dump a register’s value to the console.
The &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; assembler also
understands &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NSTR&lt;/code&gt;, which can be used to create a series of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NOUT&lt;/code&gt;
instructions to send a more readable string to the simulation console.
If these instructions are left in the code when it runs in actual hardware,
then they will simply be ignored like any other
&lt;a href=&quot;https://en.wikipedia.org/wiki/NOP_(code)&quot;&gt;NOOP instruction&lt;/a&gt;.&lt;/p&gt;

    &lt;p&gt;How can you use these?  You can use them to pepper your
&lt;a href=&quot;https://en.wikipedia.org/wiki/Crt0&quot;&gt;CRT0&lt;/a&gt; function with these
instructions, and therefore know how far your CPU got in the
bootup process before it died.&lt;/p&gt;

    &lt;p&gt;In my case, I’ve done this often enough that the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;’s &lt;a href=&quot;https://github.com/ZipCPU/zbasic/blob/dc132be3af68e430bf6f915880d1d7256e0f307f/sw/zlib/crt0.c&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_bootloader&lt;/code&gt;
function&lt;/a&gt;
has the appropriate &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NSTR&lt;/code&gt; commands (commented) throughout, so I can
uncomment these if necessary to tell how far it got in the loading process.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;ol start=&quot;5&quot;&gt;
  &lt;li&gt;
    &lt;p&gt;Use the &lt;a href=&quot;/2017/06/05/wb-bridge-overview.html&quot;&gt;debugging
bus&lt;/a&gt; to your advantage&lt;/p&gt;

    &lt;p&gt;I recently had the opportunity to test both a
&lt;a href=&quot;https://www.apmemory.com/products/psram-iot-ram/&quot;&gt;PSRAM&lt;/a&gt; and a
&lt;a href=&quot;https://1bitsquared.com/products/pmod-hyperram&quot;&gt;HyperRAM&lt;/a&gt; driver
with the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;.  In both cases,
however, the memory needed to be configured properly before it could be
used.  This meant that I needed to modify the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Crt0&quot;&gt;CRT0&lt;/a&gt; function so that it
first configured the memory, and the memory controller, before attempting
to copy the CPU software to memory.&lt;/p&gt;

    &lt;p&gt;To get this right, I first fired up the hardware and used the &lt;a href=&quot;/2017/06/05/wb-bridge-overview.html&quot;&gt;debug
bus&lt;/a&gt; to read and
write hardware memory controller configurations.  Any problems were
debugged using the &lt;a href=&quot;/blog/2017/07/08/getting-started-with-wbscope.html&quot;&gt;WBSCOPE&lt;/a&gt;
until the memory fully worked.  Then, with the same
&lt;a href=&quot;/2017/06/05/wb-bridge-overview.html&quot;&gt;debugging bus&lt;/a&gt;,
I verified that I could read and write values to this memory using the
configuration I was testing.  Only after I tested these memory
configurations did I then tell the CPU to invoke them from its
&lt;a href=&quot;https://en.wikipedia.org/wiki/Crt0&quot;&gt;CRT0&lt;/a&gt; function.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/no-boot/config-flash.svg&quot; alt=&quot;&quot; width=&quot;420&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;The problem was actually a bit worse, though, since I wanted to reconfigure
   the flash memory controller that was responsible for reading the initial
   &lt;a href=&quot;https://en.wikipedia.org/wiki/Crt0&quot;&gt;CRT0&lt;/a&gt; software.  This controller
   naturally started in SPI mode, but I wanted to reconfigure it to run using
   XiP in QSPI mode.  (Normally, my flash controller does this on startup,
   but I was testing an ASIC controller that day that didn’t have such an
   option.)  That meant I needed to:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Configure the external RAM&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Copy a small subroutine to the external RAM.  This got copied to the
same RAM location that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main()&lt;/code&gt; would run from later.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Using that small subroutine, take the flash driver off-line and
reconfigure it&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Return to the original &lt;a href=&quot;https://en.wikipedia.org/wiki/Crt0&quot;&gt;CRT0&lt;/a&gt;
function, to now perform the
&lt;a href=&quot;https://cplusplus.com/reference/cstring/memcpy/&quot;&gt;memcpy()&lt;/a&gt;s as
normal, but this time with a flash running in QSPI XiP mode&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Make sure I flushed the instruction cache, now that my (own) program
memory had changed.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Debugging this was a bit of a pain, but still it was all quite doable.
   The trick was figuring out how to debug the small subroutine, running in
   RAM, that was reconfiguring the flash driver.  For that, I used the
   &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;’s BREAK instruction to force
   it to halt mid-run, where I could &lt;a href=&quot;/zipcpu/2017/08/25/hw-debugging.html&quot;&gt;inspect what the CPU had
   accomplished&lt;/a&gt;.&lt;/p&gt;

&lt;ol start=&quot;6&quot;&gt;
  &lt;li&gt;
    &lt;p&gt;CPU Break instructions&lt;/p&gt;

    &lt;p&gt;The &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; has a &lt;a href=&quot;/zipcpu/2018/01/01/zipcpu-isa.html&quot;&gt;BREAK
instruction&lt;/a&gt;.
Other CPU’s often have something similar.  Sometimes an
illegal instruction gets repurposed to accomplish the same thing.  The
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; uses its
&lt;a href=&quot;/zipcpu/2018/01/01/zipcpu-isa.html&quot;&gt;BREAK instruction&lt;/a&gt;
for debugging.  When/if the CPU hits a
&lt;a href=&quot;/zipcpu/2018/01/01/zipcpu-isa.html&quot;&gt;BREAK instruction&lt;/a&gt;,
it will halt and wait for the debugger.  At this point, I can &lt;a href=&quot;/zipcpu/2017/08/25/hw-debugging.html&quot;&gt;step in and
check&lt;/a&gt; the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;’s register values and any
hardware configurations.  This is really powerful.  For example, you
might:&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left; padding: 25px&quot;&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/no-boot/fundamental.svg&quot; alt=&quot;&quot; width=&quot;420&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Make the first instruction of &lt;a href=&quot;https://en.wikipedia.org/wiki/Crt0&quot;&gt;CRT0&lt;/a&gt;
a &lt;a href=&quot;/zipcpu/2018/01/01/zipcpu-isa.html&quot;&gt;BREAK instruction&lt;/a&gt;.
If the CPU hits the break, you know it managed to 1) boot from the right
address, and 2) read the right instruction at that address.  (While
it’s possible you might still read the right instruction in spite of
these being in error, this would break the fundamental assumption of all
debugging.)&lt;/p&gt;

    &lt;p&gt;This is a big help, especially if you are stuck debugging the CPU
from hardware.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Place a second
&lt;a href=&quot;/zipcpu/2018/01/01/zipcpu-isa.html&quot;&gt;BREAK instruction&lt;/a&gt;
after configuring memory.  Now go in and check: was the memory configured
correctly?  Can you still read and write your memory via a
&lt;a href=&quot;/2017/06/05/wb-bridge-overview.html&quot;&gt;debugging bus&lt;/a&gt;?
If not, then back up and fix your bug.&lt;/p&gt;

    &lt;p&gt;In the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;’s case, the
debugger isn’t (yet) smart enough to handle more than one
&lt;a href=&quot;/zipcpu/2018/01/01/zipcpu-isa.html&quot;&gt;BREAK instruction&lt;/a&gt;.
I will therefore recompile the software without the first
&lt;a href=&quot;/zipcpu/2018/01/01/zipcpu-isa.html&quot;&gt;BREAK instruction&lt;/a&gt;,
but now including the second one.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Place another
&lt;a href=&quot;/zipcpu/2018/01/01/zipcpu-isa.html&quot;&gt;BREAK instruction&lt;/a&gt;
after each of the various
&lt;a href=&quot;https://cplusplus.com/reference/cstring/memcpy/&quot;&gt;memcpy()&lt;/a&gt;
functions within &lt;a href=&quot;https://en.wikipedia.org/wiki/Crt0&quot;&gt;CRT0&lt;/a&gt;.  Are each
of these
&lt;a href=&quot;/zipcpu/2018/01/01/zipcpu-isa.html&quot;&gt;BREAK instructions&lt;/a&gt;
getting hit?
When they are hit, has the memory that was supposed to be copied been
copied properly?  I usually just check a couple of addresses: the first
three and the last three.  I tend not to check the middle unless these
first and last ones are too repetitive to provide me with any confidence
that the copy was done properly.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Make the first instruction of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main()&lt;/code&gt; a
&lt;a href=&quot;/zipcpu/2018/01/01/zipcpu-isa.html&quot;&gt;BREAK instruction&lt;/a&gt;.
Does the CPU get that far?&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Let’s back up to our original list and keep going.  For example …&lt;/p&gt;

&lt;ol start=&quot;7&quot;&gt;
  &lt;li&gt;
    &lt;p&gt;What if your CPU doesn’t have a break instruction?&lt;/p&gt;

    &lt;p&gt;If your CPU doesn’t have a break instruction, sometimes you can get away
with a “branch to the current address” instruction, and so create a very
tight loop.  While it’s not quite the same thing, it can still work for this
purpose.&lt;/p&gt;

    &lt;p&gt;If your CPU doesn’t have a &lt;a href=&quot;/zipcpu/2017/08/25/hw-debugging.html&quot;&gt;debug access port to read and write registers
from&lt;/a&gt;,
then you may need to spend a lot of time doing the same thing with
LEDs.  While slower, it’s still doable.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left; padding: 25px&quot;&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/no-boot/clib-printf.svg&quot; alt=&quot;&quot; width=&quot;420&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;ol start=&quot;8&quot;&gt;
  &lt;li&gt;
    &lt;p&gt;Console output, but without the console device driver&lt;/p&gt;

    &lt;p&gt;If you can get to the BREAK instruction at the beginning of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main()&lt;/code&gt;,
then you are almost there.  Once you get this far, if you are still not
there then the problem must exist between &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main()&lt;/code&gt; and the first console
output.&lt;/p&gt;

    &lt;p&gt;The next check, therefore, is to make sure the console even works.&lt;/p&gt;

    &lt;p&gt;There are a couple of problems you might have here.  For example, is the
console port properly connected to the bus?  Is it at the right address?&lt;/p&gt;

    &lt;p&gt;For this, you can again use the
&lt;a href=&quot;/2017/06/05/wb-bridge-overview.html&quot;&gt;debugging bus&lt;/a&gt;.
Use it to write to the console device while the CPU is halted.  Do the
values you write get written to the CPU’s console?  If not, then pull
it up in the
&lt;a href=&quot;/blog/2018/08/22/what-is-simulation.html&quot;&gt;simulator&lt;/a&gt;
and figure out why not.&lt;/p&gt;

    &lt;p&gt;If it fails in the
&lt;a href=&quot;/blog/2018/08/22/what-is-simulation.html&quot;&gt;simulator&lt;/a&gt;,
then you should have all the information you need to know how to fix it.&lt;/p&gt;

    &lt;p&gt;If it works in the
&lt;a href=&quot;/blog/2018/08/22/what-is-simulation.html&quot;&gt;simulator&lt;/a&gt;,
but not in actual hardware, then check that
the &lt;a href=&quot;/blog/2017/05/24/serial-port.html&quot;&gt;right IO pin is connected, and that the serial port is configured for
the baud right rate&lt;/a&gt;.
(You can read about &lt;a href=&quot;https://zipcpu.com/blog/2018/08/04/sim-mismatch.html&quot;&gt;other reasons why a design might work in simulation,
but not in real hardware,
here&lt;/a&gt;.)&lt;/p&gt;

    &lt;p&gt;This particular bug is actually a fairly rare bug for me, since I typically
use the serial port for the &lt;a href=&quot;/2017/06/05/wb-bridge-overview.html&quot;&gt;debugging
bus&lt;/a&gt;.  So, in my
case, if I have the &lt;a href=&quot;/2017/06/05/wb-bridge-overview.html&quot;&gt;debugging
bus&lt;/a&gt;
running in the first place then I’ve already &lt;a href=&quot;/blog/2017/05/24/serial-port.html&quot;&gt;debugged the serial port’s
hardware&lt;/a&gt;.
I know, for example, that I have the right IO pin, the right
baud rate, the right parity, the right number of bits per character, etc.&lt;/p&gt;

    &lt;p&gt;Once the raw serial port works, in
&lt;a href=&quot;/blog/2018/08/22/what-is-simulation.html&quot;&gt;simulation&lt;/a&gt;
first and then hardware,
and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;printf()&lt;/code&gt; still doesn’t, then it’s time to debug the standard library.
For this, I’ve been known to add more SIM instructions, either &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NSTR&lt;/code&gt; or
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NDUMP&lt;/code&gt;, into the library to trace it through it’s operation and find out
where it’s failing.&lt;/p&gt;

    &lt;p&gt;Once the &lt;a href=&quot;https://en.wikipedia.org/wiki/C_file_input/output&quot;&gt;stdio library&lt;/a&gt;
works (in
&lt;a href=&quot;/blog/2018/08/22/what-is-simulation.html&quot;&gt;simulation&lt;/a&gt;),
but still fails in hardware, the next step would be
to add serial port accesses to your design that bypass the
&lt;a href=&quot;https://en.wikipedia.org/wiki/C_file_input/output&quot;&gt;stdio&lt;/a&gt;
see where the design is failing.  I have a &lt;a href=&quot;https://github.com/ZipCPU/zbasic/blob/master/sw/board/txfns.h&quot;&gt;special set of functions, I
call them
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;txfns&lt;/code&gt;&lt;/a&gt;, that
I use for this purpose.  They’re designed to be as light and as simple
as possible, while writing outputs to the serial port.  Using them, I can
output strings and hexadecimal numbers directly to the serial port.  That’s
usually enough to debug the &lt;a href=&quot;https://en.wikipedia.org/wiki/C_file_input/output&quot;&gt;stdio
library&lt;/a&gt;.  You can think
of these functions as hardware replacements to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NSTR&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NDUMP&lt;/code&gt;, since
that’s how I typically use them.&lt;/p&gt;

    &lt;p&gt;You could also use
&lt;a href=&quot;/zipcpu/2018/01/01/zipcpu-isa.html&quot;&gt;BREAK instructions&lt;/a&gt;
here.  Again, the goal is to both figure out where the software is going
as it works its way through &lt;a href=&quot;https://en.wikipedia.org/wiki/C_file_input/output&quot;&gt;the
library&lt;/a&gt;,
as well as to dump enough values at any particular point along
the way so that you can “see” what’s going on.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/no-boot/stupid-murphy.svg&quot; alt=&quot;&quot; width=&quot;420&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;ol start=&quot;9&quot;&gt;
  &lt;li&gt;
    &lt;p&gt;Once you get to the console output, things get easier&lt;/p&gt;

    &lt;p&gt;Debug by printf is a thing.  It may not be ideal, but it does work.
When compared to debugging a blank cursor, debug by printf() will feel like
cooking with gas.&lt;/p&gt;

    &lt;p&gt;The task of this article, however, has been to illustrate how to
this far in the first place.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;crt0-example&quot;&gt;CRT0 Example&lt;/h2&gt;

&lt;p&gt;Just for understanding, let’s walk through this process by examining how
the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; would go about running
&lt;a href=&quot;https://en.wikipedia.org/wiki/%22Hello,_World!%22_program&quot;&gt;Hello World&lt;/a&gt;.
We’ll look at this from
&lt;a href=&quot;/blog/2018/08/22/what-is-simulation.html&quot;&gt;simulation&lt;/a&gt;
&lt;a href=&quot;/blog/2017/07/31/vcd.html&quot;&gt;traces&lt;/a&gt;, all drawn from the
&lt;a href=&quot;https://github.com/ZipCPU/zbasic/tree/dev&quot;&gt;ZBasic&lt;/a&gt;
(&lt;a href=&quot;/blog/2018/08/22/what-is-simulation.html&quot;&gt;simulation&lt;/a&gt; only)
distribution, and I’ll show you some valuable things you can notice from these
&lt;a href=&quot;/blog/2017/07/31/vcd.html&quot;&gt;traces&lt;/a&gt; alone.&lt;/p&gt;

&lt;p&gt;Our first &lt;a href=&quot;/blog/2017/07/31/vcd.html&quot;&gt;trace&lt;/a&gt; shows an
overview of what &lt;a href=&quot;https://en.wikipedia.org/wiki/%22Hello,_World!%22_program&quot;&gt;Hello
World&lt;/a&gt;
would look like from a &lt;a href=&quot;http://gtkwave.sourceforge.net&quot;&gt;GTKWave&lt;/a&gt;
&lt;a href=&quot;/blog/2017/07/31/vcd.html&quot;&gt;trace&lt;/a&gt;
standpoint.  It shows the CPU from after reset, through loading &lt;a href=&quot;https://en.wikipedia.org/wiki/%22Hello,_World!%22_program&quot;&gt;Hello
World&lt;/a&gt;, running
&lt;a href=&quot;https://en.wikipedia.org/wiki/%22Hello,_World!%22_program&quot;&gt;Hello World&lt;/a&gt;,
and then cleaning up and closing the
&lt;a href=&quot;/blog/2018/08/22/what-is-simulation.html&quot;&gt;simulation&lt;/a&gt;.
In this case, “cleanup” is another way of saying, “waiting for the serial
port to finish its writes.”&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 2. An overview of running Hello World on the ZipCPU&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/no-boot/overview-annotated.png&quot; alt=&quot;&quot; width=&quot;780&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Let me walk you quickly through the
&lt;a href=&quot;/blog/2017/07/31/vcd.html&quot;&gt;traces&lt;/a&gt; shown in Fig. 2.&lt;/p&gt;

&lt;p&gt;The first two &lt;a href=&quot;/blog/2017/07/31/vcd.html&quot;&gt;traces&lt;/a&gt;
are either the &lt;a href=&quot;/formal/2019/02/21/txuart.html&quot;&gt;serial
port&lt;/a&gt;’s input or its
output.  As you may &lt;a href=&quot;/formal/2019/02/21/txuart.html&quot;&gt;recall, serial
port&lt;/a&gt;s idle high, so here
you can see that the outgoing serial port wire is idle for most of the
&lt;a href=&quot;/blog/2017/07/31/vcd.html&quot;&gt;trace&lt;/a&gt;, until it finally sends
the “&lt;a href=&quot;https://en.wikipedia.org/wiki/%22Hello,_World!%22_program&quot;&gt;Hello, World!&lt;/a&gt;”
output out.&lt;/p&gt;

&lt;p&gt;In the particular configuration shown here, the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; has been configured to drive the
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone bus&lt;/a&gt; from
either its instruction or its data cache.  An arbiter has already selected
one of these two, but you may watch it change from one to the other in
&lt;a href=&quot;/blog/2017/07/31/vcd.html&quot;&gt;traces&lt;/a&gt; to follow.
AutoFPGA has labeled the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;’s bus
signals with a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bus_component_*&lt;/code&gt; prefix, in this case &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wb_zip_&lt;/code&gt;. As you
might expect, the first access, following reset, is to read the first
instruction.  This is where our figure starts.  This access has been held up,
however, until the &lt;a href=&quot;/blog/2019/03/27/qflexpress.html&quot;&gt;Quad SPI flash
controller&lt;/a&gt;
finishes configuring the external flash device (model) for eXecute in
Place (XiP) Quad SPI mode.&lt;/p&gt;

&lt;p&gt;The “ipc” &lt;a href=&quot;/blog/2017/07/31/vcd.html&quot;&gt;trace&lt;/a&gt; shows the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;’s
&lt;a href=&quot;https://en.wikipedia.org/wiki/Program_counter&quot;&gt;Program Counter (PC)&lt;/a&gt;,
or more specifically the
&lt;a href=&quot;/zipcpu/2018/01/01/zipcpu-isa.html&quot;&gt;supervisor&lt;/a&gt;’s
&lt;a href=&quot;https://en.wikipedia.org/wiki/Program_counter&quot;&gt;PC&lt;/a&gt; within the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;.  (Another register, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;upc&lt;/code&gt;,
captures the &lt;a href=&quot;/zipcpu/2018/01/01/zipcpu-isa.html&quot;&gt;user&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Program_counter&quot;&gt;PC&lt;/a&gt;.)
I’ve also added the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ipc&lt;/code&gt; register to this display twice.  The first
&lt;a href=&quot;/blog/2017/07/31/vcd.html&quot;&gt;trace&lt;/a&gt;
shows it in its default hexadecimal display setting.  A quick glance will
illustrate this trace is generally unreadable unless you zoom in so far you
lose all of the surrounding context.  The second &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ipc&lt;/code&gt; trace is set to analog
mode.  Here you can see very distinctly where the CPU jumps from flash memory
to the block RAM used by the &lt;a href=&quot;https://github.com/ZipCPU/zbasic/tree/dev&quot;&gt;ZBasic
distro&lt;/a&gt; for most of its operation.
This is the indication that the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
has just began running
&lt;a href=&quot;https://github.com/ZipCPU/zbasic/blob/master/sw/board/hello.c&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main()&lt;/code&gt;&lt;/a&gt;.
(If you look closely, you’ll also see where
&lt;a href=&quot;https://github.com/ZipCPU/zbasic/blob/master/sw/board/hello.c&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main()&lt;/code&gt;&lt;/a&gt;
completes and returns control to &lt;a href=&quot;https://en.wikipedia.org/wiki/Crt0&quot;&gt;CRT0&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The final &lt;a href=&quot;/blog/2017/07/31/vcd.html&quot;&gt;trace&lt;/a&gt; is that of the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Stack_register&quot;&gt;stack pointer&lt;/a&gt;.  Since the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Stack_register&quot;&gt;stack pointer&lt;/a&gt;
is just a generic &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; &lt;a href=&quot;/zipcpu/2018/01/01/zipcpu-isa.html&quot;&gt;register, and
specifically register 13&lt;/a&gt;,
that’s why it’s listed as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;regset[13][31:0]&lt;/code&gt; on the trace.  The big thing to
notice here is where the &lt;a href=&quot;https://en.wikipedia.org/wiki/Stack_register&quot;&gt;stack
pointer&lt;/a&gt; first changes.  This is
your indication that the CPU has &lt;a href=&quot;https://github.com/ZipCPU/zbasic/blob/dev/sw/zlib/crt0.c#L168&quot;&gt;started running
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CRT0&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To see more, however, we’ll need to zoom in a bit.&lt;/p&gt;

&lt;p&gt;Let’s start by zooming into the first section of the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Crt0&quot;&gt;CRT0&lt;/a&gt; area.
In this case, we’ll zoom in a lot.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 3. CRT0 first copies instructions from flash to RAM&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/no-boot/crt0insn-annotated.png&quot; alt=&quot;&quot; width=&quot;780&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;The first thing you’ll notice is that the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ipc&lt;/code&gt; register shows clear looping.
This is to be expected of a memory copy loop.  It is a loop, after all.&lt;/p&gt;

&lt;p&gt;The next thing you’ll notice is that this loop takes place in sections
followed by pauses.  This is caused by the data cache.  Every pause you see
is a cache miss, where the data cache reads another cache line from the
&lt;a href=&quot;/blog/2019/03/27/qflexpress.html&quot;&gt;flash&lt;/a&gt;.
The &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; then writes the cache
line to RAM.  Since the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;’s
data cache implementations are all &lt;em&gt;write-through&lt;/em&gt; caches, writes to memory
also go immediately to the bus.  These are the busy portions of the loop.&lt;/p&gt;

&lt;p&gt;Finally, you’ll notice that the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Stack_register&quot;&gt;stack pointer&lt;/a&gt;
is constant throughout this whole section.  That’s an indication that it’s
all taking place within a single function.&lt;/p&gt;

&lt;p&gt;The second big section of this &lt;a href=&quot;https://en.wikipedia.org/wiki/Crt0&quot;&gt;CRT0&lt;/a&gt;
operation where where the &lt;a href=&quot;https://en.wikipedia.org/wiki/.bss&quot;&gt;BSS segment&lt;/a&gt;
is cleared to zero.  You can see this in Fig. 4 below.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 4. CRT0 next clears uninitialized global (BSS) memory&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/no-boot/bss-annotated.png&quot; alt=&quot;&quot; width=&quot;780&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;In this case, I’ve zoomed in around the transition from the instruction copy
to where the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; starts zeroing
the &lt;a href=&quot;https://en.wikipedia.org/wiki/.bss&quot;&gt;BSS segment&lt;/a&gt;.  The first thing I’d
like you to notice is how easy this transition is to see from the 
&lt;a href=&quot;https://en.wikipedia.org/wiki/Program_counter&quot;&gt;ipc&lt;/a&gt; trace.  Indeed, the
&lt;a href=&quot;/blog/2017/07/31/vcd.html&quot;&gt;trace&lt;/a&gt; suddenly changes shape.
Sure, the rest of the &lt;a href=&quot;/blog/2017/07/31/vcd.html&quot;&gt;trace&lt;/a&gt;
changes shape as well, but if we zoomed out any more you might miss this and
only see the &lt;a href=&quot;https://en.wikipedia.org/wiki/Program_counter&quot;&gt;ipc&lt;/a&gt; change.&lt;/p&gt;

&lt;p&gt;As with the last section, the shape of this section is primarily driven by
the data cache.  This &lt;a href=&quot;https://en.wikipedia.org/wiki/.bss&quot;&gt;BSS&lt;/a&gt;
&lt;a href=&quot;https://cplusplus.com/reference/cstring/memset/&quot;&gt;memset()&lt;/a&gt;
loop just writes to one value of memory after another, with each value
passing straight through the cache to memory.&lt;/p&gt;

&lt;p&gt;What you may not notice is that there haven’t been any requests of the
bus for instructions.  If you look closer, however, you’ll see that’s not
quite true.  Just before the
&lt;a href=&quot;https://cplusplus.com/reference/cstring/memset/&quot;&gt;memset()&lt;/a&gt;
loop, there’s a cache request–this
time from the &lt;em&gt;instruction&lt;/em&gt; cache, to get the next eight instructions.  These
are sufficient to then run the
&lt;a href=&quot;https://cplusplus.com/reference/cstring/memset/&quot;&gt;memset()&lt;/a&gt;
function from cache alone.  Hence,
there are no more instruction requests of the bus until this loop exits.&lt;/p&gt;

&lt;p&gt;Just to show one final example of looping in
&lt;a href=&quot;/blog/2017/07/31/vcd.html&quot;&gt;traces&lt;/a&gt;,
Fig. 5 below shows the activity on the bus associated with the serial port
while the design finally sends
“&lt;a href=&quot;https://en.wikipedia.org/wiki/%22Hello,_World!%22_program&quot;&gt;Hello, World!&lt;/a&gt;”
to the console.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 5. Sending Hello World to the console&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/no-boot/console-annotated.png&quot; alt=&quot;&quot; width=&quot;780&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Now, if you look at the bus ports for the console, shown with the prefix
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wb_uart_&lt;/code&gt;, you’ll see a repeating pattern of two requests.  The first is
a read request, to verify that there’s room in the
&lt;a href=&quot;https://github.com/ZipCPU/wbuart32&quot;&gt;serial port&lt;/a&gt;’s buffer
for another byte of data.  The second is a write request, sending the next
byte to the buffer.&lt;/p&gt;

&lt;p&gt;The big thing to learn here, if nothing else, is the utility of displaying
the &lt;a href=&quot;https://en.wikipedia.org/wiki/Program_counter&quot;&gt;PC&lt;/a&gt; as an analog signal.&lt;/p&gt;

&lt;h2 id=&quot;debugging-a-memory-value&quot;&gt;Debugging a memory value&lt;/h2&gt;

&lt;p&gt;One common problem I’ve run into is where you get deep into the standard
library (i.e. into someone else’s software), and you see the CPU read some
value from memory and then do the wrong thing.  Or, rather, it does the right
thing but with the wrong value.  That leads to the question, why was that
value wrong?  When did it become wrong?  These are both things you may
need to answer.&lt;/p&gt;

&lt;p&gt;I discussed how to find a bug like this in
&lt;a href=&quot;/blog/2018/08/22/what-is-simulation.html&quot;&gt;simulation&lt;/a&gt;.
in a previous post.&lt;/p&gt;

&lt;p&gt;What if you need to find this value while running from hardware?&lt;/p&gt;

&lt;p&gt;Ouch.  That’s harder.  Still, the same approach applies: pick the address of
interest, and track its value.&lt;/p&gt;

&lt;p&gt;In hardware, this often means that you’ll need to create a bus monitor
peripheral.  That monitor peripheral will then look to find &lt;em&gt;every&lt;/em&gt; time you
write to a given address, and keep track of what the value at that address
becomes when you write to it.  Beware, inserting such a peripheral into your
design might change your address map, so you might need to do a bit of
rework, but the basic idea applies.&lt;/p&gt;

&lt;p&gt;If your monitor detects a “wrong value” being written to the address of
interest, then it should be able to halt the CPU–so you can see what just
happened.  Or, perhaps, you might wish to simply &lt;a href=&quot;/blog/2017/06/08/simple-scope.html&quot;&gt;trigger a
trace&lt;/a&gt;
of the CPU to see what’s going on there.&lt;/p&gt;

&lt;p&gt;If, on the other hand, you never write a “wrong value” to the address of
interest, and yet still read a “wrong” value–then you know where to look: the
memory controller for the memory you are writing to.  You may need to
initiate reads of this address at various other times–at least enough to
narrow down and find when the value is changing.  Is it changing via a bus
write to some other address?  That would be important to know.  Is it not
changing when it’s being written to?  That would also be important.  Finding
out when, and the circumstances around it will be key to figuring this out.&lt;/p&gt;

&lt;p&gt;Your eventual goal here will be to encapsulate the basic
&lt;a href=&quot;/blog/2017/06/08/simple-scope.html&quot;&gt;bug-triggering sequence&lt;/a&gt;
so that you can &lt;a href=&quot;/blog/2017/06/08/simple-scope.html&quot;&gt;trigger&lt;/a&gt;
it in a much simplified setting–either with
the &lt;a href=&quot;/2017/06/05/wb-bridge-overview.html&quot;&gt;debugging bus&lt;/a&gt;
and not the CPU, or perhaps in
&lt;a href=&quot;/blog/2018/08/22/what-is-simulation.html&quot;&gt;simulation&lt;/a&gt;.
From there, you should (hopefully) be able to get a
&lt;a href=&quot;/blog/2017/07/31/vcd.html&quot;&gt;trace&lt;/a&gt;
in order to narrow it down further.&lt;/p&gt;

&lt;h2 id=&quot;conclusions&quot;&gt;Conclusions&lt;/h2&gt;

&lt;p&gt;The big challenge with all of the above tasks is that you are likely going to
be debugging someone else’s work: either their design or their software
library.  In my case, it’s my CPU but Xilins’x MIG controller is not my
RTL, neither are &lt;a href=&quot;https://sourceware.org/newlib/&quot;&gt;newlib&lt;/a&gt; nor
&lt;a href=&quot;http://elm-chan.org/fsw/ff/00index_e.html&quot;&gt;FATFS&lt;/a&gt; my software.  Sure,
it’s &lt;a href=&quot;/about/zipcpu.html&quot;&gt;my CPU&lt;/a&gt;, but I didn’t
design any of the other components on the circuit board, nor have I designed
the external memory.  If I want all of these components to work together in
my project and for my purpose, then I need to know how to handle debugging
them.  This will often mean tracing through someone else’s software just
to find the bugs in my own stuff.&lt;/p&gt;

&lt;p&gt;What about &lt;a href=&quot;https://en.wikipedia.org/wiki/Linux&quot;&gt;Linux&lt;/a&gt;?&lt;/p&gt;

&lt;p&gt;No, I haven’t gone back to the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Linux&quot;&gt;Linux&lt;/a&gt;
operating system I tried to boot on the
&lt;a href=&quot;https://beagleboard.org/black&quot;&gt;Beagle Bone&lt;/a&gt;.  I’ve just had too many other
paying opportunities to do something else, and I’ve now lost touch with the
potential customer who may have wanted that system.&lt;/p&gt;

&lt;p&gt;Still, if I needed to debug &lt;a href=&quot;https://en.wikipedia.org/wiki/Linux&quot;&gt;Linux&lt;/a&gt;,
I think I’d use this same approach.  The
&lt;a href=&quot;https://en.wikipedia.org/wiki/Linux&quot;&gt;Linux&lt;/a&gt;
kernel contains within it several simplified console output functions
that can be used for debugging the kernel prior to the entire operating system
being up and running.  While I haven’t tried using these personally (yet), I’ve
seen others do it to great success.  Similarly, my
&lt;a href=&quot;https://beagleboard.org/black&quot;&gt;Beagle Bone&lt;/a&gt;
has a JTAG port that I could use instead of the &lt;a href=&quot;/2017/06/05/wb-bridge-overview.html&quot;&gt;debug
bus&lt;/a&gt;.  It’s not a
one to one replacement, but my bet is that it will still be good enough.&lt;/p&gt;

&lt;hr /&gt;&lt;p&gt;&lt;em&gt;In the beginning was the Word, and the Word was with God, and the Word was God. (John 1:1)&lt;/em&gt;</description>
        <pubDate>Sat, 03 Dec 2022 00:00:00 -0500</pubDate>
        <link>https://zipcpu.com/zipcpu/2022/12/03/no-boot.html</link>
        <guid isPermaLink="true">https://zipcpu.com/zipcpu/2022/12/03/no-boot.html</guid>
        
        
        <category>zipcpu</category>
        
      </item>
    
      <item>
        <title>Thanksgiving!  I have much to be thankful for</title>
        <description>&lt;p&gt;We started a tradition in my family, years ago, of naming the things we are
thankful to God for on each Thanksgiving.&lt;/p&gt;

&lt;p&gt;This year, I would like to share with you those things that I am thankful
for.  The three primary things I am thankful to God for this year are
my salvation, my family, and the business that He has given me.  In many
ways, these blessings are the natural result of the service I’ve chosen
to give to God.  (&lt;a href=&quot;https://www.blueletterbible.org/kjv/heb/11/6&quot;&gt;Heb 11:6&lt;/a&gt;)
For this reason, I’d also like to take a short moment to walk through some
verses, and to try to describe the results of my attempts to follow the same.&lt;/p&gt;

&lt;h2 id=&quot;salvation&quot;&gt;Salvation&lt;/h2&gt;

&lt;p&gt;The salvation Jesus Christ offers is easily summarized in this verse:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Kiss the Son, lest he be angry, and ye perish from the way, when his wrath
is kindled but a little.  Blessed are all they that put their trust in
him.  (&lt;a href=&quot;https://blueletterbible.org/kjv/psa/2/12&quot;&gt;Ps 2:12&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Salvation starts when a man chooses to trust God’s son, Jesus.  This is a
commitment.  As a result of trusting God, this man will keep God’s words and
obey as he is able.  The result, according to this verse, is such a blessing
as only God can give.  It’s value is greater than gold
(&lt;a href=&quot;https://www.blueletterbible.org/kjv/psa/19/10&quot;&gt;Ps 19:10&lt;/a&gt;) or rubies
(&lt;a href=&quot;https://www.blueletterbible.org/kjv/job/28/12-19&quot;&gt;Job 28:12-19&lt;/a&gt;,
&lt;a href=&quot;https://www.blueletterbible.org/kjv/pro/3/13-15&quot;&gt;Prov 3:13-15&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;My life changed significantly when I chose to trust God’s son, Jesus.  It
is because of these changes, and the results of following God, that I am
now so thankful this year.&lt;/p&gt;

&lt;h2 id=&quot;family&quot;&gt;Family&lt;/h2&gt;

&lt;p&gt;When I first committed my life to Christ, I was married but had no
&lt;em&gt;family&lt;/em&gt; to speak of.  My wife and I were separated, and we had no
children.&lt;/p&gt;

&lt;p&gt;My fiance and I both graduated from the US Air Force Academy.  She
went to Columbus, Mississippi to become a pilot, I went to Dayton,
Ohio, to get a masters degree.  We were married while we were apart.&lt;/p&gt;

&lt;p&gt;During this dark time, I still remember the first day I arrived at
&lt;a href=&quot;https://www.ebcbellbrook.org/&quot;&gt;Emmanuel Baptist Church, now in Bellbrook,
Ohio&lt;/a&gt;.  At the time I was deeply troubled,
not knowing if my wife and I would ever be together.  Joint assignments
were not sure things.  Much to my surprise, the pastor there was quite
convinced that we would be together.  How could he be so convinced?  This
made no sense to me, since he hardly knew me.  He explained that he
was convinced because he knew the character of the God he served.  At the
time, I wasn’t sure how to take this.  Was the pastor a crack, or did he
really know the Almighty God of heaven and earth that well?&lt;/p&gt;

&lt;p&gt;No, the military is not kind to couples where both are in the service.
Sometimes the personnel office is able to station military spouses
together.  Sometimes, as happened with me after our first assignment
together, the personnel officer will just throw his hands up in the
air and declare that military spouses aren’t guaranteed to live with
each other.&lt;/p&gt;

&lt;p&gt;Marrying a military spouse didn’t leave my wife and I in a happy place.
I would certainly not encourage others to take this path.&lt;/p&gt;

&lt;p&gt;Some time later, my wife and I found the verse in Titus, where God instructs
the older women to, …&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;… teach the younger women to be sober, to love their husbands, to love
their children, to be discrete, chaste, keepers at home, obedient to their
own husbands, that the word of God be not blasphemed.
(&lt;a href=&quot;https://www.blueletterbible.org/kjv/tit/2/4-5&quot;&gt;Titus 2:4-5&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The word “at”, found in the phrase “keepers at home”, convinced my wife that
she shouldn’t be in the military in spite of her training and experience as
a helicopter pilot.  She than began the (long and drawn out) process of
separating from the military.  The result of this process was that, after
four happy years together, we were separated for the next year.  During
this time, we didn’t know how long it would be until we’d be together
again.&lt;/p&gt;

&lt;p&gt;We also re-examined the verses where God instructs man to be fruitful
and multiply. (&lt;a href=&quot;https://www.blueletterbible.org/kjv/gen/1/28&quot;&gt;Gen 1:28&lt;/a&gt;,
&lt;a href=&quot;https://www.blueletterbible.org/kjv/gen/9/1&quot;&gt;9:1&lt;/a&gt;,
&lt;a href=&quot;https://www.blueletterbible.org/kjv/gen/9/7&quot;&gt;9:7&lt;/a&gt;,
&lt;a href=&quot;https://www.blueletterbible.org/kjv/deu/28/4&quot;&gt;Deut 28:4&lt;/a&gt;,
&lt;a href=&quot;https://www.blueletterbible.org/kjv/deu/28/11&quot;&gt;28:11&lt;/a&gt;,
&lt;a href=&quot;https://www.blueletterbible.org/kjv/pro/5/18&quot;&gt;Prov 5:18&lt;/a&gt;)&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;And you, be ye fruitful, and multiply; bring forth abundantly in the earth,
and multiply therein. (&lt;a href=&quot;https://www.blueletterbible.org/kjv/gen/9/7&quot;&gt;Gen 9:7&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Before coming across this verse, or rather before I took it seriously,
I had been of the belief that every couple should have two children,
and so to maintain the world’s population.  After evaluating these
verses, I chose to do as I was told.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Let thy fountain be blessed: and rejoice with the wife of thy youth.
(&lt;a href=&quot;https://www.blueletterbible.org/kjv/pro/5/18&quot;&gt;Prov 5:18&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Those who know us would declare that we now have a “large” family.
I would simply say that every one of our children is a blessing that
I am genuinely thankful for.&lt;/p&gt;

&lt;p&gt;The Bible also teaches how to raise up the children God gives, and
provides encouragement and instruction for the same.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Correct thy son, and he shall give thee rest; yea, he shall give
delight unto thy soul.
(&lt;a href=&quot;https://www.blueletterbible.org/kjv/pro/29/17&quot;&gt;Prov 29:17&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Yes, we did choose to abandon all of the sage advice printed in
“Christianity Today” for the words of the Bible itself.
(&lt;a href=&quot;https://www.blueletterbible.org/kjv/pro/13/24&quot;&gt;Prov 13:24&lt;/a&gt;,
&lt;a href=&quot;https://www.blueletterbible.org/kjv/pro/19/18&quot;&gt;19:18&lt;/a&gt;,
&lt;a href=&quot;https://www.blueletterbible.org/kjv/pro/22/15&quot;&gt;22:15&lt;/a&gt;,
&lt;a href=&quot;https://www.blueletterbible.org/kjv/pro/23/13-14&quot;&gt;23:13-14&lt;/a&gt;,
&lt;a href=&quot;https://www.blueletterbible.org/kjv/pro/29/15&quot;&gt;29:15&lt;/a&gt;,
&lt;a href=&quot;https://www.blueletterbible.org/kjv/eph/6/4&quot;&gt;Eph 6:4&lt;/a&gt;)
Perhaps it was a risk doing so at first.  Now looking back, I am very
pleased with the result.  Today my children are one of the delights
of my life.&lt;/p&gt;

&lt;p&gt;What is the alternative?&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;As for my people, children are their oppressors, and women rule over them.
O my people, they which lead thee cause thee to err, and destroy the way
of thy paths.  (&lt;a href=&quot;https://www.blueletterbible.org/isa/3/12&quot;&gt;Is 3:12&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;No, I think I like the results of following God’s way better.  Indeed,
hath the LORD not promised,&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Blessed is every one that feareth the LORD; that walketh in his ways.  For
thou shalt eat the labour of thine hands: happy shalt thou be, and it
shall be well with thee.  Thy wife shall be as a fruitful vine by the
sides of thine house: thy children like olive plants round about thy
table. (&lt;a href=&quot;https://www.blueletterbible.org/psa/128/1-3&quot;&gt;Ps 128:1-3&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This describes my life today.  Because of this, I am thankful for my
family: a family I would not have had, were it not for God’s instruction
and subsequent blessing.&lt;/p&gt;

&lt;h2 id=&quot;business&quot;&gt;Business&lt;/h2&gt;

&lt;p&gt;I am also thankful for my business.&lt;/p&gt;

&lt;p&gt;When I started Gisselquist Technology, LLC, I knew very little about
business.  I knew about technology.  I knew about signal processing.
I knew about the military acquisition process.  I knew a little
bit about digital logic.&lt;/p&gt;

&lt;p&gt;Why did I choose to start my own business?  Because of verses like,&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Ye are bought with a price; be not ye the servants of men.
(&lt;a href=&quot;https://www.blueletterbible.org/kjv/1co/7/23&quot;&gt;1Cor 7:23&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;But just because a man goes into business doesn’t mean he’ll be successful
at it.  Perhaps I’m only “successful” because my goals are simple:  I only
wish to provide for myself and my family.&lt;/p&gt;

&lt;p&gt;On the other hand, God does make some promises here as well.  For example,
the very first Psalm talks about prospering at whatever you choose to do.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Blessed is the man that walketh not in the counsel of the ungodly, nor
standeth in the way of sinners, nor sitteth in the seat of the scornful.
But his delight is in the law of the Lord, and in his law doth he
meditate day and night.  And he shall be like a tree planted by the
rivers of water, that bringeth forth his fruit in his season; his leaf
also shall not wither; and whatsoever he doeth shall prosper.
(&lt;a href=&quot;https://www.blueletterbible.org/kjv/psa/1/1-3&quot;&gt;Ps 1:1-3&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;“Whatsoever he doeth shall prosper”, huh?  True?  Yes.&lt;/p&gt;

&lt;p&gt;Or how about the ending of the 23rd Psalm?&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Thou preparest a table before me in the presence of mine enemies: thou
annointest my head with oil; my cup runneth over.  Surely goodness and
mercy shall follow me all the days of my life: and I will dwell in the
house of the LORD forever.
(&lt;a href=&quot;https://www.blueletterbible.org/kjv/psa/23/5-6&quot;&gt;Ps 23:5-6&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;“My cup runneth over” sounds like a blessing that a man doesn’t have
room enough to receive.
(&lt;a href=&quot;https://www.blueletterbible.org/kjv/mal/3/10&quot;&gt;Mal 3:10&lt;/a&gt;)  Today, I
feel like God’s blessing runs over from my cup onto those around me,
such as my family or those I work with.&lt;/p&gt;

&lt;p&gt;Well, does it?  Is this witness true?  Let me offer these evidences.
First, my oldest son graduated from college debt free, and now my
second child will be graduating from college this year, also debt
free.  My third child is still in college, and remains debt free.
This evidence, however, may be more due to their work than my own.
So let me offer a second piece of evidence and share that I’ve doubled
my gross receipts for the last two years, year over year.  This, mind
you, is in spite of a group of individuals that tried to cancel me
two years ago, and swore never to work with me.  It is also in spite
of all of the COVID shutdowns and subsequent chip shortages, which
in many ways I have been quite insulated from.  As my third evidence,
my wife and I were able to save up enough to purchase new vehicles
while on my business salary.  This year, it was a Honda Odyssey.
Finally, this year, I have someone joining me to help me out with
my tasks.&lt;/p&gt;

&lt;p&gt;If that’s not “success”, I’m not sure what is.&lt;/p&gt;

&lt;p&gt;So, again, I’m thankful this year for my success at Gisselquist
Technology, LLC.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;This year, I am thankful for what God has done in my life and the
joy that I have to share.&lt;/p&gt;

&lt;p&gt;Let me encourage you to also join me in counting your blessings this year,
and in thanking the God of all blessings for what he has done in your own
life as well.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Rejoice in the Lord alway: and again I say, Rejoice!
(&lt;a href=&quot;https://www.blueletterbible.org/kjv/phl/4/4&quot;&gt;Phil 4:4&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;&lt;p&gt;&lt;em&gt;Bring ye all the tithes into the storehouse, that there may be meat in mine house, and prove me now herewith, saith the LORD of hosts, if I will not open you the windows of heaven, and pour you out a blessing, that there shall not be room enough to receive it. (Mal 3:10)&lt;/em&gt;</description>
        <pubDate>Thu, 24 Nov 2022 00:00:00 -0500</pubDate>
        <link>https://zipcpu.com/blog/2022/11/24/thanksgiving.html</link>
        <guid isPermaLink="true">https://zipcpu.com/blog/2022/11/24/thanksgiving.html</guid>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>Quiz #23: Can this assertion fail?</title>
        <description>&lt;!-- answer: &quot;2022/11/01/fv-answer22.html&quot; --&gt;

&lt;p&gt;At one time I thought that &lt;a href=&quot;/formal/2018/04/23/invariant.html&quot;&gt;swapping the assumptions regarding the inputs
of a design with the assertions over the outputs was a good
approach to handling
complexity&lt;/a&gt;.  Then
I came across this example.&lt;/p&gt;

&lt;p&gt;What do you think?&lt;/p&gt;
</description>
        <pubDate>Thu, 24 Nov 2022 00:00:00 -0500</pubDate>
        <link>https://zipcpu.com/quiz/2022/11/24/quiz23.html</link>
        <guid isPermaLink="true">https://zipcpu.com/quiz/2022/11/24/quiz23.html</guid>
        
        
        <category>quiz</category>
        
      </item>
    
      <item>
        <title>A first lesson in sales pitches: Honesty</title>
        <description>&lt;p&gt;I seem to be getting quite a few requests from those who would wish to help
me on this blog.  These tend to fall into a couple of categories:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Search Engine Optimization (SEO) offers&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Web redesign&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Requests to submit an (irrelevant) article&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Requests for me to link to an article somewhere&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For all those to whom it may concern, therefore, let me offer the following
advice: 1) do your homework, and 2) &lt;em&gt;be honest!&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;zipcpu-funding&quot;&gt;ZipCPU Funding&lt;/h2&gt;

&lt;p&gt;First and foremost, few of these cold e-mailers bother to look through the web
site to see how it is funded.  If they did, they might notice that
&lt;a href=&quot;https://zipcpu.com&quot;&gt;zipcpu.com&lt;/a&gt; &lt;a href=&quot;/blog/2017/08/01/advertising.html&quot;&gt;doesn’t (currently)
advertise&lt;/a&gt;, it doesn’t
offer promotions, nor are there any links to click on to purchase ZipCPU
merchandise.&lt;/p&gt;

&lt;p&gt;The closest thing to blog funding is a &lt;a href=&quot;https://patreon.com/ZipCPU&quot;&gt;Patreon
link&lt;/a&gt; on the left of every page which people can
click on to provide a monthly contribution to encourage my work.  While I
appreciate everyone who contributes, and perhaps even more those who choose
to correspond and encourage, and while I am very thankful for all of those
who have chosen to &lt;a href=&quot;https://patreon.com/ZipCPU&quot;&gt;sponsor the ZipCPU blog on
Patreon&lt;/a&gt;, it doesn’t pay for my time.
Blog articles can take days, and sometimes weeks, to put together.&lt;/p&gt;

&lt;p&gt;That’s okay.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;https://zipcpu.com&quot;&gt;ZipCPU blog&lt;/a&gt; wasn’t written for that purpose.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;https://zipcpu.com&quot;&gt;ZipCPU blog&lt;/a&gt; was written (initially) to attract
businesses in my skills rather than to sell products.  To that end, it is
working quite well–especially since I don’t need to attract more than 1-3
businesses to keep my time occupied and my wallet filled.&lt;/p&gt;

&lt;p&gt;Beyond that, the &lt;a href=&quot;https://zipcpu.com&quot;&gt;ZipCPU blog&lt;/a&gt; is, in many ways, a
labor of love and fun.  I enjoy helping others, and I enjoy sharing my
own experiences.  Even better, the &lt;a href=&quot;https://zipcpu.com&quot;&gt;ZipCPU blog&lt;/a&gt;
offers me a chance to do a bit of &lt;a href=&quot;https://en.wikipedia.org/wiki/Rubber_duck_debugging&quot;&gt;rubber duck
debugging&lt;/a&gt;.  When I
write blog articles about designs I’ve written, those designs I blog about
tend to get cleaned up at the same time.&lt;/p&gt;

&lt;p&gt;The bottom line here is: there’s no money to fund hiring a web developer.
That’s not how this blog is funded.&lt;/p&gt;

&lt;p&gt;With this background, let’s look a bit deeper.&lt;/p&gt;

&lt;h2 id=&quot;seo-optimization&quot;&gt;SEO Optimization&lt;/h2&gt;

&lt;p&gt;Perhaps the biggest offer I get is from someone selling me search engine
optimization services.  These individuals offer to optimize the ZipCPU
web site so that search engines will find my content faster and easier.
Perhaps their biggest sales point is that they wish to make my content
the number one Google listing on (pick whatever topic).&lt;/p&gt;

&lt;p&gt;Those who’ve followed the blog for a while may have noticed that I tend to do
a yearly check up of my Google (and duck-duck-go) rankings.  You can find
blog summaries from &lt;a href=&quot;/blog/2018/01/01/top-ten.html&quot;&gt;2017&lt;/a&gt;,
&lt;a href=&quot;/blog/2019/01/01/top-ten.html&quot;&gt;2018&lt;/a&gt;,
&lt;a href=&quot;/blog/2020/01/01/2019-in-review.html&quot;&gt;2019&lt;/a&gt;,
&lt;a href=&quot;/blog/2022/01/03/2021-in-review&quot;&gt;2020 and 2021 here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;My conclusion has been that, historically, I tend to do
rather well without any help.&lt;/p&gt;

&lt;p&gt;Could I do better?  Sure, I suppose: I could buy some Google key words and
guarantee my site comes up in the first page.  But why?  Would I make any more
money?  It’s not likely.  Again, that’s not how funding works for this blog.&lt;/p&gt;

&lt;p&gt;Look at it from the other perspective, however: a search engine that doesn’t
promote good content simply isn’t a very good search engine.  People just
won’t use it.  Therefore, as long as I can provide good and valuable content,
my web site will be found.  Providing valuable content is one of the tasks
I have enjoyed.&lt;/p&gt;

&lt;h2 id=&quot;web-redesign&quot;&gt;Web Redesign&lt;/h2&gt;

&lt;p&gt;The next common request I get is to from folks who would like to re-design my
web site.  This is something I would be more sympathetic to if my focus was
to make money from the blog.&lt;/p&gt;

&lt;p&gt;Let’s face it, the blog does need a good redesign.  The single landing page,
with everything linked off of it, can make it a challenge to find useful
information.  Worse, its mobile presence is broken to say the least: page
text tends to get cut off by the menu at the top of the page.  On the other
hand, links are valuable: I wouldn’t want to break anyone’s links in any
such redesign.&lt;/p&gt;

&lt;p&gt;But redesigning the web site to make it load faster?  A lot of the offers
I get promise faster loading.  In my mind, however, I don’t use a lot of
images on the landing page, so faster loading seems like a false promise.
Let’s get serious here: the main index for the blog uses less than 1kB
of data!  If someone offers me faster loading, therefore, it tells me that
they haven’t done their homework–they’re just copying vacuous claims
they’ve made regarding someone else’s web sites.&lt;/p&gt;

&lt;p&gt;This is not the way to build credibility in a sales pitch.&lt;/p&gt;

&lt;p&gt;The redesign that would be appropriate for the
&lt;a href=&quot;https://zipcpu.com&quot;&gt;ZipCPU web site&lt;/a&gt; isn’t going
to be something flashy.  It’s not about catching attention, it’s about finding
the information you need, and presenting it in an appropriate order.  No, I
don’t need more graphics to slow the page down, nor do I need to limit
each page to twenty carefully chosen links.&lt;/p&gt;

&lt;p&gt;The bottom line here, however, is that … there’s no money to fund hiring
someone to accomplish such a redesign.  Again, that’s not how this blog
works.  If or when it happens, I’ll probably be the one doing it.  That’s
also likely to keep it from happening for a while.&lt;/p&gt;

&lt;h2 id=&quot;submitting-articles&quot;&gt;Submitting Articles&lt;/h2&gt;

&lt;p&gt;I’ve also had several individuals offer to write articles for the
&lt;a href=&quot;https://zipcpu.com&quot;&gt;ZipCPU blog&lt;/a&gt;.  Admittedly, my first thought is: Awesome!
My next question is, on what topic?  And … that’s the rub.  The &lt;a href=&quot;https://zipcpu.com&quot;&gt;ZipCPU
blog&lt;/a&gt; is &lt;a href=&quot;/about/&quot;&gt;dedicated&lt;/a&gt; to the
topic of digital design, and to finding and fixing bugs in digital logic.&lt;/p&gt;

&lt;p&gt;If you want to write an article on FIFOs, therefore, it should contain a FIFO
implementation, a discussion of how the FIFO was verified, and why your design
is good, bad or indifferent.  This is in contrast to the person in the food
service industry who wanted me to post an article on how refrigerators need
to be organized in a first-in first-out fashion.&lt;/p&gt;

&lt;h2 id=&quot;submitting-links&quot;&gt;Submitting Links&lt;/h2&gt;

&lt;p&gt;No, I’m not opposed to linking to the articles of others either.  However, it
does need to fit the purpose of the blog: digital design and verification.&lt;/p&gt;

&lt;p&gt;For example, just because I mention the HDMI video standard doesn’t mean that
a link on HDMI cable standards is appropriate.  Sure, I get that you want to
sell HDMI cables, but that’s just not my topic.  An appropriate link might
instead point to where someone could find the HDMI standard, and details
someone might need to implement something following that standard.  To date,
Wikipedia has served this purpose well for me.  Wikipedia articles tend to
provide a nice overview of various topics I need that I can link to.&lt;/p&gt;

&lt;h2 id=&quot;cold-calling-do-your-homework&quot;&gt;Cold Calling: Do your homework&lt;/h2&gt;

&lt;p&gt;If you really want to cold-call, or rather cold e-mail me, then please do your
homework first.  My name is not “Owner”, nor is it “ZipCPU Team”.  There’s no
&lt;em&gt;team&lt;/em&gt; here, there is me.  I’m the only one here, and if you look around a
little you can find my name.&lt;/p&gt;

&lt;p&gt;As an example, I received an e-mail from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Richard Reynosa
&amp;lt;pelletgirl35@gmail.com&lt;/code&gt;.  Richard (or is it pelletgirl?) starts off his
(her?) letter with:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Dear owner,&lt;/p&gt;

  &lt;p&gt;I recently spent some time doing a site review of Zipcpu.com (Yes, I do
random site reviews for a living.)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;My first thought is that you didn’t do much of a site review at all.
If you had, 1) you would’ve found my name and appropriately addressed your
letter, and 2) you would’ve known that there’s no sales taking place on this
web site to support your business.&lt;/p&gt;

&lt;p&gt;If you are going to send me a cold e-mail, do your homework first.&lt;/p&gt;

&lt;p&gt;I make no promises that this will rescue you from my spam box.  I’ll only
promise that if you don’t your e-mail will simply get deleted from it without
getting a response.&lt;/p&gt;

&lt;h2 id=&quot;cold-calling-be-honest&quot;&gt;Cold Calling: Be Honest&lt;/h2&gt;

&lt;p&gt;The next thing I tend to notice about these e-mails is that the author’s
name and signature rarely matches the e-mail address name.  A case in
point might be Richard’s address above (or was it pelletgirl35’s?).  Which is
it?  It gets worse, too.  I get a lot of e-mail addresses that end up looking
like user234156@gmail.com.&lt;/p&gt;

&lt;p&gt;This is usually the first flag that the source isn’t legitimate: they aren’t
selling their product next to their name.  Chances are they’ve been hiding from
some Google spam detection filter, and so need to keep changing their name
to avoid being sent to my spam folder–where these e-mails tend to end up
anyway.&lt;/p&gt;

&lt;p&gt;At one time, I started getting a lot of emails from individuals
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@candycloudtech.com&lt;/code&gt;.  Some time later I started getting the same sort of
e-mails from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@webmarketingassist.com&lt;/code&gt;.  These were a bit better–at least
the e-mail user name tended to match the signature at the bottom, but it
doesn’t help that candycloudtech.com doesn’t have a web presence, nor am
I getting a request from a single individual at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@candycloudtech.com&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Here’s the other thing about &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;candycloudtech.com&lt;/code&gt;: Without a web presence
of their own, how are they going to convince me that they can improve my
web presence?  Seriously.  If you want to sell your web design ability,
demonstrate it for me, then advertise your services where I can evaluate your
website as your &lt;em&gt;portfolio&lt;/em&gt;.  Convince me your website is valuable, and
contains something I might wish to emulate, and then I might consider buying
your services.&lt;/p&gt;

&lt;p&gt;In this case, I’m not buying it.  Even if I was looking for someone to do
web redesign, I’m not buying from someone who isn’t going to show off their
own work.&lt;/p&gt;

&lt;p&gt;If you really want to cold-call, or rather cold-e-mail me, then get your
story straight and tell it honestly or I’m not interested.&lt;/p&gt;

&lt;p&gt;Chances are I’m not interested anyway, but I’ll continue.&lt;/p&gt;

&lt;h2 id=&quot;reviewing-sales-pitches&quot;&gt;Reviewing sales pitches&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;We are a professional web design company.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;But you won’t tell me what the name of that company is, and you are sending
to me from an e-mail @gmail.com?  Not interested.  (Yes, I know that I’m using
an @gmail address, but I’m not cold e-mailing individuals …)&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;I work for a leading website design and development company …&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Then why won’t you tell me what it is?  @gmail.com doesn’t tell me much.
Do you have an on-line portfolio you’d like to share that I can examine?  No?
Not interested.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;I built Android iOS software.  I have reviewed your requirements and …&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Don’t lie to me.  I haven’t posted any requirements for mobile software.
If I needed to hire someone, my first priority would be to hire an honest
individual.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;From anna@smartwebexpert.com&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is at least a good start!  So, let’s look up smartwebexpert.com and see
what their web page looks like.  When I received this e-mail, the first page
looked like it might be interesting, but every second level page I looked at
was empty.  There were links there, but they didn’t contain any information.
That was then.  Today, smartwebexpert.com seems to be a non-existent domain.&lt;/p&gt;

&lt;p&gt;And … Anna wanted to redesign my web page given her broken examples?
Not interested.&lt;/p&gt;

&lt;p&gt;Also, Anna?  I got the same pitch from Sarah, word for word in one paragraph.
Somehow I think one of you is misrepresenting who you are.&lt;/p&gt;

&lt;p&gt;Honesty is required in a sales pitch, or I’m just going to close the door.
I’m not interested in any dishonest advertising.&lt;/p&gt;

&lt;h2 id=&quot;advertising&quot;&gt;Advertising&lt;/h2&gt;

&lt;p&gt;I’ve stated before that &lt;a href=&quot;/blog/2017/08/01/advertising.html&quot;&gt;I’m not opposed to advertising the products of
others&lt;/a&gt;
on this blog.  However, I am going to be particular about what gets advertised
here if I ever go there.&lt;/p&gt;

&lt;p&gt;For example, I would have no problems advertising FPGA jobs, professional
digital designers, FPGAs, FPGA boards, or even providing paid links to places
where you might purchase such a board or even where you might purchase IP
from any particular vendor.  However, if this sort of thing started limiting
my ability to speak about my experiences with your products (assuming I was
using them)–say with Xilinx’s (broken) training materials, then I’m not
interested.&lt;/p&gt;

&lt;p&gt;If you want me to promote your wonderful product, then I want to know and
be convinced that it is truly a wonderful product.  For example, as an unpaid
and unsolicited promotion: I’ve always liked &lt;a href=&quot;https://store.digilentinc.com&quot;&gt;Digilent’s
products&lt;/a&gt;.  They tend to be reliable,
have a good support forum, and they also tend to be very well documented.
Bottom line: Digilent FPGA products have been, in my experience, a joy to work
with.&lt;/p&gt;

&lt;p&gt;As for &lt;a href=&quot;https://www.terasic.com.tw/en&quot;&gt;Terasic&lt;/a&gt;?  That’s another story.
Did I tell you the pain I went through to try to find the correct schematic
for my DE-10 Nano?  Or how about the rework I had to do after building my
design against a DE0-Nano schematic that was marked as a DE-10 Nano schematic?&lt;/p&gt;

&lt;p&gt;I would, however, have a problem advertising immoral conduct.  This is one of
the reasons why the ZipCPU blog once had a relationship with disqus and why it
doesn’t use any of their material anymore.&lt;/p&gt;

&lt;p&gt;Bottom line here: I intend to approve or disapprove advertisements on a case
by case basis.  Still interested?  Then contact me.&lt;/p&gt;

&lt;h2 id=&quot;bottom-line-honesty&quot;&gt;Bottom line: Honesty&lt;/h2&gt;

&lt;p&gt;I guess my bottom line is that I would never be interested in hiring or
working with anyone who isn’t honest.  I could deal with a certain amount
of incompetence.  That’s normal.  Dishonesty?  No.  Sorry.  My recommendation,
therefore, for all those interested in sending me sales pitches?&lt;/p&gt;

&lt;p&gt;Be honest!&lt;/p&gt;

&lt;p&gt;Also know, honesty alone won’t get you hired.&lt;/p&gt;
&lt;hr /&gt;&lt;p&gt;&lt;em&gt;And if ye salute your brethren only, what do ye more than others?  Do not even the publicans so?  (Matt 5:47)&lt;/em&gt;</description>
        <pubDate>Sat, 12 Nov 2022 00:00:00 -0500</pubDate>
        <link>https://zipcpu.com/blog/2022/11/12/honesty.html</link>
        <guid isPermaLink="true">https://zipcpu.com/blog/2022/11/12/honesty.html</guid>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>Quiz #22: Handling cover failures</title>
        <description>&lt;p&gt;A failed formal cover check can be one of the most challenging things to debug.
All you know is that the formal tool failed to be able to make the covered
expression true.  You have no trace to work with to show you how close
you managed to get to making the expression true before ultimately failing.&lt;/p&gt;

&lt;p&gt;Where would you even start to debug something like this?&lt;/p&gt;
</description>
        <pubDate>Tue, 01 Nov 2022 00:00:00 -0400</pubDate>
        <link>https://zipcpu.com/quiz/2022/11/01/quiz22.html</link>
        <guid isPermaLink="true">https://zipcpu.com/quiz/2022/11/01/quiz22.html</guid>
        
        
        <category>quiz</category>
        
      </item>
    
      <item>
        <title>Measuring the Steps to Design Checkoff</title>
        <description>&lt;p&gt;I’ve recently had the opportunity to rebuild a &lt;a href=&quot;https://www.arasan.com/products/nand-flash/&quot;&gt;NAND flash
controller&lt;/a&gt; for &lt;a href=&quot;https://www.arasan.com&quot;&gt;Arasan Chip
Systems, Inc&lt;/a&gt;.
The purpose of this redesign was to upgrade an existing flash controller
so that it can process flash requests and commands at even faster speeds than
ever before.  Indeed, this new controller is designed to handle flash chips
that operate at speeds of up to 1.6GB/s while being backwards compatible with
all previous speeds.  Those who know my typical design goals will already
know my personal goals for this design: &lt;em&gt;throughput, throughput, throughput!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;What I wanted to discuss today, however, was a basic management problem I
came across while working on this project.  At one time, during development,
I was asked by &lt;a href=&quot;https://www.arasan.com&quot;&gt;Arasan&lt;/a&gt;’s management team where I
was at in the project, and how much longer the project would take to
accomplish.&lt;/p&gt;

&lt;p&gt;Gosh, where do you start?&lt;/p&gt;

&lt;p&gt;First, let’s face reality, despite how much an engineer would like to avoid
such questions, these are valid questions.  Customers have a right to know
how far along you are, and when you think you’ll have the project completed.
In other words, you might not like the question, but it is one that needs
answering.&lt;/p&gt;

&lt;p&gt;Perhaps the best and most truthful answer might be, “I’m working on it, and
it’ll get done when it gets done.”  While this might be true, it doesn’t
allow you the ability to express your progress at all.
Customers want to know your timeline, and they want to know that the timeline
you give them is well justified.
Put simply, you need to break projects down into tasks–tasks that need to take
place between now and project completion.  Each task then needs to be given
a time estimate, leading up to an ultimate completion date for each project.&lt;/p&gt;

&lt;p&gt;Here’s an example of what such a task list might look like.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 1. Example task list table&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/checkoff/tasklist.svg&quot; alt=&quot;&quot; width=&quot;780&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;You might find it better to view something like this via a
&lt;a href=&quot;https://www.gantt.com/&quot;&gt;Gantt chart&lt;/a&gt; rather than as a list of independent
tasks, but let’s pull on this idea of a task list a bit more for discussion.
Why?  Because, once the interfaces to a module have been defined, then the
design of each module in a larger system can become an independent task
which can then be separated from the rest of the design. Of course, this
only goes so far: often when designing a module, you will often discover
changes that need to be made to the interface, and some tasks (like
simulation) cannot begin until other tasks complete, but this is still a
good place to start.&lt;/p&gt;

&lt;p&gt;One of the benefits of independent tasks is that they can be accomplished
in any order.  Over time, I’ve even found myself walking around in a large
project in a somewhat scatterbrained fashion and doing things out of order.
This leads to two clear problems.  The first is, how shall I know if an
individual task is complete or not?  The second one is like it.  For those
tasks that are not complete, how shall I measure how much of the task
remains?&lt;/p&gt;

&lt;p&gt;Answering these questions will be the topic of this article.&lt;/p&gt;

&lt;h2 id=&quot;measuring-design-progress&quot;&gt;Measuring design progress&lt;/h2&gt;

&lt;p&gt;The current solution that I came up with to measure design progress involves
building a list of design components (modules), and then discussing their
status in a sort of stop-light chart.  For example, Fig. 2 below shows five
components of a design together with their various states of development.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 2. Module development stoplight chart&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/checkoff/componentlist.svg&quot; alt=&quot;&quot; width=&quot;780&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Many of the parts and pieces of this example design are already posted on
Github.  For example, you can find the &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axixbar.v&quot;&gt;AXI
Crossbar&lt;/a&gt; or the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;’s &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/zipcore/rtl/core/axilfetch.v&quot;&gt;AXI-lite instruction
fetch&lt;/a&gt; all
available on line.  You can even find &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axidma.v&quot;&gt;my AXI
DMA&lt;/a&gt; on
&lt;a href=&quot;https://github.com/ZipCPU&quot;&gt;github&lt;/a&gt;.  Other components, such as the “Custom
DMA”, the custom “Micro-Controller”, or the “Top Level Design” listed here,
were not yet built much less posted anywhere.  Each component is then given
a row in this chart, where each column contains a task to be accomplished
before the component is completed.  Each box is then filled in with a color
and a status to describe the reason for the color.&lt;/p&gt;

&lt;p&gt;In general, my color scheme follows:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Red: I color tasks red if either the task &lt;em&gt;not yet started&lt;/em&gt;, or if &lt;em&gt;known
problems exist&lt;/em&gt; with the task.  Perhaps a formal proof fails.  Perhaps the
component fails in simulation.  Either case would show up here in red.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Yellow: Yellow is for partial completion–a &lt;em&gt;work in progress&lt;/em&gt;.  To be
yellow, the design component must at least be written, but may not (yet)
pass any verification steps.  When it comes to formal proofs, a yellow box
would indicate that the design passed at one time, but for some reason the
proof needs to be re-run–perhaps because of some changes that have since
been made to the design, perhaps the interface requirements needed to be
updated, or perhaps because a new configuration now needs to be tested.
Whatever the reason, yellow shows progress without yet showing completion.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Green: A green box is &lt;em&gt;good to go&lt;/em&gt;.  The task is completed.  Both the design
portion is complete, and the given portion of testing has been completed as
well.  No more attention needs to be paid to a green task.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Gray: &lt;em&gt;Not applicable&lt;/em&gt;.  For example, I tend to only formally verify &lt;em&gt;leaf&lt;/em&gt;
components of my designs for complexity reasons.  The top level of a design
rarely sees the light of formal tools, and therefore needs to be tested
via simulation only.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now that we know the colors, let’s look at the columns.&lt;/p&gt;

&lt;p&gt;The first column simply provides an overview of the status of the component.
Is it in development?  If development hasn’t yet started, the component will
be colored in red.  Has the component been verified?  Is it being tested?  Has
it been signed off?  Once a component has received a formal sign off, and hence
is ready for integrated simulation, then I’ll color it green.  All of this is
captured by the first column.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 3. Four formal verification steps&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/checkoff/four-keys.svg&quot; alt=&quot;&quot; width=&quot;420&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;The next four columns follow from my discussion of the “&lt;a href=&quot;/formal/2020/06/12/four-keys.html&quot;&gt;Four Keys to getting
your design to work the first
time&lt;/a&gt;” article.  These
columns indicate whether or not the design component has passed an interface
check, a contract check, induction, or cover.  In summary:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;The &lt;em&gt;interface check&lt;/em&gt; verifies the interfaces the component is supposed to
maintain.  If done well, a formal interface definition can define both
sides of the interface, and so assumptions made in one module can be verified
as assertions on the other side of any interface.&lt;/p&gt;

    &lt;p&gt;As an example from Fig. 2, the &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/zipcore/rtl/core/axilfetch.v&quot;&gt;AXI-Lite
fetch&lt;/a&gt;
module maintains two interfaces: one with the &lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;AXI-Lite
bus&lt;/a&gt;, and a second
between the fetch and the CPU.  Both interfaces need to be clearly defined,
and then the design will need to pass a formal property check against this
definition in order for the design to pass this box.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The &lt;em&gt;contract check&lt;/em&gt; is an internal check, designed to prove that the
design component does what it is supposed to do internally.&lt;/p&gt;

    &lt;p&gt;Continuing with the example of the &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/zipcore/rtl/core/axilfetch.v&quot;&gt;AXI-Lite
fetch&lt;/a&gt;,
the contract check would follow:&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;
        &lt;p&gt;First, pick an arbitrary memory address together with an arbitrary
32-bit value (the instruction) that you will assume be at that address.&lt;/p&gt;

        &lt;p&gt;I will also pick another arbitrary bit to decide whether or not reading
from this address will produce a bus error or not.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;When the AXI-Lite bus returns an instruction associated with that
address, &lt;em&gt;assume&lt;/em&gt; the value returned matches the arbitrary instruction
selected above.  The extra bit will also determine whether or not this
return is OKAY or represents some form of bus error or not.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Now &lt;em&gt;prove&lt;/em&gt; (i.e. assert) that the instruction passed to the CPU that
is associated with this address matches the arbitrary instruction value
picked earlier.  Or, if the bus returned an error, then assert that the
illegal instruction flag is sent to the CPU with this instruction.&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left; padding: 25px&quot;&gt;&lt;caption&gt;Fig 4. My master rule of formal verification&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/checkoff/fv-master-rule.svg&quot; alt=&quot;&quot; width=&quot;420&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Note that the check above follows my “master rule” of formal verification:
  Assume inputs, such as the instruction returned by the bus, and then assert
  outputs–such as the instruction returned to the CPU.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;The &lt;a href=&quot;/blog/2018/03/10/induction-exercise.html&quot;&gt;&lt;em&gt;induction&lt;/em&gt;&lt;/a&gt;
check will give you the confidence you need that your interface and contract
properties are not just held for the first twenty clock periods, but rather
for all time.&lt;/p&gt;

    &lt;p&gt;As an example here, it can be a challenge to formally verify that a component
is fully AXI compliant.  There’s just a &lt;em&gt;lot&lt;/em&gt; of assertions involved.  If
you only attempt 64-cycles of a bounded model check, then you’ll never know
whether or not your design would fail on the 65th cycle of a 256-beat burst,
or whether or not your design can handle two 32-beat bursts in a row.&lt;/p&gt;

    &lt;p&gt;If the component being tested were a cache component, the
&lt;a href=&quot;/blog/2018/03/10/induction-exercise.html&quot;&gt;&lt;em&gt;induction&lt;/em&gt;&lt;/a&gt;
check might help verify that nothing spoiled the cache between when the
instruction was first returned to the CPU, and when it may have been
returned some time later.  (How long?  Longer than the bound of the proof!)&lt;/p&gt;

    &lt;p&gt;For these questions, you will need to pass
&lt;a href=&quot;/blog/2018/03/10/induction-exercise.html&quot;&gt;induction&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Finally, the &lt;em&gt;cover&lt;/em&gt; check is left over to make certain that, in spite of
any assumptions you may have made, your design is still able to accomplish
whatever tasks were assigned to it.&lt;/p&gt;

    &lt;p&gt;Years ago, when visiting a helicopter squadron, I remember being introduced
to the test pilots of the squadron.  Why would a squadron need test pilots,
I asked?  The helicopters were decades old, and their performance well
established, what was the purpose of the test pilots or the test pilot
section they were members of?  The answer I was given surprised me:
After taking a helicopter apart to fix it, it’s important to shake
it around in a test flight just to make certain everything was properly put
back in place.  In digital design, we might call such a test a “regression”
test.&lt;/p&gt;

    &lt;p&gt;In a similar fashion, I use cover checks in a sanity checking role.  There’s
been more than once where I’ve convinced myself that a design passes a
formal verification check, only to discover later that I had erroneously
assumed the design would remain in reset the whole time.  A proper cover
check would’ve failed in this case, which would then lead me to the problem
in my proof.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Once all of the various components in a design pass their formal checks, I’ll
then turn to simulation so that I can demonstrate the functionality of the
design.  Note that, at this point, I’m no longer trying to &lt;em&gt;prove&lt;/em&gt; the design
works–that’s already been done via formal methods.  Instead, I’m now trying to
&lt;em&gt;demonstrate&lt;/em&gt; that the design works.  Frankly, there’s no way I could make any
simulation as thorough as the formal proofs preceding it, but there remain lots
of good reasons for using simulations and bugs that still get caught in this
final step.&lt;/p&gt;

&lt;p&gt;The simulation column might also be where I’d include code coverage statistics,
if the project required them.&lt;/p&gt;

&lt;p&gt;Some projects have an additional column that I haven’t listed in this chart.
This column would capture whether or not the design as a whole has been
hardware tested and proven.  This might mean that the design has been placed
onto an FPGA, and that it has been demonstrated to work on the FPGA.  It might
also mean that an ASIC has been built from the design.  The important part
here is that, while this is a very useful column, it’s not necessarily
an important check off criteria for all designs.&lt;/p&gt;

&lt;p&gt;With that as background, let’s go back and examine Fig. 2 a bit.&lt;/p&gt;

&lt;p&gt;As you can see from the list of components, my &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axixbar.v&quot;&gt;AXI
crossbar&lt;/a&gt; has
failed its
&lt;a href=&quot;/blog/2018/03/10/induction-exercise.html&quot;&gt;induction&lt;/a&gt;
check and changes have been made to it since it was last
formally verified.  This is evidence of work that needs to be accomplished.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/zipcore/rtl/core/axilfetch.v&quot;&gt;AXI-lite instruction
fetch&lt;/a&gt;,
however, had only recently been built when I put this chart together.  At the
time, it was still a very new design.  Still, it has passed all of its
property checks, and was then being used in simulation testing.  (It’s now been
used quite successfully in several projects, but that’s another story
for another time.)&lt;/p&gt;

&lt;p&gt;The microcontroller in this example, however, had suffered from catastrophic
failures in simulation.  (I had tried to skip the formal checks after making
some minor changes and then to run directly to simulation.  Skipping steps often
feels like you are moving faster, when in this case it meant I had to go back
and do some rework.)  Since bugs had been found in the microcontroller, I
marked it in red so that I would remember to go back and update the formal
proof so these bugs never come back again.&lt;/p&gt;

&lt;p&gt;The custom DMA should be self-explanatory–it simply hadn’t (yet) been built,
so it’s line was red through and through.&lt;/p&gt;

&lt;p&gt;That brings us to the “Top Level Design” component.  This level will not be
formally verified, and so those boxes have been grayed out.  This is for two
reasons.  First, if everything beneath it was properly verified, then this
level shouldn’t need to be verified at all.  Second, formal verification
depends upon an exhaustive search over all potential states.  This search is
exponentially complex and can easily grow beyond what the designer’s (patience
and) computer power are able to handle.  Therefore, the top level design will
be the focus of a lot of simulation work, but that won’t be able to happen
until all the parts and pieces composing it have been built.&lt;/p&gt;

&lt;h2 id=&quot;other-uses&quot;&gt;Other uses&lt;/h2&gt;

&lt;p&gt;Since I started building charts like this one, I’ve found other uses for
building charts like this.  Three particular uses include scheduling, cost
estimation, and explaining design proposals in contract bids.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Scheduling&lt;/p&gt;

    &lt;p&gt;When scheduling, I’ll place the amount of time in each box that I expect
a task to take.  The sum of all the remaining times in a project should
then be the amount of work time remaining in a project.&lt;/p&gt;

    &lt;p&gt;Do I always get this right?  No.  A better question to ask might be whether
I ever get this estimate right at all.  The answer is probably not, but it’s
at least a good first order estimate.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Cost estimation&lt;/p&gt;

    &lt;p&gt;If you can figure out how much time a project will take, then cost
estimation becomes easier.  For most of my projects, the primary cost driver
is engineering time–my own personal time in particular.  Once a time
has been estimated for each of the tasks in the project, all that really
remains is to multiply that time by an hourly rate.&lt;/p&gt;

    &lt;p&gt;Tracking the time used in any particular task is also an important part of
estimating such acquisition measures as the &lt;a href=&quot;https://www.dau.edu/acquipedia/pages/ArticleContent.aspx?itemid=290&quot;&gt;Actual Cost of Work Performed
(ACWP)&lt;/a&gt;
or the &lt;a href=&quot;https://www.dau.edu/acquipedia/pages/ArticleContent.aspx?itemid=287&quot;&gt;Budgeted Cost of Work Performed
(BCWP)&lt;/a&gt;
for those customers that require these numbers.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Contract bids&lt;/p&gt;

    &lt;p&gt;Yes, I also use this approach when bidding for contracts as well.&lt;/p&gt;

    &lt;p&gt;However, when bidding for contracts, I’ll often list components instead of
components and tasks, and then rearrange those components into something
with more meaning.  Perhaps its a data flow diagram of some type.  Perhaps
its a system block diagram.  Either way, such a diagram then helps me to
illustrate for the customer that I understand the task at hand, while the
stop-light colors help to illustrate the status of the various &lt;a href=&quot;/blog/2020/01/13/reuse.html&quot;&gt;library
components&lt;/a&gt; I might bring to
the project.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In short, I’ve found this stop-light approach very valuable when communicating
with customers.&lt;/p&gt;

&lt;h2 id=&quot;conclusions&quot;&gt;Conclusions&lt;/h2&gt;

&lt;p&gt;I’ve now used this component list progress chart for several projects and
purposes.  It has worked so well for me, that I intend to use it again
and again on future projects as the projects and needs allow.&lt;/p&gt;
&lt;hr /&gt;&lt;p&gt;&lt;em&gt;And ye shall hear of wars and rumours of wars: see that ye be not troubled: for all these things must come to pass, but the end is not yet.  For nation shall rise against nation, and kingdom against kingdom: and there shall be famines, and pestilences, and earthquakes, in divers places.  (Matt 24:6-7)&lt;/em&gt;</description>
        <pubDate>Tue, 01 Nov 2022 00:00:00 -0400</pubDate>
        <link>https://zipcpu.com/formal/2022/11/01/design-checkoff.html</link>
        <guid isPermaLink="true">https://zipcpu.com/formal/2022/11/01/design-checkoff.html</guid>
        
        
        <category>formal</category>
        
      </item>
    
      <item>
        <title>Assignment delay's and Verilog's wait statement</title>
        <description>&lt;p&gt;I’ve now spent more time than I want to admit to debugging simulation issues
when using Verilog’s simulation semantics.  Let me therefore share some
problems I’ve come across, together with my proposed solution for them.&lt;/p&gt;

&lt;h2 id=&quot;the-problems&quot;&gt;The Problems&lt;/h2&gt;

&lt;p&gt;Today’s problem stems from logic like the following:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;trigger_condition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;some_other_condition_determining_relevance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;state_variable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;complex_expression&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// This then continues for another 50 lines or so&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In general, this comes to me in “working” simulation code that’s been handed
down to me to maintain.  The simulations that use this logic often take hours
to run, and so debugging this sort of thing can be very time consuming.
(Costly too–my hourly rate isn’t cheap.)&lt;/p&gt;

&lt;p&gt;Let’s walk through this logic for a moment–before tearing it apart.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 1. Avoid assignment delays&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/vlog-wait/phys-delays.svg&quot; alt=&quot;&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;In this example the first condition, the one I’ve called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;trigger_condition&lt;/code&gt;
above, is simply some form of data change condition.  Sometimes its a
reference to a clock edge, sometimes its a reference to a particular piece of
data changing.  This isn’t the problem.&lt;/p&gt;

&lt;p&gt;The second condition, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;some_other_condition_determining_relevance&lt;/code&gt;, is used
to weed out all the times the always block might get triggered when you don’t
want it to be.  For example, it might be triggered during reset or when the
slave device being modeled is currently responsive to some other
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;trigger_condition&lt;/code&gt;.  This is natural.  This is not (yet) a problem either.&lt;/p&gt;

&lt;p&gt;So what’s the problem with the logic above?  Well, let’s start with the
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#1&lt;/code&gt; assignment delay.  In this case, it’s not representing a true hardware
delay.  No, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#1&lt;/code&gt; is there in order to &lt;em&gt;schedule&lt;/em&gt; Verilog simulation
statement execution.  Part of the reason why it’s there is because the rest
of the block uses &lt;em&gt;blocking&lt;/em&gt; logic (i.e. via the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;=&lt;/code&gt;).  Hence, if this block
was triggered off of a clock edge, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#1&lt;/code&gt; allows us to reason about what
follows the clock edge but before the next edge.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left; padding: 25px&quot;&gt;&lt;caption&gt;Fig 2. Recipe for trouble&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/vlog-wait/always-disaster.svg&quot; alt=&quot;&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Now, let me ask, what happens five years from now when clock speeds get faster?
Some poor soul (like me) will be hired to maintain this logic, and that poor
soul will look at the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#1&lt;/code&gt; and ask, why is this here?  Maybe it was a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1ns&lt;/code&gt;
delay, and they are now trying to run a clock at 500MHz instead of 100MHz.
That &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1ns&lt;/code&gt; delay will need to be understood, and replaced–&lt;em&gt;everywhere&lt;/em&gt;
it was used.  It doesn’t help that the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1ns&lt;/code&gt; doesn’t come with any explanations,
but that may be specific to the examples I’m debugging.&lt;/p&gt;

&lt;p&gt;Here’s a second problem, illustrated in Fig. 2: what happens when you use this
one nanosecond delay in multiple always blocks, similar to this one, all
depending on each other?  Which one will execute first?&lt;/p&gt;

&lt;p&gt;The third problem often follows this one, and it involves a wait statement
of some type.  To illustrate this, let me modify the example above a bit more.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;trigger_condition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;some_other_condition_determining_relevance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;state_variable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;complex_expression&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// Continue for a while ...&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;wait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;negedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;output_value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;other_complex_expression&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In this case, the user wants to make certain his logic is constant across
the clock edge, and so he sets all his values on the negative edge of the
clock.  This leads to two problems: what happens when the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#1&lt;/code&gt;
delay conflicts with the clock edge?  And what happens when the output value
depends upon other inputs that are set on the negative clock edge?&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 3. Giant case statement dispatching tasks&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/vlog-wait/buried-tasks.svg&quot; alt=&quot;&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Fig. 3 shows another problem, this time when using a case statement.  In this
case, it’s an attempt to implement a command structure within a modeled device.
The device can handle one of many commands, so depending on which one is
received you go and process that command.  The actual example this is drawn
from was worse, since it depended not only on commands but rather command
sequences, and the command sequences were found within case statements within
case statements.&lt;/p&gt;

&lt;p&gt;What’s wrong with this?  Well, what happens when the original trigger takes
place a second time, but the logic in the always block hasn’t finished
executing?  Perhaps this is erroneous.  Perhaps it finishes just barely on
the wrong side of the next clock edge.  In my case, I find the bug four hours
later–on a good day.  It doesn’t help that simulations tend to run rather slow.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left; padding: 25px&quot;&gt;&lt;caption&gt;Fig 4. FSMs are often easier to debug than long-running tasks&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/vlog-wait/appfsm.svg&quot; alt=&quot;&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;A better approach would’ve been to use a state machine rather than embedded
tasks.  Why is this better?  Well, if for no other reason, a case statement
would contain state variables which could be seen in the trace file.  That
means that you could then find and debug what would (or should) happen when/if
the new command trigger shows up before a prior command completes.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 5. Repeat LLC logic&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/vlog-wait/appllc.svg&quot; alt=&quot;&quot; width=&quot;280&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;These problems are only compounded when this logic is copied.  For example,
imagine a device that can do tasks A, B, and C, but requires one of two IO
protocols to accomplish task A, B, or C.  Now, if that IO protocol logic is
copied and embedded into each of the protocol tasks, then all three will need
to be updated when the IO protocol is upgraded.  (I2C becomes I3C, SPI becomes
Quad SPI, etc.)&lt;/p&gt;

&lt;p&gt;While some of these problems are specific to hardware, many are not. 
&lt;a href=&quot;https://en.wikipedia.org/wiki/Magic_number_(programming)&quot;&gt;Magic numbers&lt;/a&gt;
are a bad idea in both RTL and software.  Design reuse and software
reuse are both very real things.  Even a carpenter will build a
&lt;a href=&quot;https://en.wikipedia.org/wiki/jig_(tool)&quot;&gt;custom jig of some type&lt;/a&gt; when he
has to make fifty copies of the same item.&lt;/p&gt;

&lt;p&gt;The good news is that better approaches exist.&lt;/p&gt;

&lt;h2 id=&quot;defining-terms&quot;&gt;Defining terms&lt;/h2&gt;

&lt;p&gt;Before diving into some better approaches, let me take just a couple of moments
to introduce the terms I will be using.  In general, a test bench has three
basic (types of) components, as illustrated in Fig. 6.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left; padding: 25px&quot;&gt;&lt;caption&gt;Fig 6. Test bench components&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/vlog-wait/gencomponents.svg&quot; alt=&quot;&quot; width=&quot;480&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;The Device Under Test (DUT)&lt;/strong&gt;:  The is the hardware component that’s being
designed, and for which the test has been generated.&lt;/p&gt;

    &lt;p&gt;Since the DUT is intended to be synthesizable, Verilog delay statements are
inappropriate here.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;The Hardware Device Model, or just model&lt;/strong&gt;: Our hardware component is being
designed to interact with an external piece of hardware.  This component is
often off-chip, and so our “model” is a simulation component designed to
interact with our IP in the same way the actual hardware would.&lt;/p&gt;

    &lt;p&gt;Although I’ve called these “models” “emulators” in the past, these aren’t
truly “emulators”.  An “emulator” would imply a description of the actual
hardware existed, such as an RTL description, yielding an additional level
of realism in simulation.  Barring sufficient information from the external
device’s manufacturer to actually and truly “emulate” the device, the test
designer often settles for a “model” instead.&lt;/p&gt;

    &lt;p&gt;Hardware models may naturally require Verilog delays in order to model
the interfaces they are designed for.  For example, a signal may take some
time to transition from a known value to an unknown one following a clock
transition.  As another example, a hardware device may become busy following
a command of some kind.  The good news is that Verilog can model both of
these behaviors nicely.&lt;/p&gt;

    &lt;p&gt;How to handle these delays “properly” will become part of the discussion
below.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;The Test Script, or driver&lt;/strong&gt;: This is the component of the design that
interacts with the device under test, sequencing commands to given to it
to make sure all of the capabilities of the DUT are properly tested.&lt;/p&gt;

    &lt;p&gt;This component of the Verilog test script often reads more like it is
software than hardware.  Indeed, we’ve &lt;a href=&quot;/2021/07/23/cpusim.html&quot;&gt;already discussed the idea of
replacing the test script with a piece of software compiled for a soft-core
CPU existing in the test environment, and then emulating that CPU as part
of the simulation model&lt;/a&gt;.  The
benefit of this approach is that it can test and verify the software that
will be used to drive the hardware under test.  The downside is that
simulation’s are slow, and adding a CPU to the simulation environment can
only slow it down further.&lt;/p&gt;

    &lt;p&gt;For the purposes of our discussion today I’ll simply note that the test
script commonly interacts with the design in a &lt;em&gt;synchronous&lt;/em&gt; manner.
Any delays, therefore, need to be synchronized with the clock.&lt;/p&gt;

    &lt;p&gt;There is another problem with the driver that we won’t be discussing today.
This is the simple reality that there’s no way to test all possible
driver delays.  Will a test driver accurately test if your DUT can handle
back to back requests, requests separated by a single clock cycle, by two
clock cycles, by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;N&lt;/code&gt; clock cycles?  You can’t simulate all of these
possible delays, but you can catch them using formal methods.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Not shown in Fig. 6, but also relevant is the &lt;strong&gt;Simulation Environment&lt;/strong&gt;: 
While the DUT and model are both necessary components of any simulation
environment, the environment might also contains such additional components
as an &lt;a href=&quot;/blog/2019/07/17/crossbar.html&quot;&gt;AXI interconnect&lt;/a&gt;,
&lt;a href=&quot;/zipcpu/2018/01/01/zipcpu-isa.html&quot;&gt;CPU&lt;/a&gt;, DMA,
and/or &lt;a href=&quot;/zipcpu/2018/07/13/memories.html&quot;&gt;RAM&lt;/a&gt;,
all of which are neither the test script, DUT, or model.&lt;/p&gt;

    &lt;p&gt;Ideally these extra components will have been tested and verified in other
projects prior to the current one, although this isn’t always the case.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now that we’ve taken a moment to define our terms, we can now return to the
simulation modeling problem we began.&lt;/p&gt;

&lt;h2 id=&quot;better-practices&quot;&gt;Better practices&lt;/h2&gt;

&lt;p&gt;The good news is that Verilog was originally written as a language for
driving simulations.&lt;/p&gt;

&lt;p&gt;Even better, subsets of Verilog exist which can do a good job of modeling
synthesizable logic.  This applies to both asynchronous and synchronous logic.
The assignment delay problems that I’ve outlined above, however, arise from
trying to use Verilog to model a mix of logic and software when the goal was
to create a hardware device model.&lt;/p&gt;

&lt;p&gt;Here are some tips, therefore, for using delays in Verilog:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Write synthesizable simulation logic where possible.&lt;/p&gt;

    &lt;p&gt;This is really only an issue for test bench or modeling logic.  It’s not
really an issue for logic that was meant to be synthesizable in the first
place.&lt;/p&gt;

    &lt;p&gt;The good news about writing test bench logic in a synthesizable fashion
is that you might gain the ability to synthesize your model in hardware,
and then run tests on it just that much faster.  You could then
also get a second benefit by formally verifying your device model–it’d
save you that much time later when running integrated simulations.&lt;/p&gt;

    &lt;p&gt;As an example, compare the following two approaches for verifying a test
chip:&lt;/p&gt;

    &lt;p&gt;ASIC Test chip #1: Has an SPI port capable of driving internal registers.
This is actually a really good idea, since you can reduce the number of 
wires necessary to connect to such a test chip.  The problem, however, was
that the SPI driver came from encrypted vendor IP.  Why was this a problem?
It became a problem when the test team tried to connect to the device
once it had been realized in hardware.  They tried to connect their CPU to
this same SPI port to drive it–and then didn’t drive it according to
protocol properly.&lt;/p&gt;

    &lt;p&gt;The result of testing ASIC test chip #1?  I got a panic’d call from a
client, complaining that the SPI interface to the test chip wasn’t working
and asking if I could find the bugs in it.&lt;/p&gt;

    &lt;p&gt;ASIC Test chip #2: Also has a SPI port for reading and writing internal
registers.  In this chip, however, the SPI port was formally verified
as a composition of both the writer and the reader–much as Fig. 7 shows
below.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 7. Sometimes, you'll have both RTL pieces available to you&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/vlog-wait/excontrol.svg&quot; alt=&quot;&quot; width=&quot;480&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;I say “much as Fig. 7 shows” because the verification of this port wasn’t
   done with using the CPU as part of the test script.  However, because
   both the SPI master and SPI slave were verified together, and even better
   because they were &lt;em&gt;formally&lt;/em&gt; verified in an environment containing both
   components, the test team can begin it’s work with a verified RTL interface.&lt;/p&gt;

&lt;p&gt;You can even go one step farther by using a soft-core CPU to &lt;a href=&quot;/2021/07/23/cpusim.html&quot;&gt;verify the
   software driver&lt;/a&gt; at the same
   time.  This is the full extent of what’s shown in Fig. 7.  As I mentioned
   above, the formal verification for ASIC test chip #2 stopped at the AXI-lite
   control port for the SPI master.  When testing this chip as part of an
   integrated test, a test script was used to drive a Bus Functional Model
   (BFM), rather than actual CPU software.  However, if you just read the
   test script’s calls to the BFM, you would have the information necessary
   to build a verified software driver.&lt;/p&gt;

&lt;ol start=&quot;2&quot;&gt;
  &lt;li&gt;
    &lt;p&gt;Use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;always @(*)&lt;/code&gt; for combinatorial blocks, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;always @(posedge clk)&lt;/code&gt;
(or negedge) or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;always @(posedge clk or negedge reset_n)&lt;/code&gt; for synchronous
logic.&lt;/p&gt;

    &lt;p&gt;While I like using the positive edge of a clock for everything, the actual
edge you need to use will likely be determined by the device and protocol
you are modeling.  The same is true of the reset.&lt;/p&gt;

    &lt;p&gt;I would discourage the use of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;always @(trigger)&lt;/code&gt;, where &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;trigger&lt;/code&gt; is some
combinatorial signal–lest you forget some required trigger component.  I
would also discourage the use of any &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;always @(posedge trigger)&lt;/code&gt; blocks where
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;trigger&lt;/code&gt; wasn’t a true clock–lest you create a race condition within your
logic.  I use the word &lt;em&gt;discourage&lt;/em&gt;, however, because some modeling contexts
require triggering on non-clocked logic.  If there’s no way around it,
then you do what you have to do to get the job done.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Synchronous (clocked) logic should use &lt;em&gt;non-blocking&lt;/em&gt; assignments (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;=&lt;/code&gt;),
and combinatorial logic should use &lt;em&gt;blocking&lt;/em&gt; assignments (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;=&lt;/code&gt;).&lt;/p&gt;

    &lt;p&gt;It seems like my debugging problems began when the prior designer used
a delay instead of proper blocking assignments.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;// SYNCHRONOUS block&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;			&lt;span class=&quot;c1&quot;&gt;// MAGIC NUMBER, doesn't model H/W, etc&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expression&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// BLOCKING LOGIC!&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Just … don’t do this.  When you start doing things like this, you’ll
   never know if (whatever) &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;expression&lt;/code&gt; had finished evaluating, or be able
   to keep track of when the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#1&lt;/code&gt; delay needs to be updated.&lt;/p&gt;

&lt;ol start=&quot;4&quot;&gt;
  &lt;li&gt;
    &lt;p&gt;Device models aren’t test drivers.  Avoid consuming time within them–such
as with a wait statement of any type.  Let the time be driven elsewhere by
external events.&lt;/p&gt;

    &lt;p&gt;This applies to both delays and wait conditions within &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;always&lt;/code&gt; blocks, as
well as any tasks that might be called from within them.  Non-blocking
assignment delays work well for this purpose.&lt;/p&gt;

    &lt;p&gt;Ideally, device models should use finite state machines, as in Fig. 4,
to model the passing of time if necessary, rather than consuming time
with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wait&lt;/code&gt; statements or ill defined assignment delays, as in Fig. 3.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;When driving synchronous logic from a test script, &lt;em&gt;synchronize&lt;/em&gt; any
test driven signals using &lt;em&gt;non-blocking&lt;/em&gt; assignments.&lt;/p&gt;

    &lt;p&gt;I have now found the following simulation construct several times over:&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ARESETN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

		&lt;span class=&quot;n&quot;&gt;ARVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;ARVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;c1&quot;&gt;// the problem continues on ...&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Sometimes the author uses the negative edge of the clock instead of the
positive edge here to try to “schedule” things away from the clock edge.
Indeed, I’ve been &lt;a href=&quot;/blog/2017/06/21/looking-at-verilator.html&quot;&gt;somewhat guilty of this
myself&lt;/a&gt;.
Sadly, this causes no end of confusion when trying to analyze a resulting
trace file.&lt;/p&gt;

&lt;p&gt;A better approach would be to synchronize this logic with non-blocking
assignments.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;ARVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;			&lt;span class=&quot;c1&quot;&gt;// Any initial value&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// Other initial AR* values may be reset here as well&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;negedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ARESETN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

		&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;ARVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;// Set the rest of the AR* values&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

		&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ARVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ARREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;ARVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

		&lt;span class=&quot;c1&quot;&gt;// Script continues further&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This will avoid any delta-time cycle issues that would otherwise be
   very difficult to find and debug.  Note that this also works because this
   block is the only block controlling &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ARVALID&lt;/code&gt; from within the test bench.
   Should you wish to control &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ARVALID&lt;/code&gt; from multiple test bench clocks, you
   may run into other concurrency problems.&lt;/p&gt;

&lt;p&gt;While you can still do this sort of thing with Verilator, I’ll reserve
   my solution for how to do it for another post.&lt;/p&gt;

&lt;ol start=&quot;6&quot;&gt;
  &lt;li&gt;
    &lt;p&gt;Pick a clock edge and use it.  Don’t transition on both edges–unless the
hardware protocol requires it.&lt;/p&gt;

    &lt;p&gt;As I alluded to above, I’ve seen a lot of AXI modeling that attempts to set
the various AXI signals on the &lt;em&gt;negative&lt;/em&gt; edge of the clock so that any and
all logic inputs will be stable later when the positive edge comes around.
This approach is all well and good until someone wants to do post–layout
timing analysis, or some other part of your design also wants to use the
negative edge, and then pain ensues.&lt;/p&gt;

    &lt;p&gt;Sadly, this means that the project may be turned in and then rest in a
“working” state for years before the problem reveals itself.&lt;/p&gt;

    &lt;p&gt;In a similar fashion, what happens when you have two always blocks, both
using a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#1&lt;/code&gt; delay as illustrated in Fig. 2 above?  Or, alternatively, what
happens when you want the tools to put real post place-and-route delays into
your design for a timing simulation?  You may find you’ve already lost your
timing slack due to a poor simulation test bench or model.  Need I say that
it would be embarrassing to have to own up to a timing failure in simulation,
due to your own simulation constructs?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;There is a time for using multiple always blocks–particularly when modeling
DDR devices.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 8. Example DDR simulation logic&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/vlog-wait/ddrsim.svg&quot; alt=&quot;&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;In today’s high speed devices, I’ve often found the need for multiple
   always blocks, triggered off of different conditions, to capture the
   various triggers and describe the behavior I want.  One, for example,
   might trigger off the positive edge, and another off the negative edge.
   This is all fine, well, and good for &lt;em&gt;simulation&lt;/em&gt; (i.e. &lt;em&gt;test bench&lt;/em&gt;)
   logic.  While this would never work in hardware, it can easily be used to 
   accurately model behavior in simulation.&lt;/p&gt;

&lt;ol start=&quot;8&quot;&gt;
  &lt;li&gt;
    &lt;p&gt;Use assignment delays to model &lt;em&gt;physical&lt;/em&gt; hardware delays &lt;em&gt;only&lt;/em&gt;.&lt;/p&gt;

    &lt;p&gt;For example, if some event will cause the ready line to go low for 50
microseconds, then you might write:&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;parameter&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;tWAIT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;50_000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;event_and_not_reset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;ready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1'b0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;ready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tWAIT&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1'b1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Notice how I’ve carefully chosen not to consume any time within this
   always block, yet I’ve still managed to create something that will capture
   the passage of time.  In this case, I’ve used the Verilog &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;=&lt;/code&gt; together
   with a delay statement to schedule the transition of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ready&lt;/code&gt; from zero
   back to one by #tWAIT ns.&lt;/p&gt;

&lt;p&gt;I’ve now used this approach on high speed IO lines as well, with a lot
   of success.  For example, if the data will be valid &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tDVH&lt;/code&gt; after the
   clock goes high and remain valid for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tDV&lt;/code&gt; nanoseconds, then you might
   write:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;chip_enable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;pre_output_value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;some_expression&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;n&quot;&gt;output_valid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tDVH&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1'b1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;output_valid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;#(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tDVH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tDV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1'b0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;output_value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;output_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pre_output_value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1'bz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I’ve even gone so far in some cases to model the ‘x values in this fashion
   as well.  That way the output is properly ‘x while the voltage is swinging
   from one value to the next.&lt;/p&gt;

&lt;ol start=&quot;9&quot;&gt;
  &lt;li&gt;
    &lt;p&gt;No &lt;a href=&quot;https://en.wikipedia.org/wiki/Magic_number_(programming)&quot;&gt;magic numbers&lt;/a&gt;!
Capture hardware delays in &lt;em&gt;named&lt;/em&gt; parameters, specparams, and registers,
rather than using numeric assignment delays.&lt;/p&gt;

    &lt;p&gt;For example, were I modeling a flash memory, I might do something like the
following to model an erase:&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;cp&quot;&gt;`timestep&lt;/span&gt;	&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ns&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ns&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;parameter&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;real&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;tERASE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;500_000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// 500 microseconds&lt;/span&gt;

	&lt;span class=&quot;c1&quot;&gt;// Decode the SPI interface.  We start by counting clocks&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;//  from the negative edge of CSN&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SCK&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CSN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CSN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;clock_counts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clock_counts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// Count clock ticks&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;clock_counts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clock_counts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// Once clock_counts[5], we're past 32.  We&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// can keep counting, but the results will be&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// irrelevant for this example.&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;clock_counts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clock_counts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;c1&quot;&gt;// With each new clock tick, we capture one more bit&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// from the interface.&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SCK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;sreg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sreg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MOSI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;c1&quot;&gt;// An erase command takes place after 32 SCK clock edges: the&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// first 8 contain the command, the next 24 contain the address&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// for the command.  Yes, this assumes 24-bit addressing.&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;erase_command&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CSN&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clock_counts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;31&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sreg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;23&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CMD_ERASE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;erase_address&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sreg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;22&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;12'h0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

	&lt;span class=&quot;c1&quot;&gt;// We only issue and act on the command once we get to the final&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// SCK clock edge of the command sequence--the 32nd clock edge after&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// CSn activates (lowers)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SCK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;erase_command&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;busy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// Set an internal busy bit.  We'll remain busy for&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// tERASE ns.&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;busy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;busy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tERASE&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1'b0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;c1&quot;&gt;// Actually erase the memory in question&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BLOCK_SIZE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;mem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;erase_address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;8'hff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Notice the use of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tERASE&lt;/code&gt; rather than some arbitrary erase time buried among
the logic.  Placing all such device dependent times in one location (at the
top of the file) will then make it easier to upgrade this logic for a new
and faster device at a later time.&lt;/p&gt;

&lt;p&gt;We can also argue about when the actual erase should take place.  As long
as the user can’t interact with the device while it’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;busy&lt;/code&gt;, this probably
doesn’t make a difference.  Alternatively, we could register the erase
address and set a time for later when the erase should take place.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;erase_memory_flag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SCK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;erase_command&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;busy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;busy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;busy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tERASE&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1'b0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;n&quot;&gt;erase_memory_flag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1'b1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;r_erase_address&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;erase_address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;c1&quot;&gt;// Render the memory in question unknown&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BLOCK_SIZE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;mem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;erase_address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;negedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;busy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;erase_memory_flag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// Actually erase the memory in question&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BLOCK_SIZE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;mem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r_erase_address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;8'hff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;c1&quot;&gt;// Clear the flag&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;erase_memory_flag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tCK&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1'b0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Even this isn’t perfect, however, since we now have a transition taking place
on something other than a clock.  Given that the interface clock isn’t
continuous, this may still be the best option to create a reliable edge.&lt;/p&gt;

&lt;ol start=&quot;10&quot;&gt;
  &lt;li&gt;The &lt;a href=&quot;https://en.wikipedia.org/wiki/Rule_of_three_(computer_programming)&quot;&gt;rule of
   3&lt;/a&gt;
   applies to hardware as well as software: if you have to write the same
   logic more than twice, then you are doing something wrong.  Refactor it.
   Encapsulate it.  Make a module to describe it, and then reuse that module.&lt;/li&gt;
&lt;/ol&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left; padding: 25px&quot;&gt;&lt;caption&gt;Fig 9. If you have to build it more than twice, refactor it&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/vlog-wait/better-appllc.svg&quot; alt=&quot;&quot; width=&quot;280&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Remember our example from Fig. 5 above?  Fig. 9 shows a better approach to
   handling three separate device tasks, each with two separate protocols that
   might be used to implement them.&lt;/p&gt;

&lt;p&gt;For protocols that separate themselves nicely between the link layer
   control (LLC) protocol and a media access control (MAC) layer, this works
   nicely to rearrange the logic so that each layer only needs to be written
   once, rather than duplicated within structures implementing both MAC and
   LLC layers together.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 10. The rule of Gold&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/vlog-wait/rule-of-gold.svg&quot; alt=&quot;&quot; width=&quot;280&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Remember: fully verified, well tested, well written logic is pure
&lt;a href=&quot;/blog/2020/01/13/reuse.html&quot;&gt;re-usable gold&lt;/a&gt; in this
business.  Do the job right the first time, and you’ll reap dividends for years
to come.&lt;/p&gt;

&lt;h2 id=&quot;todays-story&quot;&gt;Today’s story&lt;/h2&gt;

&lt;p&gt;A client recently called me to ask if I could modify an IP I had written
so that it would be responsive on an APB slave input with a different
clock frequency from the one the rest of the device model used.&lt;/p&gt;

&lt;p&gt;The update required inserting an APB cross clock domain bridge into the IP.
This wasn’t hard, since I’d built (and formally verified) such a bridge two
months prior–I just needed to connect the wires and do a bit of signal
renaming for the case when the bridge wasn’t required.&lt;/p&gt;

&lt;p&gt;That was the easy part.&lt;/p&gt;

&lt;p&gt;But, how shall this new capability be tested?  It would need an updated test
script and more.&lt;/p&gt;

&lt;p&gt;Thankfully, this was also easy.&lt;/p&gt;

&lt;p&gt;Because I had built the top level simulation construct using parameters, which
&lt;a href=&quot;/zipcpu/2022/07/04/zipsim.html&quot;&gt;could easily be overridden by the test
driver&lt;/a&gt;, the test suite
was easy to update: I just had to set an asynchronous clock parameter,
create a new parameter for the clock speed, adjust the clock speed itself,
and away I went.  Thankfully, I had already (over time) gotten rid of any
inappropriate delays, so the update went smoothly.&lt;/p&gt;

&lt;p&gt;Smoothly?  Indeed, the whole update took less than a half an hour.  (This
doesn’t include the time it took to originally build and verify a generic
APB cross-clock domain bridge.)&lt;/p&gt;

&lt;p&gt;… and that’s what you would hope for from well written logic.&lt;/p&gt;

&lt;p&gt;Well, okay, it’s not all roses–I still have to go back and update the user
guide, update the repository, increment the IP version, update the change log,
and then bill for the task.  Those tasks will take longer than the actual
update, but such is the business we are in.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Let’s face it, this article is a rant.  I know it.  Perhaps you’ll learn
something from it.  Perhaps I’ll learn something from any debate that will
ensue.  (Feel free to comment on &lt;a href=&quot;https://reddit.com/r/ZipCPU&quot;&gt;Reddit&lt;/a&gt; …)&lt;/p&gt;

&lt;p&gt;Yes, I charge by the hour.  Yes, messes like these will keep me gainfully
employed and my family well fed for years to come.  However, I’d rather charge
for doing the useful work of adding new capabilities to a design rather than
fixing up someone else’s mess.&lt;/p&gt;
&lt;hr /&gt;&lt;p&gt;&lt;em&gt;For the vision is yet for an appointed time, but at the end it shall speak, and not lie: though it tarry, wait for it; because it will surely come, it will not tarry. (Habakkuk 2:3)&lt;/em&gt;</description>
        <pubDate>Wed, 21 Sep 2022 00:00:00 -0400</pubDate>
        <link>https://zipcpu.com/blog/2022/09/21/vlog-wait.html</link>
        <guid isPermaLink="true">https://zipcpu.com/blog/2022/09/21/vlog-wait.html</guid>
        
        
        <category>blog</category>
        
      </item>
    
  </channel>
</rss>
