<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>The ZipCPU by Gisselquist Technology</title>
    <description>The ZipCPU blog, featuring how to discussions of FPGA and soft-core CPU design.  This site will be focused on Verilog solutions, using exclusively OpenSource IP products for FPGA design.  Particular focus areas include topics often left out of more mainstream FPGA design courses such as how to debug an FPGA design.
</description>
    <link>https://zipcpu.com/</link>
    <atom:link href="https://zipcpu.com/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Fri, 25 Nov 2022 11:58:19 -0500</pubDate>
    <lastBuildDate>Fri, 25 Nov 2022 11:58:19 -0500</lastBuildDate>
    <generator>Jekyll v4.2.0</generator>
    <image>
      <url>https://zipcpu.com/img/gt-rss.png</url>
      <title></title>
      <link></link>
    </image>
    
      <item>
        <title>Thanksgiving!  I have much to be thankful for</title>
        <description>&lt;p&gt;We started a tradition in my family, years ago, of naming the things we are
thankful to God for on each Thanksgiving.&lt;/p&gt;

&lt;p&gt;This year, I would like to share with you those things that I am thankful
for.  The three primary things I am thankful to God for this year are
my salvation, my family, and the business that He has given me.  In many
ways, these blessings are the natural result of the service I’ve chosen
to give to God.  (&lt;a href=&quot;https://www.blueletterbible.org/kjv/heb/11/6&quot;&gt;Heb 11:6&lt;/a&gt;)
For this reason, I’d also like to take a short moment to walk through some
verses, and to try to describe the results of my attempts to follow the same.&lt;/p&gt;

&lt;h2 id=&quot;salvation&quot;&gt;Salvation&lt;/h2&gt;

&lt;p&gt;The salvation Jesus Christ offers is easily summarized in this verse:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Kiss the Son, lest he be angry, and ye perish from the way, when his wrath
is kindled but a little.  Blessed are all they that put their trust in
him.  (&lt;a href=&quot;https://blueletterbible.org/kjv/psa/2/12&quot;&gt;Ps 2:12&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Salvation starts when a man chooses to trust God’s son, Jesus.  This is a
commitment.  As a result of trusting God, this man will keep God’s words and
obey as he is able.  The result, according to this verse, is such a blessing
as only God can give.  It’s value is greater than gold
(&lt;a href=&quot;https://www.blueletterbible.org/kjv/psa/19/10&quot;&gt;Ps 19:10&lt;/a&gt;) or rubies
(&lt;a href=&quot;https://www.blueletterbible.org/kjv/job/28/12-19&quot;&gt;Job 28:12-19&lt;/a&gt;,
&lt;a href=&quot;https://www.blueletterbible.org/kjv/pro/3/13-15&quot;&gt;Prov 3:13-15&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;My life changed significantly when I chose to trust God’s son, Jesus.  It
is because of these changes, and the results of following God, that I am
now so thankful this year.&lt;/p&gt;

&lt;h2 id=&quot;family&quot;&gt;Family&lt;/h2&gt;

&lt;p&gt;When I first committed my life to Christ, I was married but had no
&lt;em&gt;family&lt;/em&gt; to speak of.  My wife and I were separated, and we had no
children.&lt;/p&gt;

&lt;p&gt;My fiance and I both graduated from the US Air Force Academy.  She
went to Columbus, Mississippi to become a pilot, I went to Dayton,
Ohio, to get a masters degree.  We were married while we were apart.&lt;/p&gt;

&lt;p&gt;During this dark time, I still remember the first day I arrived at
&lt;a href=&quot;https://www.ebcbellbrook.org/&quot;&gt;Emmanuel Baptist Church, now in Bellbrook,
Ohio&lt;/a&gt;.  At the time I was deeply troubled,
not knowing if my wife and I would ever be together.  Joint assignments
were not sure things.  Much to my surprise, the pastor there was quite
convinced that we would be together.  How could he be so convinced?  This
made no sense to me, since he hardly knew me.  He explained that he
was convinced because he knew the character of the God he served.  At the
time, I wasn’t sure how to take this.  Was the pastor a crack, or did he
really know the Almighty God of heaven and earth that well?&lt;/p&gt;

&lt;p&gt;No, the military is not kind to couples where both are in the service.
Sometimes the personnel office is able to station military spouses
together.  Sometimes, as happened with me after our first assignment
together, the personnel officer will just throw his hands up in the
air and declare that military spouses aren’t guaranteed to live with
each other.&lt;/p&gt;

&lt;p&gt;Marrying a military spouse didn’t leave my wife and I in a happy place.
I would certainly not encourage others to take this path.&lt;/p&gt;

&lt;p&gt;Some time later, my wife and I found the verse in Titus, where God instructs
the older women to, …&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;… teach the younger women to be sober, to love their husbands, to love
their children, to be discrete, chaste, keepers at home, obedient to their
own husbands, that the word of God be not blasphemed.
(&lt;a href=&quot;https://www.blueletterbible.org/kjv/tit/2/4-5&quot;&gt;Titus 2:4-5&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The word “at”, found in the phrase “keepers at home”, convinced my wife that
she shouldn’t be in the military in spite of her training and experience as
a helicopter pilot.  She than began the (long and drawn out) process of
separating from the military.  The result of this process was that, after
four happy years together, we were separated for the next year.  During
this time, we didn’t know how long it would be until we’d be together
again.&lt;/p&gt;

&lt;p&gt;We also re-examined the verses where God instructs man to be fruitful
and multiply. (&lt;a href=&quot;https://www.blueletterbible.org/kjv/gen/1/28&quot;&gt;Gen 1:28&lt;/a&gt;,
&lt;a href=&quot;https://www.blueletterbible.org/kjv/gen/9/1&quot;&gt;9:1&lt;/a&gt;,
&lt;a href=&quot;https://www.blueletterbible.org/kjv/gen/9/7&quot;&gt;9:7&lt;/a&gt;,
&lt;a href=&quot;https://www.blueletterbible.org/kjv/deu/28/4&quot;&gt;Deut 28:4&lt;/a&gt;,
&lt;a href=&quot;https://www.blueletterbible.org/kjv/deu/28/11&quot;&gt;28:11&lt;/a&gt;,
&lt;a href=&quot;https://www.blueletterbible.org/kjv/pro/5/18&quot;&gt;Prov 5:18&lt;/a&gt;)&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;And you, be ye fruitful, and multiply; bring forth abundantly in the earth,
and multiply therein. (&lt;a href=&quot;https://www.blueletterbible.org/kjv/gen/9/7&quot;&gt;Gen 9:7&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Before coming across this verse, or rather before I took it seriously,
I had been of the belief that every couple should have two children,
and so to maintain the world’s population.  After evaluating these
verses, I chose to do as I was told.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Let thy fountain be blessed: and rejoice with the wife of thy youth.
(&lt;a href=&quot;https://www.blueletterbible.org/kjv/pro/5/18&quot;&gt;Prov 5:18&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Those who know us would declare that we now have a “large” family.
I would simply say that every one of our children is a blessing that
I am genuinely thankful for.&lt;/p&gt;

&lt;p&gt;The Bible also teaches how to raise up the children God gives, and
provides encouragement and instruction for the same.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Correct thy son, and he shall give thee rest; yea, he shall give
delight unto thy soul.
(&lt;a href=&quot;https://www.blueletterbible.org/kjv/pro/29/17&quot;&gt;Prov 29:17&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Yes, we did choose to abandon all of the sage advice printed in
“Christianity Today” for the words of the Bible itself.
(&lt;a href=&quot;https://www.blueletterbible.org/kjv/pro/13/24&quot;&gt;Prov 13:24&lt;/a&gt;,
&lt;a href=&quot;https://www.blueletterbible.org/kjv/pro/19/18&quot;&gt;19:18&lt;/a&gt;,
&lt;a href=&quot;https://www.blueletterbible.org/kjv/pro/22/15&quot;&gt;22:15&lt;/a&gt;,
&lt;a href=&quot;https://www.blueletterbible.org/kjv/pro/23/13-14&quot;&gt;23:13-14&lt;/a&gt;,
&lt;a href=&quot;https://www.blueletterbible.org/kjv/pro/29/15&quot;&gt;29:15&lt;/a&gt;,
&lt;a href=&quot;https://www.blueletterbible.org/kjv/eph/6/4&quot;&gt;Eph 6:4&lt;/a&gt;)
Perhaps it was a risk doing so at first.  Now looking back, I am very
pleased with the result.  Today my children are one of the delights
of my life.&lt;/p&gt;

&lt;p&gt;What is the alternative?&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;As for my people, children are their oppressors, and women rule over them.
O my people, they which lead thee cause thee to err, and destroy the way
of thy paths.  (&lt;a href=&quot;https://www.blueletterbible.org/isa/3/12&quot;&gt;Is 3:12&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;No, I think I like the results of following God’s way better.  Indeed,
hath the LORD not promised,&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Blessed is every one that feareth the LORD; that walketh in his ways.  For
thou shalt eat the labour of thine hands: happy shalt thou be, and it
shall be well with thee.  Thy wife shall be as a fruitful vine by the
sides of thine house: thy children like olive plants round about thy
table. (&lt;a href=&quot;https://www.blueletterbible.org/psa/128/1-3&quot;&gt;Ps 128:1-3&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This describes my life today.  Because of this, I am thankful for my
family: a family I would not have had, were it not for God’s instruction
and subsequent blessing.&lt;/p&gt;

&lt;h2 id=&quot;business&quot;&gt;Business&lt;/h2&gt;

&lt;p&gt;I am also thankful for my business.&lt;/p&gt;

&lt;p&gt;When I started Gisselquist Technology, LLC, I knew very little about
business.  I knew about technology.  I knew about signal processing.
I knew about the military acquisition process.  I knew a little
bit about digital logic.&lt;/p&gt;

&lt;p&gt;Why did I choose to start my own business?  Because of verses like,&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Ye are bought with a price; be not ye the servants of men.
(&lt;a href=&quot;https://www.blueletterbible.org/kjv/1co/7/23&quot;&gt;1Cor 7:23&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;But just because a man goes into business doesn’t mean he’ll be successful
at it.  Perhaps I’m only “successful” because my goals are simple:  I only
wish to provide for myself and my family.&lt;/p&gt;

&lt;p&gt;On the other hand, God does make some promises here as well.  For example,
the very first Psalm talks about prospering at whatever you choose to do.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Blessed is the man that walketh not in the counsel of the ungodly, nor
standeth in the way of sinners, nor sitteth in the seat of the scornful.
But his delight is in the law of the Lord, and in his law doth he
meditate day and night.  And he shall be like a tree planted by the
rivers of water, that bringeth forth his fruit in his season; his leaf
also shall not wither; and whatsoever he doeth shall prosper.
(&lt;a href=&quot;https://www.blueletterbible.org/kjv/psa/1/1-3&quot;&gt;Ps 1:1-3&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;“Whatsoever he doeth shall prosper”, huh?  True?  Yes.&lt;/p&gt;

&lt;p&gt;Or how about the ending of the 23rd Psalm?&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Thou preparest a table before me in the presence of mine enemies: thou
annointest my head with oil; my cup runneth over.  Surely goodness and
mercy shall follow me all the days of my life: and I will dwell in the
house of the LORD forever.
(&lt;a href=&quot;https://www.blueletterbible.org/kjv/psa/23/5-6&quot;&gt;Ps 23:5-6&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;“My cup runneth over” sounds like a blessing that a man doesn’t have
room enough to receive.
(&lt;a href=&quot;https://www.blueletterbible.org/kjv/mal/3/10&quot;&gt;Mal 3:10&lt;/a&gt;)  Today, I
feel like God’s blessing runs over from my cup onto those around me,
such as my family or those I work with.&lt;/p&gt;

&lt;p&gt;Well, does it?  Is this witness true?  Let me offer these evidences.
First, my oldest son graduated from college debt free, and now my
second child will be graduating from college this year, also debt
free.  My third child is still in college, and remains debt free.
This evidence, however, may be more due to their work than my own.
So let me offer a second piece of evidence and share that I’ve doubled
my gross receipts for the last two years, year over year.  This, mind
you, is in spite of a group of individuals that tried to cancel me
two years ago, and swore never to work with me.  It is also in spite
of all of the COVID shutdowns and subsequent chip shortages, which
in many ways I have been quite insulated from.  As my third evidence,
my wife and I were able to save up enough to purchase new vehicles
while on my business salary.  This year, it was a Honda Odyssey.
Finally, this year, I have someone joining me to help me out with
my tasks.&lt;/p&gt;

&lt;p&gt;If that’s not “success”, I’m not sure what is.&lt;/p&gt;

&lt;p&gt;So, again, I’m thankful this year for my success at Gisselquist
Technology, LLC.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;This year, I am thankful for what God has done in my life and the
joy that I have to share.&lt;/p&gt;

&lt;p&gt;Let me encourage you to also join me in counting your blessings this year,
and in thanking the God of all blessings for what he has done in your own
life as well.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Rejoice in the Lord alway: and again I say, Rejoice!
(&lt;a href=&quot;https://www.blueletterbible.org/kjv/phl/4/4&quot;&gt;Phil 4:4&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;&lt;p&gt;&lt;em&gt;Bring ye all the tithes into the storehouse, that there may be meat in mine house, and prove me now herewith, saith the LORD of hosts, if I will not open you the windows of heaven, and pour you out a blessing, that there shall not be room enough to receive it. (Mal 3:10)&lt;/em&gt;</description>
        <pubDate>Thu, 24 Nov 2022 00:00:00 -0500</pubDate>
        <link>https://zipcpu.com/blog/2022/11/24/thanksgiving.html</link>
        <guid isPermaLink="true">https://zipcpu.com/blog/2022/11/24/thanksgiving.html</guid>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>Quiz #23: Can this assertion fail?</title>
        <description>&lt;!-- answer: &quot;2022/11/01/fv-answer22.html&quot; --&gt;

&lt;p&gt;At one time I thought that &lt;a href=&quot;/formal/2018/04/23/invariant.html&quot;&gt;swapping the assumptions regarding the inputs
of a design with the assertions over the outputs was a good
approach to handling
complexity&lt;/a&gt;.  Then
I came across this example.&lt;/p&gt;

&lt;p&gt;What do you think?&lt;/p&gt;
</description>
        <pubDate>Thu, 24 Nov 2022 00:00:00 -0500</pubDate>
        <link>https://zipcpu.com/quiz/2022/11/24/quiz23.html</link>
        <guid isPermaLink="true">https://zipcpu.com/quiz/2022/11/24/quiz23.html</guid>
        
        
        <category>quiz</category>
        
      </item>
    
      <item>
        <title>A first lesson in sales pitches: Honesty</title>
        <description>&lt;p&gt;I seem to be getting quite a few requests from those who would wish to help
me on this blog.  These tend to fall into a couple of categories:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Search Engine Optimization (SEO) offers&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Web redesign&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Requests to submit an (irrelevant) article&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Requests for me to link to an article somewhere&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For all those to whom it may concern, therefore, let me offer the following
advice: 1) do your homework, and 2) &lt;em&gt;be honest!&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;zipcpu-funding&quot;&gt;ZipCPU Funding&lt;/h2&gt;

&lt;p&gt;First and foremost, few of these cold e-mailers bother to look through the web
site to see how it is funded.  If they did, they might notice that
&lt;a href=&quot;https://zipcpu.com&quot;&gt;zipcpu.com&lt;/a&gt; &lt;a href=&quot;/blog/2017/08/01/advertising.html&quot;&gt;doesn’t (currently)
advertise&lt;/a&gt;, it doesn’t
offer promotions, nor are there any links to click on to purchase ZipCPU
merchandise.&lt;/p&gt;

&lt;p&gt;The closest thing to blog funding is a &lt;a href=&quot;https://patreon.com/ZipCPU&quot;&gt;Patreon
link&lt;/a&gt; on the left of every page which people can
click on to provide a monthly contribution to encourage my work.  While I
appreciate everyone who contributes, and perhaps even more those who choose
to correspond and encourage, and while I am very thankful for all of those
who have chosen to &lt;a href=&quot;https://patreon.com/ZipCPU&quot;&gt;sponsor the ZipCPU blog on
Patreon&lt;/a&gt;, it doesn’t pay for my time.
Blog articles can take days, and sometimes weeks, to put together.&lt;/p&gt;

&lt;p&gt;That’s okay.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;https://zipcpu.com&quot;&gt;ZipCPU blog&lt;/a&gt; wasn’t written for that purpose.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;https://zipcpu.com&quot;&gt;ZipCPU blog&lt;/a&gt; was written (initially) to attract
businesses in my skills rather than to sell products.  To that end, it is
working quite well–especially since I don’t need to attract more than 1-3
businesses to keep my time occupied and my wallet filled.&lt;/p&gt;

&lt;p&gt;Beyond that, the &lt;a href=&quot;https://zipcpu.com&quot;&gt;ZipCPU blog&lt;/a&gt; is, in many ways, a
labor of love and fun.  I enjoy helping others, and I enjoy sharing my
own experiences.  Even better, the &lt;a href=&quot;https://zipcpu.com&quot;&gt;ZipCPU blog&lt;/a&gt;
offers me a chance to do a bit of &lt;a href=&quot;https://en.wikipedia.org/wiki/Rubber_duck_debugging&quot;&gt;rubber duck
debugging&lt;/a&gt;.  When I
write blog articles about designs I’ve written, those designs I blog about
tend to get cleaned up at the same time.&lt;/p&gt;

&lt;p&gt;The bottom line here is: there’s no money to fund hiring a web developer.
That’s not how this blog is funded.&lt;/p&gt;

&lt;p&gt;With this background, let’s look a bit deeper.&lt;/p&gt;

&lt;h2 id=&quot;seo-optimization&quot;&gt;SEO Optimization&lt;/h2&gt;

&lt;p&gt;Perhaps the biggest offer I get is from someone selling me search engine
optimization services.  These individuals offer to optimize the ZipCPU
web site so that search engines will find my content faster and easier.
Perhaps their biggest sales point is that they wish to make my content
the number one Google listing on (pick whatever topic).&lt;/p&gt;

&lt;p&gt;Those who’ve followed the blog for a while may have noticed that I tend to do
a yearly check up of my Google (and duck-duck-go) rankings.  You can find
blog summaries from &lt;a href=&quot;/blog/2018/01/01/top-ten.html&quot;&gt;2017&lt;/a&gt;,
&lt;a href=&quot;/blog/2019/01/01/top-ten.html&quot;&gt;2018&lt;/a&gt;,
&lt;a href=&quot;/blog/2020/01/01/2019-in-review.html&quot;&gt;2019&lt;/a&gt;,
&lt;a href=&quot;/blog/2022/01/03/2021-in-review&quot;&gt;2020 and 2021 here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;My conclusion has been that, historically, I tend to do
rather well without any help.&lt;/p&gt;

&lt;p&gt;Could I do better?  Sure, I suppose: I could buy some Google key words and
guarantee my site comes up in the first page.  But why?  Would I make any more
money?  It’s not likely.  Again, that’s not how funding works for this blog.&lt;/p&gt;

&lt;p&gt;Look at it from the other perspective, however: a search engine that doesn’t
promote good content simply isn’t a very good search engine.  People just
won’t use it.  Therefore, as long as I can provide good and valuable content,
my web site will be found.  Providing valuable content is one of the tasks
I have enjoyed.&lt;/p&gt;

&lt;h2 id=&quot;web-redesign&quot;&gt;Web Redesign&lt;/h2&gt;

&lt;p&gt;The next common request I get is to from folks who would like to re-design my
web site.  This is something I would be more sympathetic to if my focus was
to make money from the blog.&lt;/p&gt;

&lt;p&gt;Let’s face it, the blog does need a good redesign.  The single landing page,
with everything linked off of it, can make it a challenge to find useful
information.  Worse, its mobile presence is broken to say the least: page
text tends to get cut off by the menu at the top of the page.  On the other
hand, links are valuable: I wouldn’t want to break anyone’s links in any
such redesign.&lt;/p&gt;

&lt;p&gt;But redesigning the web site to make it load faster?  A lot of the offers
I get promise faster loading.  In my mind, however, I don’t use a lot of
images on the landing page, so faster loading seems like a false promise.
Let’s get serious here: the main index for the blog uses less than 1kB
of data!  If someone offers me faster loading, therefore, it tells me that
they haven’t done their homework–they’re just copying vacuous claims
they’ve made regarding someone else’s web sites.&lt;/p&gt;

&lt;p&gt;This is not the way to build credibility in a sales pitch.&lt;/p&gt;

&lt;p&gt;The redesign that would be appropriate for the
&lt;a href=&quot;https://zipcpu.com&quot;&gt;ZipCPU web site&lt;/a&gt; isn’t going
to be something flashy.  It’s not about catching attention, it’s about finding
the information you need, and presenting it in an appropriate order.  No, I
don’t need more graphics to slow the page down, nor do I need to limit
each page to twenty carefully chosen links.&lt;/p&gt;

&lt;p&gt;The bottom line here, however, is that … there’s no money to fund hiring
someone to accomplish such a redesign.  Again, that’s not how this blog
works.  If or when it happens, I’ll probably be the one doing it.  That’s
also likely to keep it from happening for a while.&lt;/p&gt;

&lt;h2 id=&quot;submitting-articles&quot;&gt;Submitting Articles&lt;/h2&gt;

&lt;p&gt;I’ve also had several individuals offer to write articles for the
&lt;a href=&quot;https://zipcpu.com&quot;&gt;ZipCPU blog&lt;/a&gt;.  Admittedly, my first thought is: Awesome!
My next question is, on what topic?  And … that’s the rub.  The &lt;a href=&quot;https://zipcpu.com&quot;&gt;ZipCPU
blog&lt;/a&gt; is &lt;a href=&quot;/about/&quot;&gt;dedicated&lt;/a&gt; to the
topic of digital design, and to finding and fixing bugs in digital logic.&lt;/p&gt;

&lt;p&gt;If you want to write an article on FIFOs, therefore, it should contain a FIFO
implementation, a discussion of how the FIFO was verified, and why your design
is good, bad or indifferent.  This is in contrast to the person in the food
service industry who wanted me to post an article on how refrigerators need
to be organized in a first-in first-out fashion.&lt;/p&gt;

&lt;h2 id=&quot;submitting-links&quot;&gt;Submitting Links&lt;/h2&gt;

&lt;p&gt;No, I’m not opposed to linking to the articles of others either.  However, it
does need to fit the purpose of the blog: digital design and verification.&lt;/p&gt;

&lt;p&gt;For example, just because I mention the HDMI video standard doesn’t mean that
a link on HDMI cable standards is appropriate.  Sure, I get that you want to
sell HDMI cables, but that’s just not my topic.  An appropriate link might
instead point to where someone could find the HDMI standard, and details
someone might need to implement something following that standard.  To date,
Wikipedia has served this purpose well for me.  Wikipedia articles tend to
provide a nice overview of various topics I need that I can link to.&lt;/p&gt;

&lt;h2 id=&quot;cold-calling-do-your-homework&quot;&gt;Cold Calling: Do your homework&lt;/h2&gt;

&lt;p&gt;If you really want to cold-call, or rather cold e-mail me, then please do your
homework first.  My name is not “Owner”, nor is it “ZipCPU Team”.  There’s no
&lt;em&gt;team&lt;/em&gt; here, there is me.  I’m the only one here, and if you look around a
little you can find my name.&lt;/p&gt;

&lt;p&gt;As an example, I received an e-mail from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Richard Reynosa
&amp;lt;pelletgirl35@gmail.com&lt;/code&gt;.  Richard (or is it pelletgirl?) starts off his
(her?) letter with:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Dear owner,&lt;/p&gt;

  &lt;p&gt;I recently spent some time doing a site review of Zipcpu.com (Yes, I do
random site reviews for a living.)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;My first thought is that you didn’t do much of a site review at all.
If you had, 1) you would’ve found my name and appropriately addressed your
letter, and 2) you would’ve known that there’s no sales taking place on this
web site to support your business.&lt;/p&gt;

&lt;p&gt;If you are going to send me a cold e-mail, do your homework first.&lt;/p&gt;

&lt;p&gt;I make no promises that this will rescue you from my spam box.  I’ll only
promise that if you don’t your e-mail will simply get deleted from it without
getting a response.&lt;/p&gt;

&lt;h2 id=&quot;cold-calling-be-honest&quot;&gt;Cold Calling: Be Honest&lt;/h2&gt;

&lt;p&gt;The next thing I tend to notice about these e-mails is that the author’s
name and signature rarely matches the e-mail address name.  A case in
point might be Richard’s address above (or was it pelletgirl35’s?).  Which is
it?  It gets worse, too.  I get a lot of e-mail addresses that end up looking
like user234156@gmail.com.&lt;/p&gt;

&lt;p&gt;This is usually the first flag that the source isn’t legitimate: they aren’t
selling their product next to their name.  Chances are they’ve been hiding from
some Google spam detection filter, and so need to keep changing their name
to avoid being sent to my spam folder–where these e-mails tend to end up
anyway.&lt;/p&gt;

&lt;p&gt;At one time, I started getting a lot of emails from individuals
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@candycloudtech.com&lt;/code&gt;.  Some time later I started getting the same sort of
e-mails from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@webmarketingassist.com&lt;/code&gt;.  These were a bit better–at least
the e-mail user name tended to match the signature at the bottom, but it
doesn’t help that candycloudtech.com doesn’t have a web presence, nor am
I getting a request from a single individual at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@candycloudtech.com&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Here’s the other thing about &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;candycloudtech.com&lt;/code&gt;: Without a web presence
of their own, how are they going to convince me that they can improve my
web presence?  Seriously.  If you want to sell your web design ability,
demonstrate it for me, then advertise your services where I can evaluate your
website as your &lt;em&gt;portfolio&lt;/em&gt;.  Convince me your website is valuable, and
contains something I might wish to emulate, and then I might consider buying
your services.&lt;/p&gt;

&lt;p&gt;In this case, I’m not buying it.  Even if I was looking for someone to do
web redesign, I’m not buying from someone who isn’t going to show off their
own work.&lt;/p&gt;

&lt;p&gt;If you really want to cold-call, or rather cold-e-mail me, then get your
story straight and tell it honestly or I’m not interested.&lt;/p&gt;

&lt;p&gt;Chances are I’m not interested anyway, but I’ll continue.&lt;/p&gt;

&lt;h2 id=&quot;reviewing-sales-pitches&quot;&gt;Reviewing sales pitches&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;We are a professional web design company.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;But you won’t tell me what the name of that company is, and you are sending
to me from an e-mail @gmail.com?  Not interested.  (Yes, I know that I’m using
an @gmail address, but I’m not cold e-mailing individuals …)&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;I work for a leading website design and development company …&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Then why won’t you tell me what it is?  @gmail.com doesn’t tell me much.
Do you have an on-line portfolio you’d like to share that I can examine?  No?
Not interested.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;I built Android iOS software.  I have reviewed your requirements and …&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Don’t lie to me.  I haven’t posted any requirements for mobile software.
If I needed to hire someone, my first priority would be to hire an honest
individual.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;From anna@smartwebexpert.com&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is at least a good start!  So, let’s look up smartwebexpert.com and see
what their web page looks like.  When I received this e-mail, the first page
looked like it might be interesting, but every second level page I looked at
was empty.  There were links there, but they didn’t contain any information.
That was then.  Today, smartwebexpert.com seems to be a non-existent domain.&lt;/p&gt;

&lt;p&gt;And … Anna wanted to redesign my web page given her broken examples?
Not interested.&lt;/p&gt;

&lt;p&gt;Also, Anna?  I got the same pitch from Sarah, word for word in one paragraph.
Somehow I think one of you is misrepresenting who you are.&lt;/p&gt;

&lt;p&gt;Honesty is required in a sales pitch, or I’m just going to close the door.
I’m not interested in any dishonest advertising.&lt;/p&gt;

&lt;h2 id=&quot;advertising&quot;&gt;Advertising&lt;/h2&gt;

&lt;p&gt;I’ve stated before that &lt;a href=&quot;/blog/2017/08/01/advertising.html&quot;&gt;I’m not opposed to advertising the products of
others&lt;/a&gt;
on this blog.  However, I am going to be particular about what gets advertised
here if I ever go there.&lt;/p&gt;

&lt;p&gt;For example, I would have no problems advertising FPGA jobs, professional
digital designers, FPGAs, FPGA boards, or even providing paid links to places
where you might purchase such a board or even where you might purchase IP
from any particular vendor.  However, if this sort of thing started limiting
my ability to speak about my experiences with your products (assuming I was
using them)–say with Xilinx’s (broken) training materials, then I’m not
interested.&lt;/p&gt;

&lt;p&gt;If you want me to promote your wonderful product, then I want to know and
be convinced that it is truly a wonderful product.  For example, as an unpaid
and unsolicited promotion: I’ve always liked &lt;a href=&quot;https://store.digilentinc.com&quot;&gt;Digilent’s
products&lt;/a&gt;.  They tend to be reliable,
have a good support forum, and they also tend to be very well documented.
Bottom line: Digilent FPGA products have been, in my experience, a joy to work
with.&lt;/p&gt;

&lt;p&gt;As for &lt;a href=&quot;https://www.terasic.com.tw/en&quot;&gt;Terasic&lt;/a&gt;?  That’s another story.
Did I tell you the pain I went through to try to find the correct schematic
for my DE-10 Nano?  Or how about the rework I had to do after building my
design against a DE0-Nano schematic that was marked as a DE-10 Nano schematic?&lt;/p&gt;

&lt;p&gt;I would, however, have a problem advertising immoral conduct.  This is one of
the reasons why the ZipCPU blog once had a relationship with disqus and why it
doesn’t use any of their material anymore.&lt;/p&gt;

&lt;p&gt;Bottom line here: I intend to approve or disapprove advertisements on a case
by case basis.  Still interested?  Then contact me.&lt;/p&gt;

&lt;h2 id=&quot;bottom-line-honesty&quot;&gt;Bottom line: Honesty&lt;/h2&gt;

&lt;p&gt;I guess my bottom line is that I would never be interested in hiring or
working with anyone who isn’t honest.  I could deal with a certain amount
of incompetence.  That’s normal.  Dishonesty?  No.  Sorry.  My recommendation,
therefore, for all those interested in sending me sales pitches?&lt;/p&gt;

&lt;p&gt;Be honest!&lt;/p&gt;

&lt;p&gt;Also know, honesty alone won’t get you hired.&lt;/p&gt;
&lt;hr /&gt;&lt;p&gt;&lt;em&gt;And if ye salute your brethren only, what do ye more than others?  Do not even the publicans so?  (Matt 5:47)&lt;/em&gt;</description>
        <pubDate>Sat, 12 Nov 2022 00:00:00 -0500</pubDate>
        <link>https://zipcpu.com/blog/2022/11/12/honesty.html</link>
        <guid isPermaLink="true">https://zipcpu.com/blog/2022/11/12/honesty.html</guid>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>Quiz #22: Handling cover failures</title>
        <description>&lt;p&gt;A failed formal cover check can be one of the most challenging things to debug.
All you know is that the formal tool failed to be able to make the covered
expression true.  You have no trace to work with to show you how close
you managed to get to making the expression true before ultimately failing.&lt;/p&gt;

&lt;p&gt;Where would you even start to debug something like this?&lt;/p&gt;
</description>
        <pubDate>Tue, 01 Nov 2022 00:00:00 -0400</pubDate>
        <link>https://zipcpu.com/quiz/2022/11/01/quiz22.html</link>
        <guid isPermaLink="true">https://zipcpu.com/quiz/2022/11/01/quiz22.html</guid>
        
        
        <category>quiz</category>
        
      </item>
    
      <item>
        <title>Measuring the Steps to Design Checkoff</title>
        <description>&lt;p&gt;I’ve recently had the opportunity to rebuild a &lt;a href=&quot;https://www.arasan.com/products/nand-flash/&quot;&gt;NAND flash
controller&lt;/a&gt; for &lt;a href=&quot;https://www.arasan.com&quot;&gt;Arasan Chip
Systems, Inc&lt;/a&gt;.
The purpose of this redesign was to upgrade an existing flash controller
so that it can process flash requests and commands at even faster speeds than
ever before.  Indeed, this new controller is designed to handle flash chips
that operate at speeds of up to 1.6GB/s while being backwards compatible with
all previous speeds.  Those who know my typical design goals will already
know my personal goals for this design: &lt;em&gt;throughput, throughput, throughput!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;What I wanted to discuss today, however, was a basic management problem I
came across while working on this project.  At one time, during development,
I was asked by &lt;a href=&quot;https://www.arasan.com&quot;&gt;Arasan&lt;/a&gt;’s management team where I
was at in the project, and how much longer the project would take to
accomplish.&lt;/p&gt;

&lt;p&gt;Gosh, where do you start?&lt;/p&gt;

&lt;p&gt;First, let’s face reality, despite how much an engineer would like to avoid
such questions, these are valid questions.  Customers have a right to know
how far along you are, and when you think you’ll have the project completed.
In other words, you might not like the question, but it is one that needs
answering.&lt;/p&gt;

&lt;p&gt;Perhaps the best and most truthful answer might be, “I’m working on it, and
it’ll get done when it gets done.”  While this might be true, it doesn’t
allow you the ability to express your progress at all.
Customers want to know your timeline, and they want to know that the timeline
you give them is well justified.
Put simply, you need to break projects down into tasks–tasks that need to take
place between now and project completion.  Each task then needs to be given
a time estimate, leading up to an ultimate completion date for each project.&lt;/p&gt;

&lt;p&gt;Here’s an example of what such a task list might look like.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 1. Example task list table&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/checkoff/tasklist.svg&quot; alt=&quot;&quot; width=&quot;780&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;You might find it better to view something like this via a
&lt;a href=&quot;https://www.gantt.com/&quot;&gt;Gantt chart&lt;/a&gt; rather than as a list of independent
tasks, but let’s pull on this idea of a task list a bit more for discussion.
Why?  Because, once the interfaces to a module have been defined, then the
design of each module in a larger system can become an independent task
which can then be separated from the rest of the design. Of course, this
only goes so far: often when designing a module, you will often discover
changes that need to be made to the interface, and some tasks (like
simulation) cannot begin until other tasks complete, but this is still a
good place to start.&lt;/p&gt;

&lt;p&gt;One of the benefits of independent tasks is that they can be accomplished
in any order.  Over time, I’ve even found myself walking around in a large
project in a somewhat scatterbrained fashion and doing things out of order.
This leads to two clear problems.  The first is, how shall I know if an
individual task is complete or not?  The second one is like it.  For those
tasks that are not complete, how shall I measure how much of the task
remains?&lt;/p&gt;

&lt;p&gt;Answering these questions will be the topic of this article.&lt;/p&gt;

&lt;h2 id=&quot;measuring-design-progress&quot;&gt;Measuring design progress&lt;/h2&gt;

&lt;p&gt;The current solution that I came up with to measure design progress involves
building a list of design components (modules), and then discussing their
status in a sort of stop-light chart.  For example, Fig. 2 below shows five
components of a design together with their various states of development.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 2. Module development stoplight chart&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/checkoff/componentlist.svg&quot; alt=&quot;&quot; width=&quot;780&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Many of the parts and pieces of this example design are already posted on
Github.  For example, you can find the &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axixbar.v&quot;&gt;AXI
Crossbar&lt;/a&gt; or the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;’s &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/zipcore/rtl/core/axilfetch.v&quot;&gt;AXI-lite instruction
fetch&lt;/a&gt; all
available on line.  You can even find &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axidma.v&quot;&gt;my AXI
DMA&lt;/a&gt; on
&lt;a href=&quot;https://github.com/ZipCPU&quot;&gt;github&lt;/a&gt;.  Other components, such as the “Custom
DMA”, the custom “Micro-Controller”, or the “Top Level Design” listed here,
were not yet built much less posted anywhere.  Each component is then given
a row in this chart, where each column contains a task to be accomplished
before the component is completed.  Each box is then filled in with a color
and a status to describe the reason for the color.&lt;/p&gt;

&lt;p&gt;In general, my color scheme follows:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Red: I color tasks red if either the task &lt;em&gt;not yet started&lt;/em&gt;, or if &lt;em&gt;known
problems exist&lt;/em&gt; with the task.  Perhaps a formal proof fails.  Perhaps the
component fails in simulation.  Either case would show up here in red.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Yellow: Yellow is for partial completion–a &lt;em&gt;work in progress&lt;/em&gt;.  To be
yellow, the design component must at least be written, but may not (yet)
pass any verification steps.  When it comes to formal proofs, a yellow box
would indicate that the design passed at one time, but for some reason the
proof needs to be re-run–perhaps because of some changes that have since
been made to the design, perhaps the interface requirements needed to be
updated, or perhaps because a new configuration now needs to be tested.
Whatever the reason, yellow shows progress without yet showing completion.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Green: A green box is &lt;em&gt;good to go&lt;/em&gt;.  The task is completed.  Both the design
portion is complete, and the given portion of testing has been completed as
well.  No more attention needs to be paid to a green task.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Gray: &lt;em&gt;Not applicable&lt;/em&gt;.  For example, I tend to only formally verify &lt;em&gt;leaf&lt;/em&gt;
components of my designs for complexity reasons.  The top level of a design
rarely sees the light of formal tools, and therefore needs to be tested
via simulation only.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now that we know the colors, let’s look at the columns.&lt;/p&gt;

&lt;p&gt;The first column simply provides an overview of the status of the component.
Is it in development?  If development hasn’t yet started, the component will
be colored in red.  Has the component been verified?  Is it being tested?  Has
it been signed off?  Once a component has received a formal sign off, and hence
is ready for integrated simulation, then I’ll color it green.  All of this is
captured by the first column.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 3. Four formal verification steps&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/checkoff/four-keys.svg&quot; alt=&quot;&quot; width=&quot;420&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;The next four columns follow from my discussion of the “&lt;a href=&quot;/formal/2020/06/12/four-keys.html&quot;&gt;Four Keys to getting
your design to work the first
time&lt;/a&gt;” article.  These
columns indicate whether or not the design component has passed an interface
check, a contract check, induction, or cover.  In summary:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;The &lt;em&gt;interface check&lt;/em&gt; verifies the interfaces the component is supposed to
maintain.  If done well, a formal interface definition can define both
sides of the interface, and so assumptions made in one module can be verified
as assertions on the other side of any interface.&lt;/p&gt;

    &lt;p&gt;As an example from Fig. 2, the &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/zipcore/rtl/core/axilfetch.v&quot;&gt;AXI-Lite
fetch&lt;/a&gt;
module maintains two interfaces: one with the &lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;AXI-Lite
bus&lt;/a&gt;, and a second
between the fetch and the CPU.  Both interfaces need to be clearly defined,
and then the design will need to pass a formal property check against this
definition in order for the design to pass this box.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The &lt;em&gt;contract check&lt;/em&gt; is an internal check, designed to prove that the
design component does what it is supposed to do internally.&lt;/p&gt;

    &lt;p&gt;Continuing with the example of the &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/zipcore/rtl/core/axilfetch.v&quot;&gt;AXI-Lite
fetch&lt;/a&gt;,
the contract check would follow:&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;
        &lt;p&gt;First, pick an arbitrary memory address together with an arbitrary
32-bit value (the instruction) that you will assume be at that address.&lt;/p&gt;

        &lt;p&gt;I will also pick another arbitrary bit to decide whether or not reading
from this address will produce a bus error or not.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;When the AXI-Lite bus returns an instruction associated with that
address, &lt;em&gt;assume&lt;/em&gt; the value returned matches the arbitrary instruction
selected above.  The extra bit will also determine whether or not this
return is OKAY or represents some form of bus error or not.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Now &lt;em&gt;prove&lt;/em&gt; (i.e. assert) that the instruction passed to the CPU that
is associated with this address matches the arbitrary instruction value
picked earlier.  Or, if the bus returned an error, then assert that the
illegal instruction flag is sent to the CPU with this instruction.&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left; padding: 25px&quot;&gt;&lt;caption&gt;Fig 4. My master rule of formal verification&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/checkoff/fv-master-rule.svg&quot; alt=&quot;&quot; width=&quot;420&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Note that the check above follows my “master rule” of formal verification:
  Assume inputs, such as the instruction returned by the bus, and then assert
  outputs–such as the instruction returned to the CPU.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;The &lt;a href=&quot;/blog/2018/03/10/induction-exercise.html&quot;&gt;&lt;em&gt;induction&lt;/em&gt;&lt;/a&gt;
check will give you the confidence you need that your interface and contract
properties are not just held for the first twenty clock periods, but rather
for all time.&lt;/p&gt;

    &lt;p&gt;As an example here, it can be a challenge to formally verify that a component
is fully AXI compliant.  There’s just a &lt;em&gt;lot&lt;/em&gt; of assertions involved.  If
you only attempt 64-cycles of a bounded model check, then you’ll never know
whether or not your design would fail on the 65th cycle of a 256-beat burst,
or whether or not your design can handle two 32-beat bursts in a row.&lt;/p&gt;

    &lt;p&gt;If the component being tested were a cache component, the
&lt;a href=&quot;/blog/2018/03/10/induction-exercise.html&quot;&gt;&lt;em&gt;induction&lt;/em&gt;&lt;/a&gt;
check might help verify that nothing spoiled the cache between when the
instruction was first returned to the CPU, and when it may have been
returned some time later.  (How long?  Longer than the bound of the proof!)&lt;/p&gt;

    &lt;p&gt;For these questions, you will need to pass
&lt;a href=&quot;/blog/2018/03/10/induction-exercise.html&quot;&gt;induction&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Finally, the &lt;em&gt;cover&lt;/em&gt; check is left over to make certain that, in spite of
any assumptions you may have made, your design is still able to accomplish
whatever tasks were assigned to it.&lt;/p&gt;

    &lt;p&gt;Years ago, when visiting a helicopter squadron, I remember being introduced
to the test pilots of the squadron.  Why would a squadron need test pilots,
I asked?  The helicopters were decades old, and their performance well
established, what was the purpose of the test pilots or the test pilot
section they were members of?  The answer I was given surprised me:
After taking a helicopter apart to fix it, it’s important to shake
it around in a test flight just to make certain everything was properly put
back in place.  In digital design, we might call such a test a “regression”
test.&lt;/p&gt;

    &lt;p&gt;In a similar fashion, I use cover checks in a sanity checking role.  There’s
been more than once where I’ve convinced myself that a design passes a
formal verification check, only to discover later that I had erroneously
assumed the design would remain in reset the whole time.  A proper cover
check would’ve failed in this case, which would then lead me to the problem
in my proof.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Once all of the various components in a design pass their formal checks, I’ll
then turn to simulation so that I can demonstrate the functionality of the
design.  Note that, at this point, I’m no longer trying to &lt;em&gt;prove&lt;/em&gt; the design
works–that’s already been done via formal methods.  Instead, I’m now trying to
&lt;em&gt;demonstrate&lt;/em&gt; that the design works.  Frankly, there’s no way I could make any
simulation as thorough as the formal proofs preceding it, but there remain lots
of good reasons for using simulations and bugs that still get caught in this
final step.&lt;/p&gt;

&lt;p&gt;The simulation column might also be where I’d include code coverage statistics,
if the project required them.&lt;/p&gt;

&lt;p&gt;Some projects have an additional column that I haven’t listed in this chart.
This column would capture whether or not the design as a whole has been
hardware tested and proven.  This might mean that the design has been placed
onto an FPGA, and that it has been demonstrated to work on the FPGA.  It might
also mean that an ASIC has been built from the design.  The important part
here is that, while this is a very useful column, it’s not necessarily
an important check off criteria for all designs.&lt;/p&gt;

&lt;p&gt;With that as background, let’s go back and examine Fig. 2 a bit.&lt;/p&gt;

&lt;p&gt;As you can see from the list of components, my &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axixbar.v&quot;&gt;AXI
crossbar&lt;/a&gt; has
failed its
&lt;a href=&quot;/blog/2018/03/10/induction-exercise.html&quot;&gt;induction&lt;/a&gt;
check and changes have been made to it since it was last
formally verified.  This is evidence of work that needs to be accomplished.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/zipcore/rtl/core/axilfetch.v&quot;&gt;AXI-lite instruction
fetch&lt;/a&gt;,
however, had only recently been built when I put this chart together.  At the
time, it was still a very new design.  Still, it has passed all of its
property checks, and was then being used in simulation testing.  (It’s now been
used quite successfully in several projects, but that’s another story
for another time.)&lt;/p&gt;

&lt;p&gt;The microcontroller in this example, however, had suffered from catastrophic
failures in simulation.  (I had tried to skip the formal checks after making
some minor changes and then to run directly to simulation.  Skipping steps often
feels like you are moving faster, when in this case it meant I had to go back
and do some rework.)  Since bugs had been found in the microcontroller, I
marked it in red so that I would remember to go back and update the formal
proof so these bugs never come back again.&lt;/p&gt;

&lt;p&gt;The custom DMA should be self-explanatory–it simply hadn’t (yet) been built,
so it’s line was red through and through.&lt;/p&gt;

&lt;p&gt;That brings us to the “Top Level Design” component.  This level will not be
formally verified, and so those boxes have been grayed out.  This is for two
reasons.  First, if everything beneath it was properly verified, then this
level shouldn’t need to be verified at all.  Second, formal verification
depends upon an exhaustive search over all potential states.  This search is
exponentially complex and can easily grow beyond what the designer’s (patience
and) computer power are able to handle.  Therefore, the top level design will
be the focus of a lot of simulation work, but that won’t be able to happen
until all the parts and pieces composing it have been built.&lt;/p&gt;

&lt;h2 id=&quot;other-uses&quot;&gt;Other uses&lt;/h2&gt;

&lt;p&gt;Since I started building charts like this one, I’ve found other uses for
building charts like this.  Three particular uses include scheduling, cost
estimation, and explaining design proposals in contract bids.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Scheduling&lt;/p&gt;

    &lt;p&gt;When scheduling, I’ll place the amount of time in each box that I expect
a task to take.  The sum of all the remaining times in a project should
then be the amount of work time remaining in a project.&lt;/p&gt;

    &lt;p&gt;Do I always get this right?  No.  A better question to ask might be whether
I ever get this estimate right at all.  The answer is probably not, but it’s
at least a good first order estimate.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Cost estimation&lt;/p&gt;

    &lt;p&gt;If you can figure out how much time a project will take, then cost
estimation becomes easier.  For most of my projects, the primary cost driver
is engineering time–my own personal time in particular.  Once a time
has been estimated for each of the tasks in the project, all that really
remains is to multiply that time by an hourly rate.&lt;/p&gt;

    &lt;p&gt;Tracking the time used in any particular task is also an important part of
estimating such acquisition measures as the &lt;a href=&quot;https://www.dau.edu/acquipedia/pages/ArticleContent.aspx?itemid=290&quot;&gt;Actual Cost of Work Performed
(ACWP)&lt;/a&gt;
or the &lt;a href=&quot;https://www.dau.edu/acquipedia/pages/ArticleContent.aspx?itemid=287&quot;&gt;Budgeted Cost of Work Performed
(BCWP)&lt;/a&gt;
for those customers that require these numbers.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Contract bids&lt;/p&gt;

    &lt;p&gt;Yes, I also use this approach when bidding for contracts as well.&lt;/p&gt;

    &lt;p&gt;However, when bidding for contracts, I’ll often list components instead of
components and tasks, and then rearrange those components into something
with more meaning.  Perhaps its a data flow diagram of some type.  Perhaps
its a system block diagram.  Either way, such a diagram then helps me to
illustrate for the customer that I understand the task at hand, while the
stop-light colors help to illustrate the status of the various &lt;a href=&quot;/blog/2020/01/13/reuse.html&quot;&gt;library
components&lt;/a&gt; I might bring to
the project.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In short, I’ve found this stop-light approach very valuable when communicating
with customers.&lt;/p&gt;

&lt;h2 id=&quot;conclusions&quot;&gt;Conclusions&lt;/h2&gt;

&lt;p&gt;I’ve now used this component list progress chart for several projects and
purposes.  It has worked so well for me, that I intend to use it again
and again on future projects as the projects and needs allow.&lt;/p&gt;
&lt;hr /&gt;&lt;p&gt;&lt;em&gt;And ye shall hear of wars and rumours of wars: see that ye be not troubled: for all these things must come to pass, but the end is not yet.  For nation shall rise against nation, and kingdom against kingdom: and there shall be famines, and pestilences, and earthquakes, in divers places.  (Matt 24:6-7)&lt;/em&gt;</description>
        <pubDate>Tue, 01 Nov 2022 00:00:00 -0400</pubDate>
        <link>https://zipcpu.com/formal/2022/11/01/design-checkoff.html</link>
        <guid isPermaLink="true">https://zipcpu.com/formal/2022/11/01/design-checkoff.html</guid>
        
        
        <category>formal</category>
        
      </item>
    
      <item>
        <title>Assignment delay's and Verilog's wait statement</title>
        <description>&lt;p&gt;I’ve now spent more time than I want to admit to debugging simulation issues
when using Verilog’s simulation semantics.  Let me therefore share some
problems I’ve come across, together with my proposed solution for them.&lt;/p&gt;

&lt;h2 id=&quot;the-problems&quot;&gt;The Problems&lt;/h2&gt;

&lt;p&gt;Today’s problem stems from logic like the following:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;trigger_condition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;some_other_condition_determining_relevance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;state_variable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;complex_expression&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// This then continues for another 50 lines or so&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In general, this comes to me in “working” simulation code that’s been handed
down to me to maintain.  The simulations that use this logic often take hours
to run, and so debugging this sort of thing can be very time consuming.
(Costly too–my hourly rate isn’t cheap.)&lt;/p&gt;

&lt;p&gt;Let’s walk through this logic for a moment–before tearing it apart.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 1. Avoid assignment delays&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/vlog-wait/phys-delays.svg&quot; alt=&quot;&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;In this example the first condition, the one I’ve called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;trigger_condition&lt;/code&gt;
above, is simply some form of data change condition.  Sometimes its a
reference to a clock edge, sometimes its a reference to a particular piece of
data changing.  This isn’t the problem.&lt;/p&gt;

&lt;p&gt;The second condition, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;some_other_condition_determining_relevance&lt;/code&gt;, is used
to weed out all the times the always block might get triggered when you don’t
want it to be.  For example, it might be triggered during reset or when the
slave device being modeled is currently responsive to some other
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;trigger_condition&lt;/code&gt;.  This is natural.  This is not (yet) a problem either.&lt;/p&gt;

&lt;p&gt;So what’s the problem with the logic above?  Well, let’s start with the
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#1&lt;/code&gt; assignment delay.  In this case, it’s not representing a true hardware
delay.  No, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#1&lt;/code&gt; is there in order to &lt;em&gt;schedule&lt;/em&gt; Verilog simulation
statement execution.  Part of the reason why it’s there is because the rest
of the block uses &lt;em&gt;blocking&lt;/em&gt; logic (i.e. via the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;=&lt;/code&gt;).  Hence, if this block
was triggered off of a clock edge, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#1&lt;/code&gt; allows us to reason about what
follows the clock edge but before the next edge.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left; padding: 25px&quot;&gt;&lt;caption&gt;Fig 2. Recipe for trouble&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/vlog-wait/always-disaster.svg&quot; alt=&quot;&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Now, let me ask, what happens five years from now when clock speeds get faster?
Some poor soul (like me) will be hired to maintain this logic, and that poor
soul will look at the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#1&lt;/code&gt; and ask, why is this here?  Maybe it was a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1ns&lt;/code&gt;
delay, and they are now trying to run a clock at 500MHz instead of 100MHz.
That &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1ns&lt;/code&gt; delay will need to be understood, and replaced–&lt;em&gt;everywhere&lt;/em&gt;
it was used.  It doesn’t help that the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1ns&lt;/code&gt; doesn’t come with any explanations,
but that may be specific to the examples I’m debugging.&lt;/p&gt;

&lt;p&gt;Here’s a second problem, illustrated in Fig. 2: what happens when you use this
one nanosecond delay in multiple always blocks, similar to this one, all
depending on each other?  Which one will execute first?&lt;/p&gt;

&lt;p&gt;The third problem often follows this one, and it involves a wait statement
of some type.  To illustrate this, let me modify the example above a bit more.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;trigger_condition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;some_other_condition_determining_relevance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;state_variable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;complex_expression&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// Continue for a while ...&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;wait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;negedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;output_value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;other_complex_expression&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In this case, the user wants to make certain his logic is constant across
the clock edge, and so he sets all his values on the negative edge of the
clock.  This leads to two problems: what happens when the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#1&lt;/code&gt;
delay conflicts with the clock edge?  And what happens when the output value
depends upon other inputs that are set on the negative clock edge?&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 3. Giant case statement dispatching tasks&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/vlog-wait/buried-tasks.svg&quot; alt=&quot;&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Fig. 3 shows another problem, this time when using a case statement.  In this
case, it’s an attempt to implement a command structure within a modeled device.
The device can handle one of many commands, so depending on which one is
received you go and process that command.  The actual example this is drawn
from was worse, since it depended not only on commands but rather command
sequences, and the command sequences were found within case statements within
case statements.&lt;/p&gt;

&lt;p&gt;What’s wrong with this?  Well, what happens when the original trigger takes
place a second time, but the logic in the always block hasn’t finished
executing?  Perhaps this is erroneous.  Perhaps it finishes just barely on
the wrong side of the next clock edge.  In my case, I find the bug four hours
later–on a good day.  It doesn’t help that simulations tend to run rather slow.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left; padding: 25px&quot;&gt;&lt;caption&gt;Fig 4. FSMs are often easier to debug than long-running tasks&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/vlog-wait/appfsm.svg&quot; alt=&quot;&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;A better approach would’ve been to use a state machine rather than embedded
tasks.  Why is this better?  Well, if for no other reason, a case statement
would contain state variables which could be seen in the trace file.  That
means that you could then find and debug what would (or should) happen when/if
the new command trigger shows up before a prior command completes.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 5. Repeat LLC logic&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/vlog-wait/appllc.svg&quot; alt=&quot;&quot; width=&quot;280&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;These problems are only compounded when this logic is copied.  For example,
imagine a device that can do tasks A, B, and C, but requires one of two IO
protocols to accomplish task A, B, or C.  Now, if that IO protocol logic is
copied and embedded into each of the protocol tasks, then all three will need
to be updated when the IO protocol is upgraded.  (I2C becomes I3C, SPI becomes
Quad SPI, etc.)&lt;/p&gt;

&lt;p&gt;While some of these problems are specific to hardware, many are not. 
&lt;a href=&quot;https://en.wikipedia.org/wiki/Magic_number_(programming)&quot;&gt;Magic numbers&lt;/a&gt;
are a bad idea in both RTL and software.  Design reuse and software
reuse are both very real things.  Even a carpenter will build a
&lt;a href=&quot;https://en.wikipedia.org/wiki/jig_(tool)&quot;&gt;custom jig of some type&lt;/a&gt; when he
has to make fifty copies of the same item.&lt;/p&gt;

&lt;p&gt;The good news is that better approaches exist.&lt;/p&gt;

&lt;h2 id=&quot;defining-terms&quot;&gt;Defining terms&lt;/h2&gt;

&lt;p&gt;Before diving into some better approaches, let me take just a couple of moments
to introduce the terms I will be using.  In general, a test bench has three
basic (types of) components, as illustrated in Fig. 6.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left; padding: 25px&quot;&gt;&lt;caption&gt;Fig 6. Test bench components&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/vlog-wait/gencomponents.svg&quot; alt=&quot;&quot; width=&quot;480&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;The Device Under Test (DUT)&lt;/strong&gt;:  The is the hardware component that’s being
designed, and for which the test has been generated.&lt;/p&gt;

    &lt;p&gt;Since the DUT is intended to be synthesizable, Verilog delay statements are
inappropriate here.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;The Hardware Device Model, or just model&lt;/strong&gt;: Our hardware component is being
designed to interact with an external piece of hardware.  This component is
often off-chip, and so our “model” is a simulation component designed to
interact with our IP in the same way the actual hardware would.&lt;/p&gt;

    &lt;p&gt;Although I’ve called these “models” “emulators” in the past, these aren’t
truly “emulators”.  An “emulator” would imply a description of the actual
hardware existed, such as an RTL description, yielding an additional level
of realism in simulation.  Barring sufficient information from the external
device’s manufacturer to actually and truly “emulate” the device, the test
designer often settles for a “model” instead.&lt;/p&gt;

    &lt;p&gt;Hardware models may naturally require Verilog delays in order to model
the interfaces they are designed for.  For example, a signal may take some
time to transition from a known value to an unknown one following a clock
transition.  As another example, a hardware device may become busy following
a command of some kind.  The good news is that Verilog can model both of
these behaviors nicely.&lt;/p&gt;

    &lt;p&gt;How to handle these delays “properly” will become part of the discussion
below.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;The Test Script, or driver&lt;/strong&gt;: This is the component of the design that
interacts with the device under test, sequencing commands to given to it
to make sure all of the capabilities of the DUT are properly tested.&lt;/p&gt;

    &lt;p&gt;This component of the Verilog test script often reads more like it is
software than hardware.  Indeed, we’ve &lt;a href=&quot;/2021/07/23/cpusim.html&quot;&gt;already discussed the idea of
replacing the test script with a piece of software compiled for a soft-core
CPU existing in the test environment, and then emulating that CPU as part
of the simulation model&lt;/a&gt;.  The
benefit of this approach is that it can test and verify the software that
will be used to drive the hardware under test.  The downside is that
simulation’s are slow, and adding a CPU to the simulation environment can
only slow it down further.&lt;/p&gt;

    &lt;p&gt;For the purposes of our discussion today I’ll simply note that the test
script commonly interacts with the design in a &lt;em&gt;synchronous&lt;/em&gt; manner.
Any delays, therefore, need to be synchronized with the clock.&lt;/p&gt;

    &lt;p&gt;There is another problem with the driver that we won’t be discussing today.
This is the simple reality that there’s no way to test all possible
driver delays.  Will a test driver accurately test if your DUT can handle
back to back requests, requests separated by a single clock cycle, by two
clock cycles, by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;N&lt;/code&gt; clock cycles?  You can’t simulate all of these
possible delays, but you can catch them using formal methods.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Not shown in Fig. 6, but also relevant is the &lt;strong&gt;Simulation Environment&lt;/strong&gt;: 
While the DUT and model are both necessary components of any simulation
environment, the environment might also contains such additional components
as an &lt;a href=&quot;/blog/2019/07/17/crossbar.html&quot;&gt;AXI interconnect&lt;/a&gt;,
&lt;a href=&quot;/zipcpu/2018/01/01/zipcpu-isa.html&quot;&gt;CPU&lt;/a&gt;, DMA,
and/or &lt;a href=&quot;/zipcpu/2018/07/13/memories.html&quot;&gt;RAM&lt;/a&gt;,
all of which are neither the test script, DUT, or model.&lt;/p&gt;

    &lt;p&gt;Ideally these extra components will have been tested and verified in other
projects prior to the current one, although this isn’t always the case.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now that we’ve taken a moment to define our terms, we can now return to the
simulation modeling problem we began.&lt;/p&gt;

&lt;h2 id=&quot;better-practices&quot;&gt;Better practices&lt;/h2&gt;

&lt;p&gt;The good news is that Verilog was originally written as a language for
driving simulations.&lt;/p&gt;

&lt;p&gt;Even better, subsets of Verilog exist which can do a good job of modeling
synthesizable logic.  This applies to both asynchronous and synchronous logic.
The assignment delay problems that I’ve outlined above, however, arise from
trying to use Verilog to model a mix of logic and software when the goal was
to create a hardware device model.&lt;/p&gt;

&lt;p&gt;Here are some tips, therefore, for using delays in Verilog:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Write synthesizable simulation logic where possible.&lt;/p&gt;

    &lt;p&gt;This is really only an issue for test bench or modeling logic.  It’s not
really an issue for logic that was meant to be synthesizable in the first
place.&lt;/p&gt;

    &lt;p&gt;The good news about writing test bench logic in a synthesizable fashion
is that you might gain the ability to synthesize your model in hardware,
and then run tests on it just that much faster.  You could then
also get a second benefit by formally verifying your device model–it’d
save you that much time later when running integrated simulations.&lt;/p&gt;

    &lt;p&gt;As an example, compare the following two approaches for verifying a test
chip:&lt;/p&gt;

    &lt;p&gt;ASIC Test chip #1: Has an SPI port capable of driving internal registers.
This is actually a really good idea, since you can reduce the number of 
wires necessary to connect to such a test chip.  The problem, however, was
that the SPI driver came from encrypted vendor IP.  Why was this a problem?
It became a problem when the test team tried to connect to the device
once it had been realized in hardware.  They tried to connect their CPU to
this same SPI port to drive it–and then didn’t drive it according to
protocol properly.&lt;/p&gt;

    &lt;p&gt;The result of testing ASIC test chip #1?  I got a panic’d call from a
client, complaining that the SPI interface to the test chip wasn’t working
and asking if I could find the bugs in it.&lt;/p&gt;

    &lt;p&gt;ASIC Test chip #2: Also has a SPI port for reading and writing internal
registers.  In this chip, however, the SPI port was formally verified
as a composition of both the writer and the reader–much as Fig. 7 shows
below.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 7. Sometimes, you'll have both RTL pieces available to you&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/vlog-wait/excontrol.svg&quot; alt=&quot;&quot; width=&quot;480&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;I say “much as Fig. 7 shows” because the verification of this port wasn’t
   done with using the CPU as part of the test script.  However, because
   both the SPI master and SPI slave were verified together, and even better
   because they were &lt;em&gt;formally&lt;/em&gt; verified in an environment containing both
   components, the test team can begin it’s work with a verified RTL interface.&lt;/p&gt;

&lt;p&gt;You can even go one step farther by using a soft-core CPU to &lt;a href=&quot;/2021/07/23/cpusim.html&quot;&gt;verify the
   software driver&lt;/a&gt; at the same
   time.  This is the full extent of what’s shown in Fig. 7.  As I mentioned
   above, the formal verification for ASIC test chip #2 stopped at the AXI-lite
   control port for the SPI master.  When testing this chip as part of an
   integrated test, a test script was used to drive a Bus Functional Model
   (BFM), rather than actual CPU software.  However, if you just read the
   test script’s calls to the BFM, you would have the information necessary
   to build a verified software driver.&lt;/p&gt;

&lt;ol start=&quot;2&quot;&gt;
  &lt;li&gt;
    &lt;p&gt;Use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;always @(*)&lt;/code&gt; for combinatorial blocks, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;always @(posedge clk)&lt;/code&gt;
(or negedge) or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;always @(posedge clk or negedge reset_n)&lt;/code&gt; for synchronous
logic.&lt;/p&gt;

    &lt;p&gt;While I like using the positive edge of a clock for everything, the actual
edge you need to use will likely be determined by the device and protocol
you are modeling.  The same is true of the reset.&lt;/p&gt;

    &lt;p&gt;I would discourage the use of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;always @(trigger)&lt;/code&gt;, where &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;trigger&lt;/code&gt; is some
combinatorial signal–lest you forget some required trigger component.  I
would also discourage the use of any &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;always @(posedge trigger)&lt;/code&gt; blocks where
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;trigger&lt;/code&gt; wasn’t a true clock–lest you create a race condition within your
logic.  I use the word &lt;em&gt;discourage&lt;/em&gt;, however, because some modeling contexts
require triggering on non-clocked logic.  If there’s no way around it,
then you do what you have to do to get the job done.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Synchronous (clocked) logic should use &lt;em&gt;non-blocking&lt;/em&gt; assignments (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;=&lt;/code&gt;),
and combinatorial logic should use &lt;em&gt;blocking&lt;/em&gt; assignments (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;=&lt;/code&gt;).&lt;/p&gt;

    &lt;p&gt;It seems like my debugging problems began when the prior designer used
a delay instead of proper blocking assignments.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;// SYNCHRONOUS block&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;			&lt;span class=&quot;c1&quot;&gt;// MAGIC NUMBER, doesn't model H/W, etc&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expression&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// BLOCKING LOGIC!&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Just … don’t do this.  When you start doing things like this, you’ll
   never know if (whatever) &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;expression&lt;/code&gt; had finished evaluating, or be able
   to keep track of when the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#1&lt;/code&gt; delay needs to be updated.&lt;/p&gt;

&lt;ol start=&quot;4&quot;&gt;
  &lt;li&gt;
    &lt;p&gt;Device models aren’t test drivers.  Avoid consuming time within them–such
as with a wait statement of any type.  Let the time be driven elsewhere by
external events.&lt;/p&gt;

    &lt;p&gt;This applies to both delays and wait conditions within &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;always&lt;/code&gt; blocks, as
well as any tasks that might be called from within them.  Non-blocking
assignment delays work well for this purpose.&lt;/p&gt;

    &lt;p&gt;Ideally, device models should use finite state machines, as in Fig. 4,
to model the passing of time if necessary, rather than consuming time
with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wait&lt;/code&gt; statements or ill defined assignment delays, as in Fig. 3.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;When driving synchronous logic from a test script, &lt;em&gt;synchronize&lt;/em&gt; any
test driven signals using &lt;em&gt;non-blocking&lt;/em&gt; assignments.&lt;/p&gt;

    &lt;p&gt;I have now found the following simulation construct several times over:&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ARESETN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

		&lt;span class=&quot;n&quot;&gt;ARVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;ARVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;c1&quot;&gt;// the problem continues on ...&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Sometimes the author uses the negative edge of the clock instead of the
positive edge here to try to “schedule” things away from the clock edge.
Indeed, I’ve been &lt;a href=&quot;/blog/2017/06/21/looking-at-verilator.html&quot;&gt;somewhat guilty of this
myself&lt;/a&gt;.
Sadly, this causes no end of confusion when trying to analyze a resulting
trace file.&lt;/p&gt;

&lt;p&gt;A better approach would be to synchronize this logic with non-blocking
assignments.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;ARVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;			&lt;span class=&quot;c1&quot;&gt;// Any initial value&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// Other initial AR* values may be reset here as well&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;negedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ARESETN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

		&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;ARVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;// Set the rest of the AR* values&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

		&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ARVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ARREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;ARVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

		&lt;span class=&quot;c1&quot;&gt;// Script continues further&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This will avoid any delta-time cycle issues that would otherwise be
   very difficult to find and debug.  Note that this also works because this
   block is the only block controlling &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ARVALID&lt;/code&gt; from within the test bench.
   Should you wish to control &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ARVALID&lt;/code&gt; from multiple test bench clocks, you
   may run into other concurrency problems.&lt;/p&gt;

&lt;p&gt;While you can still do this sort of thing with Verilator, I’ll reserve
   my solution for how to do it for another post.&lt;/p&gt;

&lt;ol start=&quot;6&quot;&gt;
  &lt;li&gt;
    &lt;p&gt;Pick a clock edge and use it.  Don’t transition on both edges–unless the
hardware protocol requires it.&lt;/p&gt;

    &lt;p&gt;As I alluded to above, I’ve seen a lot of AXI modeling that attempts to set
the various AXI signals on the &lt;em&gt;negative&lt;/em&gt; edge of the clock so that any and
all logic inputs will be stable later when the positive edge comes around.
This approach is all well and good until someone wants to do post–layout
timing analysis, or some other part of your design also wants to use the
negative edge, and then pain ensues.&lt;/p&gt;

    &lt;p&gt;Sadly, this means that the project may be turned in and then rest in a
“working” state for years before the problem reveals itself.&lt;/p&gt;

    &lt;p&gt;In a similar fashion, what happens when you have two always blocks, both
using a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#1&lt;/code&gt; delay as illustrated in Fig. 2 above?  Or, alternatively, what
happens when you want the tools to put real post place-and-route delays into
your design for a timing simulation?  You may find you’ve already lost your
timing slack due to a poor simulation test bench or model.  Need I say that
it would be embarrassing to have to own up to a timing failure in simulation,
due to your own simulation constructs?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;There is a time for using multiple always blocks–particularly when modeling
DDR devices.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 8. Example DDR simulation logic&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/vlog-wait/ddrsim.svg&quot; alt=&quot;&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;In today’s high speed devices, I’ve often found the need for multiple
   always blocks, triggered off of different conditions, to capture the
   various triggers and describe the behavior I want.  One, for example,
   might trigger off the positive edge, and another off the negative edge.
   This is all fine, well, and good for &lt;em&gt;simulation&lt;/em&gt; (i.e. &lt;em&gt;test bench&lt;/em&gt;)
   logic.  While this would never work in hardware, it can easily be used to 
   accurately model behavior in simulation.&lt;/p&gt;

&lt;ol start=&quot;8&quot;&gt;
  &lt;li&gt;
    &lt;p&gt;Use assignment delays to model &lt;em&gt;physical&lt;/em&gt; hardware delays &lt;em&gt;only&lt;/em&gt;.&lt;/p&gt;

    &lt;p&gt;For example, if some event will cause the ready line to go low for 50
microseconds, then you might write:&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;parameter&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;tWAIT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;50_000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;event_and_not_reset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;ready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1'b0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;ready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tWAIT&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1'b1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Notice how I’ve carefully chosen not to consume any time within this
   always block, yet I’ve still managed to create something that will capture
   the passage of time.  In this case, I’ve used the Verilog &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;=&lt;/code&gt; together
   with a delay statement to schedule the transition of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ready&lt;/code&gt; from zero
   back to one by #tWAIT ns.&lt;/p&gt;

&lt;p&gt;I’ve now used this approach on high speed IO lines as well, with a lot
   of success.  For example, if the data will be valid &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tDVH&lt;/code&gt; after the
   clock goes high and remain valid for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tDV&lt;/code&gt; nanoseconds, then you might
   write:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;chip_enable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;pre_output_value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;some_expression&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;n&quot;&gt;output_valid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tDVH&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1'b1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;output_valid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;#(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tDVH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tDV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1'b0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;output_value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;output_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pre_output_value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1'bz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I’ve even gone so far in some cases to model the ‘x values in this fashion
   as well.  That way the output is properly ‘x while the voltage is swinging
   from one value to the next.&lt;/p&gt;

&lt;ol start=&quot;9&quot;&gt;
  &lt;li&gt;
    &lt;p&gt;No &lt;a href=&quot;https://en.wikipedia.org/wiki/Magic_number_(programming)&quot;&gt;magic numbers&lt;/a&gt;!
Capture hardware delays in &lt;em&gt;named&lt;/em&gt; parameters, specparams, and registers,
rather than using numeric assignment delays.&lt;/p&gt;

    &lt;p&gt;For example, were I modeling a flash memory, I might do something like the
following to model an erase:&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;cp&quot;&gt;`timestep&lt;/span&gt;	&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ns&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ns&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;parameter&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;real&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;tERASE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;500_000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// 500 microseconds&lt;/span&gt;

	&lt;span class=&quot;c1&quot;&gt;// Decode the SPI interface.  We start by counting clocks&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;//  from the negative edge of CSN&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SCK&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CSN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CSN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;clock_counts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clock_counts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// Count clock ticks&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;clock_counts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clock_counts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// Once clock_counts[5], we're past 32.  We&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// can keep counting, but the results will be&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// irrelevant for this example.&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;clock_counts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clock_counts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;c1&quot;&gt;// With each new clock tick, we capture one more bit&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// from the interface.&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SCK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;sreg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sreg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MOSI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;c1&quot;&gt;// An erase command takes place after 32 SCK clock edges: the&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// first 8 contain the command, the next 24 contain the address&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// for the command.  Yes, this assumes 24-bit addressing.&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;erase_command&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CSN&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clock_counts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;31&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sreg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;23&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CMD_ERASE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;erase_address&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sreg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;22&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;12'h0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

	&lt;span class=&quot;c1&quot;&gt;// We only issue and act on the command once we get to the final&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// SCK clock edge of the command sequence--the 32nd clock edge after&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// CSn activates (lowers)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SCK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;erase_command&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;busy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// Set an internal busy bit.  We'll remain busy for&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// tERASE ns.&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;busy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;busy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tERASE&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1'b0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;c1&quot;&gt;// Actually erase the memory in question&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BLOCK_SIZE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;mem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;erase_address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;8'hff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Notice the use of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tERASE&lt;/code&gt; rather than some arbitrary erase time buried among
the logic.  Placing all such device dependent times in one location (at the
top of the file) will then make it easier to upgrade this logic for a new
and faster device at a later time.&lt;/p&gt;

&lt;p&gt;We can also argue about when the actual erase should take place.  As long
as the user can’t interact with the device while it’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;busy&lt;/code&gt;, this probably
doesn’t make a difference.  Alternatively, we could register the erase
address and set a time for later when the erase should take place.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;erase_memory_flag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SCK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;erase_command&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;busy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;busy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;busy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tERASE&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1'b0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;n&quot;&gt;erase_memory_flag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1'b1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;r_erase_address&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;erase_address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;c1&quot;&gt;// Render the memory in question unknown&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BLOCK_SIZE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;mem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;erase_address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;negedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;busy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;erase_memory_flag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// Actually erase the memory in question&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BLOCK_SIZE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;mem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r_erase_address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;8'hff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;c1&quot;&gt;// Clear the flag&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;erase_memory_flag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tCK&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1'b0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Even this isn’t perfect, however, since we now have a transition taking place
on something other than a clock.  Given that the interface clock isn’t
continuous, this may still be the best option to create a reliable edge.&lt;/p&gt;

&lt;ol start=&quot;10&quot;&gt;
  &lt;li&gt;The &lt;a href=&quot;https://en.wikipedia.org/wiki/Rule_of_three_(computer_programming)&quot;&gt;rule of
   3&lt;/a&gt;
   applies to hardware as well as software: if you have to write the same
   logic more than twice, then you are doing something wrong.  Refactor it.
   Encapsulate it.  Make a module to describe it, and then reuse that module.&lt;/li&gt;
&lt;/ol&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left; padding: 25px&quot;&gt;&lt;caption&gt;Fig 9. If you have to build it more than twice, refactor it&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/vlog-wait/better-appllc.svg&quot; alt=&quot;&quot; width=&quot;280&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Remember our example from Fig. 5 above?  Fig. 9 shows a better approach to
   handling three separate device tasks, each with two separate protocols that
   might be used to implement them.&lt;/p&gt;

&lt;p&gt;For protocols that separate themselves nicely between the link layer
   control (LLC) protocol and a media access control (MAC) layer, this works
   nicely to rearrange the logic so that each layer only needs to be written
   once, rather than duplicated within structures implementing both MAC and
   LLC layers together.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 10. The rule of Gold&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/vlog-wait/rule-of-gold.svg&quot; alt=&quot;&quot; width=&quot;280&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Remember: fully verified, well tested, well written logic is pure
&lt;a href=&quot;/blog/2020/01/13/reuse.html&quot;&gt;re-usable gold&lt;/a&gt; in this
business.  Do the job right the first time, and you’ll reap dividends for years
to come.&lt;/p&gt;

&lt;h2 id=&quot;todays-story&quot;&gt;Today’s story&lt;/h2&gt;

&lt;p&gt;A client recently called me to ask if I could modify an IP I had written
so that it would be responsive on an APB slave input with a different
clock frequency from the one the rest of the device model used.&lt;/p&gt;

&lt;p&gt;The update required inserting an APB cross clock domain bridge into the IP.
This wasn’t hard, since I’d built (and formally verified) such a bridge two
months prior–I just needed to connect the wires and do a bit of signal
renaming for the case when the bridge wasn’t required.&lt;/p&gt;

&lt;p&gt;That was the easy part.&lt;/p&gt;

&lt;p&gt;But, how shall this new capability be tested?  It would need an updated test
script and more.&lt;/p&gt;

&lt;p&gt;Thankfully, this was also easy.&lt;/p&gt;

&lt;p&gt;Because I had built the top level simulation construct using parameters, which
&lt;a href=&quot;/zipcpu/2022/07/04/zipsim.html&quot;&gt;could easily be overridden by the test
driver&lt;/a&gt;, the test suite
was easy to update: I just had to set an asynchronous clock parameter,
create a new parameter for the clock speed, adjust the clock speed itself,
and away I went.  Thankfully, I had already (over time) gotten rid of any
inappropriate delays, so the update went smoothly.&lt;/p&gt;

&lt;p&gt;Smoothly?  Indeed, the whole update took less than a half an hour.  (This
doesn’t include the time it took to originally build and verify a generic
APB cross-clock domain bridge.)&lt;/p&gt;

&lt;p&gt;… and that’s what you would hope for from well written logic.&lt;/p&gt;

&lt;p&gt;Well, okay, it’s not all roses–I still have to go back and update the user
guide, update the repository, increment the IP version, update the change log,
and then bill for the task.  Those tasks will take longer than the actual
update, but such is the business we are in.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Let’s face it, this article is a rant.  I know it.  Perhaps you’ll learn
something from it.  Perhaps I’ll learn something from any debate that will
ensue.  (Feel free to comment on &lt;a href=&quot;https://reddit.com/r/ZipCPU&quot;&gt;Reddit&lt;/a&gt; …)&lt;/p&gt;

&lt;p&gt;Yes, I charge by the hour.  Yes, messes like these will keep me gainfully
employed and my family well fed for years to come.  However, I’d rather charge
for doing the useful work of adding new capabilities to a design rather than
fixing up someone else’s mess.&lt;/p&gt;
&lt;hr /&gt;&lt;p&gt;&lt;em&gt;For the vision is yet for an appointed time, but at the end it shall speak, and not lie: though it tarry, wait for it; because it will surely come, it will not tarry. (Habakkuk 2:3)&lt;/em&gt;</description>
        <pubDate>Wed, 21 Sep 2022 00:00:00 -0400</pubDate>
        <link>https://zipcpu.com/blog/2022/09/21/vlog-wait.html</link>
        <guid isPermaLink="true">https://zipcpu.com/blog/2022/09/21/vlog-wait.html</guid>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>It's not my fault!  Your code is broken.</title>
        <description>&lt;p&gt;I’ve  always commented that the way to get an interface working is to lock
the engineers responsible for each side of the interface together in a room
until it works.  I like to say it in jest, but in many ways there’s a lot of
truth to it.&lt;/p&gt;

&lt;p&gt;One of the challenges of working with Open Source anything really is debugging.
To be successful, an open source engineer needs to commit their time to
supporting their design–no matter how it is used.  As an illustration, what
happens when one engineer uses an open source design, uses it inappropriately,
and then declares that it doesn’t work?  It can reflect poorly on the quality
of the design–even if the design was and remains fully functional.&lt;/p&gt;

&lt;p&gt;As an example, someone recently attempted to use &lt;a href=&quot;/dsp/2017/12/14/logic-pll.html&quot;&gt;my digital
PLL&lt;/a&gt;.  They commented
that &lt;a href=&quot;/dsp/2017/12/14/logic-pll.html&quot;&gt;the PLL&lt;/a&gt;
worked great, as long as they didn’t attempt any frequency
tracking.  Was
&lt;a href=&quot;/dsp/2017/12/14/logic-pll.html&quot;&gt;the PLL&lt;/a&gt;
broken?  Not at all.  Was the frequency tracking broken?
No, not that either.  In this case, the user wanted to track a 2kHz clock
using a 250MHz sample frequency.  The problem was twofold: first, they didn’t
adjust the gain coefficient appropriately.  As a result, the first time
&lt;a href=&quot;/dsp/2017/12/14/logic-pll.html&quot;&gt;the PLL&lt;/a&gt;
noticed that the two clocks weren’t aligned, it attempted to adjust the
frequency by such a large extent that there was no way it would ever come into
alignment.  The second problem was that they didn’t give the design enough
phase bits to track such a low frequency.&lt;/p&gt;

&lt;p&gt;Finding these bugs required a test case from the user sufficient to trigger
the bug, and a couple of hours running simulations.   Thankfully, I knew where
to look since I’d worked with
&lt;a href=&quot;https://github.com/ZipCPU/dpll/master/blob/rtl/sdpll.v&quot;&gt;the design&lt;/a&gt;
before, and knew it was sensitive to how you set the tracking
coefficient–something anyone who had worked with PLLs before would know.&lt;/p&gt;

&lt;p&gt;In another example, I watched a user complain that Xilinx’s FFT wasn’t
working.  However, when he presented his logic it wasn’t too hard to
discover that his &lt;a href=&quot;/blog/2021/08/28/axi-rules.html&quot;&gt;AXI stream logic was
broken&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Today’s story, however, regards the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;cheap-hardware-for-compressing-weather-data&quot;&gt;Cheap Hardware for Compressing Weather Data&lt;/h2&gt;

&lt;p&gt;Early on in the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;’s
development, I met a kind gentleman who was interested in using cheap hardware
to compress massive amounts of weather data.  Let’s call him Pi, to allow him
to remain anonymous.  His goal, further, was to be able to accomplish this
compression on the cheapest commodity hardware he could find.  He was
interested in the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
back then specifically because the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
promised to be low logic and he wanted a CPU to help him do his work.&lt;/p&gt;

&lt;p&gt;We’ve since interacted with each other off and on for, well, I suppose it’s
been about five years.  He has been very supportive of my efforts, and has
always volunteered to help me test and verify any new distribution I put
together.&lt;/p&gt;

&lt;p&gt;Let’s come back to Pi again in a moment.  For now, let me share some of the
lessons I’ve since learned about verification from working with the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;.&lt;/p&gt;

&lt;!-- Need to lead up to the discussion of whether or not the memory is working
&quot;If memory is brok how does the lifting step work in catzip in hw and sim
produces same results as test-zipcore?  The pport rtl files from icozip dev
break pptest speechpp in hw.&quot;
--&gt;

&lt;h2 id=&quot;lessons-and-stories-from-zipcpu-verification&quot;&gt;Lessons and Stories from ZipCPU verification&lt;/h2&gt;

&lt;p&gt;When I first built the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;,
I needed some way of testing it.  So I built
a small assembly based test script to test each instruction.  While my goal
was to test each instruction in isolation, nothing ever really works out that
way.  In reality, every instruction under test required that two instruction
sequences needed to be tested.&lt;/p&gt;

&lt;p&gt;Well, let’s be honest, that first test was built in machine code.  A &lt;a href=&quot;https://github.com/ZipCPU/blob/master/sw/zasm/optest.cpp&quot;&gt;small C++
program&lt;/a&gt; helped me
generate this code, but the instructions were written in C++, not as an input
file.  I then &lt;a href=&quot;https://github.com/ZipCPU/blob/master/bench/asm/simtest.s&quot;&gt;converted the test to
assembly&lt;/a&gt;, and built
&lt;a href=&quot;https://github.com/ZipCPU/blob/master/sw/zasm.y&quot;&gt;my own assembler&lt;/a&gt; to turn it
into machine code.  Eventually, the test was compiled using
the GNU assembler from binutils, and then turned into a
&lt;a href=&quot;https://github.com/ZipCPU/blob/zipcore/sim/zipsw/cputest.c&quot;&gt;C program&lt;/a&gt; that
I now run on every updated design.&lt;/p&gt;

&lt;p&gt;Once I knew that every instruction worked, I then declared the CPU operational.&lt;/p&gt;

&lt;p&gt;Over the next several years, I was surprised to find further bugs in my
“operational” CPU.  The list below is just a small subset of some of those bugs.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;The &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; was originally a
32-bit byte machine.  Back in the day, it couldn’t handle 8-bit bytes.
Neither could I compile the C-library for the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;.  So, it needed to change.&lt;/p&gt;

    &lt;p&gt;When I first converted the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
to using 8-bit bytes, I came across an ugly printf bug.  This was due to
the fact that the data structure used by the
&lt;a href=&quot;https://sourceware.org/newlib&quot;&gt;newlib&lt;/a&gt; stdio library is a packed structure.
My initial data tests only tested reading and writing 32-bit words–not
bytes within a greater structure.&lt;/p&gt;

    &lt;p&gt;The broken design failed to pass &lt;a href=&quot;https://en.wikipedia.org/wiki/&amp;quot;Hello_World!&amp;quot;_program&quot;&gt;&lt;em&gt;Hello
World&lt;/em&gt;&lt;/a&gt;, so
&lt;a href=&quot;https://github.com/ZipCPU/blob/zipcore/sim/zipsw/hello.c&quot;&gt;Hello World&lt;/a&gt; is
now one of my standard tests.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;When it came time to give the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
an instruction cache, I built one I called
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/pfcache.v&quot;&gt;pfcache&lt;/a&gt;.
I built a test bench for it, and verified that it did everything right when
running the test bench.&lt;/p&gt;

    &lt;p&gt;I was then convinced the prefetch worked.  Indeed, &lt;em&gt;everything&lt;/em&gt; worked well:
the bench test, the CPU test, etc. until I first placed this design into
hardware.  Once I placed things into hardware, the &lt;a href=&quot;/zipcpu/2017/12/18/ugliest-bug.html&quot;&gt;CPU broke and I was
looking everywhere else but the instruction cache for the
bug&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I have continued using the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
for some time after that, and indeed still use it today.  However, when
it came time to learn formal verification, there was a time when it became
time to &lt;a href=&quot;/blog/2018/04/02/formal-cpu-bugs.html&quot;&gt;formally verify the
ZipCPU&lt;/a&gt;.&lt;/p&gt;

    &lt;p&gt;At this point, again, it passed all my test benches.  It ran many programs
successfully.  I had used it in hardware successfully for many programs.
I “knew” it worked, and had a lot of confidence in it.  I just wanted to
formally verify it.&lt;/p&gt;

    &lt;p&gt;Much to my surprise, &lt;a href=&quot;/blog/2018/04/02/formal-cpu-bugs.html&quot;&gt;there were many bugs in the
CPU&lt;/a&gt; that none
of my simulation test benches ever caught.  Many of these depended on
specific instruction sequences that I didn’t have the vision to anticipate,
and which weren’t triggered by my &lt;a href=&quot;https://github.com/ZipCPU/blob/zipcore/sim/zipsw/cputest.c&quot;&gt;C test
program&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;When I first added GCC support, I ran up against a difficult problem: the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; only had instruction space
to support eight conditions.  GCC wanted support for many more conditions.
How should the missing conditions be generated?&lt;/p&gt;

    &lt;p&gt;Specifically, I had an unsigned less than comparison, but no greater than
or equal unsigned comparison.  For example, to tell if the unsigned value
Rx was less than another unsigned value Ry, and then branch if it was, one
might write:&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-asm&quot; data-lang=&quot;asm&quot;&gt;     CMP Rx,Ry		# Is (unsigned)Rx &amp;lt; (unsigned)Ry?
     BC  target		# Branch to target if the carry bit is set&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;To handle greater than, I could reverse the comparison.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-asm&quot; data-lang=&quot;asm&quot;&gt;     CMP Ry,Rx		# Is (Unsigned)Rx &amp;gt; (unsigned)Ry?
     BC  target		# Branch to target if the carry bit is set&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;But how should I check for less than or equal?&lt;/p&gt;

&lt;p&gt;My approach for this was to add one to the comparison, so that the
   comparison became,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-asm&quot; data-lang=&quot;asm&quot;&gt;     CMP -1+Rx,Ry	# Is (Unsigned)Rx-1 &amp;lt; (unsigned)Ry?&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Again, this passed all my tests.&lt;/p&gt;

&lt;p&gt;Look closely at this solution, though.  What would happen if Rx were
   zero?  If you subtracted one from Rx it would become the greatest possible
   unsigned integer.  If you then checked the comparison, it would fail.&lt;/p&gt;

&lt;p&gt;It wasn’t until some time after I had GCC support “working” that I came
   across this bug.  Sure enough, I didn’t expect to find it in my GCC
   back end.&lt;/p&gt;

&lt;p&gt;Eventually, I solved this problem by adjusting the instruction set
   so as to get rid of the greater than comparison and to replace it with a
   no-carry check.  The solution is only so good, and sometimes breaks down
   to the point where I need to issue two branch instructions to cover
   the desired condition–but that’s really a topic for another day.&lt;/p&gt;

&lt;p&gt;My point here is simply that, when debugging one part of my design, I found
   I needed to look somewhere else entirely to trace down this bug.&lt;/p&gt;

&lt;ol start=&quot;5&quot;&gt;
  &lt;li&gt;
    &lt;p&gt;After using the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; for many 
projects, &lt;a href=&quot;/zipcpu/2019/02/04/debugging-that-cpu.html&quot;&gt;I ran into trouble in one that was using a GbE network
controller&lt;/a&gt;.
For some strange reason, the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
appeared to be randomly hanging.  I struggled to figure out why.  I mean,
it worked in my test bench, no?&lt;/p&gt;

    &lt;p&gt;When I finally traced the problem down, it was due to a race condition
in the interrupt logic.  If an interrupt happened between two halves of a
compressed instruction, the CPU would lock up.&lt;/p&gt;

    &lt;p&gt;At the time, I didn’t have any good test scripts for triggering interrupts
on the CPU.  Unfortunately, I still don’t–although I now have more formal
properties to catch bugs like this.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;At one time, the HALT instruction wasn’t working.  Sure, it would issue,
but never actually halt.&lt;/p&gt;

    &lt;p&gt;The problem was another instruction sequence thing, combined with
handling the HALT instruction with a Verilator C++ test script.
In this bug, a particular instruction sequence might keep the CPU
from halting following a HALT instruction.&lt;/p&gt;

    &lt;p&gt;Does the test bench check the HALT instruction?  Well, yes, but … only
once.  (Fixing this is on my to-do list …)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The LOCK bug: Sometimes it’s just that you haven’t thought through all of
the complex interactions between your logic.  For example, how should the
CPU step through a user instruction sequence that attempts to perform an
atomic access instruction, and yet do this from supervisor mode?&lt;/p&gt;

    &lt;p&gt;In the case of this bug, the CPU faithfully allowed the supervisor to
step through each of the sub-instructions associated with a LOCK instruction
sequence:&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-asm&quot; data-lang=&quot;asm&quot;&gt;   LDI  atomic_value,Ra		# Get the address of a semaphore
   LOCK				# Acquire a bus lock
   LW     (Ra),Rd		# Load the semaphore
   SUB    1,Rd			# Attempt to decrement it by one
   SW.GE  Rd			# If the updated semaphore is &amp;gt;= 0, write it back
   # The bus lock is then released, after the store instruction is issued.&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The problem with doing this, though, is that stepping through a LOCK
   sequence destroys the LOCK operation on the bus.  All four instructions
   following the LOCK instruction must complete or fail together–you can’t
   step through them or interrupt them.&lt;/p&gt;

&lt;p&gt;Lesson learned.&lt;/p&gt;

&lt;p&gt;My point in going through this list is simple: in each case, the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; passed all of its simulation
test cases.  In each case, I was convinced the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; worked before placing it into
either a larger simulation environment or hardware itself.  In each case,
debugging then became harder because the bug had escaped bench testing.&lt;/p&gt;

&lt;p&gt;Yes, I now have tests that will catch most or even all of these bugs should
they ever occur again.  Am I convinced that the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; is now free of all bugs?
Convinced enough to use it.  Beyond that, only time will tell.&lt;/p&gt;

&lt;h2 id=&quot;sdram-problem&quot;&gt;SDRAM Problem&lt;/h2&gt;

&lt;p&gt;I bring all this up to begin another story.&lt;/p&gt;

&lt;p&gt;Let’s go back to the story of the kind gentleman I mentioned above, Pi.
Pi wanted to build a &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; design for
some hardware he had purchased.  I didn’t have a copy of his hardware, but
sure, go ahead, copy one of my designs and place it onto your hardware.  God
bless, and have an adventure!&lt;/p&gt;

&lt;p&gt;His hardware required an SDRAM controller.  I suggested &lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/rtl/arrowzip/wbsdram.v&quot;&gt;one of my
own&lt;/a&gt;,
but cautioned him: not all SDRAM chips and protocols are the same.  The
required timing can change from one chip to another.  Memory size can change,
etc.&lt;/p&gt;

&lt;p&gt;I’m not sure how he did it, but he did manage to get it to work.&lt;/p&gt;

&lt;p&gt;Later on, I made some updates to the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;.  These changes included bug
fixes, and so it was worth upgrading his design for the new
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;.  The problem was that, when
he upgraded his design, it stopped working.  Your CPU, he said, was the problem.&lt;/p&gt;

&lt;p&gt;Well, if the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; has a bug in
it, then I want to fix it.&lt;/p&gt;

&lt;p&gt;That said, this left me with a bit of a dilemma: this is a kind, retired,
gentleman.  He has no significant money to hire an engineer.  My time fixing
his bug would never be paid for, and I had demanding jobs on my plate at the
time.  On the other hand, a bug in the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
would reflect poorly on my work, and I try to keep my github repositories
working and debugged.&lt;/p&gt;

&lt;p&gt;So, I invested a Saturday into debugging his problem.&lt;/p&gt;

&lt;p&gt;Sure enough, it wasn’t a bug in the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;.  Yes, the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; test case was
no longer running on his hardware, but the problem wasn’t in the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;.  His problem was due to a
misconfiguration of the SDRAM controller he had copied, and then changed to
match his chip.  That was a copy and change done with little (if any)
understanding of how the SDRAM worked in the first place.&lt;/p&gt;

&lt;p&gt;This was voodoo engineering at its best:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Voodoo Engineering, Defn:&lt;/strong&gt; &lt;em&gt;To change what isn’t broken, in an attemp to fix
what is.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;To make matters worse, the &lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/rtl/arrowzip/wbsdram.v&quot;&gt;SDRAM
RTL&lt;/a&gt;
was modified one way, and the &lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/sim/verilated/sdramsim.cpp&quot;&gt;SDRAM simulation
model&lt;/a&gt;
no longer matched.&lt;/p&gt;

&lt;p&gt;So, as a kind teacher, I tried to point out that he had no business trying to
run or debug his design on hardware if it didn’t work in simulation.&lt;/p&gt;

&lt;p&gt;Indeed, I went further: I pointed out that he had a bug in the SDRAM
portion of his design.&lt;/p&gt;

&lt;p&gt;However, this was no longer a controller I felt responsible for.  Yes, it was
originally my controller, but Pi had since changed and significantly modified
it.  Sure, I could debug it for him, but who would then pay for my time?  It
wasn’t a bug in &lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/rtl/arrowzip/wbsdram.v&quot;&gt;my SDRAM
controller&lt;/a&gt;,
nor in &lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/sim/verilated/sdramsim.cpp&quot;&gt;my C++ SDRAM
model&lt;/a&gt;,
nor in the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;.  It was a bug in
Pi’s changes.&lt;/p&gt;

&lt;p&gt;Needless to say, Pi was quite frustrated.  To my knowledge, he remains stuck in
&lt;a href=&quot;/blog/2017/05/19/fpga-hell.html&quot;&gt;FPGA Hell&lt;/a&gt; to this day.
Worse, he seems to have given up on RTL design, and he has certainly stopped
trying to get the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; working on
his board.&lt;/p&gt;

&lt;p&gt;Was his problem that hard?  Not really, but you really have to know the basics,
to include how to properly debug a simulation and trace a problem down from
the bug (the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; CPU test not
working) through to the problem (the SDRAM mis-configured).  That’s a lot of
design that needs to be traced through to find a bug.&lt;/p&gt;

&lt;h2 id=&quot;conclusions&quot;&gt;Conclusions&lt;/h2&gt;

&lt;p&gt;What conclusions might we draw from these stories?  Hardware is hard?  Maybe,
but that’s not really the conclusion I am going to draw today.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Do not place a design into hardware if the design doesn’t first work
in simulation.&lt;/p&gt;

    &lt;p&gt;This should go without saying.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;If you change the RTL controller, the simulation model should need to be
changed to match.&lt;/p&gt;

    &lt;p&gt;If not, then was your simulation model really good enough in the first
place?&lt;/p&gt;

    &lt;p&gt;In Pi’s case, I’m not sure he remembered that he had changed the simulation
model …&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;While I’d like to say that debugging hardware is hard, debugging a
simulation really isn’t any harder than debugging anything in software.
In fact, simulations &lt;em&gt;are&lt;/em&gt; (technically) software.  Unlike hardware, you
have every signal available to you to analyze when running a simulation!&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;Debug by printf works in simulation&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;When using VCD/trace files, you can get even more information about
what’s going on within a design than gdb will ever give you!&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Getting a single module working is easy–especially when it is one you’ve
written yourself.&lt;/p&gt;

    &lt;p&gt;Getting 5-6 modules to work together, and to interact with external hardware?
That’s harder.  Not only do you need to know enough of how those 5-6 modules
work, and how the external module is supposed to work, but you have to know
those parts and pieces well enough that you can debug them.  You have to know
them well enough that you can find the one condition within module 3 (or
whichever one it is) that was set improperly.  It doesn’t help if those
modules were written by someone else either–this just makes the task
of an integration engineer that much more challenging.&lt;/p&gt;

    &lt;p&gt;I’ve often found hardware debugging sessions to bounce around from place
to place, as I try to chase a bug from where it manifests to its cause.
The process is time consuming and painful.  It’s also why those whose work
involves jobs like this can demand big bucks.  (At least I think they’re
big …)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;If the design is complicated enough, and a different engineer has written
each of the models that need to be made to work together, then it may be
time to force all of the various engineers into the same room to get the
design to work.&lt;/p&gt;

    &lt;p&gt;In business, where you have the $$ or control to make this happen, this is
generally the most successful approach to solving integration bugs.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The bug you are looking for is rarely in the place you are looking.&lt;/p&gt;

    &lt;p&gt;I seem to have written about this often enough that it seems to be a
recurring theme on this blog.  I’ve already linked to several examples of
this above.  Not only do I experience this problem within my own work, I also
come across it when participating in online forums.  This also took place
when I was working customer support for Yosys.&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;Customer: Your design doesn’t work!&lt;/p&gt;

      &lt;p&gt;Me: Well, okay, let’s do some joint debugging …&lt;/p&gt;

      &lt;p&gt;(After a lot of work …)&lt;/p&gt;

      &lt;p&gt;Me: No, actually, it’s your own design that’s at fault.&lt;/p&gt;
    &lt;/blockquote&gt;

    &lt;p&gt;Of course, to get to this point, you have to have enough confidence in how
the customer’s design works (or doesn’t) to be able to state with confidence
that it is their problem.&lt;/p&gt;

    &lt;p&gt;As a professional engineer, this interaction tends to be rather frustrating:
who do I bill for this time?  Do I bill the project the complaint was lodged
against?  That project worked.  Realistically, the bill should be given to
the customer, but that’s just not how the open source world works.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Let me know if you want to help Pi out.  I’m sure he’d like some help getting
his design working again.&lt;/p&gt;

&lt;h2 id=&quot;one-final-gem&quot;&gt;One final gem&lt;/h2&gt;

&lt;p&gt;As one final gem: some of the most challenging problems I’ve had to deal with
have involved debugging memory.  The CPU might read a value from memory and
do something inappropriate with it.  When you then try to debug the CPU,
it can be very difficult to tell where the problematic value got written to
memory in the first place.&lt;/p&gt;

&lt;p&gt;If you ever find yourself stuck dealing with this problem, try the following.&lt;/p&gt;

&lt;p&gt;First, let’s assume for discussion purposes that your memory model logic
looks something like:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;mem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Here’s the trick: check for everytime the value at this memory location
changes, and print something out anytime it does.  In Verilog, this
check could easily look like:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;localparam&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ADDRESS_WIDTH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;BUGGY_ADDRESS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Whatever ...;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;reg&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;31&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;track_value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;track_value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BUGGY_ADDRESS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;track_value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;mem[0x%08x] &amp;lt;= %08x at time %t&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;BUGGY_ADDRESS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;track_valu&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Of course, this logic won’t &lt;em&gt;synthesize&lt;/em&gt;, so you’ll want to remove it as
soon as you are done debugging, but it should be enough to get you to the
next step.&lt;/p&gt;

&lt;p&gt;The next step is to look at the output of your simulation to find where in
the trace the wrong value got written to memory.  Now go look up that time
in the trace, and you’ll be able to continue your work backwards through the
logic until you can find the source of your bug.&lt;/p&gt;

&lt;p&gt;Oh, and yes, you can use this basic technique when using a Verilator C++ model
as well, it’s just that the code for it will look a bit different.
Indeed, this technique would’ve sent Pi directly to his problem.  Perhaps
he’ll even read this article and manage to find his bug, since he &lt;em&gt;is&lt;/em&gt; an avid
reader of this blog.&lt;/p&gt;
&lt;hr /&gt;&lt;p&gt;&lt;em&gt;Many will say to me in that day, Lord, Lord, have we not prophesied in thy name? and in thy name have cast out devils? and in thy name done many wonderful works?  And then will I profess unto them, I never knew you: depart from me, ye that work iniquity. (Matt 7:22-23)&lt;/em&gt;</description>
        <pubDate>Tue, 30 Aug 2022 00:00:00 -0400</pubDate>
        <link>https://zipcpu.com/zipcpu/2022/08/30/not-my-fault.html</link>
        <guid isPermaLink="true">https://zipcpu.com/zipcpu/2022/08/30/not-my-fault.html</guid>
        
        
        <category>zipcpu</category>
        
      </item>
    
      <item>
        <title>Protocol Design for Network Debugging</title>
        <description>&lt;p&gt;What do you do when you need
&lt;a href=&quot;https://en.wikipedia.org/wiki/Transmission_Control_Protocol&quot;&gt;TCP&lt;/a&gt;,
but don’t have it?&lt;/p&gt;

&lt;p&gt;Let me back up and set the stage a bit more.  I’m working with what will be
an underwater design, as shown in Fig. 1.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 1. Controlling an Underwater FPGA&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/netbus/sysdesign.svg&quot; alt=&quot;&quot; width=&quot;780&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;For those who haven’t figured it out, this will (eventually) form the basis of
a SONAR device.&lt;/p&gt;

&lt;p&gt;At first, this problem seems simple enough: there will be an FPGA device
controlled via a network port.  Easy, got it.  Better yet, what’s the easiest
network protocol to use?
&lt;a href=&quot;https://en.wikipedia.org/wiki/Transmission_Control_Protocol&quot;&gt;TCP&lt;/a&gt;.  Open
Source &lt;a href=&quot;https://en.wikipedia.org/wiki/Transmission_Control_Protocol&quot;&gt;TCP&lt;/a&gt;,
software stacks aren’t all that hard to write, and I know there are several
open source stacks that are easy enough to use.  (No, I’ve never written one
myself …)&lt;/p&gt;

&lt;p&gt;But, let’s dig a little deeper: I want to be able to control and debug the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;CPU&lt;/a&gt;
via the same network port.  That means I’ll want to be able to &lt;a href=&quot;/zipcpu/2017/07/14/cpu-debugging-needs.html&quot;&gt;stop the CPU,
read its registers, adjust the contents in RAM, and then restart it
again&lt;/a&gt; all
over the network.  Put another way, if the CPU software won’t be running at
all times, then I can’t implement
&lt;a href=&quot;https://en.wikipedia.org/wiki/Transmission_Control_Protocol&quot;&gt;TCP&lt;/a&gt;
in software and still debug the CPU using the same
&lt;a href=&quot;https://en.wikipedia.org/wiki/Transmission_Control_Protocol&quot;&gt;TCP&lt;/a&gt;
stack.  Worse, what if the FPGA firmware can’t be trusted?
Now things are getting a bit more challenging.  How shall a piece of broken
FPGA firmware be updated without using software on the FPGA board?&lt;/p&gt;

&lt;p&gt;This, then, is where this problem starts.&lt;/p&gt;

&lt;p&gt;At the most basic level, any FPGA design can be halted and updated via the JTAG
port.  Most vendor designs will allow for that.  However, in this design, that
JTAG port will be quite literally underwater.  The only way to access it will
be to bring the entire unit back out of the water, to dry off the chassis the
FPGA board sits within, and then to uncap the JTAG port and access it.  This
is the insurance policy for the project–guaranteeing that the chassis the
hardware sits within will not need to be opened except in extreme circumstances.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 2. Reconfiguring a running FPGA&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/netbus/reconfig-plan.svg&quot; alt=&quot;&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;That’s not, however, going to be the normal mode of operation.  Normally, upon
application of power, this design will need to automatically start up and then
do something to allow itself to be updated.  This can be done via an
Internal Configuration and Access Port (ICAP) found within the FPGA itself.
If a second design configuration can be written to the
&lt;a href=&quot;/blog/2019/03/27/qflexpress.html&quot;&gt;flash&lt;/a&gt;,
the ICAP port can then be told to tell the FPGA to reconfigure itself from
this second configuration location.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left; padding: 20px&quot;&gt;&lt;caption&gt;Fig 3. Basic outline of a UART protocol to control a Wishbone Bus&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/wb-uart-ovw.svg&quot; alt=&quot;&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Normally, I handle this sort of problem within my designs using a &lt;a href=&quot;/formal/2019/02/21/txuart.html&quot;&gt;serial
port&lt;/a&gt;
together with what I call a “debugging bus”: a protocol, running over
that &lt;a href=&quot;/formal/2019/02/21/txuart.html&quot;&gt;serial port&lt;/a&gt;,
that allows me to read from or write to any address on the bus within the FPGA.
&lt;a href=&quot;/blog/2017/06/05/wb-bridge-overview.html&quot;&gt;We’ve discussed this protocol
before&lt;/a&gt;, and for
reference you can see the basic components of this protocol in Fig. 3 on the
left: Commands are grouped into words, decompressed, placed into a FIFO, and
then those commands are used to control the bus.  Bus returns then come back.
Reset acknowledgments and interrupts get added to the return stream, which is
then compressed and split back into bytes before being returned across the
&lt;a href=&quot;/formal/2019/02/21/txuart.html&quot;&gt;serial port&lt;/a&gt;.
In general, this works great, and I’ve used this approach for years.
Even better, having full bus access makes it really easy to debug the FPGA–as
long as you can guarantee that neither the debugging bus protocol nor the bus
itself will fail on you.&lt;/p&gt;

&lt;p&gt;That’s great for a
&lt;a href=&quot;/formal/2019/02/21/txuart.html&quot;&gt;serial port&lt;/a&gt; protocol,
where character’s aren’t (generally) lost and where messages don’t
accidentally get repeated.&lt;/p&gt;

&lt;p&gt;But what about a network protocol?&lt;/p&gt;

&lt;p&gt;Today’s discussion, then, will discuss a network protocol which can be used
to do this same thing, but with an interface simple enough that it can be
implemented in an FPGA.&lt;/p&gt;

&lt;h2 id=&quot;understanding-the-problem&quot;&gt;Understanding the Problem&lt;/h2&gt;

&lt;p&gt;Let’s back up, therefore, and take a moment to understand the goal and purpose
of this protocol together with some of what makes the networking environment
unique.  This will lead us to an understanding of some of the problems
involved that will need to be handled by this protocol.&lt;/p&gt;

&lt;h3 id=&quot;all-network-traffic-takes-place-in-packets&quot;&gt;All network traffic takes place in packets&lt;/h3&gt;

&lt;p&gt;The first rule of networks is that all communication takes place in packets.
Even better, since we’ll be using Ethernet, &lt;a href=&quot;https://en.wikipedia.org/wiki/Ethernet_frame&quot;&gt;every Ethernet
packet&lt;/a&gt;
ends in a four byte &lt;a href=&quot;https://en.wikipedia.org/wiki/Frame_check_sequence&quot;&gt;Frame Check
Sequence&lt;/a&gt;
based upon a &lt;a href=&quot;https://en.wikipedia.org/wiki/Cyclic_redundancy_check&quot;&gt;Cyclic Redundancy Check
(CRC)&lt;/a&gt;.  These four
bytes are produced by a function applied to the contents of the packet.  Then,
on reception, the receiving end can also calculate the same function.  If the
result matches the four-byte frame check sequence found in the packet, then
you can have some strong assurance that the packet was received across the
interface without error.&lt;/p&gt;

&lt;h3 id=&quot;packets-may-be-lost&quot;&gt;Packets may be lost&lt;/h3&gt;

&lt;p&gt;Here’s our first problem: if something goes wrong on the network–perhaps
there’s too much congestion somewhere, perhaps the FPGA is still responding to
some other packet, then a packet may be dropped.  Indeed, &lt;a href=&quot;/blog/2022/02/23/axis-abort.html&quot;&gt;we discussed this
sort of idea&lt;/a&gt; quite
recently.  In network implementations, dropped packets are considered a
“normal” phenomena, and any protocol working across the network needs to be
able to recover from a lost packet.&lt;/p&gt;

&lt;p&gt;Think this through a bit, since this can be a real problem.  What happens if
the bus within the FPGA locks up because some peripheral isn’t responding?
In the worst case, all following packets will be lost–to include any
packets telling the FPGA to reset itself.  This is a real possibility that
we’ll need to consider as things go on.&lt;/p&gt;

&lt;h3 id=&quot;packets-may-be-repeated&quot;&gt;Packets may be repeated&lt;/h3&gt;

&lt;p&gt;The next problem is that packets may be repeated.&lt;/p&gt;

&lt;p&gt;At first, I simply poo-pood this idea.  This would never happen in any of &lt;em&gt;my&lt;/em&gt;
implementations, I told myself, because nothing in the network stack will ever
repeat a packet.&lt;/p&gt;

&lt;p&gt;Then I got to thinking some more about this.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left; padding: 20px&quot;&gt;&lt;caption&gt;Fig 4. Request/Reply protocol&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/netbus/reqreply.svg&quot; alt=&quot;&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Imagine you have two computers talking to each other, and one computer (the
client) makes a request of the second (the server/FPGA).  If the request gets
dropped, how shall the first computer (the client) know it was dropped except
if it doesn’t get any response?  Worse, if the client doesn’t get any response,
does that mean 1) the server didn’t get the request, or 2) that the server did
get and process the request and the client just didn’t get the reply?  All the
client can do at this point is to just re-send and re-send its packet until
it eventually gets a reply.&lt;/p&gt;

&lt;p&gt;Voila, repeated packets.  We’ll need to handle these somehow.&lt;/p&gt;

&lt;p&gt;Now lets make matters even worse: some requests, such as commanding the
&lt;a href=&quot;/blog/2019/03/27/qflexpress.html&quot;&gt;flash&lt;/a&gt;
device to erase a sector or to program a page, aren’t things you want to do
twice.  Any network based debugging protocol will therefore, of a necessity,
need to be able to properly handle duplicated packets.&lt;/p&gt;

&lt;h3 id=&quot;packets-may-arrive-out-of-order&quot;&gt;Packets may arrive out of order&lt;/h3&gt;

&lt;p&gt;Just to make things worse, not only may packets get dropped or repeated, they
might also arrive out of order.&lt;/p&gt;

&lt;h3 id=&quot;udpip-is-a-fairly-simple-protocol&quot;&gt;UDP/IP is a fairly simple protocol&lt;/h3&gt;

&lt;p&gt;One of the easiest protocols to implement in an FPGA is
&lt;a href=&quot;https://en.wikipedia.org/wiki/User_Datagram_Protocol&quot;&gt;UDP&lt;/a&gt;/&lt;a href=&quot;https://en.wikipedia.org/wiki/IPv4&quot;&gt;IP&lt;/a&gt;.  1) &lt;a href=&quot;https://github.com/ZipCPU/zipversa/blob/6828a9e4ebe9032dbea6a51f1223b30a0fb980d7/sw/host/udpsocket.cpp#L130-L136&quot;&gt;It’s easy
enough to program most computers to send UDP
packets&lt;/a&gt;,
and 2) &lt;a href=&quot;https://github.com/ZipCPU/zipversa/blob/6828a9e4ebe9032dbea6a51f1223b30a0fb980d7/sw/host/udpsocket.cpp#L156-L187&quot;&gt;receiving UDP packets is relatively easy as
well&lt;/a&gt;.
Even better, if implemented well, the &lt;em&gt;internet&lt;/em&gt;
(the &lt;a href=&quot;https://en.wikipedia.org/wiki/IPv4&quot;&gt;IP&lt;/a&gt; part) has some remarkable
capabilities to it: I might even be able to access this piece of underwater
hardware from the other side of the world if necessary.  On the FPGA side,
there are some challenges involved in implementing
&lt;a href=&quot;https://en.wikipedia.org/wiki/User_Datagram_Protocol&quot;&gt;UDP&lt;/a&gt;/&lt;a href=&quot;https://en.wikipedia.org/wiki/IPv4&quot;&gt;IP&lt;/a&gt;,
but the result is still fairly easy to accomplish.  Some of these challenges
include:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;The FPGA needs to know the Ethernet MAC address, IP address, and destination
&lt;a href=&quot;https://en.wikipedia.org/wiki/User_Datagram_Protocol&quot;&gt;UDP&lt;/a&gt; port to send the
&lt;a href=&quot;https://en.wikipedia.org/wiki/User_Datagram_Protocol&quot;&gt;UDP&lt;/a&gt;/&lt;a href=&quot;https://en.wikipedia.org/wiki/IPv4&quot;&gt;IP&lt;/a&gt; packet to.&lt;/p&gt;

    &lt;p&gt;These can often be copied from the source addresses found in the request,
so that’s not a big problem.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Both &lt;a href=&quot;https://en.wikipedia.org/wiki/IPv4&quot;&gt;IP&lt;/a&gt;
and &lt;a href=&quot;https://en.wikipedia.org/wiki/User_Datagram_Protocol&quot;&gt;UDP&lt;/a&gt;
headers need to know the length of the rest of the
packet–possibly even before the rest of the packet has been formed.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;If &lt;a href=&quot;https://en.wikipedia.org/wiki/IPv4&quot;&gt;IP&lt;/a&gt; header
and &lt;a href=&quot;https://en.wikipedia.org/wiki/User_Datagram_Protocol&quot;&gt;UDP&lt;/a&gt; payload
&lt;a href=&quot;https://en.wikipedia.org/wiki/IPv4_header_checksum&quot;&gt;checksums&lt;/a&gt; are
implemented, these are also placed &lt;em&gt;prior&lt;/em&gt; to the packet data.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This sort of necessitates that a packet be formed first and placed into
a temporary buffer, before being forwarded downstream.  Still, this is quite
doable.&lt;/p&gt;

&lt;p&gt;The problem with &lt;a href=&quot;https://en.wikipedia.org/wiki/User_Datagram_Protocol&quot;&gt;UDP&lt;/a&gt;/&lt;a href=&quot;https://en.wikipedia.org/wiki/IPv4&quot;&gt;IP&lt;/a&gt;,
however, is that it offers no protection against the problems listed above:
packets may still be dropped, duplicated, or arrive out of order.&lt;/p&gt;

&lt;h3 id=&quot;ip-packets-may-be-fragmented&quot;&gt;IP packets may be fragmented&lt;/h3&gt;

&lt;p&gt;If a packet is too big for some portion of the network, then whatever
intermediate node recognizes this is supposed to be able to split the packet
into multiple sub-packets (fragments).  These packets will then be reassembled
on the far end.&lt;/p&gt;

&lt;h3 id=&quot;tcpip-requires-memory&quot;&gt;TCP/IP requires memory&lt;/h3&gt;

&lt;p&gt;I’ve used &lt;a href=&quot;https://en.wikipedia.org/wiki/Transmission_Control_Protocol&quot;&gt;TCP&lt;/a&gt;/&lt;a href=&quot;https://en.wikipedia.org/wiki/IPv4&quot;&gt;IP&lt;/a&gt;
in the past.  In general, it’s always been one of my favorite
protocols to work with: it’s easy and reliable.  However, I’ve never had to
implement it before, neither have I ever tried to implement it on an FPGA.
When digging into what it would take to implement the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Transmission_Control_Protocol&quot;&gt;TCP&lt;/a&gt;/&lt;a href=&quot;https://en.wikipedia.org/wiki/IPv4&quot;&gt;IP&lt;/a&gt;
within an FPGA, it doesn’t take long to learn that each connection will require
some amount of memory to work properly–perhaps as much as 64kB per connection.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;The connection setup defines the maximum and required sizes of this window&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Packet data includes where in the stream the data comes from&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Acknowledgments include the latest received stream position&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Further, &lt;a href=&quot;https://en.wikipedia.org/wiki/Transmission_Control_Protocol&quot;&gt;TCP&lt;/a&gt;/&lt;a href=&quot;https://en.wikipedia.org/wiki/IPv4&quot;&gt;IP&lt;/a&gt;
removes packet boundaries in favor of transmitting stream positions.  In many
ways, though,
&lt;a href=&quot;https://en.wikipedia.org/wiki/Transmission_Control_Protocol&quot;&gt;TCP&lt;/a&gt;/&lt;a href=&quot;https://en.wikipedia.org/wiki/IPv4&quot;&gt;IP&lt;/a&gt;
might be the ideal way of encapsulating what was once a
&lt;a href=&quot;/formal/2019/02/21/txuart.html&quot;&gt;serial port&lt;/a&gt; stream.&lt;/p&gt;

&lt;p&gt;Others have made this protocol work on an FPGA, so I know it can be done.
In my review, however, I ended up balking at the idea of implementing my own
&lt;a href=&quot;https://en.wikipedia.org/wiki/Transmission_Control_Protocol&quot;&gt;TCP&lt;/a&gt;/&lt;a href=&quot;https://en.wikipedia.org/wiki/IPv4&quot;&gt;IP&lt;/a&gt;
protocol handling stack within FPGA logic.  (I’ll probabbly still place an
implemention of the &lt;a href=&quot;https://en.wikipedia.org/wiki/Transmission_Control_Protocol&quot;&gt;TCP&lt;/a&gt;/&lt;a href=&quot;https://en.wikipedia.org/wiki/IPv4&quot;&gt;IP&lt;/a&gt;
stack within the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;CPU&lt;/a&gt;
software before I’m done …)&lt;/p&gt;

&lt;h3 id=&quot;gbe-is-fast&quot;&gt;GbE is fast&lt;/h3&gt;

&lt;p&gt;From my experience, and with the boards I have, a
&lt;a href=&quot;/formal/2019/02/21/txuart.html&quot;&gt;serial port&lt;/a&gt;
can typically achieve speeds somewhere between about 100kB/s (1MBaud) and
400kB/s (4MBaud).  Gigabit Ethernet, on the otherhand, can transfer data at
125MB/s.  That’s probably faster than I need for this part of the project.
The biggest impact this is likely to have, though, is that it might keep my
compression algorithm from working–since that algorithm only tries to
compress a response value as long as the return pipeline is stalled.  If the
link is so fast that it never stalls, then it might make sense to remove to
remove the &lt;a href=&quot;/formal/2019/02/21/txuart.html&quot;&gt;serial port&lt;/a&gt;
compression from this network re-implementation.&lt;/p&gt;

&lt;h3 id=&quot;the-goal&quot;&gt;The Goal&lt;/h3&gt;

&lt;p&gt;Just to make it clear, my goal is to be able to control the bus within an
FPGA design from a network interface.  This means I want to be able to read
from and write both peripheral registers as well as
&lt;a href=&quot;/zipcpu/2018/07/13/memories.html&quot;&gt;memory&lt;/a&gt; and
&lt;a href=&quot;/blog/2019/03/27/qflexpress.html&quot;&gt;flash&lt;/a&gt;.
Using this capability, I want to be able to do things like:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Reading, erasing, programming, and verifying &lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash
memory&lt;/a&gt; contents&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Issuing a warm boot request, so that the FPGA will reload itself from
a secondary location&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Configuring any application specific hardware from an external host.&lt;/p&gt;

    &lt;p&gt;As one example, I’m hoping to control an &lt;a href=&quot;https://www.analog.com/en/products/adau1761.html&quot;&gt;ADAU1761 audio
chip&lt;/a&gt;
on a &lt;a href=&quot;https://store.digilentinc.com/nexys-video-artix-7-fpga-trainer-board-for-multimedia-applications&quot;&gt;Nexys Video board&lt;/a&gt;.
The network bus should be able to turn this chip on, adjust which
channel(s) are selected, and any gain associated with the individual
channels.&lt;/p&gt;

    &lt;p&gt;I expect to use a separate protocol to handle the return audio from such
a controller.  For now, I just want a dependable network protocol I can use
to guarantee my ability to configure this controller across the network in
the first place.&lt;/p&gt;

    &lt;p&gt;This is a test-only capability, to allow an operator to “hear” any
internal signals while the device is still on the bench.  Once the device
is sealed up, similar circuitry within the device will be used to route
from among multiple potential signal sources and sinks to their ultimate
destinations.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Without access to JTAG, I won’t have any vendor tools available for internal
logic analysis in order to diagnose any faults.  Instead, I’ll be using my
own &lt;a href=&quot;/blog/2017/07/08/getting-started-with-wbscope.html&quot;&gt;Wishbone
scope&lt;/a&gt;
across this network protocol.&lt;/p&gt;

    &lt;p&gt;This also means that I’ll want to assume only a bare minimum of design
functionality here.  What happens, for example, if I need to debug the
DDR3 SDRAM protocol?  In that case, I would need to be able to operate
this bus without access to any but internal FPGA memory.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;/zipcpu/2017/07/14/cpu-debugging-needs.html&quot;&gt;Rebooting, pausing, stepping, and stopping or starting the CPU within the
design&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;/zipcpu/2017/07/14/cpu-debugging-needs.html&quot;&gt;Examining CPU
registers&lt;/a&gt;
when the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;CPU&lt;/a&gt;
is halted, and perhaps adjusting their contents if necessary.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;That’s my goal, and you now know the problems associated with working with the
network.  Now, knowing this information, what can we do in order to generate
some form of protocol that we can use?&lt;/p&gt;

&lt;h2 id=&quot;generating-a-protocol&quot;&gt;Generating a Protocol&lt;/h2&gt;

&lt;p&gt;Let’s take a moment to walk through the design of this new protocol, and the
various choices I chose along the way to deal with the problems listed above.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 5. Encapsulating the former serial port protocol&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/netbus/netb-encapsulation.svg&quot; alt=&quot;&quot; width=&quot;240&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;My first draft of this protocol, the draft I’ll be discussing today, simply
involved packetizing the requests I would’ve sent over the
&lt;a href=&quot;/formal/2019/02/21/txuart.html&quot;&gt;serial port&lt;/a&gt; in the
first place.  That means these debugging bus packets simply include an
additional header on top of the headers already existing, together with a
set of bytes which would’ve normally been sent across a &lt;a href=&quot;/formal/2019/02/21/txuart.html&quot;&gt;serial
port&lt;/a&gt;.  We’ll call this
the “NetBus header” and “serial port debugging bus payload” or just “payload”
for short.&lt;/p&gt;

&lt;p&gt;My second (rather arbitrary) choice was to insist that all protocol
interactions take place in two parts: 1) the support software sends a request,
and 2) the FPGA returns a reply.  Moreover, as I alluded to above, &lt;em&gt;every&lt;/em&gt;
request was to receive a reply.  Should a reply not be returned, that would
mean that either the FPGA either didn’t receive the request or that the
response hadn’t been received.  This also meant that the FPGA would never
initiate a transaction on its own, it would only ever respond to requests.&lt;/p&gt;

&lt;p&gt;Incidentally, this also solves the problems associated with out of order
packets: if only one request is ever outstanding at a time, then there will
never be two or more packets to get reversed.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left; padding: 20px&quot;&gt;&lt;caption&gt;Fig 6. Eight GPIO bits&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/netbus/gpio.svg&quot; alt=&quot;&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;One of the neat features of my serial port protocol was that it had a special
means of communicating
&lt;a href=&quot;/zipcpu/2019/04/02/icontrol.html&quot;&gt;interrupts&lt;/a&gt; to the host
computer.  At one time I used this feature with my &lt;a href=&quot;/blog/2019/03/27/qflexpress.html&quot;&gt;original flash
controller&lt;/a&gt;
to notify any programming software of the end of a write transaction.  This
was cool, but … perhaps we could expand upon it?  For example, it’d be nice
to get some status bits from the controller.  Such status bits might include
answers to questions like: Has the buffer within the controller ever suffered
from an overrun?  Has the controller received any bus error responses?  Is this
the first packet following a reset?  All of this together necessitated a set of
general purpose I/O bits that could be controlled via this protocol.  So far,
I’ve settled upon four of the eight bits shown in Fig. 6.  These would be
sticky bits when set, and only cleared upon a write from the external host.
Another four bits remain available for … whatever purpose.&lt;/p&gt;

&lt;p&gt;I created this capability with two parts: a mask and a value.  That way,
any GPIO bit could be updated whose mask bit was set to the value it was set
to, allowing independent control of each of these bits.  Further, by setting
the mask to zero, the FPGA would simply ignore these bits.  Indeed, this I/O
part of the protocol is very similar to &lt;a href=&quot;/zipcpu/2019/02/09/cpu-blinky.html&quot;&gt;one we’ve discussed
before&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;My third choice was to place a stream packet ID number into the header of the
packet.  The FPGA can then use this ID to identify and handle repeated packets.
This way, should the FPGA ever detect a second request with the same frame
number, then it would simply repeat the response to the prior packet with
that frame number.&lt;/p&gt;

&lt;p&gt;One stream ID was designated as special: ID=0.  This indicated a “Sync” packet
in this protocol.  This would be the ID I would use when initiating a
communication with the device.  I could then use this packet to record and set
the Ethernet MAC, IP address, and UDP port of the source, as well as to
reset the state of the internal compression engine to something that could
be known within the client program.  This way, upon starting a client program,
the client could quickly synchronize the two compression engines.&lt;/p&gt;

&lt;p&gt;Further, the design should handle packets with an empty payload, as sort of a
“keep-alive” packet.&lt;/p&gt;

&lt;h3 id=&quot;request-packet-format&quot;&gt;Request Packet Format&lt;/h3&gt;

&lt;p&gt;These choices led me to the packet design for request packets shown in Fig. 7.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left; padding: 20px&quot;&gt;&lt;caption&gt;Fig 7. Host to FPGA Packets&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/netbus/host-to-fpga.svg&quot; alt=&quot;&quot; width=&quot;760&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;In general, the host only added four bytes to any payload.  The first two were
the packet ID.  This ID could be anything, with zero having the special meaning
discussed above, and the second requirement being that ID’s shouldn’t be
repeated in succession.&lt;/p&gt;

&lt;h3 id=&quot;reply-packet-format&quot;&gt;Reply Packet Format&lt;/h3&gt;

&lt;p&gt;The reverse link is very similar, if not almost identical.  There are only
a couple of differences.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 8. FPGA to Host Reply Packets&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/netbus/fpga-to-host.svg&quot; alt=&quot;&quot; width=&quot;760&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;For example, all replies will include the host packet’s ID number so the host
can know which request is being replied to.  This will allow the host to
remove duplicate packets from the return stream.&lt;/p&gt;

&lt;p&gt;Further, all replies will include sixteen general purpose I/O bits.  Eight of
these, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;i_gpio&lt;/code&gt;, are input bits collected from somewhere in the system–such as
the &lt;a href=&quot;/zipcpu/2019/04/02/icontrol.html&quot;&gt;interrupt&lt;/a&gt;
bit.  Indeed, we discussed four of these bits above, while the other four
remain uncommitted.  The other eight bits, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;o_gpio&lt;/code&gt;, are a simply a
reflection of the current settings as generated by the last packet sent by the
host controller.&lt;/p&gt;

&lt;p&gt;The next word, however, is generated within the FPGA logic.  The first
16-bit field of this word is the prior packet ID from the previous packet.  This
was chosen so that, in high speed situations, I might send two packets to the
FPGA and then have some assurance the FPGA had received both in case the
first response was dropped.  The next sixteen bits are simply a one-up packet
counter from the FPGA.  This counter would be increased on any sends or
re-sends, allowing the host to identify where, if at all, packets get lost
in this system.  Is it between the host and the FPGA, or on the return trip
from the FPGA to the host?&lt;/p&gt;

&lt;h3 id=&quot;building-the-clients-state-machine&quot;&gt;Building the Client’s State Machine&lt;/h3&gt;

&lt;p&gt;Before concluding, let’s take a quick look at what the host control
software would look like for this.  We’ll base this look upon a
&lt;a href=&quot;https://github.com/ZipCPU/zipversa/blob/6828a9e4ebe9032dbea6a51f1223b30a0fb980d7/sw/host/udpsocket.cpp#L130-L136&quot;&gt;UDPSOCKET&lt;/a&gt;
implementation that encapsulates any issues of issuing packets to or receiving
packets from the O/S.&lt;/p&gt;

&lt;p&gt;A couple of other fields will allow us to keep a copy of the last
received packet, or the packet we are getting ready to send.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt;	&lt;span class=&quot;nc&quot;&gt;NETBUS&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;m_rdbuf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RDBUFLN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_pkt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TXBUFLEN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;UDPSOCKET&lt;/span&gt;	&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_udp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;m_rxlen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_frameid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The first step, therefore, in communicating with this new FPGA protocol is
to establish a connection.  This is done by sending a sync packet.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;NETBUS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;nrd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;c1&quot;&gt;// Make up to MAXTRIES attempts to synchronize&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tries&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tries&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MAXTRIES&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nrd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tries&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// Try sending a sync packet&lt;/span&gt;

		&lt;span class=&quot;c1&quot;&gt;// Clear the 4-byte header, then send a packet of 4bytes only&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;m_pkt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;c1&quot;&gt;// Turn this into a UDP packet and send it&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;m_udp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_pkt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;m_udp-&amp;gt;write&lt;/code&gt; will call the system to actually send this across a UDP
port we’ve connected ourselves to.&lt;/p&gt;

&lt;p&gt;The purpose of the for loop is so that, in the case that we don’t get any
response, we can try sending up to MAXTRIES of these packets.&lt;/p&gt;

&lt;p&gt;The next step is to look for the return packet.  We’ll wait &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PKT_TIMEOUT&lt;/code&gt;
milliseconds for this return–using the poll() system call to implement this
timeout.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;		&lt;span class=&quot;n&quot;&gt;nrd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_udp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RDBUFLN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_rdbuf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PKT_TIMEOUT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now that we have a return packet, let’s look for and assemble the packet ID.
If this ID is not zero, then this isn’t a response to our sync request.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;		&lt;span class=&quot;n&quot;&gt;rxframe&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_rdbuf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x0ff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_rdbuf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x0ff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nrd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rxframe&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;// This is a return from another request&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;// Ignore it.&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;nrd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If after &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MAXTRIES&lt;/code&gt; attempts we still don’t get a response, we’ll throw a
bus error so that the system can deal with this further up in the chain.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;	&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nrd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;BUSERR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Otherwise, if we do have a good packet, we can look through the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;i_gpio&lt;/code&gt; values
and record or process them as necessary.  For example, this is where we’d
mark that we’d received an interrupt of some type.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;	&lt;span class=&quot;n&quot;&gt;m_rxlen&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nrd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// Mark how long the packet is that's in our buffer&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;handle_gpio_returns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Sending data to the device is very similar.  First, you’d generate a packet
header.  Here we choose to use a pseudorandom number algorithm, although you
can use roughly any algorithm you want–as long as it doesn’t generate a
zero packet ID.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NETBUS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;begin&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_packet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NETBUS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BUSW&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_frameid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// Last packet was a sync packet&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;m_frameid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// Following a sync, the first ID == 1&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_frameid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;m_frameid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_frameid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RANDOMIZER_COEFFICIENTS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;m_frameid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_frameid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;m_pkt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_frameid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x0ff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;m_pkt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_frameid&lt;/span&gt;     &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x0ff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;m_pkt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_pkt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Following the header, we’ll encode the address of the subsequent transaction.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;	&lt;span class=&quot;c1&quot;&gt;// Return a pointer to the packet following the&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// address&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;encode_address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;At this point, we can fill our packet with data to be written to the device.&lt;/p&gt;

&lt;p&gt;Once done, we’ll try writing this data to the device &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MAXTRIES&lt;/code&gt; times, or
until we get a response.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tries&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tries&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MAXTRIES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tries&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// Send the request packet&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;m_udp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pktlen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_pkt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

		&lt;span class=&quot;c1&quot;&gt;// Try reading a packet&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;readpkt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PKT_TIMEOUT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_rxlen&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;// We were successful!&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;c1&quot;&gt;// Otherwise we repeat&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_rxlen&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;BUSERR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

	&lt;span class=&quot;c1&quot;&gt;// Search the returned packet for evidence of a bus error.  If we&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// get a bus error, we'll throw an exception as above.&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We’ll then repeat this process until all of the data we need sent has been
sent.&lt;/p&gt;

&lt;p&gt;As you can see, the protocol is pretty simple from a software standpoint to
get working reliably.&lt;/p&gt;

&lt;h2 id=&quot;conclusions&quot;&gt;Conclusions&lt;/h2&gt;

&lt;p&gt;It works.&lt;/p&gt;

&lt;p&gt;That’s all that matters, right?&lt;/p&gt;

&lt;p&gt;Well, not quite.  In reality, this is just my first draft of a packet protocol
of this type.  For example, I haven’t implemented IP defragmentation.  (Nor
am I really planning on doing so in the FPGA hardware.)  Neither have I
implemented &lt;a href=&quot;https://en.wikipedia.org/wiki/IPv4&quot;&gt;IP&lt;/a&gt; support beyond version 4,
or impemented any header option support.  Similarly, I haven’t implemented any
support for zero length packets beyond the original sync packets.&lt;/p&gt;

&lt;p&gt;You can see a list of potential improvements I’ve been considering in Fig. 9.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left; padding: 25px&quot;&gt;&lt;caption&gt;Fig 9. Potential upgrades to this protocol&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/netbus/upgrades.svg&quot; alt=&quot;&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;For perspective, I rewrote my original &lt;a href=&quot;/blog/2017/06/05/wb-bridge-overview.html&quot;&gt;serial port bus
protocol&lt;/a&gt; about
three times before finally I arrived at something I liked.  Each version was
then better than the previous one.  Indeed, even now I have a fourth version of
that &lt;a href=&quot;/blog/2017/06/05/wb-bridge-overview.html&quot;&gt;serial port protocol&lt;/a&gt;
that I’m slowly testing.  However, since this fourth version can only get
about a 10% speed improvement over the current version for the same baud
speed, it hasn’t gotten a lot of priority.  Put simply, the speed of the
&lt;a href=&quot;/formal/2019/02/21/txuart.html&quot;&gt;serial port&lt;/a&gt;
isn’t really slowing me down significantly.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 10. Learning and rebuilding is to be expected&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/netbus/reproofs.svg&quot; alt=&quot;&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;That in itself is a lesson in any endeavor, and one I learned when working on
my Ph.D.  I like to sum it up with this advice to students, “Fail early. Fail
often. Plan for failure.”  Or, alternatively, “Success is measured by the
number of failures that it takes to achieve it.”  (These quotes are my own …)
Given that the best design is never the first one, you should plan on
rebuilding any design once or twice before it will become the best design
that you want to use and reuse over and over again.&lt;/p&gt;

&lt;p&gt;From a more business perspective, I might argue the advice would be to put
lots of energy into &lt;a href=&quot;/blog/2020/01/13/reuse.html&quot;&gt;anything you intend to use more than
once&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;From all these perspectives, this is only a first design and draft of such
a protocol.  I expect it to get better over time.&lt;/p&gt;
&lt;hr /&gt;&lt;p&gt;&lt;em&gt;Can two walk together, except they be agreed? Amos 3:3&lt;/em&gt;</description>
        <pubDate>Wed, 24 Aug 2022 00:00:00 -0400</pubDate>
        <link>https://zipcpu.com/blog/2022/08/24/protocol-design.html</link>
        <guid isPermaLink="true">https://zipcpu.com/blog/2022/08/24/protocol-design.html</guid>
        
        
        <category>blog</category>
        
      </item>
    
  </channel>
</rss>
