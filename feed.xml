<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>The ZipCPU by Gisselquist Technology</title>
    <description>The ZipCPU blog, featuring how to discussions of FPGA and soft-core CPU design.  This site will be focused on Verilog solutions, using exclusively OpenSource IP products for FPGA design.  Particular focus areas include topics often left out of more mainstream FPGA design courses such as how to debug an FPGA design.
</description>
    <link>https://zipcpu.com/</link>
    <atom:link href="https://zipcpu.com/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sat, 06 Mar 2021 20:57:23 -0500</pubDate>
    <lastBuildDate>Sat, 06 Mar 2021 20:57:23 -0500</lastBuildDate>
    <generator>Jekyll v4.2.0</generator>
    <image>
      <url>https://zipcpu.com/img/gt-rss.png</url>
      <title></title>
      <link></link>
    </image>
    
      <item>
        <title>Lessons learned while building an ASIC design</title>
        <description>&lt;p&gt;Ever since I started working with FPGAs, I’ve always wanted to do an
&lt;a href=&quot;/blog/2017/10/13/fpga-v-asic.html&quot;&gt;ASIC design&lt;/a&gt;.  If
nothing else, I wanted to understand from experience what it was like.&lt;/p&gt;

&lt;p&gt;Last year, I got my chance.  I’m now on my second design, and the team I’m
working with has just sent a piece of this second design to be &lt;a href=&quot;https://en.wikipedia.org/wiki/Tape-out&quot;&gt;taped
out&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The process, however, was different in many ways I wasn’t expecting.  Here,
below, are some of those differences I wasn’t expecting.&lt;/p&gt;

&lt;h2 id=&quot;late-from-the-beginning&quot;&gt;Late from the beginning&lt;/h2&gt;

&lt;p&gt;The first thing that surprised me was the schedule pressure.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 1.  Memory Controller IP&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/asic-lsns/memchip.svg&quot; alt=&quot;&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;The design as a whole is a memory controller, as shown in Fig. 1.  It’s a memory
controller which can be sold independently to customers for placement into
a larger SoC design.&lt;/p&gt;

&lt;p&gt;This first ASIC component of the design I needed to build was actually fairly
simple.  There’s not a lot of logic in it.  I personally like to think of this
portion of the design as a glorified serializer and deserializer.  It takes
8x samples of a signal and serializes them to an output, and then does the same
in reverse.  Except, there are some subtle differences.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left; padding: 15px&quot;&gt;&lt;caption&gt;Fig 2.  High speed design steps&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/asic-lsns/design-steps.svg&quot; alt=&quot;&quot; width=&quot;480&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;More specifically, the design is the first half of a two stage design process
to build a memory controller.  The first stage involves building the high speed
portions of the design, as shown in Fig. 2.  This is the high risk stage.  It
involves building
components that cannot be implemented in an FPGA.  In some respects, this is a
throw-away portion of the design, and so it is important to minimize its
cost.  The second part will handle the protocol and logic associated with the
design.  This is the more complicated part.  Its gate count will be much
higher.  By verifying this portion of the design within an FPGA, cost and time
to development can be
optimized.  Even better, if necessary, the protocol can be debugged and
fixed–something not easily done on an ASIC.  The first stage, therefore, is
basically a speed translator.  It communicates with slower logic on one side
of the chip, and faster logic on the other.  Since this is for a memory
controller, the high speed lines are bidirectional, and they come accompanied
by a clock whenever data is present.  Shifting this clock by 90 degrees was
a bit of a challenge, as was delaying the clock in order to sample in the
middle of a received data bit, but the design was still pretty basic.&lt;/p&gt;

&lt;p&gt;I estimated it would take me about 2-4 weeks to build the design.&lt;/p&gt;

&lt;p&gt;Much to my surprise, I was late the moment the project started.&lt;/p&gt;

&lt;p&gt;Not all of this was my fault.  As I understand things, the engineer who was
working this project before me had left mid-project.  My job was to pick up
where he left off.  Unfortunately, that meant there was a bit of management
confusion between when the last engineer left and when my contract was signed.
It didn’t help that I wasn’t certain I’d even have the bandwidth for this
project when I started it, and so I delayed bidding for the project by a
couple months.&lt;/p&gt;

&lt;p&gt;Once the contract was signed, however, the project was late.&lt;/p&gt;

&lt;p&gt;The project was also late because after building my portion of the project
(in 2-4 weeks), I discovered discover that wasn’t nearly enough.  Sure, I
formally verified (nearly) every portion of the design, but I couldn’t
simulate the entire  design end to end.  The low-speed logic design simulation
was handed to me in a non-functional state, and I had just changed the
interface on top of that.  In whole, this was a non-starter.  How was I to
know if my new interface was sufficient, if I couldn’t verify the whole?&lt;/p&gt;

&lt;p&gt;So, let’s back up a bit to understand how this started.  I was given a design
consisting of a protocol portion and a physical layer portion, together
with several simulation components–much like Fig. 3 below.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: center&quot;&gt;&lt;caption&gt;Fig 3.  Design as received&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/asic-lsns/asreceived.svg&quot; alt=&quot;&quot; width=&quot;560&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;I was told a lot of things about it.  For example, this was what was left from
a previous working design that had been delivered to customers.  Since then,
that design had been adjusted and modified by a previous engineer, but those
modifications had yet to make it into a delivery.  I was also told that less
than half of the test scripts were passing.  Further, the 8b internal interface
was too fast for an FPGA to handle, and so I would need to slow it down by
parallelizing the data path.  So my initial task was simply to upgrade from
an 8-bit data path in the digital front end to a 64-bit data path.  That much
of the task was quite straightforward, and that was the portion that was to go
into this ASIC design.&lt;/p&gt;

&lt;p&gt;Straightforward?  Yes.  However, it did send my crawling all over the original
design, and I did have to make changes in more places than I was expecting–even
in the low-speed logic that was destined to be scrapped as part of my upgrades.&lt;/p&gt;

&lt;p&gt;For example, the AXI bus width of the design given to me was naturally 32-bits
wide.  This works nicely with an AXI4-lite controller.  A 64-bit datapath,
however, meant that either the bus would also need to be made 64-bits wide,
or that the bus width would become a performance bottleneck.&lt;/p&gt;

&lt;p&gt;The next problem was that the simulation I was given didn’t work.  Yes, the
simulation supported nearly a hundred separate tests, but I was told at the
outset that most of them didn’t work.&lt;/p&gt;

&lt;p&gt;On top of that, the free Verilog simulator I had access to on my desktop,
&lt;a href=&quot;http://iverilog.icarus.com&quot;&gt;Icarus Verilog&lt;/a&gt;, didn’t support the SystemVerilog
dot notation when calling tasks.  Getting the simulation, therefore, to even
build in &lt;a href=&quot;http://iverilog.icarus.com&quot;&gt;Icarus Verilog&lt;/a&gt; took some days.&lt;/p&gt;

&lt;p&gt;To make matters worse, once I got to the point where I could try one or two
of the “verified” tests, that is once I could test the first of the simulations
that were supposed to “just work”–they didn’t work.  Instead, the “verified”
tests did the worst thing possible: they hung the simulation.  That left me
wondering if, or when, I should kill the simulation or if it was actually
doing something useful while it wasn’t printing anything to the screen.&lt;/p&gt;

&lt;p&gt;Needless to say, my 2-4 week task took much longer to accomplish than I was
anticipating.  It is now five months later, and the design is only now taping
out.&lt;/p&gt;

&lt;p&gt;So much for my time estimates.&lt;/p&gt;

&lt;p&gt;Seriously, I’d be a much better engineer, and certainly a much more profitable
one, if I could estimate the time to complete a project from the beginning
much better than I can today.&lt;/p&gt;

&lt;h2 id=&quot;gates-are-cheap-verification-is-not&quot;&gt;Gates are cheap, verification is not&lt;/h2&gt;

&lt;p&gt;Nothing is static in this world, not even design requirements.&lt;/p&gt;

&lt;p&gt;It wasn’t until after I had built my design that I got a chance to read the
original contract between my client and his customer.  That contract called
for a built-in self testing (BIST) capability.  Oops.  I hadn’t built that
in.  No problem, I thought, I could add in a simple BIST capability with just
a couple extra registers.&lt;/p&gt;

&lt;p&gt;First, there was the control wire.  The slave access port(s) need to be
adjusted so they could turn on the BIST checker.  That part was easy, and I
know &lt;a href=&quot;/blog/2020/12/19/axil-register-checking.html&quot;&gt;how to formally verify that a bus register can be properly
controlled&lt;/a&gt;,
so I was good there.  The second part was to capture the internal state on a
given signal.  This was almost as simple as,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;capture&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;triggered&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;capture&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;internal_value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Cool!  I was done.&lt;/p&gt;

&lt;p&gt;But did it work in simulation?  No.  I hadn’t built a simulation for it.&lt;/p&gt;

&lt;p&gt;Building the simulation took another day, since I needed to check all of the
various bits that could be captured above.  (The capture signal was wider than
a single bit.)  It then took another day (or two) to get it all to work.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 4. &quot;Of course&quot; is not a good verification practice&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/asic-lsns/of-course.svg&quot; alt=&quot;&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Was the task done?  No.  Now, every time I change the design, I have to go back
and re-verify it against this simulation.  Worse, because of the clock games
taking place within this design, there were all kinds of timing errors generated
by this logic.  In the end, I split the capture signal into two, each captured
on a separate clock.  Even that wasn’t enough, because I only later thought
through the fact that eight of the internal values were captured on their own
special clocks–but that’s part of the longer story.&lt;/p&gt;

&lt;p&gt;That happened to be only part of the BIST story.&lt;/p&gt;

&lt;p&gt;For the other half, I suggested monitoring the output of the high speed
device through the input channel.  The data would just reflect back within the
high speed portion of the design onto the input, as shown in Fig. 5 below.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: center&quot;&gt;&lt;caption&gt;Fig 5. Reflection checking&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/asic-lsns/reflection.svg&quot; alt=&quot;&quot; width=&quot;560&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;This, I reckoned, could be implemented with a simple no-logic change in the
front end.  That is, it was a no-logic change until I actually took the time
to simulate it instead of telling everyone it would “just work”.  Only after
I built a simulation for this check did I realize I had turned reflections
off to optimize power.  Although I fixed up the design to get this to work,
there was a second problem to it that I wasn’t expecting.  Because the design
would receive and return its own transmitted data as it was transmitting it,
the I/O lines couldn’t be shared between transmit and receive.  This nearly
doubled the number of I/O pins on the ASIC to the point where the size of the
I/O pin pads dominated the size of the ASIC and therefore it’s manufacturing
cost.&lt;/p&gt;

&lt;p&gt;Both adjustments required only a minimal amount of design adjustments to our
high speed ASIC design.  The design changes may have taken only 15 minutes
each.  Building the simulation necessary to prove these changes may have
taken closer to a day for each of them.  Running all the various simulations
now at &lt;a href=&quot;https://en.wikipedia.org/wiki/Tape-out&quot;&gt;tape out&lt;/a&gt; still takes several
days–assuming everything works.&lt;/p&gt;

&lt;p&gt;Even these early simulations weren’t the end of the verification task.  Once
the design was laid out and the internal timing values from within the design
were known, it then needed to be verified &lt;em&gt;again&lt;/em&gt;, and then again as a second
portion of the design was laid out, and again as a third portion, etc.  The
number of times my “working” logic has had to go through a simulator has been
somewhat of a shock to me.  More on that to come.&lt;/p&gt;

&lt;h2 id=&quot;design-for-test-dft-signals&quot;&gt;Design for Test (DFT) signals&lt;/h2&gt;

&lt;p&gt;One of the first things I did with the design I received was to strip out any
and all unused logic.  This meant both the logic I wasn’t using as well as any
logic I couldn’t explain.  As a result, I quickly removed the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TEST_MODE&lt;/code&gt;
input, as well as the several &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SCAN_*&lt;/code&gt; inputs associated with it, such as the
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SCAN_CLK&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;That worked great until I sent my design to the layout engineer.  He told me
I had to put these values back into the design to support
&lt;a href=&quot;https://en.wikipedia.org/wiki/Design_for_testing&quot;&gt;DFT&lt;/a&gt; scan chain insertion.&lt;/p&gt;

&lt;p&gt;Our &lt;a href=&quot;https://en.wikipedia.org/wiki/Design_for_testing&quot;&gt;DFT&lt;/a&gt; implementation
worked off of a basic scan chain.  That meant that every flip-flop in the
design needed to be connected to a massive shift register running through
the whole design.  This allows you to test the internal circuitry of the
design after it has been manufactured, to verify that it was manufactured
correctly.&lt;/p&gt;

&lt;p&gt;Getting this support working also required some changes to the design itself.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;The digital design module needed the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Design_for_testing&quot;&gt;DFT&lt;/a&gt;
inputs listed as part of its portlist&lt;/p&gt;

    &lt;p&gt;That meant I had to go back and put this logic back into the design in
spite of having removed it.&lt;/p&gt;

    &lt;p&gt;This felt a bit strange to do.  The
&lt;a href=&quot;https://en.wikipedia.org/wiki/Design_for_testing&quot;&gt;DFT&lt;/a&gt;
signals weren’t connected to anything within the RTL, and they generated
&lt;a href=&quot;/blog/2017/06/21/looking-at-verilator.html&quot;&gt;Verilator&lt;/a&gt;
lint errors, but they were apparently still necessary.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Every incoming clock must be multiplexed with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SCAN_CLK&lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;This was the biggest change.  I needed to add a clock switch to every
incoming clock within my design.  If &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TEST_MODE&lt;/code&gt; was high, then the design
required the use of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SCAN_CLK&lt;/code&gt;.  If &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TEST_MODE&lt;/code&gt; was low, then the design
clock would be used.&lt;/p&gt;

    &lt;p&gt;Unlike the &lt;a href=&quot;/formal/2018/05/31/clkswitch.html&quot;&gt;clock
switch&lt;/a&gt;
we studied earlier on the blog, however, this switch was nothing more than
a simple multiplexer selecting which of two clocks would be produced at the
output.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Every internal clock needed to be multiplexed with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SCAN_CLK&lt;/code&gt;.  This
was in addition to the incoming clocks mentioned above.&lt;/p&gt;

    &lt;p&gt;Basically, if you are going to create a logic generated clock, anything
that will subsequently become the edge of a flip-flop, then the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Design_for_testing&quot;&gt;DFT&lt;/a&gt; logic
needs to be able to toggle that downstream logic with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SCAN_CLK&lt;/code&gt;.
Every clock within the design therefore, and not just those one coming from
the PLL, needed a multiplexer on it before it could be used.&lt;/p&gt;

    &lt;p&gt;This also means that there will only ever be a single clock throughout the
design when in the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Design_for_testing&quot;&gt;DFT&lt;/a&gt;
test mode.  This will naturally limit the things the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Design_for_testing&quot;&gt;DFT&lt;/a&gt;
test mode can actually test.  In other words, any further testing and
verification that might need to be done in silicon was my responsibility.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The rule for clocks applies to asynchronous resets as well&lt;/p&gt;

    &lt;p&gt;This one also surprised me.  Because my design logic might toggle on
an asynchronous reset, it also needed a multiplexer to bypass
the &lt;a href=&quot;/formal/2018/04/12/areset.html&quot;&gt;reset synchronizer&lt;/a&gt;
when the test mode was active.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In many ways, this &lt;a href=&quot;https://en.wikipedia.org/wiki/Design_for_testing&quot;&gt;DFT&lt;/a&gt;
logic looked and acted very much like
&lt;a href=&quot;https://en.wikipedia.org/wiki/JTAG&quot;&gt;JTAG&lt;/a&gt; logic might–but without the
&lt;a href=&quot;https://en.wikipedia.org/wiki/JTAG&quot;&gt;JTAG&lt;/a&gt; state machine.
There was a long shift register, or even series of shift registers–i.e. the
scan chain, within the design that were controlled by this
&lt;a href=&quot;https://en.wikipedia.org/wiki/Design_for_testing&quot;&gt;DFT&lt;/a&gt;
circuitry.  I just didn’t realize that I, as the digital designer prior to
layout, had a role to play in the process.&lt;/p&gt;

&lt;p&gt;In other words, the next time I’m given a design like this, I’m not going to
immediately rip out the &lt;a href=&quot;https://en.wikipedia.org/wiki/Design_for_testing&quot;&gt;DFT&lt;/a&gt;
logic as my first step.&lt;/p&gt;

&lt;h2 id=&quot;cost-is-not-always-measured-in-gate-counts&quot;&gt;Cost is not always measured in gate counts&lt;/h2&gt;

&lt;p&gt;Manufacturing cost for ASIC production is generally proportional to the area
used by the design.  More specifically, the cost is dominated by the cost to
produce the masks necessary to manufacture a wafer.  It’s also possible to
place multiple dissimilar chips on a given wafer in order to help spread the
cost of manufacturing a wafer across multiple users.  That still leaves wafer
area as the dominant measure of cost.&lt;/p&gt;

&lt;p&gt;Prior to this design, I had always thought that meant that the logic area of
the design, as measured in gate counts, would then be roughly proportional to
the overall area and would therefore dominate the overall manufacturing cost.&lt;/p&gt;

&lt;p&gt;Much to my surprise, I discovered that each I/O pad connecting the design to
the outside world required a minimum amount of area.  In my case, the design
required so many I/O pads that the size of these pads proved to dominate the
size of the design.  The actual gate area was much smaller.&lt;/p&gt;

&lt;p&gt;Even apart from the I/O pad sizes, there was a very large analog section to
this high-speed chip.  This included things like the PLL and several DLLs,
in addition to the circuitry necessary to handle unwanted electrostatic
discharge (ESD) or the circuitry required to “clean” (i.e. filter) the power
for the analog logic.  I had never thought of a design as
needing these components before, and to my surprise the digital logic was
very small in size in comparison to them.&lt;/p&gt;

&lt;h2 id=&quot;x-propagation-matters&quot;&gt;X Propagation Matters&lt;/h2&gt;

&lt;p&gt;Ok, I’ll be honest here, I’ve never used ‘x propagation in any of my designs
prior to these ASIC projects.  My favorite simulator,
&lt;a href=&quot;/blog/2017/06/21/looking-at-verilator.html&quot;&gt;Verilator&lt;/a&gt;,
doesn’t support them as a design decision.
&lt;a href=&quot;https://symbiyosys.readthedocs.io/en/latest/&quot;&gt;SymbiYosys&lt;/a&gt;, the
formal verification tool I use, always assigns a ‘1 or a ‘0 to every value in
a broken trace, and checks all possible values for something that isn’t given
a initial value–so I haven’t needed ‘x support.&lt;/p&gt;

&lt;p&gt;Then a customer complained that my first ASIC design didn’t work in their
simulation.  I traced the complaint down to one of two problems.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;always @(*)&lt;/code&gt; block.&lt;/p&gt;

    &lt;p&gt;I’ve enjoyed using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;always @(*)&lt;/code&gt; blocks for any combinational logic.  In
particular, I’ve enjoyed using this block when dealing with generate
blocks like the one below&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;kt&quot;&gt;reg&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;VAL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;generate&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OPT_DESIGN_OPTION&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// Some complex block setting VAL&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;VAL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CONSTANT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;endgenerate&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I like this approach because I don’t need to create second wire to
   hold the value in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VAL&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The problem with this approach is that nothing triggers the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;always @(*)&lt;/code&gt;
   block.  It’s not a problem in hardware, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VAL&lt;/code&gt; is given the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CONSTANT&lt;/code&gt; as its
   definition.  It’s only a problem in simulation.  In simulation, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VAL&lt;/code&gt; is not
   given an initial value and the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;always @(*)&lt;/code&gt; block is never triggered because
   nothing within it ever changes.  As a result, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VAL&lt;/code&gt; remains &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;x&lt;/code&gt; (undefined)
   in the simulation.&lt;/p&gt;

&lt;p&gt;The SystemVerilog specification fixes this issue somewhat in its
   definition of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;always_comb&lt;/code&gt;.  However, other than &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;localparam&lt;/code&gt;s, I’ve tried
   to avoid SystemVerilog features so that I can maintain compatibility with
   the older parsers that are out there.&lt;/p&gt;

&lt;p&gt;Fixing this forced me to adjust my personal design standards so that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VAL&lt;/code&gt;
   would be defined as a wire (a.k.a. a net) in these constructs.  This
   also meant that I would now need to define a separate register, let’s
   call it &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;r_VAL&lt;/code&gt;, which the former logic sets.  In the end, the wire is then
   assigned the resulting value either way.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;VAL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;generate&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OPT_DESIGN_OPTION&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;reg&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;r_VAL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// Some complex block setting r_VAL&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;VAL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r_VAL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;VAL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CONSTANT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;endgenerate&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Personally I find this cumbersome.  However, it’s now going to become part of
   my personal coding standard lest I come across this bug again.  Indeed,
   there’s now &lt;a href=&quot;https://github.com/ZipCPU/blob/zipcore/rtl/core/zipcore.v&quot;&gt;a
   version&lt;/a&gt; of the
   &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
   following this new coding guideline as well.&lt;/p&gt;

&lt;ol start=&quot;2&quot;&gt;
  &lt;li&gt;
    &lt;p&gt;Recursive definitions&lt;/p&gt;

    &lt;p&gt;This one burns me up.  Imagine you have a clock divider, such as&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;div_clk&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;div_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In this example, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;div_clk&lt;/code&gt; isn’t given an initial value because, well,
   initial values aren’t allowed in ASICs.  As long as the hardware can fix
   the value at either &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1&lt;/code&gt;, this clock divider will do the right thing.
   Even better, I can use formal tools to verify that this simple circuit will
   do the right thing either way it’s set.  The problem is not that the hardware
   won’t work, the problem is that the simulator won’t work with something like
   this.  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;div_clk&lt;/code&gt; will be given an initial assignment of ‘x, and anything
   that depends upon it will then get an ‘x value.&lt;/p&gt;

&lt;p&gt;The result of all of this is that I’ve found myself forcing signals to be
   reset that don’t really need to be reset at all.&lt;/p&gt;

&lt;ol start=&quot;3&quot;&gt;
  &lt;li&gt;
    &lt;p&gt;The asynchronous reset applies to everything&lt;/p&gt;

    &lt;p&gt;Up until now, I’ve used &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;initial&lt;/code&gt; statements in my designs quite heavily.
They work great in FPGA designs.  They just don’t work at all in ASIC
designs.&lt;/p&gt;

    &lt;p&gt;Worse, because of ‘x propagation issues, any bit that isn’t set by the
asynchronous reset gets flagged as an ‘x and shows up like a sore thumb on
any simulation trace.&lt;/p&gt;

    &lt;p&gt;I’ve also avoided asynchronous resets in the past, based upon a comment
in some Xilinx documentation suggesting that RF interference might trigger
an accidental asynchronous reset.  (I’ve since been asked by a Xilinx
designer to find the document, and … I can’t remember where I found it
initially.  They claim asynchronous resets should work just fine.)&lt;/p&gt;

    &lt;p&gt;Not so with this design.  In this case, every flop was initialized with an
asynchronous reset.  In some cases, the asynchronous reset would be active
long before the clock ever was.&lt;/p&gt;

    &lt;p&gt;This also affected my formal proofs.  My first attempt at proofs without
initial statements involved  just not evaluating any assertions on the
first clock cycle of the proof.  Now I’m starting to get into the habit
of gating all of my formal assertions with a reset check, to make sure that
the logic works once the reset is accomplished.&lt;/p&gt;

    &lt;p&gt;This also means that my &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/tree/master/bench/formal&quot;&gt;AXI bus property
sets&lt;/a&gt; now
have options for asynchronous reset checking.  If this option is turned on,
the AXI property sets will now insist all VALID flags go to zero on the
same clock as the reset, in addition to the clock following.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Perhaps I shouldn’t complain.  As I mentioned above, logic is cheap.  Once I
knew what was going on, these fixes only took minutes to make.  It’s not the
logic that costs so much, it’s the verification part that’s much harder.&lt;/p&gt;

&lt;h2 id=&quot;asic-clocks-are--different&quot;&gt;ASIC Clocks are … different&lt;/h2&gt;

&lt;p&gt;In FPGAs, there are &lt;a href=&quot;/blog/2017/08/21/rules-for-newbies.html&quot;&gt;rules for
clocks&lt;/a&gt;.  One of
those rules is that logic generated clocks are bad.  In general, FPGA tools
can’t handle the timing analysis of any logic generated clocks,
the logic generated clock doesn’t have the same timing relationship as the
clock it came from, and it isn’t placed automatically on the clock routing
network.  These are all reasons why logic generated clocks are generally bad.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/blog/2017/08/21/rules-for-newbies.html&quot;&gt;These rules&lt;/a&gt; don’t
necessarily apply to ASIC designs.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;ASICs use logic generated clocks&lt;/p&gt;

    &lt;p&gt;ASIC designs are different.  Indeed, once you dig into the weeds of an ASIC,
you might start to believe that all clocks are logic generated.  You would
be right to some extent, because even the PLLs have some amount of logic
within them.&lt;/p&gt;

    &lt;p&gt;Unlike FPGAs, ASICs don’t come with a set of dedicated clock routing
networks.  Instead, the clock trees used within ASIC designs have to be
engineered and inserted into the design for each clock that uses them.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;ASIC designs are known for gating their clocks&lt;/p&gt;

    &lt;p&gt;This technique is primarily used for reducing power within a design.&lt;/p&gt;

    &lt;p&gt;I grew up in Minnesota, not far from &lt;a href=&quot;https://www.nps.gov/miss/planyourvisit/lockdam1.htm&quot;&gt;Lock and Dam number one on the
Mississippi river&lt;/a&gt;.
&lt;a href=&quot;https://www.nps.gov/miss/planyourvisit/lockdam1.htm&quot;&gt;That lock and Dam&lt;/a&gt;
has since become imagery for me to understand power usage within an
electronic circuit.  Imagine, if you will, that every wire within an
electronic design is a lock on a river that can either hold water (i.e.
charge) or not.  Energy is used every time the lock is filled, and it is
measured by the amount of  water necessary to fill the lock.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;table align=&quot;center&quot; style=&quot;float: center&quot;&gt;&lt;caption&gt;Fig 6. A Lock and Dam analogy to electrical power usage&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/asic-lsns/lock-analogy.svg&quot; alt=&quot;&quot; width=&quot;560&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;The higher the water level is, that is the higher the core voltage is
   within a design, the more water that will be necessary to fill the lock.
   Similarly, the longer the lock is whose water level (a.k.a
   voltage) needs to be adjusted, the more water it will take to adjust it.&lt;/p&gt;

&lt;p&gt;Clock trees are equivalent to very long lock chambers throughout the
   design that all need to be filled.  It takes a lot of current to switch
   the tree from one voltage level to another, and the more times the clock
   toggles the more power is used by the clock tree.&lt;/p&gt;

&lt;p&gt;This leads to three ways of reducing power in a design.  You can lower the
   core voltage.  This is equivalent to lowering the height of the water in
   the lock.  You can also lower the frequency.  This is equivalent to raising
   and lowering the lock fewer times, and so you use less water over time.  You
   could also limit the number of flip-flops that toggle based upon the clock,
   although that doesn’t fit our analogy nearly as will.  Finally, it doesn’t
   make sense to adjust the water level in a lock that nothing depends upon.&lt;/p&gt;

&lt;p&gt;This is how gating a clock can reduce the power usage of a design.  Because
   clock trees tend to have a large amount of circuitry dependent upon them,
   and because they use a lot of area within the chip, toggling the clock costs
   a lot of energy.&lt;/p&gt;

&lt;p&gt;Although you can do this within an FPGA, the technique itself isn’t
   commonly used.  FPGAs offer alternatives to clock gating instead, things
   like clock-enables in flip-flops.&lt;/p&gt;

&lt;p&gt;One of the things I learned in this design, which I really should have
   already known, is that gating a clock with a simple AND gate is insufficient
   when working with digital logic.  While it might be appropriate when
   implementing a &lt;a href=&quot;https://en.wikipedia.org/wiki/Design_for_testing&quot;&gt;DFT&lt;/a&gt; scan
   chain, it’s highly inappropriate in general.  A clock gate requires a
   proper gating circuit lest the clock and everything dependent upon it
   become ‘x in simulation, or fail setup and hold timing requirements in
   actual hardware leading to a mismatch between simulation and implementation.&lt;/p&gt;

&lt;p&gt;This fact came into play due to the fact that we were running simulations at
   multiple clock rates.  The simulations would start out with a slower clock,
   and then gradually increase the clock frequency to the maximum frequency
   required by the device.  Further, while the clock frequency was changing in
   the PLL, the PLL would gate the downstream clocks with an AND gate.  Sure
   enough, in one particular run, this AND gate clipped the clock at something
   less than a full pulse width.  One flip flop dependent upon this clock
   switch, a flip flop used to generate a logic clock for downstream processing,
   then turned into an ‘x.  The entire simulation failed from that point
   forward.&lt;/p&gt;

&lt;ol start=&quot;3&quot;&gt;
  &lt;li&gt;
    &lt;p&gt;Clocks can be switched&lt;/p&gt;

    &lt;p&gt;One of the tasks required of this design was to subtly adjust the timing
of particular signals within a clocks width.  Indeed, we were shooting for
an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;80ps&lt;/code&gt; time delay adjustment capability similar to Xilinx’s ODELAY
or IDELAY hardware blocks.  We achieved some of what we were looking
for by moving data signals from one phase of the primary clock to another.&lt;/p&gt;

    &lt;p&gt;A giant clock multiplexer was used for selecting from among the many
clock phases necessary for this operation.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;All of these operations were fairly easy to design and implement in Verilog.
For several months the design with these wonderful blocks in them was awesome.&lt;/p&gt;

&lt;p&gt;Then the design was implemented, placed and routed.  All of a sudden the
consequences of these various clock choices started to make themselves clear.
The balanced clock multiplexer took nearly a fifth of a clock cycle to select
the right clock.  The &lt;a href=&quot;/blog/2020/08/22/oddr.html&quot;&gt;output DDR
element&lt;/a&gt; had one path delay on
one leg and another path delay on another.  Indeed, uncontrolled layout timing
delays on the order of 256ps made it very difficult to finally control
output delays with a better than 80ps accuracy.  These realities forced some
level of last minute redesign that I wasn’t expecting.&lt;/p&gt;

&lt;h2 id=&quot;specify-blocks&quot;&gt;Specify Blocks&lt;/h2&gt;
&lt;p&gt;I remember being in a design meeting with the engineers who built
&lt;a href=&quot;https://symbiyosys.readthedocs.io/en/latest/&quot;&gt;SymbiYosys&lt;/a&gt;
at one time discussing specify blocks.  One of their customers had requested
that &lt;a href=&quot;https://symbiyosys.readthedocs.io/en/latest/&quot;&gt;SymbiYosys&lt;/a&gt; support them,
and the discussion centered on whether or not
&lt;a href=&quot;https://symbiyosys.readthedocs.io/en/latest/&quot;&gt;SymbiYosys&lt;/a&gt;
should support them, and how they should be supported if at all.  At the
time, I had no idea what a specify block was.  As a result, it was no skin
off of any project I was working with if we didn’t support them.&lt;/p&gt;

&lt;p&gt;Then I started working on this project.&lt;/p&gt;

&lt;p&gt;The model I was given for the device we were to interact with had multiple
specify blocks within it.  These specified such things as the setup and hold
time prior to a clock tick, the time a value needed to hold constant following
a clock edge, or even the minimum skew between particular items.  Much to my
pleasant surprise, these timing specifications read like a formalization of
many data sheets I’d read before.  Indeed, all of the specification requirements
within the design could be read and translated directly from the specification
we were working with.&lt;/p&gt;

&lt;p&gt;This was awesome!  I’d never used this capability before.  I liked it!&lt;/p&gt;

&lt;p&gt;Then I started running into trouble.&lt;/p&gt;

&lt;p&gt;My first problem was that &lt;a href=&quot;http://iverilog.icarus.com&quot;&gt;Icarus Verilog&lt;/a&gt; didn’t
support them.  I didn’t realize this at first.  Then I switched from
&lt;a href=&quot;http://iverilog.icarus.com&quot;&gt;Icarus Verilog&lt;/a&gt; to a commercial simulator.  I first
tried &lt;a href=&quot;https://community.cadence.com/cadence_technology_forums/f/functional-verification/39923/nc-verilog-user-manual&quot;&gt;ncverilog&lt;/a&gt;.  When
&lt;a href=&quot;https://community.cadence.com/cadence_technology_forums/f/functional-verification/39923/nc-verilog-user-manual&quot;&gt;ncverilog&lt;/a&gt;
didn’t support &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;localparam&lt;/code&gt; statements I then switched again to
&lt;a href=&quot;https://www.cadence.com/en_US/home/tools/system-design-and-verification/simulation-and-testbench-verification/xcelium-simulator.html&quot;&gt;XCellium&lt;/a&gt;.
Then, &lt;a href=&quot;https://www.cadence.com/en_US/home/tools/system-design-and-verification/simulation-and-testbench-verification/xcelium-simulator.html&quot;&gt;XCellium&lt;/a&gt;
started generating errors when my design wasn’t holding to the various timing
requirements found within the protocol.&lt;/p&gt;

&lt;p&gt;After wrestling with the Verilog simulation for some time, I now wish in
hindsight that I had been more supportive of specify block support within
&lt;a href=&quot;https://symbiyosys.readthedocs.io/en/latest/&quot;&gt;SymbiYosys&lt;/a&gt;.
Now that I’ve read through the SystemVerilog specification discussing
specify block, I’m also convinced that such support wouldn’t be that hard
to build.  The hardest part would be the parsing, but in general that’s already
a solved problem.&lt;/p&gt;

&lt;h2 id=&quot;its-not-over-when-the-digital-design-is-done&quot;&gt;It’s not over when the digital design is done&lt;/h2&gt;

&lt;p&gt;One of the things I’ve already alluded to above is that the project was far
from over once the digital design was complete.  While I wasn’t a part of many
of the steps that followed, I was part of enough of them.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;I’ve already mentioned
&lt;a href=&quot;https://en.wikipedia.org/wiki/Design_for_testing&quot;&gt;DFT&lt;/a&gt;
scan chain insertion&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The design needed to pass a lint check.  The default linter wanted to
complain about a bunch of highly irrelevant “problems”.  I convinced the team
we could use 
&lt;a href=&quot;/blog/2017/06/21/looking-at-verilator.html&quot;&gt;Verilator&lt;/a&gt;
for linting instead.  As a result, I was able to produce a “clean” design
with no lint errors.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I was asked to run an automated coverage analysis check on the design.
Basically, I re-ran all of my simulations and recorded which lines were
getting executed, which bits were toggled and so on.  Signals that didn’t
toggle, or logic that didn’t get exercised were both flagged for discussion
and possible adjustment to the simulations.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Another team member ran a clock domain crossing analysis made on my design.
This analysis looked at every clock domain crossing, and caused us to look
real hard at them–did they need proper proper constraints or
false path insertion?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Power and ground pins needed to be assigned to the design, and the I/O
pins needed to be apportioned to different locations on the chip
interspersed with a sufficient number of power and ground pins to support
them.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I then needed to build an “I/O ring” for the design.  This was new for me,
as I’d never done one of these before.  Basically, I needed to build a
Verilog design that connected all of the external pins, whether inputs or
outputs, to the rest of my Verilog design.  In a Xilinx world, this would
be like connecting all of your I/O pins to an IBUF, OBUF, or an IOBUF rather
than relying on the synthesis tool to do this for you.  It was a touch
different, however, in that I also needed to place multiple power and ground
pins for the design.&lt;/p&gt;

    &lt;p&gt;During this process, the analog engineer I was working with laughed at me
for doing this.  Why, he asked?  Why do you need to model this in Verilog
at all?  As it is, the design needs to be turned into gates and components
laid out in a three dimensional grid.  Verilog is only an intermediate step.
Once you have the three dimensional layout, why do you need the Verilog
describing it anymore?&lt;/p&gt;

    &lt;p&gt;At the same time, even though this I/O ring was quite simple to build, I
still messed it up.  A coworker noticed late in the design process that
one signal had bypassed the I/O pads to go straight into the design.&lt;/p&gt;

    &lt;p&gt;Sadly, we didn’t have any good verification tools to support this portion of
the design.  Sure, I verified that the design worked as desired with the
I/O pads in place, but what would happen if I connected a particular I/O to
the wrong pin?  It would still work in simulation.  What if I used a signal
that bypassed the I/O ring?  That would also still work in simulation.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Since the design consisted of both digital and analog components, I was
given a Verilog model of the analog components to simulate with.  I initially
ignored this model, something that turned out to be quite a mistake.  Why?
Because I already “knew” my design worked against the analog model I’d been
working with, so why did I need this updated model?  As long as the analog
designer had built his design according to the specification we had agreed
upon, what difference would it make if I used my model or his?&lt;/p&gt;

    &lt;p&gt;Unlike mine, however, his model was based upon the hardware “as-built”,
not on my ideas of how it was going to be built.&lt;/p&gt;

    &lt;p&gt;Unfortunately again, once I finally replaced my own model with this
“as-built” model the design no longer passed simulation.  In one case, the
problem had to do with the fidelity of the analog model.  The analog
designer hadn’t truly modeled one of the circuits.  In another case, however,
the analog designer had misunderstood my specification and built the wrong
component.  Had I not done simulations with the analog model, I would not
have found this mistake.&lt;/p&gt;

    &lt;p&gt;I found this mistake late in our design cycle–right as we were finalizing
the design for &lt;a href=&quot;https://en.wikipedia.org/wiki/Tape-out&quot;&gt;tape out&lt;/a&gt;.
Although we managed to fix the problem and update the design, a lot of work
needed to be re-done due to where it fell in the timeline.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I was also given a model of the digital design with post &lt;a href=&quot;https://en.wikipedia.org/wiki/Tape-out&quot;&gt;place and
route&lt;/a&gt; timing annotations within
it, and asked to re-run the simulations again.&lt;/p&gt;

    &lt;p&gt;Subtle bugs in the device simulation model made this task take much longer
than I expected.  Indeed, this process took nearly two weeks to debug both
the simulation and any design problems.  This, of course, is two weeks in
what I thought was a 2-4 week problem in the first place.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Other things were taking place as well that I was only peripherally aware
of.  There were ESD simulations being run,
&lt;a href=&quot;https://en.wikipedia.org/wiki/Design_rule_checking&quot;&gt;DRC&lt;/a&gt; checks applied
to the design, packaging options were examined and chosen, as well as solder
balls designed for the pins.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;All put together, this 2-4 week RTL design took many more months to accomplish.
Worse, much to my surprise and dismay, RTL issues were still being discovered
late in the design process.  These were things I was responsible for.  They’re
also things I’ll be considering as lessons to learn for the future, so that
I might learn from them to keep them from happening again later.&lt;/p&gt;

&lt;h2 id=&quot;is-simulation-verilog-software-or-is-it-hardware&quot;&gt;Is Simulation Verilog Software or is it Hardware?&lt;/h2&gt;

&lt;p&gt;I have a deep software background.  Indeed, I’ve been building software since
grade school.&lt;/p&gt;

&lt;p&gt;My first experience with digital design was in college, back in 1992-1993.
Other than two courses, my college work was focused on either my Computer
Science or Mathematics degrees.&lt;/p&gt;

&lt;p&gt;Since that time, most of my work from 1993-2009 was in digital signal
processing (DSP).  From my standpoint, DSP was nothing but software applied
to mathematical constructs.  It was often accomplished in embedded platforms,
although not always.  Sure, I have a Ph.D. in EE, but the focus was more on
how to process radio frequency signals than circuit design or simulation.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left; padding: 20px&quot;&gt;&lt;caption&gt;Fig 7. PI should never be a magic number!&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/asic-lsns/mpi.svg&quot; alt=&quot;&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;My point is simply this: there are rules to good software design.  One rule,
for example, is that all constants should be declared in a common area
separate from your algorithm’s implementation.  Failing to follow this rule
often leads to what are known as
“&lt;a href=&quot;https://en.wikipedia.org/wiki/Magic_number_(programming)&quot;&gt;magic numbers&lt;/a&gt;”.
Another rule is that &lt;a href=&quot;https://en.wikipedia.org/wiki/Rule_of_three_(computer_programming)&quot;&gt;you should never write the same algorithm multiple
times&lt;/a&gt;.
You should instead create functions and function calls to implement algorithms
such algorithms once, and then to reference those implementations.
This will keep you from copying a broken algorithm and then needing
to find and fix all the places where it is broken.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 8. The problem with magic numbers&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/asic-lsns/ionosphere.svg&quot; alt=&quot;&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;One of the problems I struggled with throughout the project was that the
device simulation model violated the &lt;a href=&quot;https://en.wikipedia.org/wiki/Rule_of_three_(computer_programming)&quot;&gt;rule of
three&lt;/a&gt;
extensively.  There were three implementations of every operation that the
model understood–one for each of the three protocol sections.  Each
implementation had its own means of reading from the interface.
For example, there was one implementation for reading from the normal
memory, and another implementation for reading from a special area of the
memory.  These two (there were more) implementations didn’t reuse any logic
between them in spite of the fact that the interface protocol was the same
between both.  As a result, when I went to debug the read-ID feature,
whereby the simulated device could be queried for its ID, I was forced to fix
(again) the nearly identical read logic for reading from the memory only this
time with a different read result.  This left me debugging the design again and
again and again for what were often the same bugs.  It didn’t help that the
simulation took hours to either complete or halt on a bug, nor that I would
often run the design first without generating a trace just to know if or when
the trace would need to be generated.&lt;/p&gt;

&lt;p&gt;That was one problem where good software engineering practices would help.
The simulation model really needed to be rewritten from scratch to fix these
problems throughout.  The problem only compounded due to the fact that the
project as a whole was late from the start.  We therefore committed to patching,
and re-patching, and re-patching the simulation model again and again only
to promise ourselves that we would rebuild it once the fast portion of the
design &lt;a href=&quot;https://en.wikipedia.org/wiki/Tape-out&quot;&gt;tape out&lt;/a&gt; was complete.&lt;/p&gt;

&lt;p&gt;The second place this design looked like software was on the CPU side of the
design.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: center&quot;&gt;&lt;caption&gt;Fig 9. Is test bench Verilog &quot;Software&quot;?&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/asic-lsns/tbsoftware.svg&quot; alt=&quot;&quot; width=&quot;560&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;As shown in Fig. 9, the
entire design I was working with had two interfaces.  One one end, it
interfaced with the memory device we were working with.  On the other end of
the design it interacted with an AXI3 bus that would likely be controlled by
a CPU.  A large section of the test bench consisted of the definitions of
114 software functions that would call tasks within an AXI3 Verification IP
model in order to communicate with the design.  The test bench script
itself consisted primarily of a series of Verilog references to these tasks,
what I would call function calls in software, to interact with the design.
This portion of the test bench read and operated just like software.&lt;/p&gt;

&lt;p&gt;So, why wasn’t it software?&lt;/p&gt;

&lt;p&gt;If the goal was to interact with the design as a CPU might, then why not use
a CPU to control the interaction?  Even better, if you do so, you can then
deliver to your eventual customer an example of a software device driver that
is known to work with your design.&lt;/p&gt;

&lt;p&gt;I didn’t place a CPU into our test bench for several reasons, most of the
dominated by time.  Remember, the goal was to do this quickly and I was late
the moment the design process began.  On the other hand, if I were to place a
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
in place of the external test bench, then it should be possible to do exactly
that: run software instead of Verilog to exercise the design by issuing
appropriate bus commands.  Even better, the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
might issue commands more aggressively than the AXI VIP I was using might.&lt;/p&gt;

&lt;p&gt;This is now my goal for the second phase of this project.  In order to make
this happen, the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; has &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/zipcore/rtl/core/zipcore.v&quot;&gt;now been re-made to be
bus-independent&lt;/a&gt;.  The &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/tree/zipcore&quot;&gt;new version&lt;/a&gt;
now has an &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/zipcore/rtl/core/axilfetch.v&quot;&gt;AXI-lite
prefetch&lt;/a&gt;,
and an &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/zipcore/rtl/core/axilops.v&quot;&gt;AXI-lite memory
module&lt;/a&gt;.
There’s even an &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/zipcore/rtl/core/axiicache.v&quot;&gt;AXI4 (not lite) instruction
cache&lt;/a&gt;.
These interfaces should all handle bus widths of 32-bits or greater–they’re
nicely configurable in that fashion.  Moreover, the debugging register
interface is being redesigned, and the &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/zipcore/rtl/zipaxil.v&quot;&gt;ZipCPU
wrapper&lt;/a&gt;
is getting formally verified for the first time.&lt;/p&gt;

&lt;p&gt;What about the bus?  I normally work with
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone&lt;/a&gt;, although
I’ve done a lot of &lt;a href=&quot;https://github.com/ZipCPU/wb2axip&quot;&gt;recent work with AXI4&lt;/a&gt;.
Better yet, I now have a &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axi32axi.v&quot;&gt;converter from AXI3 to
AXI4&lt;/a&gt;.  This
particular design will require an AXI bus that’s at least 64-bits wide to
avoid slowing the interface down.  That means my &lt;a href=&quot;https://github.com/ZipCPU/dbgbus/tree/master/hexbus&quot;&gt;debugging
bus&lt;/a&gt; will need to be
converted from 32-bits wide to 64-bits.  &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axilupsz.v&quot;&gt;That converter is now
complete&lt;/a&gt;.
(It’s not the high-speed AXI4 converter I wanted to build and even started
working on, but rather a basic AXI4-&lt;em&gt;lite&lt;/em&gt; bus width converter.)
Indeed, the &lt;a href=&quot;https://github.com/ZipCPU/dbgbus&quot;&gt;debugging bus
itself&lt;/a&gt; now has an AXI4 back end as well.
(I used that for my last project.) I actually have two such back ends, one
that supports burst interactions and &lt;a href=&quot;https://github.com/ZipCPU/dbgbus/blob/master/hexbus/rtl/hbexecaxi.v&quot;&gt;another that supports AXI4-lite
alone&lt;/a&gt;,
but that’s a bit off topic.&lt;/p&gt;

&lt;p&gt;On top of all of that, &lt;a href=&quot;https://github.com/ZipCPU/autofpga&quot;&gt;AutoFPGA&lt;/a&gt;
was more than happy to build and connect an AXI4 bus model for me.  I can
easily connect one (or more) &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axidma.v&quot;&gt;AXI4
DMA&lt;/a&gt;’s to this bus
for simulation purposes–which will likely come in very handy soon enough.
I can also cheaply connect an arbitrarily sized
&lt;a href=&quot;/blog/2019/05/29/demoaxi.html&quot;&gt;AXI4 based memory&lt;/a&gt; for the
CPU to run off of as well.  That makes that portion of the design easy.&lt;/p&gt;

&lt;p&gt;There’s still work to be done, however.  In particular, I’m missing two critical
components.  The first is an AXI4 downsizer that will take a request from AXI4
and convert it to an AXI4-lite request at a smaller bus width.  This component
has now been drafted, although it’s not yet passing a formal check.  (i.e.
there are known, serious, and significant bugs still within it–hence why I
haven’t yet posted my draft of the logic.) The second big item to handle is the &lt;a href=&quot;/blog/2020/01/13/reuse.html&quot;&gt;big endian versus little endian
issue&lt;/a&gt;.
As you may recall, the &lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI4 bus&lt;/a&gt; is by
nature little endian, whereas the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
is naturally a big-endian machine.  I haven’t (yet)
decided how exactly I’m going to handle the difference.  The new AXI4 bus
interfaces do have a byte-swapping hack that might be sufficient.
Alternatively, I might just create a little endian version of the tools: GCC
and binutils.  Time will tell what solution I eventually come up with.&lt;/p&gt;

&lt;h2 id=&quot;conclusions&quot;&gt;Conclusions&lt;/h2&gt;

&lt;p&gt;When moving from FPGA to ASIC design, a lot of things changed.  Sure, a lot
of things stayed the same: I was still designing with Verilog, I was still
using formal methods and simulations, it’s just that, well, it was quite
different.  This was one of the things I was hoping to experience.&lt;/p&gt;

&lt;p&gt;One of the reasons why I was so interested in learning ASIC design was to see
what kind of impact formal methods might have on the ASIC design process.  Those
who know me know that I am a strong proponent of formal methods.  I have been
ever since I started finding bugs in my designs that weren’t getting found
in simulation.  So when I started this project, I wanted to know if formal
methods would help or not, or to what extent they might help.&lt;/p&gt;

&lt;p&gt;Now that I’ve gotten this far into the project, I can safely say that none of
my formally verified logic contributed to any of the faults discovered late
in the design process.  Well, that’s not quite true, the change log indicates
two late changes in pieces that had been formally verified.  One one case, I
had a timeout counter to check for the presence of a clock and then never
wrote any properties to make sure that counter worked.  That rest of that
module was formally verified, even though that register wasn’t.  In another
example, I had built a calibration logic controller to the wrong specification.
Yes, it was verified, but it was verified that it would do the wrong thing.
As for the other faults, let’s see … one was caused by an “obvious” 34-line
design that was made in haste to alleviate a timing problem with my original
implementation.  This had a consequence that wasn’t quite thought through.
In particular, it required a clock from a discontinuous ….  Another fault
was caused by incorrectly setting a reset value–that fault caused a startup
glitch, but was otherwise innocuous.&lt;/p&gt;

&lt;p&gt;Another place the formal tools really helped me was within the slow logic side
of the design.  There, I used formal tools extensively as I first studied
and then rewrote several critical design components.  Indeed, I found it very
valuable to know, for example, that I would only ever request the number of
bytes to be transferred that were appropriate, or that various subtle timing
delays were implemented as desired.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/asic-lsns/my-own-hurt.svg&quot; alt=&quot;&quot; width=&quot;560&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;I can also safely say that I vastly underestimated the cost for this work.
This has left me considering Psalm 15, and the man who “sweareth to his own
hurt and changeth not.”  Having agreed to one price for the project, I have
not adjusted it–even though the project has taken far longer than I was
expecting.  Perhaps I’ll do a better job estimating the number of hours
the next time as a result of completing this project today.  In the mean time,
let’s just say that I’ve covered the cost of this cost overrun with an internal
research and development (IRAD) fund.&lt;/p&gt;
&lt;hr /&gt;&lt;p&gt;&lt;em&gt;For my thoughts are not your thoughts, neither are your ways my ways, saith the LORD.  For as the heavens are higher than the earth, so are my ways higher than your ways, and my thoughts than your thoughts.  (Is 55:8-9)&lt;/em&gt;</description>
        <pubDate>Sat, 06 Mar 2021 00:00:00 -0500</pubDate>
        <link>https://zipcpu.com/blog/2021/03/06/asic-lsns.html</link>
        <guid isPermaLink="true">https://zipcpu.com/blog/2021/03/06/asic-lsns.html</guid>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>The FPGA designer who didn't get the job</title>
        <description>&lt;p&gt;Looking for a job?  Perhaps you are fresh out of a college degree in digital
design and looking for a digital design job.  Perhaps you are mid-way through
college with a little bit of RTL experience and just looking for an internship.
Perhaps you are a single individual fresh off of your last contract, looking
for a new one.  Either way, you are looking for something new.&lt;/p&gt;

&lt;p&gt;If so, read on.  I’d like to share a bit of my perspective from the other side,
from the side of trying to find someone with your skills.&lt;/p&gt;

&lt;p&gt;You see, my time is currently oversubscribed.  This is one of the problems
with success–there’s never enough of you to go around.  The problem is,
I’m just a one man shop.  I’ve avoided needing to learn labor and tax laws
by not hiring.  While I’m not opposed to expanding &lt;a href=&quot;/about/gisselquist-technology.html&quot;&gt;Gisselquist
Technology&lt;/a&gt;,
I’m just not in a position to do so today.&lt;/p&gt;

&lt;p&gt;Recognizing this, one of my clients has been trying to find and hire talent.
He’d like to find others that can do the work that I do.  Indeed, good talent
can be hard to come by.  The problem this client has is that he doesn’t have
the ability to do digital logic design, nor does he know how to recognize it 
when he sees it.  Therefore, he has asked me more than once to review the
people he finds to know if they are worth hiring.&lt;/p&gt;

&lt;p&gt;Recently, he found an Indian man, fresh from college, who was offering his
services as a “digital design engineer”.  So, my client asked me, can I offer
him a project in “digital design” that we could give to him whereby he might
demonstrate his ability?  It should be something simple, but something that
will help us know whether to hire him for more significant work or not.&lt;/p&gt;

&lt;p&gt;I should point out, this isn’t the first time I’ve been asked that question.
In the past, I’ve used my &lt;a href=&quot;/tutorial/formal.html&quot;&gt;formal verification
courseware&lt;/a&gt; to interview students.
I’d give them one of the problems from the course, and then see how well they
would solve the problem.  If they weren’t prepared to do that, then I’d teach
a lesson or two to see how well they pick up the material.  Those that pick
up the material quickly are good material for hiring, those that don’t will get
a gentle, “No, thank you”.&lt;/p&gt;

&lt;p&gt;That takes about 2-4 hrs of my time, however.&lt;/p&gt;

&lt;p&gt;This time we tried another approach.  This time I offered this budding digital
designer a project to demonstrate his ability with.  I suggested that he might
try building the projects outlined in the (draft) first four lessons of my
&lt;a href=&quot;/tutorial/intermediate.html&quot;&gt;intermediate design tutorial&lt;/a&gt;.
My thought was this: the
&lt;a href=&quot;/tutorial/intermediate.html&quot;&gt;tutorial&lt;/a&gt; outlines a project,
tells you how to build it, simulate it, and verify it.  To spare you the time
of typing, the tutorial also comes with broken examples that need to be
fixed.  I reason that, if you can fix the bugs within those designs, then
you must know something about digital design.&lt;/p&gt;

&lt;p&gt;Yes, perhaps this was a selfish proposition.  I haven’t had the time of day
to work on &lt;a href=&quot;/tutorial/intermediate.html&quot;&gt;the tutorial&lt;/a&gt;
recently, and these first four lessons are just about done save that the
logic within them needs to be tested on actual hardware.  They make for a
nice, well defined problem set to give to a new person to whom I’m not sure
if I want to continue working with or not (yet).&lt;/p&gt;

&lt;p&gt;Consider it from my perspective: managing takes time.  Defining a project for
someone to work on takes time.  Real life problems don’t come ready built,
ready defined, ready packaged for someone to just pick up and solve.  Further,
would I really trust someone new with a real life problem before they had
proved themselves?  This project, on the other hand, contained problems that
were already well defined, and so it looked like an ideal task.  On top of
that, my client was offering to pay this individual to do the work.&lt;/p&gt;

&lt;p&gt;It sounds like a good proposition for any newbie: You can get paid for doing
some work immediately.  If you do well, more work will follow.  If you don’t,
then you can still walk away with both what you’ve learned as well as the
cash you were given to do the problem.  That sounds to me like a good deal, no?&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/hiring/not-verification.svg&quot; alt=&quot;&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;The response from this individual rather shocked me.  He said, sorry, but I’m
looking for a design job, not a verification job.&lt;/p&gt;

&lt;p&gt;I bit my tongue on my first response.&lt;/p&gt;

&lt;p&gt;My next response would’ve been a simple, “Thanks, but no thanks.”  It’s not
that wouldn’t be interested in a well qualified digital design engineer.  It’s
just that I’m not going to recommend anyone who demonstrates an attitude
problem before his first day on the job.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left; padding: 20px&quot;&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/hiring/attitude-problem.svg&quot; alt=&quot;&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;My problem, however, was that this applicant wasn’t really mine to reject,
and so decided I should soften my words and encourage him to rethink his
position.&lt;/p&gt;

&lt;p&gt;Perhaps he didn’t realize that he was being offered to prove his design ability
by verifying and then fixing a broken design?&lt;/p&gt;

&lt;p&gt;The following is copied from my response to him, with a few minor edits
along the way.&lt;/p&gt;

&lt;h2 id=&quot;digital-design-is-cost-driven&quot;&gt;Digital design is cost driven&lt;/h2&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/hiring/most-expensive.svg&quot; alt=&quot;&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Every industry is driven by costs.  In the world of digital logic design, the
most expensive thing you can do is to debug something in hardware.  When working
with FPGAs, it can take 5-15 minutes to generate a build, and another 5 minutes
to run a test (on a good day–some designs require 2hrs to build …).  Once
you run that test, &lt;a href=&quot;/blog/2017/06/08/simple-scope.html&quot;&gt;you might only get to see between 15 and 100 signals and
those for only about a thousand clock ticks or
so&lt;/a&gt;.  That is, you might
find the bug if you were lucky and just happened to be both looking for it
and looking in the right place.  If those signals don’t reveal your bug, you’ll
have to iterate and repeat–assuming the problem is repeatable.  The process is
very expensive and painful.  You can spend &lt;a href=&quot;/blog/2017/09/14/even-i-get-stuck.html&quot;&gt;months on a project stuck not
knowing what’s wrong with
it&lt;/a&gt;.  I call this
problem &lt;a href=&quot;/blog/2017/05/19/fpga-hell.html&quot;&gt;FPGA Hell&lt;/a&gt;.  Sadly,
people get stuck in &lt;a href=&quot;/blog/2017/05/19/fpga-hell.html&quot;&gt;FPGA
Hell&lt;/a&gt; quite often.&lt;/p&gt;

&lt;p&gt;The problem is worse in &lt;a href=&quot;/blog/2017/10/13/fpga-v-asic.html&quot;&gt;ASIC
design&lt;/a&gt;.  (Yes, I’m now
involved in that too …)  If you have to debug an ASIC, you’ll have already
wasted several millions of dollars to get there.  It’s a bad place to be.
Sometimes I’ve called this ASIC Hell.  Unlike &lt;a href=&quot;/blog/2017/05/19/fpga-hell.html&quot;&gt;FPGA
Hell&lt;/a&gt;,
ASIC Hell is much hotter by at least two orders of magnitude.&lt;/p&gt;

&lt;p&gt;To make this task easier, the digital design industry uses
&lt;a href=&quot;/blog/2018/08/22/what-is-simulation.html&quot;&gt;simulations&lt;/a&gt;.
Lots of dollars and hours are spent on simulating designs.  On a good day, a
simulation will reveal problems.  In many of the cases I’ve been dealing with
recently, a simulation will take 20 minutes to run and generate 200GB of data
which then need to be sorted through.  Unlike running in hardware, simulations
are able to provide you with &lt;em&gt;every&lt;/em&gt; signal taking place within the design.
However, that leads to a large data handling requirement that can make
debugging simulation results a real challenge.&lt;/p&gt;

&lt;p&gt;Simulations are great — when they find bugs.&lt;/p&gt;

&lt;p&gt;One of the realities ingrained in the history and culture of &lt;a href=&quot;/about/gisselquist-technology.html&quot;&gt;Gisselquist
Technology&lt;/a&gt; is that
simulations rarely find the critical bugs.  Hence, for all the work you put
into your simulation, the simulation isn’t complete enough to find all your
bugs.  Many of the studies we’ve done have revealed bugs that pass the
simulation tests that &lt;a href=&quot;/blog/2017/06/02/design-process.html&quot;&gt;still end up needing to be tested in
hardware&lt;/a&gt;.
Worse, I’ve had several designs &lt;em&gt;pass&lt;/em&gt; hardware testing only to be found to
have latent bugs remaining within them at a much later time.&lt;/p&gt;

&lt;p&gt;It’s not just me either.  Xilinx is one of a small number of industry leaders
in FPGA design techniques, and yet I’ve been &lt;a href=&quot;/blog/2020/01/01/2019-in-review.html&quot;&gt;tracking bugs in Xilinx’s IP for
years&lt;/a&gt;.  Some of
these bugs have existed since 2016 and remain even now in Vivado 2020.2.
&lt;a href=&quot;/blog/2020/01/01/2019-in-review.html&quot;&gt;Others&lt;/a&gt; have
passed Xilinx’s “best practices” quality assurance testing.  They were
checked via the best simulation tests, and yet the bugs still made it through.
I found them in short order via the use of formal methods while testing out
SymbiYosys.  (Why Xilinx?  Because I use their hardware a lot.  A &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/doc/orconf2019.pdf&quot;&gt;quick look
at Intel&lt;/a&gt;
reveals some of the same types of bugs …)  Indeed, &lt;a href=&quot;/formal/2019/09/06/axi-story.html&quot;&gt;AXI interface
bugs are unfortunately quite common in the
FPGA industry&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;about-myself&quot;&gt;About myself&lt;/h2&gt;

&lt;p&gt;But let me now back up and tell you &lt;a href=&quot;/about/gisselquist-technology.html&quot;&gt;some about
myself&lt;/a&gt;, because that
might help you understand my own perspective when it comes to looking at job
applicants.  I learned engineering as an officer serving in the US Air Force.
Towards the end of my time in the service, I picked up Verilog.  That was
roughly in 2008-2009, when I built two Verilog projects.  Like any Air Force
officer, I was also an engineering manager responsible for managing and
reviewing many projects.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left; padding: 20px&quot;&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/hiring/verify-my-own.svg&quot; alt=&quot;&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;I then left the service and formed &lt;a href=&quot;/about/gisselquist-technology.html&quot;&gt;Gisselquist Technology,
LLC,&lt;/a&gt; in 2013.
My initial business efforts weren’t well focused, so it wasn’t until 2015
when I finally decided that I wanted to focus on digital design and then
started building several projects to use as a portfolio.  As a
microbusiness of one trying to find work, I had no choice but to verify my
own designs.  There was no separation between being a design engineer and
being a verification engineer within Gisselquist Technology.  The two
tasks were just different aspects of the same job.&lt;/p&gt;

&lt;p&gt;This continued for about two years, bringing me to 2017.  That year, I was
still trying to find business and so I had started a blog.  During this early
time of my blog, I was asked to try out formal methods.  Seriously?  I
wasn’t interested.  I wanted to do digital design, not play with new fangled
toys.  However, &lt;a href=&quot;https://blueletterbible.org/kjv/pro/19/22&quot;&gt;I needed business&lt;/a&gt;
and testing out a formal verification tool might make a good blog article.
So … &lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;I tested out a new formal verification tool known as SymbiYosys.  Much
to my dismay, it quickly found bugs in a design
I had used for years.&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I was shocked.  No one wants to hire a digital designer who produces buggy
code.  No one.  The costs of finding and fixing bugs are just too expensive
to deal with.  So, I reasoned, why would anyone be interested in a digital
designer, if &lt;a href=&quot;https://github.com/ZipCPU/&quot;&gt;his design portfolio&lt;/a&gt; was filled
with bugs?  What if someone randomly sampled my work and quickly found bugs
within it?  I would quickly lose that potential customer–they’d look
for someone else who could actually do the job.  So &lt;a href=&quot;/blog/2018/01/22/formal-progress.html&quot;&gt;I started using formal
methods on all of the designs in my
portfolio&lt;/a&gt;–from the
smallest to the greatest.  Sadly, using the formal tools, I found bugs in every
single design.  I even &lt;a href=&quot;/blog/2018/04/02/formal-cpu-bugs.html&quot;&gt;found bugs in my flagship design, the
ZipCPU&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;That’s when I started getting seriously involved in formal verification.  The
more bugs I found, the more I liked formal methods, and the more I got used to
using formal methods and the better I became–both in using formal methods
and in digital design.&lt;/p&gt;

&lt;h2 id=&quot;the-zipcpu-tutorial&quot;&gt;The ZipCPU Tutorial&lt;/h2&gt;

&lt;p&gt;There’s another part to this story.  When I got started in 2015, I used
various online forums as a means of trying to become known.  I spent a lot
of time on the &lt;a href=&quot;https://opencores.org/forum&quot;&gt;OpenCores forum&lt;/a&gt; as well as
&lt;a href=&quot;https://forum.digilentinc.com/discover&quot;&gt;Digilent’s forums&lt;/a&gt;.  This placed me in
a position to listen to a lot of students who were trying to accomplish
final design projects.  I quickly learned that &lt;a href=&quot;/blog/2017/06/10/lost-college-student.html&quot;&gt;these students were being taught
the language to express a design and a scripted simulation, but not the tools
they would need to actually debug their
designs&lt;/a&gt;.  As a
rule, those students I came across were routinely struggling with bugs in
hardware that they didn’t know how to debug.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 1. Learning approach: start with all three in parallel&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/course-outline.svg&quot; alt=&quot;&quot; width=&quot;480&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;So, once I got started with formal methods and discovered how easy it was to
debug a design using them, I wrote &lt;a href=&quot;/tutorial&quot;&gt;a tutorial&lt;/a&gt;
that new students could use to learn Verilog.  This
&lt;a href=&quot;/tutorial&quot;&gt;tutorial&lt;/a&gt;
started from the ground up teaching both Verilog, &lt;a href=&quot;/blog/2017/06/21/looking-at-verilator.html&quot;&gt;Verilator based
simulation&lt;/a&gt;, and
formal methods.  This &lt;a href=&quot;/tutorial&quot;&gt;tutorial&lt;/a&gt;
has now been well received by many.&lt;/p&gt;

&lt;p&gt;I’ve since tried putting an
&lt;a href=&quot;/tutorial/intermediate.html&quot;&gt;intermediate tutorial&lt;/a&gt; together.&lt;/p&gt;

&lt;p&gt;I haven’t gotten nearly as far with it, as you may have noticed.  There’s
clearly a demand for it it’s just that …&lt;/p&gt;

&lt;p&gt;I’m now over booked with too many projects on my plate.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left; padding: 20px&quot;&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/hiring/formal-key.svg&quot; alt=&quot;&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;The key to finding work was, among other things, formally verifying all of my
designs.  No, I don’t use a separate verification team.  I don’t have the cash
to afford one.  In this world of small business, digital design engineers need
to do their own verification.  It’s not just small businesses either–I know
of big businesses as well that have been forced to cut their verification teams
in order to cut costs.  It’s in this environment that I’ve been doing digital
design for hire.  My customers depend upon my work being formally verified and
they trust me to do it.  I also try to maintain a reputation for quality.  That
quality comes at the cost of formally verifying all of my work.&lt;/p&gt;

&lt;p&gt;That should provide you with a sufficient technical background to know why the
ability to verify your own logic is valuable.  I wouldn’t be &lt;a href=&quot;/blog/2020/11/26/zipcpu-biz.html&quot;&gt;where I am
today&lt;/a&gt; without that ability.&lt;/p&gt;

&lt;h2 id=&quot;prima-donnas&quot;&gt;Prima Donnas&lt;/h2&gt;

&lt;p&gt;There’s one more thing you need to know.  Back in my time working as a Lt. Col.
for the US Air Force, I quickly learned that some of the hardest people to
manage are technically trained individuals.  They like to believe they know
what’s best.  They know it so well, they tend to do what they think is right
over and above what they are told.  They’ll be the one’s telling the boss how
the boss needs to do his business.  If you don’t like it, they’ll threaten to
walk out on you.  We had a name for people like this.  We called them
“&lt;a href=&quot;https://www.youtube.com/watch?v=HUy2lL_HCJY&quot;&gt;Prima Donnas&lt;/a&gt;”.&lt;/p&gt;

&lt;p&gt;Prima Donnas are really hard to work with.  They are very hard to manage as
well.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/hiring/devious-genius.svg&quot; alt=&quot;&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;I’ve struggled with my share of Prima Donnas over the years–both with those
who have worked for me and those who have worked with me on my team.  If you
give these individuals a task, they’ll often work on something else, and then
they’ll expect you to value their other work better than the paid work that’s
actually bringing the money in.  (But … who then does the work that’s being
paid for?)  Handling them is a difficult management task, and one that’s hard
for the manager to win.  This makes choosing people that much more challenging.
It’s also why you put that much more effort into finding the best people–not
just those who are technically skilled, but also those willing to work on
whatever project they are given.&lt;/p&gt;

&lt;h2 id=&quot;the-bottom-line&quot;&gt;The Bottom line&lt;/h2&gt;

&lt;p&gt;To put it simply, here are my bottom lines:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;If you aren’t interested in learning and using formal methods, then my
recommendation to anyone hiring will be that they should find someone
else.   You would be missing out, however, on some of the opportunities that
have come up to work on next generation digital designs: new CPUs, new
memory controllers, imaging systems, next generation
&lt;a href=&quot;https://en.wikipedia.org/wiki/Sonar&quot;&gt;SONAR&lt;/a&gt; and
&lt;a href=&quot;https://en.wikipedia.org/wiki/Radar&quot;&gt;Radar&lt;/a&gt; systems and more.&lt;/p&gt;

    &lt;p&gt;No, you don’t have to take &lt;a href=&quot;/tutorial/formal.html&quot;&gt;my course in formal
methods&lt;/a&gt;, nor am I trying to
convince you to sign up.  Indeed, I might turn you away if you contact me
today.  You can, however, check out the course material.  &lt;a href=&quot;/tutorial/formal.html&quot;&gt;The course
slides are posted&lt;/a&gt;, as are the
exercises.  I’ve also been known to answer questions individuals have over
e-mail–regardless of whether or not they’ve taken my course.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;If you are a design engineer who can’t humble himself enough to verify a
broken design that’s been given to you, then I foresee that you will also
be difficult to manage.  It would be easier to work with someone less
talented than someone with more talent who isn’t willing to do what he’s
asked.  Again, my recommendation to any hiring manager would be that they
look for someone else.&lt;/p&gt;

    &lt;p&gt;Right now, it’s a buyers market.  There are lots of new individuals graduating
each year with a degree in Electrical Engineering who have design experience.&lt;/p&gt;

    &lt;p&gt;Finding a new graduate is easy.&lt;/p&gt;

    &lt;p&gt;Finding someone who has both talent and character, that’s a much harder task.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Take some time.  Think about it.&lt;/p&gt;

&lt;p&gt;Yours,&lt;/p&gt;

&lt;p&gt;Dan&lt;/p&gt;

&lt;hr /&gt;&lt;p&gt;&lt;em&gt;Seest thou a man diligent in his business? he shall stand before kings; he shall not stand before mean men.  (Prov 22:29)&lt;/em&gt;</description>
        <pubDate>Fri, 29 Jan 2021 00:00:00 -0500</pubDate>
        <link>https://zipcpu.com/blog/2021/01/29/hiring.html</link>
        <guid isPermaLink="true">https://zipcpu.com/blog/2021/01/29/hiring.html</guid>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>Ultimate Logic</title>
        <description>&lt;p&gt;For many, 2020 was a depressing year.&lt;/p&gt;

&lt;p&gt;When my church was closed for a period of time by our governor, however, I
found some valuable things to hold onto.  I discovered a &lt;a href=&quot;https://www.youtube.com/watch?v=n2ANUKSF2BE&quot;&gt;theory of
catastrophic plate tectonics&lt;/a&gt;,
and learned that it explained many of the puzzles prevalent among those who
believe in an ancient earth.  I discovered &lt;a href=&quot;https://www.youtube.com/watch?v=fMJRsd8SrhU&quot;&gt;Jay Smith’s presentation on the
origins of Islam&lt;/a&gt;.  I also
discovered &lt;a href=&quot;https://www.youtube.com/watch?v=aQ_UxcV-xcM&quot;&gt;this video of Dr. Lisle presenting his “Ultimate Proof
of Creation,”&lt;/a&gt;
and found it so fascinating that I then bought &lt;a href=&quot;https://www.amazon.com/Ultimate-Proof-Creation-Jason-Lisle/dp/0890515689&quot;&gt;his
book&lt;/a&gt;.
In &lt;a href=&quot;https://www.amazon.com/Ultimate-Proof-Creation-Jason-Lisle/dp/0890515689&quot;&gt;his book&lt;/a&gt;,
he presents the idea of ultimate logic.  I found this idea so
interesting and fascinating, I wanted to share it here.&lt;/p&gt;

&lt;p&gt;For those with a Christian background, much of Lisle’s argument follows
from Prov 1:7,&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The fear of the LORD is the beginning of knowledge: but fools despise
wisdom and instruction.
(&lt;a href=&quot;https://www.blueletterbible.org/kjv/pro/1/7&quot;&gt;Prov 1:7&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Contrary to popular belief, knowledge does not come from an education.  It
doesn’t come from the best schools, the right newspapers, or the right social
media feeds.  The “fear of the LORD” is the beginning of knowledge.  (I also
found &lt;a href=&quot;https://www.youtube.com/watch?v=x23w6UPpmSY&quot;&gt;this video of Derek Prince presenting what the fear of the LORD is in
the first place&lt;/a&gt; during the COVID
lockdowns, but I digress.)  For those who would argue that science forms the
basis for knowledge, I watched what science did this year with certain studies
of COVID and hydroxychloroquine.  These observations confirmed that science
itself is founded upon honesty.  Science cannot prove the necessity of honesty,
and so science cannot be the beginning of knowledge.&lt;/p&gt;

&lt;p&gt;For those who are not Christians, the rest of the discussion focuses more on
the idea of and development of ultimate logic in the first place.&lt;/p&gt;

&lt;h2 id=&quot;a-quick-background&quot;&gt;A Quick Background&lt;/h2&gt;

&lt;p&gt;Let’s start out by defining some terms used when describing logic.  In logic,
premises are presented and used to draw a conclusion.  The progression from
premises to conclusion is called an argument.  A picture might help, so let’s
consider Fig. 1.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 1. The form of an argument&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/ultimate/logic-form.svg&quot; alt=&quot;&quot; width=&quot;560&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;When working with &lt;a href=&quot;https://symbiyosys.readthedocs.io/en/latest/&quot;&gt;SymbiYosys&lt;/a&gt;,
the assumptions within your logic file form the premises and the various
assertions form the logical conclusions we wish to draw.  The solver then works
from the premises to either prove the conclusion, or to come up with an example
that proves the conclusion invalid.&lt;/p&gt;

&lt;p&gt;The entire process is important for understanding this idea of ultimate logic,
but to get there I need to first point out that this background discussion
isn’t really complete since we haven’t listed all of the assumptions required
for such a proof.&lt;/p&gt;

&lt;h2 id=&quot;digging-deeper-into-the-assumptions&quot;&gt;Digging deeper into the assumptions&lt;/h2&gt;

&lt;p&gt;Did you notice any of the missing assumptions?  Here are some assumptions that
we typically miss when building a formal proof of hardware correctness:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;The RTL logic within the design itself constitutes a set of assumptions in
addition to the explicit ones.  This makes sense, but it’s not normally
something we think about.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;We also assume that &lt;a href=&quot;https://github.com/YosysHQ/yosys&quot;&gt;Yosys&lt;/a&gt; accurately
translates our logic and formal statements without error into something the
solver can handle.  This is a great assumption, &lt;a href=&quot;https://github.com/YosysHQ/SymbiYosys/issues/111&quot;&gt;until
it isn’t true&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;We assume the formal solver works.  That is, when the formal solver proves
something, no counter examples exist.  &lt;em&gt;None.&lt;/em&gt;&lt;/p&gt;

    &lt;p&gt;A corollary assumption that when the solver declares a proof invalid that it
truly is invalid isn’t typically as critical.  In that case, the solver is
required to provide an example proving that the proof is invalid and
such examples are easily dealt with.  The result, on a good day, will be
a bug report in solver that will then get fixed.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Here’s a tricky underlying assumption as well: A valid proof today of the
logic within our design will remain a valid proof until the assumptions
change.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;While Lisle focuses on this last assumption, he goes deeper as well.  How do
we know that the assumptions of any given proof are valid in the first place?&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left; padding: 20px&quot;&gt;&lt;caption&gt;Fig 2. Assumptions get verified when you verify the second module&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/ultimate/twin-module.svg&quot; alt=&quot;&quot; width=&quot;420&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;In digital design, many assumptions can be validated in a straightforward
fashion as shown in Fig. 2.  First, when any two components interact, any
properties of the inputs to the one will be assumed and the outputs will
be asserted.  Then, when verifying the module it interacts with, that module
will have its inputs assumed and its outputs asserted.  By swapping the
assumptions on the inputs of the one to be assertions on the outputs of the
other, the assumptions can be proven.  This ultimately forms a proof of
our assumptions.&lt;/p&gt;

&lt;p&gt;As a caution, let me remind you to verify only one module at a time.  As we’ve
discovered earlier, &lt;a href=&quot;/formal/2018/12/18/skynet.html&quot;&gt;if you make assumptions about things within a module you
might void the proof&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;That deals with some of the formal assumptions within logic design, but what
about the others?&lt;/p&gt;

&lt;h2 id=&quot;modus-ponens-and-the-invalid-proof-of-the-ultimate&quot;&gt;Modus Ponens and the Invalid Proof of the Ultimate&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Modus_ponens&quot;&gt;&lt;em&gt;Modus Ponens&lt;/em&gt;&lt;/a&gt; is a Latin name
for a specific argument that, in my mind, helps explain the need for an
ultimate premise.  The argument is fairly basic: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;P|-&amp;gt;Q&lt;/code&gt; (P implies Q), &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;P&lt;/code&gt;
(P is true), therefore &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Q&lt;/code&gt; (our conclusion) must be true as well.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 3. Modus Ponens&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/ultimate/modus-ponens.svg&quot; alt=&quot;&quot; width=&quot;320&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;A common, but related, fallacy is one where &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;P|-&amp;gt;Q&lt;/code&gt; and then &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Q&lt;/code&gt;, and so &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;P&lt;/code&gt;
is concluded.  This fallacy is called &lt;a href=&quot;https://en.wikipedia.org/wiki/Affirming_the_consequent&quot;&gt;&lt;em&gt;Affirming the
Consequent&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 4. Affirming the Consequent&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/ultimate/scientific-proof.svg&quot; alt=&quot;&quot; width=&quot;320&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;How common is this fallacy?  Well, if you think about it, is this not the
entire basis of the scientific method?  The scientist considers the evidence
before him and makes a theory about the world.  He then forms an experiment
that will have a particular outcome if his theory is true.  In formal form,
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;P&lt;/code&gt; would be the theory and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Q&lt;/code&gt; a favorable outcome from the experiment.  If
the experiment comes out as he predicts, this &lt;em&gt;does not&lt;/em&gt; confirm his
hypothesis.  &lt;em&gt;It cannot.&lt;/em&gt;  At best, all the scientific method can do is reject
hypotheses which do not match the evidence.  It cannot confirm or prove a
hypothesis because it matches the evidence because to do so would be the
fallacy of &lt;a href=&quot;https://en.wikipedia.org/wiki/Affirming_the_consequent&quot;&gt;&lt;em&gt;affirming the
consequent&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Let’s back up to &lt;em&gt;Modus Ponens&lt;/em&gt;, however, and ask ourselves, how do we know that
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;P&lt;/code&gt; is true in the first place?  Perhaps because a more fundamental premise
is true, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;P0&lt;/code&gt;, and because &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;P0&lt;/code&gt; is true therefore we know that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;P&lt;/code&gt; is true.
But what about &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;P0&lt;/code&gt;?  How shall we know that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;P0&lt;/code&gt; is true?  Because it depends
upon &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;P1&lt;/code&gt;?&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 5. Modus Ponens to Absurdity&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/ultimate/modus-absurdem.svg&quot; alt=&quot;&quot; width=&quot;320&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;We could repeat this logic and repeat this logic and repeat this logic and
the result would be that we would never truly prove anything.  There &lt;em&gt;must&lt;/em&gt;
be a first premise.  This we shall call the &lt;em&gt;Ultimate&lt;/em&gt; premise.&lt;/p&gt;

&lt;h2 id=&quot;the-ultimate-premise&quot;&gt;The Ultimate Premise&lt;/h2&gt;

&lt;p&gt;Lisle then asks, what about the rules of logic themselves?  How shall logic
itself be proven?  Why should we accept that &lt;em&gt;Modus Ponens&lt;/em&gt; is a valid argument?
Likewise, if &lt;em&gt;Modus Ponens&lt;/em&gt; is valid today, will it remain valid again
tomorrow?  If so, why?&lt;/p&gt;

&lt;p&gt;In math, I learned to handle such arguments using axioms.  An axiom is
something that isn’t otherwise proven.  We just accept them as true.  For
example, two axioms I remember include 1) there exists a zero and 2) every
integer has a successor.  The problem with just accepting axioms as true is
that doing so is
&lt;a href=&quot;https://en.wikipedia.org/wiki/Arbitrariness&quot;&gt;arbitrary&lt;/a&gt;.
In other words, why should I accept your axioms as
true and not someone else’s?&lt;/p&gt;

&lt;p&gt;As a good example of this, how often have you heard a statement such as,
“My [insert favorite politician] is honest, but [the opposition party] is
not”?  Another good example would be that parallel lines never cross.
Such statements are made as axioms with no argument offered as their
basis.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 6. Circular logic is known as Begging the question&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/ultimate/circular.svg&quot; alt=&quot;&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Such logic is &lt;a href=&quot;https://en.wikipedia.org/wiki/Arbitrariness&quot;&gt;&lt;em&gt;arbitrary&lt;/em&gt;&lt;/a&gt;,
and &lt;a href=&quot;https://www.blueletterbible.org/kjv/job/38/1&quot;&gt;therefore proves
nothing&lt;/a&gt;.  How then shall the
truth of competing axioms be weighed against each other to know which are
in fact true?&lt;/p&gt;

&lt;p&gt;A better definition of an axiom would be a &lt;a href=&quot;https://www.archives.gov/founding-docs/declaration-transcript&quot;&gt;“self-evident”
truth&lt;/a&gt;.  This is
&lt;a href=&quot;https://www.merriam-webster.com/dictionary/axiom&quot;&gt;Mirriam-Websters’s&lt;/a&gt;
second meaning of the word, and perhaps the best one for this context.&lt;/p&gt;

&lt;p&gt;Unfortunately, declaring something to be true because it is true is a known
fallacy called “&lt;a href=&quot;https://en.wikipedia.org/wiki/Begging_the_question&quot;&gt;begging the
question&lt;/a&gt;”, or
&lt;a href=&quot;https://en.wikipedia.org/wiki/Circular_reasoning&quot;&gt;circular reasoning&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;proving-the-ultimate-premise&quot;&gt;Proving the Ultimate Premise&lt;/h2&gt;

&lt;p&gt;Ultimate proofs, Lisle argues, have the form of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;A&lt;/code&gt; therefore &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;A&lt;/code&gt; yet
&lt;em&gt;without being either circular or fallatious.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;As an example of this, Lisle presents an existence proof for whether or not
such ultimate arguments could be even exist.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Premise: Rules of logic apply&lt;/li&gt;
  &lt;li&gt;Conclusion: Rules of logic apply&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This proof is not circular because to argue otherwise would render you
unable to draw any conclusion at all, leading to complete foolishness.
Indeed, you &lt;em&gt;cannot&lt;/em&gt; argue against the rules of logic without first using
the rules of logic to make your argument.  This therefore is a proof of the
rules of logic based upon those same rules yet without being circular.&lt;/p&gt;

&lt;p&gt;How shall we know, however, that the rules of logic that apply today shall
apply again tomorrow in the same fashion?  Here again, the proof follows
from an ultimate premise.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;God is true and unchanging. (The ultimate premise, drawn from the Bible
(See &lt;a href=&quot;https://www.blueletterbible.org/kjv/mal/3/6&quot;&gt;Mal 3:6&lt;/a&gt;
and &lt;a href=&quot;https://www.blueletterbible.org/kjv/jhn/3/33&quot;&gt;John 3:33&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Rules of logic follow from God’s nature.&lt;/li&gt;
  &lt;li&gt;Therefore, the rules of logic will remain unchanged again tomorrow.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Worldviews that are not founded upon God as their ultimate premise cannot make
this argument.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Lisle makes several other claims as well which cannot be explained by a secular
world view.  For example, if there are no ultimate moral standards then by what
standard would you judge my conduct right or wrong?  If you cannot judge
the conduct of another as either right or wrong, then upon what basis is
justice founded?  What basis would you then have for requiring one action or
another of someone else?  On the other hand, if there are absolute standards
of right and wrong, then what is their basis?&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.amazon.com/Ultimate-Proof-Creation-Jason-Lisle/dp/0890515689&quot;&gt;His book&lt;/a&gt;,
however, is really about the ultimate proof of &lt;em&gt;creation&lt;/em&gt;: the conclusion
that &lt;a href=&quot;https://www.blueletterbible.org/kjv/exo/20/11&quot;&gt;God made the world in six days and rested on the
seventh&lt;/a&gt;, and that He did
so roughly six thousand years ago.  Any science attempting to prove otherwise,
Lisle argues, must be &lt;a href=&quot;https://www.blueletterbible.org/kjv/2pe/3/4&quot;&gt;based upon the premise that the natural processes we
observe today have continued unchanging from the past to the
present&lt;/a&gt;.  This conclusion,
however, is &lt;a href=&quot;https://en.wikipedia.org/wiki/Arbitrariness&quot;&gt;arbitrary&lt;/a&gt;
and without basis.  Just because we see nothing but
natural processes today doesn’t mean that supernatural processes never existed.
A separate conclusion, made on the basis of recorded observations throughout
human history, is also available to us.  According to recorded history, God
did in fact create the world as He said He did, and further that &lt;a href=&quot;https://www.blueletterbible.org/kjv/jhn/3/33&quot;&gt;His record
is true and accurate&lt;/a&gt;.  This
record includes &lt;a href=&quot;/blog/2018/04/01/resurrection-day.html&quot;&gt;supernatural events which cannot be refuted
today&lt;/a&gt; apart from
resorting to
&lt;a href=&quot;https://en.wikipedia.org/wiki/Arbitrariness&quot;&gt;arbitrary&lt;/a&gt; or even
&lt;a href=&quot;https://en.wikipedia.org/wiki/Circular_reasoning&quot;&gt;circular logic&lt;/a&gt;.  (i.e., the
supernatural cannot happen therefore it didn’t.  But why couldn’t it have taken
place?  Because.)&lt;/p&gt;
&lt;hr /&gt;&lt;p&gt;&lt;em&gt;The fear of the LORD is the beginning of knowledge: but fools despise wisdom and instruction.  (Prov 1:7)&lt;/em&gt;</description>
        <pubDate>Sat, 09 Jan 2021 00:00:00 -0500</pubDate>
        <link>https://zipcpu.com/formal/2021/01/09/ultimate.html</link>
        <guid isPermaLink="true">https://zipcpu.com/formal/2021/01/09/ultimate.html</guid>
        
        
        <category>formal</category>
        
      </item>
    
      <item>
        <title>Quiz #14: Two nearly identical frequencies</title>
        <description>&lt;!-- answer: &quot;2020/10/10/fv-answer14.html&quot; --&gt;

&lt;p&gt;Many designs require crossing registers from one clock domain to another.
Making sure clock domain crossings work requires a special type of proof,
one where at least two incoming clocks are assumed.  Examples of these types
of proofs include &lt;a href=&quot;/formal/2018/04/12/areset.html&quot;&gt;asynchronous
resets&lt;/a&gt;, &lt;a href=&quot;/blog/2020/10/03/tfrvalue.html&quot;&gt;word
synchronizers&lt;/a&gt;, &lt;a href=&quot;https://github.com/ZipCPU/wbspi/blob/master/rtl/rawslave.v&quot;&gt;slave SPI
devices&lt;/a&gt;,
&lt;a href=&quot;/formal/2018/05/31/clkswitch.html&quot;&gt;clock switches&lt;/a&gt; and
&lt;a href=&quot;/blog/2018/07/06/afifo.html&quot;&gt;asynchronous FIFOs&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The logic above attempts to assume the presence of two nearly identical clocks.
It’s not quite sufficient, however, and as written it may cause proofs with
those two clocks to fail.  Can you identify any of the missing assumptions?&lt;/p&gt;

&lt;p&gt;Hint: think about what it would take to get an assertion with a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$past(X)&lt;/code&gt;
construct referencing one of these two clocks to pass.&lt;/p&gt;
</description>
        <pubDate>Thu, 24 Dec 2020 00:00:00 -0500</pubDate>
        <link>https://zipcpu.com/quiz/2020/12/24/quiz14.html</link>
        <guid isPermaLink="true">https://zipcpu.com/quiz/2020/12/24/quiz14.html</guid>
        
        
        <category>quiz</category>
        
      </item>
    
      <item>
        <title>Formally verifying register handling</title>
        <description>&lt;p&gt;Symbiotic EDA has a fascinating product called &lt;a href=&quot;https://github.com/YosysHQ/mcy&quot;&gt;MCY: Mutation coverage with
Yosys&lt;/a&gt;.  The idea behind
&lt;a href=&quot;https://github.com/YosysHQ/mcy&quot;&gt;MCY&lt;/a&gt; is that it will subtly change
(mutate) your design to then see if your test bench can catch the changes.
The goal is to measure, not how good your design is, but rather how complete
your test bench is.&lt;/p&gt;

&lt;p&gt;I’ve now tried &lt;a href=&quot;https://github.com/YosysHQ/mcy&quot;&gt;MCY&lt;/a&gt;
on a couple of my designs.  I’ve tried it on the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;,
and I’ve tried it on the &lt;a href=&quot;/blog/2020/03/08/easyaxil.html&quot;&gt;Easy AXI-lite slave we built together on the
blog&lt;/a&gt;.
In both cases, it worked as advertised, yet left me a little bit unsettled
by what my test benches weren’t checking for.&lt;/p&gt;

&lt;p&gt;In the case of the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;, I already
knew that my test bench was flawed: I’d long since abandoned it for serious
testing &lt;a href=&quot;/blog/2018/04/02/formal-cpu-bugs.html&quot;&gt;in favor of formal
methods&lt;/a&gt;.  Sure enough,
&lt;a href=&quot;https://github.com/YosysHQ/mcy&quot;&gt;MCY&lt;/a&gt; found holes in my
test bench–primarily in the fact that just running a program on the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
from simulation never checked the debugging interface.
Even the test bench that did check the debugging interface never checked that
registers within the CPU could be read or written to via the same debugging
interface.&lt;/p&gt;

&lt;p&gt;Shame on me.  That should’ve been a part of my test bench.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;/blog/2020/03/08/easyaxil.html&quot;&gt;Easy AXI-lite slave made for another valuable
test&lt;/a&gt;.  In this case, I
had built a very quick &lt;a href=&quot;/blog/2020/04/08/axitb.html&quot;&gt;Verilator-based simulation test
bench&lt;/a&gt; for it to test it
against.  &lt;a href=&quot;https://github.com/YosysHQ/mcy&quot;&gt;MCY&lt;/a&gt; gave this test bench a
coverage number of only 60% or so, meaning that my &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/mcy/easyaxil/easyaxil_tb.cpp&quot;&gt;Verilator based test
bench&lt;/a&gt;
could only find 60% of the mutations.&lt;/p&gt;

&lt;p&gt;What did I miss?&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;My simulation never checked whether or not the byte enables were handled
properly.  This follows from the fact that my test bench only ever checked
reading from and writing to entire words.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The simulation never checked whether or not the design could handle
&lt;a href=&quot;https://en.wikipedia.org/wiki/Back_pressure&quot;&gt;back-pressure&lt;/a&gt; on the
&lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;AXI bus&lt;/a&gt;.&lt;/p&gt;

    &lt;p&gt;This is a sad reality of simulations.  Why check for proper
&lt;a href=&quot;https://en.wikipedia.org/wiki/Back_pressure&quot;&gt;back-pressure&lt;/a&gt; handling
if you know, whenever you issue a request, that you’ll want to get a response
from that request?&lt;/p&gt;

    &lt;p&gt;I find roughly 1-2 help requests per week on &lt;a href=&quot;https://forums.xilinx.com&quot;&gt;Xilinx’s
forums&lt;/a&gt; are due to individuals using one of
&lt;a href=&quot;/formal/2019/09/06/axi-story.html&quot;&gt;Xilinx’s broken AXI demonstration
cores&lt;/a&gt;.
As you may recall, these cores were primarily broken because they didn’t
properly handle &lt;a href=&quot;https://en.wikipedia.org/wiki/Back_pressure&quot;&gt;back-pressure&lt;/a&gt;.
Because simulations never checked for this, and &lt;a href=&quot;https://www.xilinx.com/products/intellectual-property/axi-vip.html&quot;&gt;their AXI
VIP&lt;/a&gt; never
generated &lt;a href=&quot;https://en.wikipedia.org/wiki/Back_pressure&quot;&gt;back-pressure&lt;/a&gt;,
users are often left with a false sense of security that their design works
when the opposite is the case.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When I reconfigured &lt;a href=&quot;https://github.com/YosysHQ/mcy&quot;&gt;MCY&lt;/a&gt; to check the
&lt;em&gt;formal&lt;/em&gt; proof of my &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/easyaxil.v&quot;&gt;Easy AXI-lite design
(EASYAXIL)&lt;/a&gt;,
coverage then went up to 79%.  Wait, only 79%?  Isn’t
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal verification&lt;/a&gt;
supposed to be comprehensive?  Isn’t it supposed to be exhaustive?  What
happened?&lt;/p&gt;

&lt;p&gt;What happened was that I had set up my formal proof to check for bus protocol
violations.  I never checked whether or not the values returned by the bus were
the right ones.  In other words, of the &lt;a href=&quot;/formal/2020/06/12/four-keys.html&quot;&gt;four checks required for any formal
sign off&lt;/a&gt;, I had only
checked three.&lt;/p&gt;

&lt;p&gt;Since then, I’ve had many opportunities to build simple bus slaves, and this
lesson has left me knowing that my simulations and formal proofs were often
incomplete.  This has left me feeling exposed and vulnerable, and so today
I’d like to correct that lack.  Let’s take a look, therefore, at a simple
property set we can add to our design to make certain that any registers within
it behave as desired.&lt;/p&gt;

&lt;p&gt;First, however, lets back up and look at what I was able to learn from
&lt;a href=&quot;https://github.com/YosysHQ/mcy&quot;&gt;MCY&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;mcy-results&quot;&gt;MCY Results&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/YosysHQ/mcy&quot;&gt;MCY&lt;/a&gt; requires a bit of setup to get
it up and running.  Sadly, that setup is often different from one simulator
to the next.  It’s complicated enough that I’m not going to go into all the
details here.  If you wan to see how I did it, feel free to check out &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/tree/master/bench/mcy/easyaxil&quot;&gt;my setup
here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;One of my frustrations with this setup is that I was unable to use my design
as it was written.  Normally, I build a design and write formal properties into
the design at the bottom of the file.  Why?  Because passing induction
requires making assertions about the state of the design across register states.
This leads to a white box testing approach, rather than the more traditional
black box testing approach.  Keeping the properties together with the design
seems to facilitate that for me.&lt;/p&gt;

&lt;p&gt;The problem with leaving properties at the bottom of the design is that the
mutation engine might mutate the properties, and not just the logic.  To make
this work, the two must be separated.  This forced me to create a &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/mcy/easyaxil/easyprops.sv&quot;&gt;separate
property file to encapsulate the properties required to verify my
design&lt;/a&gt;,
and &lt;a href=&quot;http://www.asic-world.com/systemverilog/assertions22.html&quot;&gt;then to &lt;em&gt;bind&lt;/em&gt; it to the
design&lt;/a&gt;.
Access to the SVA &lt;em&gt;bind&lt;/em&gt; capability currently requires the commercial version
of SymbiYosys.&lt;/p&gt;

&lt;p&gt;Still, once set up, I could initialize
&lt;a href=&quot;https://github.com/YosysHQ/mcy&quot;&gt;MCY&lt;/a&gt; and apply it to my design.
Here, for example, are the results from applying my Verilator-based
simulation test alone.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;% mcy init
% mcy run -j 6
# ... Lots of outputs ...
Database contains 2000 cached results.
Database contains 979 cached &quot;FAIL&quot; results for &quot;test_eq&quot;.
Database contains 21 cached &quot;PASS&quot; results for &quot;test_eq&quot;.
Database contains 634 cached &quot;FAIL&quot; results for &quot;test_sim&quot;.
Database contains 366 cached &quot;PASS&quot; results for &quot;test_sim&quot;.
Tagged 627 mutations as &quot;COVERED&quot;.
Tagged 7 mutations as &quot;EQGAP&quot;.
Tagged 14 mutations as &quot;NOCHANGE&quot;.
Tagged 352 mutations as &quot;UNCOVERED&quot;.
Found 7 mutations exposing a formal equivalence gap!
Coverage: 64.04%&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This tells us that, without formal verification, of the 1000 mutations
that were applied to this design, 634 were were caught by the simulation check.
That’s a good thing, though I would like this number to be higher. However, it
might be that a change may have been made to the design that doesn’t affect
any of its outputs.  In order to check for this possibility, I applied an
equivalence check to the two designs.  If this check finds the mutated design
equivalent to the non-mutated design, after searching through (in this case)
15 time steps then the difference might be irrelevant–so we’ll call it
“NOCHANGE”.  Of all of the mutations, there were only 21 of 1000
times where the equivalence check couldn’t find any difference in performance
as a result of the mutation.  Of those 21 times, the simulation caught the
mutation 7 of those times–showing that our equivalence check couldn’t quite
catch all the changes.&lt;/p&gt;

&lt;p&gt;In general, though, &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/mcy/easyaxil/easyaxil_tb.cpp&quot;&gt;my simulation test
bench&lt;/a&gt;
only caught 64% of all of the mutations.  That’s not a great number.
That means 36% of the time a bug might get past my simulation.&lt;/p&gt;

&lt;p&gt;Let’s see if we can improve upon this number by adding formal verification
into the mix.  Here you can see the end of the output below.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;Database contains 2359 cached results.
Database contains 981 cached &quot;FAIL&quot; results for &quot;test_eq&quot;.
Database contains 19 cached &quot;PASS&quot; results for &quot;test_eq&quot;.
Database contains 143 cached &quot;FAIL&quot; results for &quot;test_fm&quot;.
Database contains 216 cached &quot;PASS&quot; results for &quot;test_fm&quot;.
Database contains 641 cached &quot;FAIL&quot; results for &quot;test_sim&quot;.
Database contains 359 cached &quot;PASS&quot; results for &quot;test_sim&quot;.
Tagged 777 mutations as &quot;COVERED&quot;.
Tagged 7 mutations as &quot;EQGAP&quot;.
Tagged 143 mutations as &quot;FMONLY&quot;.
Tagged 12 mutations as &quot;NOCHANGE&quot;.
Tagged 204 mutations as &quot;UNCOVERED&quot;.
Found 7 mutations exposing a formal equivalence gap!
Coverage: 79.20%&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In this case, we applied our formal check to only those mutations that
didn’t pass the simulation test.  Here we find that 641 mutations of the total
1000 were caught by simulation, and of those 359 tests that were missed, another
143 were caught by formal verification &lt;a href=&quot;/blog/2020/03/08/easyaxil.html&quot;&gt;using the properties we developed
before&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The problem is that this number should be much higher.  Formal methods
&lt;em&gt;should’ve&lt;/em&gt; caught everything.  They didn’t, however, because we never checked
the return data from the design (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;S_AXI_RDATA&lt;/code&gt;)–we only checked that there
was an output value, not that it was the right one.&lt;/p&gt;

&lt;p&gt;For that, we’re going to add register checking to our test.  This time, our
coverage goes up to 99.9%.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;Database contains 2386 cached results.
Database contains 981 cached &quot;FAIL&quot; results for &quot;test_eq&quot;.
Database contains 19 cached &quot;PASS&quot; results for &quot;test_eq&quot;.
Database contains 373 cached &quot;FAIL&quot; results for &quot;test_fm&quot;.
Database contains 13 cached &quot;PASS&quot; results for &quot;test_fm&quot;.
Database contains 614 cached &quot;FAIL&quot; results for &quot;test_sim&quot;.
Database contains 386 cached &quot;PASS&quot; results for &quot;test_sim&quot;.
Tagged 980 mutations as &quot;COVERED&quot;.
Tagged 7 mutations as &quot;EQGAP&quot;.
Tagged 373 mutations as &quot;FMONLY&quot;.
Tagged 12 mutations as &quot;NOCHANGE&quot;.
Tagged 1 mutations as &quot;UNCOVERED&quot;.
Found 7 mutations exposing a formal equivalence gap!
Coverage: 99.90%&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;That means that 99.9% of all mutations were (now) properly found by either
our simulation check, or the updated formal properties for
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/easyaxil.v&quot;&gt;this core&lt;/a&gt;.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right; padding: 20px&quot;&gt;&lt;caption&gt;Fig 1. Verification Coverage&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/regcheck/rcheck-pie.png&quot; alt=&quot;&quot; width=&quot;357&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Let’s plot out these numbers in Fig. 1, and then go back them to see if we
can get a feel for what’s going on.  First, of the 1000 mutation checks, 614
of them, or 61.4%, were caught by simulation alone.
(This is really backwards, as my first step to verifying a core is &lt;a href=&quot;/blog/2020/04/01/design-flow.html&quot;&gt;typically a
formal verification check&lt;/a&gt;,
not simulation check, but running simulation first was how I was shown to
set up &lt;a href=&quot;https://github.com/YosysHQ/mcy&quot;&gt;MCY&lt;/a&gt;.)
Of the 386 times where simulation didn’t find the mutation, a
&lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;formal property check&lt;/a&gt;
was applied to the design.  In
373 of those cases, the formal property check found the mutation leaving
13 cases were neither formal nor simulation were able to find the mutation.
Twelve of those cases involved a design that didn’t fundamentally change,
whereas the last one was a protocol valid design that was just … different
from the original.  The difference?  The mutated design took an extra clock
to return the result.  Since it was valid, from a protocol standpoint, it
passed the formal check.  Since the mutated design wasn’t externally equivalent
to the original, &lt;a href=&quot;https://github.com/YosysHQ/mcy&quot;&gt;MCY&lt;/a&gt; flagged this as
an “UNCOVERED” mutation above.&lt;/p&gt;

&lt;p&gt;That explains the blue, “Simulation only”, region and the green “No change”
region in Fig. 1 above.  However, the register checking and AXI property
regions–while adding up to 373, are only approximately supported by the data
above.  Sadly, I violated several principles of data handling to plot the
differences between these two sets, so
let me at least explain what I did: The second test showed that
641/1000 mutations were found via simulation, and an additional 143/1000 were
found via simulation alone.  If we accept that a rough 143 mutations chosen
in the third test therefore would’ve been found using formal methods with
&lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;AXI properties&lt;/a&gt;
alone–you might come up
with 143/1000 or 14.3% additional coverage via using formal properties.
Sadly, this isn’t truly an apples to apples comparison, since the second and
third runs of &lt;a href=&quot;https://github.com/YosysHQ/mcy&quot;&gt;MCY&lt;/a&gt; were based upon two
separate sets of mutations and I’m now comparing statistics drawn from one
sample set to those of another.  Therefore, let me only say that these
percentages are somewhat approximate–since they will change from run to
run as the mutation engine randomly picks different design mutations.&lt;/p&gt;

&lt;p&gt;So for the rest of this article, I’d like to look at what it took to get this
design from a formal proof that only verified 79% of its functionality
(run #2) to one that gets to the 99.9% shown in Fig. 1.  The difference was a
&lt;a href=&quot;/formal/2020/06/12/four-keys.html&quot;&gt;contract check&lt;/a&gt;
that I used to verify the various internal register values.&lt;/p&gt;

&lt;h2 id=&quot;register-checking&quot;&gt;Register Checking&lt;/h2&gt;

&lt;p&gt;Let me start by addressing the question of “what is a register”, followed
by my approach to register checking.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left; padding: 20px&quot;&gt;&lt;caption&gt;Fig 2. An AXI-Lite GPIO peripheral, with a register for output control&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/regcheck/axil-gpio-reg.svg&quot; alt=&quot;&quot; width=&quot;420&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Many designs have multiple registers within them that can be controlled from an
external bus by writing to or reading from some address in the design’s &lt;a href=&quot;https://en.wikipedia.org/wiki/Memory_map&quot;&gt;memory
map&lt;/a&gt;.  A classic example would be a
&lt;a href=&quot;/zipcpu/2019/02/09/cpu-blinky.html&quot;&gt;GPIO device&lt;/a&gt;, such
as the one shown in Fig. 2.  Such a device might simply control the outgoing
voltage on a series of output wires.  If you set a particular bit in a &lt;a href=&quot;/zipcpu/2019/02/09/cpu-blinky.html&quot;&gt;GPIO
register&lt;/a&gt;
to a ‘1’, the wire controlled by that register might emit a positive voltage
on the external output pin, whereas if the bit were set to ‘0’ the wire is
held at ground.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right; padding: 20px&quot;&gt;&lt;caption&gt;Fig 3. An AXI DMA has several control registers&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/regcheck/axidma.svg&quot; alt=&quot;&quot; width=&quot;420&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Register uses go well beyond simple
&lt;a href=&quot;/zipcpu/2019/02/09/cpu-blinky.html&quot;&gt;GPIO peripherals&lt;/a&gt;.
Indeed, most if not all of the peripherals and controllers I’ve built have
some form of register control to them.  In the case of &lt;a href=&quot;https://github.com/ZipCPU/wb2axip&quot;&gt;my DMA
engines&lt;/a&gt;, shown in Fig. 3, the transfer
length, source and destination addresses are all configured via a
bus-accessible register.  For &lt;a href=&quot;https://github.com/ZipCPU/wbuart32&quot;&gt;my UART&lt;/a&gt;,
the baud rate can be configured via the bus.  For &lt;a href=&quot;/zipcpu/2018/04/17/ziptimer.html&quot;&gt;the countdown
timer&lt;/a&gt;?  The time duration.
&lt;a href=&quot;/zipcpu/2019/04/02/icontrol.html&quot;&gt;The interrupt controller&lt;/a&gt;?
Which interrupts are enabled and which are cleared.  The &lt;a href=&quot;/blog/2019/03/27/qflexpress.html&quot;&gt;QSPI flash
controller&lt;/a&gt;?  Which mode
the controller is currently operating within.  How about the &lt;a href=&quot;/blog/2017/07/08/getting-started-with-wbscope.html&quot;&gt;Wishbone
scope&lt;/a&gt;?
The delay from trigger to the end of the capture.  The list goes on.  Indeed,
it might seem that every RTL controller I’ve built has some amount of registers
within it.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left; padding: 20px&quot;&gt;&lt;caption&gt;Fig 4. Xilinx's IPIF&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/regcheck/ipif.svg&quot; alt=&quot;&quot; width=&quot;420&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Today, we’re going to focus on modifying the &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/easyaxil.v&quot;&gt;EASYAXIL
design&lt;/a&gt; to add
formal register checking to the formal properties checking this design.  This
way, if any future modification breaks the design later on, the properties will
be able to quickly catch the change.&lt;/p&gt;

&lt;p&gt;Here’s how we’ll do it: we’ll create a &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/faxil_register.v&quot;&gt;formal register checking module&lt;/a&gt;,
and then we’ll attach &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/faxil_register.v&quot;&gt;this module&lt;/a&gt;
to each of the four registers internal to this design to make certain that
those registers can each be both read from and written to.&lt;/p&gt;

&lt;p&gt;Let’s look through how we might build &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/faxil_register.v&quot;&gt;such a
module&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If we want to verify that our register gets written to or read from on
any bus access to a given address, then the first step will be to configure
our check for the right address.  That means we’ll need to configure this
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/faxil_register.v&quot;&gt;formal register property set&lt;/a&gt;
with an address, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ADDR&lt;/code&gt;, that is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AW&lt;/code&gt; bits wide,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;faxil_register&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;#(&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;parameter&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;parameter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;ADDR&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;and for a bus of some data width, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DW&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;parameter&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;DW&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Not all registers can be fully written to.  For example, if you write to the
configuration register in my &lt;a href=&quot;/blog/2019/03/27/qflexpress.html&quot;&gt;QSPI
controller&lt;/a&gt;,
then the bottom eight bits might get sent out the QSPI port, while bits &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[11:8]&lt;/code&gt;
can be read and written like a (normal) register.
The &lt;a href=&quot;/blog/2017/07/08/getting-started-with-wbscope.html&quot;&gt;Wishbone
scope&lt;/a&gt;
is similar: the bottom 20 bits control the &lt;a href=&quot;/blog/2017/06/08/simple-scope.html&quot;&gt;holdoff from the
trigger&lt;/a&gt;, whereas the top
4 bits are status bits returned by the design.  To
know which bits should be checked for a generic read/write capability, we’ll
need a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MASK&lt;/code&gt; parameter.  Under this scheme, for every &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MASK[BIT]&lt;/code&gt; that is
set, the bit numbered &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BIT&lt;/code&gt; will be checked to see if it can be read and
written from the bus.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;parameter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;MASK&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;As a final parameter, some designs require asynchronous resets.  While I
don’t normally use them, some contexts require them.  Therefore we’ll make an
option for asynchronous reset handling, and come back to this again later.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;parameter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;OPT_ASYNC_RESET&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1'b0&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;That’s the first step, knowing how to configure the &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/faxil_register.v&quot;&gt;property
checker&lt;/a&gt;
for our register.&lt;/p&gt;

&lt;p&gt;The next step will be to keep a local copy of the register within the
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/faxil_register.v&quot;&gt;formal register property set&lt;/a&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;kt&quot;&gt;reg&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;f_reg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now, any time the register we are checking is written to, we’ll keep track of
it’s value in our local copy, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;f_reg&lt;/code&gt;.  To do this, I’ve slightly simplified the
interface slightly from the AXI-lite protocol.  Specifically, I’ve created an
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;S_AXIL_AWW&lt;/code&gt; port with a (rough) equivalence to
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;S_AXIL_AWVALID &amp;amp;&amp;amp; S_AXIL_AWREADY&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;S_AXIL_WVALID &amp;amp;&amp;amp; S_AXIL_WREADY&lt;/code&gt;–since
this is our rule for writing to the register in the first place.  If
therefore &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;S_AXIL_AWW&lt;/code&gt; is true and the requested address matches the
address of our register, then we’ll update the various bytes in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;f_reg&lt;/code&gt;
as requested by the bus.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;localparam&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;AXILLSB&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;clog2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXIL_AWW&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXIL_AWADDR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AXILLSB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ADDR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AXILLSB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ik&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ik&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ik&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ik&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXIL_WSTRB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ik&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;f_reg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ik&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXIL_WDATA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ik&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If we want any hope of passing
&lt;a href=&quot;/blog/2018/03/10/induction-exercise.html&quot;&gt;induction&lt;/a&gt;, then
we’ll want to check this register when nothing is happening.  To make that
happen, let’s have the design pass what it thinks the value of the register
is in an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;i_register&lt;/code&gt; input port.  We can then check this value against &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;f_reg&lt;/code&gt;
on all clock cycles.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARESETN&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARESETN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_reg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_register&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MASK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This is a rather convoluted way of saying that all of the bits of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MASK&lt;/code&gt;
should match &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;f_reg&lt;/code&gt;, and that we can ignore any other bits.  Just to convince
ourselves that this works, if any two bits are identical then their exclusive
OR will be zero.  Anything that’s not zero represents a difference between
these two values.  When we then AND the result with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MASK&lt;/code&gt;, we check for
only those bit-differences that we actually care about.&lt;/p&gt;

&lt;p&gt;In an attempt to be complete, I also added return strobe checking to this
register coding check.  In short sum, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BVALID&lt;/code&gt; should be set following any
write, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RVALID&lt;/code&gt; should be set following any read request.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;c1&quot;&gt;// BVALID must be set following any write to this register&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_past_valid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARESETN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OPT_ASYNC_RESET&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARESETN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXIL_BVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;($&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXIL_AWW&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXIL_AWADDR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AXILLSB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ADDR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AXILLSB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXIL_BVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

	&lt;span class=&quot;c1&quot;&gt;// RVALID must be set following any read from this register&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_past_valid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARESETN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OPT_ASYNC_RESET&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARESETN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXIL_RVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;($&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXIL_AR&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXIL_ARADDR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AXILLSB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ADDR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AXILLSB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXIL_RVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The actual check is complicated by the fact that we’re not really checking for
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;!BVALID&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;!RVALID&lt;/code&gt;.  Sure, we’ve got a reset check–but that’s really
just to make sure the reset doesn’t interfere with the check that follows.
The reality is that we can’t do a complete check of either &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BVALID&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RVALID&lt;/code&gt;
here since we don’t know if or when some other register will be accessed.  It
might be that we are checking the register located at
address &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;8&lt;/code&gt; here, but &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BVALID&lt;/code&gt; gets set due to a write to register found at
address &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;4&lt;/code&gt;.  This only works because we’ve already done a &lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;full protocol
check&lt;/a&gt;–we’re just
checking register values now.&lt;/p&gt;

&lt;p&gt;Our last register check will be on the return value.  If there’s ever a
request to read from our register, denoted here by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;S_AXIL_AR&lt;/code&gt; which is
equivalent to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;S_AXIL_ARVALID &amp;amp;&amp;amp; S_AXIL_ARREADY&lt;/code&gt; (or it’s equivalent coming
from the &lt;a href=&quot;/blog/2019/05/22/skidbuffer.html&quot;&gt;skidbuffer&lt;/a&gt;),
then we’ll check the result against the register that’s supposed to be returned.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARESETN&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARESETN&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXIL_AR&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXIL_ARADDR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AXILLSB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ADDR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AXILLSB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXIL_RDATA&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_register&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Or, at least, that’s the basics of what we want to do: 1) maintain a copy
of the register, 2) adjust that copy on any write, 3) check our copy against
the copy within the design, and 4) verify that any read requests return
that value.&lt;/p&gt;

&lt;p&gt;There’s one sticking point that haven’t yet addressed: how shall this register
be initialized?  My current approach has been to copy to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;i_register&lt;/code&gt;
value following any reset.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;generate&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OPT_ASYNC_RESET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ASYNC_DATA&lt;/span&gt;

		&lt;span class=&quot;c1&quot;&gt;// Asynchronous reset handling option: Assume i_register is&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// properly set on any asynchronous reset.&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;negedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ARESETN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARESETN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;f_reg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_register&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXIL_AWW&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXIL_AWADDR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AXILLSB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ADDR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AXILLSB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ik&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ik&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ik&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ik&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXIL_WSTRB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ik&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;f_reg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ik&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXIL_WDATA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ik&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SYNC_DATA&lt;/span&gt;
		&lt;span class=&quot;kt&quot;&gt;reg&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;last_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;last_reset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1'b1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;last_reset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARESETN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;last_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;// Copy the register following any reset&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;f_reg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_register&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXIL_AWW&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXIL_AWADDR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AXILLSB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ADDR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AXILLSB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ik&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ik&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ik&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ik&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXIL_WSTRB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ik&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;f_reg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ik&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXIL_WDATA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ik&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;endgenerate&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In hindsight, a better solution might be to create a default parameter, and
then &lt;em&gt;verify&lt;/em&gt; that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;i_register&lt;/code&gt; actually has the right value–rather than
just trusting its reset value.  For this reason, I might come back and adjust
this logic to make that happen at a later time.  For now, let’s try it out and
see how it works.&lt;/p&gt;

&lt;h2 id=&quot;updating-the-easy-axi-lite-demonstration-core&quot;&gt;Updating the Easy AXI-lite demonstration core&lt;/h2&gt;

&lt;p&gt;The last step is to incorporate this register check into the formal property
section of our &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/easyaxil.v&quot;&gt;EASYAXIL
core&lt;/a&gt;.  This is
the easy step–we just instantiate it like any other module–once per each of
our four registers.  Here’s what the first one looks like.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;n&quot;&gt;faxil_register&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;#(&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C_AXI_ADDR_WIDTH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C_AXI_DATA_WIDTH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ADDR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fr0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARESETN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARESETN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXIL_AWW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axil_write_ready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXIL_AWADDR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;awskd_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ADDRLSB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mb&quot;&gt;1'b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXIL_WDATA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wskd_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXIL_WSTRB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wskd_strb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXIL_BVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_BVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXIL_AR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axil_read_ready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXIL_ARADDR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arskd_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ADDRLSB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mb&quot;&gt;1'b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXIL_RVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_RVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXIL_RDATA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_RDATA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_register&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Since the other four are (nearly) identical, I’ll skip repeating myself here
for brevity.&lt;/p&gt;

&lt;p&gt;Before going on, let me remind you of the definitions of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;axil_write_ready&lt;/code&gt;
and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;axil_read_ready&lt;/code&gt; signals.  These are two signals found within the
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/easyaxil.v&quot;&gt;EASYAXIL core&lt;/a&gt;.
They’re used as the signal, internal to the design, that writes (or reads)
are to happen on a given clock cycle.  Their actual definition depends upon
whether or not the design is using
&lt;a href=&quot;/blog/2019/05/22/skidbuffer.html&quot;&gt;skidbuffers&lt;/a&gt; or not.&lt;/p&gt;

&lt;p&gt;The bottom line is that it’s easy to add this check into our design, and as
a result we now go from 79% to 99% verification coverage.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;So, let me ask, would I ever use this in practice?&lt;/p&gt;

&lt;p&gt;Well, when I first saw the mutation coverage gap in this design, I somewhat
scoffed at it.  Of course my design “worked”.  I could look it over and be
certain it worked.  Why would I need to add in more properties?&lt;/p&gt;

&lt;p&gt;Since that time, I’ve started building simulation-based register connectivity
checks when running the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; with
any new design.  These checks are run from software (i.e. C/C++), to make
certain that all registers might be reachable and configurable in simulation.
This is actually a really good test to run, since I am aware of at least one
ASIC project where the designer forgot to connect the byte-enable lines between
the CPU and the bus and this would catch that bug.  The check also catches
mis-matched address bugs, etc.  It’s a really good test to run, and so I’m
starting to add it to my bring up code for any new design.&lt;/p&gt;

&lt;p&gt;Then I started building a register set for an ASIC project I’m working on.
That design doesn’t (yet) have a &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
to run software tests from.  (That’s why I’m building an AXI interface for the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;–but that’s another topic.)
Unlike the &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/easyaxil.v&quot;&gt;EASYAXIL
design&lt;/a&gt;, this ASIC
design was much more complicated.  Some register bits needed setting, others
had other controls, and … well, it was just complicated enough that I
needed a little more assurance I was doing it right–hence the reason
for the little module above.  Did I find bugs in my early drafts?  You bet!
Have I found bugs since when updating the design?  Yes.  Indeed, more than
one update to that design introduced bugs that were then found and fixed by
this register checking approach.&lt;/p&gt;

&lt;p&gt;Just as an example, without this check I might’ve allowed the following logic
through:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;negedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ARESETN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARESETN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;val_one&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;4'h0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;val_two&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;6'h0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;val_thr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;3'h0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axil_write_ready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_WSTR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;val_one&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_WDATA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_WSTR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;			&lt;span class=&quot;c1&quot;&gt;// &amp;lt;-- Bug #1&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;val_two&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_WDATA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;13&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_WSTR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;val_thr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_WDATA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// &amp;lt;-- Bug #2&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;These two bugs are representative of the sorts of bugs I found using these
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/faxil_register.v&quot;&gt;register value properties&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The bottom line is that, while this might seem like a simple test, it’s an
important one in order to complete the proof of a slave register set.&lt;/p&gt;

&lt;hr /&gt;&lt;p&gt;&lt;em&gt;Judgment also will I lay to the line, and righteousness to the plummet: and the hail shall sweep away the refuge of lies, and the waters shall overflow the hiding place. (Is 28:17)&lt;/em&gt;</description>
        <pubDate>Sat, 19 Dec 2020 00:00:00 -0500</pubDate>
        <link>https://zipcpu.com/blog/2020/12/19/axil-register-checking.html</link>
        <guid isPermaLink="true">https://zipcpu.com/blog/2020/12/19/axil-register-checking.html</guid>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>Is it possible to make a living as a solo digital design engineer?</title>
        <description>&lt;p&gt;A reoccurring question on the &lt;a href=&quot;https://reddit.com/r/FPGA&quot;&gt;Reddit FPGA forum&lt;/a&gt; is
whether or not it is possible to make a living as a solo digital design
engineer.  By “solo”, I mean as an independent consultant–a business of one
if you will.  Such a business is not really big enough to qualify as a “small
business”, it’s really more of a &lt;em&gt;micro&lt;/em&gt; business.  By digital design engineer,
I mean one who builds digital designs for either FPGAs or ASICs.  My answer has
always been yes.  To explain why, let me share some of my story.&lt;/p&gt;

&lt;p&gt;First, I started out knowing nothing about business.  I am a twenty year
veteran of the U.S. Air Force.  By the time I left, I was working for the
Air Force as an electrical engineer in support of large acquisitions.  Other
than working on the purchasing end, I had absolutely no experience running
a business.  No one in my family runs their own business either.&lt;/p&gt;

&lt;p&gt;That’s not really a good place to start from, but it’s where I started.&lt;/p&gt;

&lt;p&gt;I left the Air Force with a pension.  When I left in 2013, I was bringing in
a reliable sum of money every month to provide for my rather large family.
The pay of a Lt. Col. is well known and well published.  The benefits that
go with it are significant as well, amounting to another 40% on top of the
basic pay.  Upon retirement, those benefits go away leaving you with 50%
of your base pay, or &lt;a href=&quot;https://militarypay.defense.gov/Benefits/Survivor-Benefit-Program/Overview/&quot;&gt;44% if you elect for the Survivor Benefit Plan
(SBP)&lt;/a&gt;
to provide a retirement pension for your wife after you die.&lt;/p&gt;

&lt;p&gt;Yes, I am a father.  I am married to my college sweetheart, Tracy, who
has been a &lt;a href=&quot;https://www.blueletterbible.org/kjv/tit/2/5&quot;&gt;stay-at-home mom&lt;/a&gt; 
since 1999.  Together, we have eight children, and she has homeschooled all of
them.  My youngest was born just two months before I left the Air Force, and
today I now have two in college and one who has just started out as a
mechanical engineer working for a large defense company.&lt;/p&gt;

&lt;p&gt;My point here is simply that, as a father, I have a lot of needs to provide
for.&lt;/p&gt;

&lt;p&gt;For me the question was never whether or not it would be possible to make a
living as a solo digital design engineer, but rather whether or not it would
be possible to earn enough of a living to support my large family.&lt;/p&gt;

&lt;p&gt;For those who have asked, though, let me share some of the business half of the
&lt;a href=&quot;/about/gisselquist-technology.html&quot;&gt;Gisselquist Technology&lt;/a&gt;
story behind the ZipCPU blog today.  Perhaps it might encourage someone else
who wishes to start out on their own.&lt;/p&gt;

&lt;h2 id=&quot;step-1-be-prepared-for-a-spiritual-battle&quot;&gt;Step 1: Be prepared for a spiritual battle&lt;/h2&gt;

&lt;p&gt;Let me start out by saying that running your own business is a spiritual
battle.  It’s not for the faint of heart.  If you want to do it, be prepared
to be tested at every turn.  To make matters worse, you will often find your
individual self worth tied tightly to whether or not you are able to provide
for your family.  That’s not an easy place to be in.&lt;/p&gt;

&lt;p&gt;My own personal business journey began in &lt;a href=&quot;https://www.blueletterbible.org/kjv/1co/7/21-23&quot;&gt;1st Corinthians
7:21&lt;/a&gt;,&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Art thou called being a servant? care not for it: but if thou mayest be made
free, use it rather.  For he that is called in the Lord, being a servant, is
the Lord’s freeman: likewise also he that is called, being free, is Christ’s
servant.  Ye are bought with a price; be not ye the servants of men.
(&lt;a href=&quot;https://www.blueletterbible.org/kjv/1co/7/21-23&quot;&gt;1 Cor 7:21-23&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I had spent over twenty years the servant of someone else.  That someone else
told me what I was allowed and not allowed to say about my faith, lest somehow
I might exert an undue command influence over a subordinate.  Now, if I
was going to serve anyone in business, I wanted that someone to be my Lord
and saviour Jesus–the same Jesus who is the Christ.&lt;/p&gt;

&lt;p&gt;I’m sure we’ve all had supervisors who have had less than the perfect character
in the past.  Some yell and scream.  Some are hard task masters.  Some curse
and swear.  Some are critical of everything you do.  Some don’t care what you
do, perhaps even going so far as to act as if you don’t exist.  Others are
kind enough to teach you and work with you.  Let me ask, now, where do you
believe the perfect supervisor would fall on that list?  Having known
Jesus for decades, I knew He was the perfect supervisor.  That was who
I wanted to work for.  Being in business for myself, therefore, meant working
for the same Jesus who had saved my soul.&lt;/p&gt;

&lt;p&gt;Choosing to step out on faith like this means there will be a test to follow.
There always is.  You will fall until you and the Lord are convinced that you
will trust Him first above anything else.  For me, I fell until my life
savings was gone, and then I fell even farther before business took up–but
that part comes later.&lt;/p&gt;

&lt;p&gt;Before leaving this section, I’d like to point out a couple passages that were
also key parts of my business understanding.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;The borrower is servant to the lender.&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;The rich ruleth over the poor, and the borrower is servant to the lender.
(&lt;a href=&quot;https://www.blueletterbible.org/kjv/pro/22/7&quot;&gt;Prov 22:7&lt;/a&gt;)&lt;/p&gt;
    &lt;/blockquote&gt;

    &lt;p&gt;My goal in business was to serve Jesus from the very beginning.  I wasn’t
going to be able to do that if I borrowed any money.  Therefore, I chose
early on not to go into any more debt as a part of business.  I say &lt;em&gt;any
more&lt;/em&gt; because, like many, I’m still paying for the house I live in.  That
loan is too large to pay off either today or tomorrow.  Instead, I promised
not to gain any more debt.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;God provides for His own.  Our requirement is to seek His righteousness,
and then He will provide for us.&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;Therefore take no thought, saying, What shall we eat? or, What shall we
drink? or, Wherewithal shall we be clothed?
(For after all these things do the Gentiles seek:) for your heavenly
Father knoweth that ye have need of all these things.
But seek ye first the kingdom of God, and his righteousness; and all
these things shall be added unto you.
Take therefore no thought for the morrow: for the morrow shall take
thought for the things of itself. Sufficient unto the day is the evil
thereof.
(&lt;a href=&quot;https://www.blueletterbible.org/kjv/mat/6/31-34&quot;&gt;Matt 6:31-34&lt;/a&gt;)&lt;/p&gt;
    &lt;/blockquote&gt;

    &lt;p&gt;Okay, it’s one thing to read it, but it’s another thing to believe it.&lt;/p&gt;

    &lt;p&gt;Would you be willing to believe that you should seek God’s righteousness
first when there’s no money in your bank account?  When your savings are
gone?  When you don’t know where your next income source is coming from?&lt;/p&gt;

    &lt;p&gt;If so, you might be ready to follow this path of serving the Lord.&lt;/p&gt;

    &lt;p&gt;If not, then you will always be the slave of someone else.&lt;/p&gt;

    &lt;p&gt;When I found myself wondering whether or not I’d be able to feed my
family, this verse came up again and again.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The Lord is a hard man.  &lt;a href=&quot;https://www.blueletterbible.org/kjv/mat/10/15&quot;&gt;He expects as much from His
servants&lt;/a&gt;.&lt;/p&gt;

    &lt;p&gt;Remember the &lt;a href=&quot;https://www.blueletterbible.org/kjv/mat/25/14-28&quot;&gt;parable of the
talents&lt;/a&gt;?  This story
was very instructive for me as I got going, and I learned a lot from it.
Indeed, I learned the most from the discussion of the slothful servant–the
one who had received only one talent from his lord, and did nothing more
than return that talent back to his lord.&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;Then he which had received the one talent came and said, Lord, I knew
thee that thou art an hard man, reaping where thou hast not sown, and
gathering where thou hast not strawed:
And I was afraid, and went and hid thy talent in the earth: lo, there
thou hast that is thine.
His lord answered and said unto him, Thou wicked and slothful servant,
thou knewest that I reap where I sowed not, and gather where I have not
strawed:
Thou oughtest therefore to have put my money to the exchangers, and then
at my coming I should have received mine own with usury.
(&lt;a href=&quot;https://www.blueletterbible.org/kjv/mat/25/24-27&quot;&gt;Matt 25:24-27&lt;/a&gt;)&lt;/p&gt;
    &lt;/blockquote&gt;

    &lt;p&gt;Let’s pause and notice some things here.  First, in the context of this
parable, the Lord is telling a story of how the Almighty deals with His
servants.  The business man in this story is metaphor for the Almighty
Himself.  So a study of this hard master is really a study of the Almighty,
of what he expects from His servants, and how He deals with His own.&lt;/p&gt;

    &lt;p&gt;Second, notice the description the slothful servant gives of his lord,
“I knew thee that thou art an hard man, reaping where thou hast not sown,
and gathering where thou hast not strawed.” The key in this description
is that the slothful servant’s lord embraces the description.  He doesn’t
dispute it.  Instead, he says, “thou knewest that I reap where I sowed not,
and gather where I have not strawed …”  Therefore, the Lord’s character
is as one who reaps where he has not sown, and who gathers where he has
not strawed.&lt;/p&gt;

    &lt;p&gt;There are many who would argue that, “It takes money to make money.”
That’s not the character of the Almighty in this passage.  The character
of the Almighty, which it would be well for His servants to consider, is
of one who reaps what he has not sown.  In other words, he makes money
without first making any investment.&lt;/p&gt;

    &lt;p&gt;It is possible.&lt;/p&gt;

    &lt;p&gt;In the case of digital design, it is definitely possible.  You can &lt;a href=&quot;/blog/2020/04/01/design-flow.html&quot;&gt;download
all the software you need to get
started&lt;/a&gt; for free.  You
can download all the data sheets you need for free.  You can use &lt;a href=&quot;https://github.com/YosysHQ/SymbiYosys&quot;&gt;formal
tools&lt;/a&gt; and a &lt;a href=&quot;/blog/2017/06/21/looking-at-verilator.html&quot;&gt;simulator to verify
your designs&lt;/a&gt;
for no cost.  Only after you’ve done that for a while do you need to worry
about purchasing any FPGA equipment.&lt;/p&gt;

    &lt;p&gt;I didn’t purchase &lt;a href=&quot;https://store.digilentinc.com/basys-3-artix-7-fpga-trainer-board-recommended-for-introductory-users/&quot;&gt;my first FPGA
board&lt;/a&gt;
until after I had a simulation running which could demodulate and despread
GPS waveforms.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The way of the spirit&lt;/p&gt;

    &lt;p&gt;Those that follow the Lord are not of those that are “of the flesh”, but
rather of those that are “of the spirit.”  John teaches that,&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;That which is born of the flesh is flesh; and that which is born of the
Spirit is spirit.
Marvel not that I said unto thee, Ye must be born again.
The wind bloweth where it listeth, and thou hearest the sound thereof,
but canst not tell whence it cometh, and whither it goeth: so is every
one that is born of the Spirit.
(&lt;a href=&quot;https://www.blueletterbible.org/kjv/joh/3/6-8&quot;&gt;John 3:6-8&lt;/a&gt;)&lt;/p&gt;
    &lt;/blockquote&gt;

    &lt;p&gt;A quick study of the greek word for Spirit will reveal that it can
equivalently be translated as: spirit, ghost, wind, or breath.  Now go back
above and re-read that passage, treating the words “spirit” and “wind” and
“breath” as though they were the same concept.&lt;/p&gt;

    &lt;p&gt;This is the nature of someone that is born “of the spirit.”&lt;/p&gt;

    &lt;p&gt;That’s just a quick background to the passage that I found relevant to
starting a business:&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;There be three things which are too wonderful for me, yea, four which I
know not:
The way of an eagle in the air; the way of a serpent upon a rock; the
way of a ship in the midst of the sea; and the way of a man with a maid.
(&lt;a href=&quot;https://www.blueletterbible.org/kjv/pro/30/18-19&quot;&gt;Prov 30:18-19&lt;/a&gt;)&lt;/p&gt;
    &lt;/blockquote&gt;

    &lt;p&gt;Of these four, the eagle is truly a creature of the spirit.  It can soar
for extended periods of time without ever beating its wings.  How?  It
senses the air currents, and lets the air push it upwards into the sky.&lt;/p&gt;

    &lt;p&gt;When I first studied this passage, I thought that ships were also creatures
of the spirit.  In hind sight, not all ships are sailing ships, so this
isn’t quite true.  The lesson still holds, however, that ships can harvest
and use oceanic currents that they didn’t create, or that snakes can enjoy
the temperature of the rock that they didn’t heat up.&lt;/p&gt;

    &lt;p&gt;A business following this philosophy would sense the business winds, and
soar on whatever is able to sustain it.&lt;/p&gt;

    &lt;p&gt;To put it another way, you don’t get to pick what business opportunities
will be available to you–just as you can’t pick which direction the
wind will blow.  Instead, you get to pick which business opportunities
you will pursue.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;You will make mistakes.&lt;/p&gt;

    &lt;p&gt;If you aren’t willing to take risks, you won’t learn which risks to take.
The man with one talent never took any risks.  His lord wasn’t pleased.
I’ve taken risks in this process, and lost tens of thousands of dollars.&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;The steps of a good man are ordered by the LORD: and he delighteth in
his way.
Though he fall, he shall not be utterly cast down: for the LORD upholdeth
him with his hand.
(&lt;a href=&quot;https://www.blueletterbible.org/kjv/psa/37/23-24&quot;&gt;Ps 37:23-24&lt;/a&gt;)&lt;/p&gt;
    &lt;/blockquote&gt;

    &lt;p&gt;Each time I’ve lost money, even significant money, I’ve always managed to
get back up again.&lt;/p&gt;

    &lt;p&gt;The next verse of this passage is awesome as well.&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;I have been young, and now am old; yet have I not seen the righteous
forsaken, nor his seed begging bread.
(&lt;a href=&quot;https://www.blueletterbible.org/kjv/psa/37/25&quot;&gt;Ps 37:25&lt;/a&gt;)&lt;/p&gt;
    &lt;/blockquote&gt;

    &lt;p&gt;Take that verse, together with Jesus’ instruction to &lt;a href=&quot;https://www.blueletterbible.org/kjv/mat/6/33&quot;&gt;seek first the kingdom
of God&lt;/a&gt;,
as a promise.  Here’s another one that I’ve memorized, and recited
to myself as I’ve traveled on trips where … I don’t know if I’ll make
money or not.&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;Blessed is the man that walketh not in the counsel of the ungodly, nor
standeth in the way of sinners, nor sitteth in the seat of the scornful.
But his delight is in the law of the LORD; and in his law doth he meditate
day and night.
And he shall be like a tree planted by the rivers of water, that bringeth
forth his fruit in his season; his leaf also shall not wither; and
whatsoever he doeth shall prosper.
(&lt;a href=&quot;https://www.blueletterbible.org/kjv/psa/1/1-3&quot;&gt;Ps 1:1-3&lt;/a&gt;)&lt;/p&gt;
    &lt;/blockquote&gt;

    &lt;p&gt;That little bit about “whatsoever he doeth shall prosper” has always caught
my attention.  It too is a promise.  I’ve found it quite comforting.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This was where I began.&lt;/p&gt;

&lt;h2 id=&quot;step-2-financial-planning&quot;&gt;Step 2: Financial Planning&lt;/h2&gt;

&lt;p&gt;When I first started out, I built a spreadsheet detailing how much money I
would need to make to stay afloat.  I looked over several possibilities–things
from trying to live on my Air Force pension alone, to finding a minimum wage
job, working as an engineer for someone else, to running my own business.&lt;/p&gt;

&lt;p&gt;If I wanted to live on my pension alone, I might manage about $47k per year.
It wasn’t enough to get by.  Some time later, the VA adjudicated that my
asthma qualified me for a 100% disability.  That helped, but $65k/yr still
wasn’t enough to make my ends meet.&lt;/p&gt;

&lt;p&gt;If I added a minimum wage job to the mix, I might manage to make $105k/yr.
In that case, we might cut some corners and still get by–that bottom line
was at least close enough to my Air Force pay that I might’ve been able
to make it work.&lt;/p&gt;

&lt;p&gt;In the years that followed, this was always a reassuring thought: I could at
least get by flipping burgers somewhere.&lt;/p&gt;

&lt;p&gt;However, that wasn’t what I wanted to do.&lt;/p&gt;

&lt;p&gt;If, on the other hand, I managed to make $198/hr working for myself, I would
bring in the big bucks!  This was a reasonable hourly charge for an engineer,
so why not?&lt;/p&gt;

&lt;p&gt;… and this is where I made one of my biggest mistakes.  $198/hr is an awesome
wage, at forty hours per week by fifty weeks a year, but only &lt;em&gt;if&lt;/em&gt;, and it’s
a big &lt;em&gt;if&lt;/em&gt;, you can get enough work to fill a forty hour work week for fifty
weeks a year.&lt;/p&gt;

&lt;p&gt;It took me about a year or two before I realized my mistake.  By then, I was
committed to working for myself and not making nearly what I had dreamed I
would.  Still, I enjoy what I do, so I’m not planning on any career changes
any time soon.&lt;/p&gt;

&lt;h2 id=&quot;step-3-what-would-i-do&quot;&gt;Step 3: What would I do?&lt;/h2&gt;

&lt;p&gt;My initial business plan was to work hours for whoever hired me.&lt;/p&gt;

&lt;p&gt;I suppose I started out well: I managed to get two contracts in two years
for GPS signal processing work.  After that, the client decided they were
no longer interested in the project, and I was left holding onto
a bunch of ideas that no one was interested in.&lt;/p&gt;

&lt;p&gt;After that, working hours for whoever might hire me didn’t have enough
clarity.&lt;/p&gt;

&lt;p&gt;Think about it: Who wants to hire an engineer who says he can do everything?
Most can’t really do everything, and those who are somewhat good at doing
everything are just that: somewhat good.&lt;/p&gt;

&lt;p&gt;So, what did I want to do?  I wanted to do signal processing, but I wasn’t
in a position to get very far with it.  I didn’t mind working for the defense
department, but I didn’t want that to be my only business.  My wife believed
I “worked with computers”, but frankly I didn’t want to do modern software
(i.e. web) development.  I just didn’t feel like it was my calling.&lt;/p&gt;

&lt;p&gt;This left me, after about two years, “working for myself” but with absolutely
no income.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 1. Why not work part time?&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/bizness/part-time.svg&quot; alt=&quot;&quot; width=&quot;420&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;After watching way too much youtube, and burying myself deeper and deeper into
having no money, I found some useful insight from a verse from Proverbs:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;In all labour there is profit: but the talk of the lips tendeth only to
penury.
(&lt;a href=&quot;https://www.blueletterbible.org/kjv/pro/14/23&quot;&gt;Prov 14:23&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;What caught my attention was the comment that, “In all labour there is
profit”–even labour that has no sponsor, labour for which no one is paying.&lt;/p&gt;

&lt;p&gt;So, I started doing what I wanted to do: digital design.  I worked for free,
for myself, with no one paying me, and I built digital designs under the hope
that someone might purchase them later.&lt;/p&gt;

&lt;p&gt;As a quick footnote, while I eventually made a profit, it was never for
selling any of these designs.  That’s just not how open source works.
In the end, the designs were used to convince customers that I could solve
their problems, and so they helped me make money doing something else–but
it took me a while to learn that.&lt;/p&gt;

&lt;h2 id=&quot;step-4-gps-and-the-zipcpu&quot;&gt;Step 4: GPS and the ZipCPU&lt;/h2&gt;

&lt;p&gt;As those first contracts doing GPS work finished up, I invested a lot of my
own time into what I thought would be the next step.&lt;/p&gt;

&lt;p&gt;One item I didn’t have was a GPS processing system that could process the GPS
signal from acquisition to lock in real time.  So, I invested my time into
building such a system.&lt;/p&gt;

&lt;p&gt;The GPS algorithm I was working with needed a lot of block RAM.  After doing
some research (back in 2015), I decided that a &lt;a href=&quot;https://www.xilinx.com/products/boards-and-kits/ek-v7-vc707-g.html&quot;&gt;VC707 development
board&lt;/a&gt;
might just have an FPGA with enough block RAM on board.  However, I was going
to need to do a lot of work to get to a working GPS system on a
&lt;a href=&quot;https://www.xilinx.com/products/boards-and-kits/ek-v7-vc707-g.html&quot;&gt;VC707&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;I would need the PCIe interface.  The
&lt;a href=&quot;https://www.xilinx.com/products/boards-and-kits/ek-v7-vc707-g.html&quot;&gt;VC707&lt;/a&gt;
had one, but I had no idea how to use it.&lt;/p&gt;

    &lt;p&gt;Instead, I built a &lt;a href=&quot;https://github.com/ZipCPU/dbgbus&quot;&gt;serial port interface to a Wishbone
bus&lt;/a&gt;, and a &lt;a href=&quot;https://github.com/ZipCPU/wbscope&quot;&gt;Wishbone
scope&lt;/a&gt; I could use across that serial
port interface to debug items within my design.  I judged that, once I
purchase the
&lt;a href=&quot;https://www.xilinx.com/products/boards-and-kits/ek-v7-vc707-g.html&quot;&gt;VC707&lt;/a&gt;
(I never got that far), I’d then be able to debug the PCIe interface using
a USB to UART/JTAG bridge.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Processing the GPS signal at such high speeds meant being able to run a lot
of correlations.  Correlations required
&lt;a href=&quot;/dsp/2018/10/02/fft.html&quot;&gt;FFTs&lt;/a&gt;, and so I built and
verified the &lt;a href=&quot;https://github.com/ZipCPU/dblclockfft&quot;&gt;dblclockfft&lt;/a&gt;
project–one that could run an
&lt;a href=&quot;/dsp/2018/10/02/fft.html&quot;&gt;FFT&lt;/a&gt;
at two input samples per clock period.&lt;/p&gt;

    &lt;p&gt;The project was even cooler than that: I wanted to be able to run an 8k point
&lt;a href=&quot;/dsp/2018/10/02/fft.html&quot;&gt;FFT&lt;/a&gt;
on 2k points of data, so I built a 2k point
&lt;a href=&quot;/dsp/2018/10/02/fft.html&quot;&gt;FFT&lt;/a&gt;
followed by the correlation multiplies, followed by four 2k point inverse
&lt;a href=&quot;/dsp/2018/10/02/fft.html&quot;&gt;FFTs&lt;/a&gt;.&lt;/p&gt;

    &lt;p&gt;It worked really nicely (in simulation).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;This was also when the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU project&lt;/a&gt;
began.&lt;/p&gt;

    &lt;p&gt;The &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
was designed initially to be a light-weight general purpose
CPU that could support the GPS processing on the
&lt;a href=&quot;https://www.xilinx.com/products/boards-and-kits/ek-v7-vc707-g.html&quot;&gt;VC707&lt;/a&gt;.
The GPS engine needed a CPU to load the pseudorandom noise coefficients
and Doppler offsets into the various correlators.&lt;/p&gt;

    &lt;p&gt;Not only that, but the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
would also be required to compute the positions of the various
satellites, calculate what Doppler offsets to expect for a given point
on the earth’s surface, and then to run correlations against that satellite
and that Doppler.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To this day, the project has never become a full and complete reality.
1) I could never afford the
&lt;a href=&quot;https://www.xilinx.com/products/boards-and-kits/ek-v7-vc707-g.html&quot;&gt;VC707&lt;/a&gt;,
2) I couldn’t afford the Xilinx license required to build a design that would
fit on a chip that big,
3) I still have no idea if the extensive block RAM requirements of the
algorithm would’ve even
fit on the chip, and 4) I/O speed is everything.  I don’t know if the hardware
could’ve kept up with the memory requirements.&lt;/p&gt;

&lt;p&gt;Finally, I needed to run at a clock rate of 200MHz (or faster).  Meeting this
requirement may have been nothing more than me dreaming.&lt;/p&gt;

&lt;p&gt;If nothing else, this was where the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU project&lt;/a&gt;
began–as an effort to put “labour” into a project, any project, while
having no idea whether or not it would pay off.  All I could do was simply
trust God that “in &lt;em&gt;all&lt;/em&gt; labour there is profit.”&lt;/p&gt;

&lt;p&gt;I put close to $0.5M worth of hours into the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
before I stopped keeping track.&lt;/p&gt;

&lt;p&gt;I was quite proud of the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;.  It was
designed to be a low-logic CPU, and I feel it’s met that goal quite well
(especially after I finally managed to do an apples-to-apples comparison
against the &lt;a href=&quot;https://github.com/cliffordwolf/picorv32&quot;&gt;PicoRV32&lt;/a&gt;–but
that’s a different story for a different day).&lt;/p&gt;

&lt;h2 id=&quot;step-5-marketing&quot;&gt;Step 5: Marketing&lt;/h2&gt;

&lt;p&gt;When I began, I had no plans for marketing.  None.&lt;/p&gt;

&lt;p&gt;I was also starting about two rungs short of a step-ladder: brand new in a
corporate community that didn’t know anything about me.&lt;/p&gt;

&lt;p&gt;For this, I took inspiration from Ecclesiastes:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;In the morning sow thy seed, and in the evening withhold not thine hand:
for thou knowest not whether shall prosper, either this or that, or whether
they both shall be alike good.
(&lt;a href=&quot;https://www.blueletterbible.org/kjv/ecc/11/6&quot;&gt;Ecc 11:6&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I therefore tried several marketing approaches, not having any idea which
would  prosper.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left&quot;&gt;&lt;caption&gt;Fig 2. ORCONF??&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/bizness/orconf.svg&quot; alt=&quot;&quot; width=&quot;420&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;My first approach at marketing was just to publish open source IP.  I suppose
that was a good start, but it wasn’t good enough.  No one came beating a path
to my door–and certainly no one with any cash.&lt;/p&gt;

&lt;p&gt;My second approach was to participate in any forum I could.  I kept the
&lt;a href=&quot;https://opencores.org/forum&quot;&gt;OpenCores forums&lt;/a&gt; alive for a while–long
past when there wasn’t enough traffic to justify the work.  I responded
to everything I could find on
&lt;a href=&quot;https://forum.digilentinc.com/discover&quot;&gt;Digilent’s forums&lt;/a&gt;, looking up and
answering any question I could and recommending my IP every chance I could get.&lt;/p&gt;

&lt;p&gt;This helped.  I managed to find a customer who wanted some SONAR work done
as a result of my work on &lt;a href=&quot;https://opencores.org&quot;&gt;OpenCores&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I found a second customer when I went to OrConf 2016 and &lt;a href=&quot;https://www.youtube.com/watch?v=uVSRTgy-Ui0&quot;&gt;presented the ZipCPU
in Bologna, Italy&lt;/a&gt;.  Well, at
least that was when I met them.  That meeting didn’t turn into any funded
development work until early 2018, but I’ll still credit that first meeting.&lt;/p&gt;

&lt;h2 id=&quot;step-6-blogging&quot;&gt;Step 6: Blogging&lt;/h2&gt;

&lt;p&gt;My next step was to start blogging.  &lt;a href=&quot;/blog/2017/05/17/welcome.html&quot;&gt;My first blog article was in May of
2017&lt;/a&gt;.
That article, and the ones that soon followed, were based upon my frustrations
helping clueless students out on the Digilent forums.  The bottom line, at least
then, was that I had found ways to overcome most of the challenges these
beginning students had, and so I started sharing these tidbits.&lt;/p&gt;

&lt;p&gt;The blog found some sponsors very quickly, even though $20/mo is a far cry
from the $33k/mo I had been hoping to make by owning and operating my own
business.  By the end of the year, I had made $472 blogging.  Still, nothing
to write home about.&lt;/p&gt;

&lt;p&gt;Things started to change when I tried out &lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal
verification&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://twitter.com/ico_TC&quot;&gt;Edmund from Symbiotic EDA&lt;/a&gt; had asked me to try
out their formal tools.  Why not?  I had nothing to lose, I wasn’t bringing
in many dollars, and it might help draw some more sponsors to the blog.
I was also confident enough in my design abilities that I wasn’t expecting
to get spanked.  I mean, everyone knows &lt;a href=&quot;/blog/2017/07/29/fifo.html&quot;&gt;how to build a
FIFO&lt;/a&gt;, right?&lt;/p&gt;

&lt;p&gt;I got spanked.&lt;/p&gt;

&lt;p&gt;Apparently &lt;a href=&quot;/blog/2017/07/29/fifo.html&quot;&gt;I didn’t know how to make a working
FIFO&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This was also a &lt;em&gt;serious&lt;/em&gt; blow to my attempts to find business: If my OpenSource
cores were &lt;a href=&quot;/blog/2017/07/29/fifo.html&quot;&gt;as buggy as that FIFO
was&lt;/a&gt;, then how would I know
whether a potential client looking over my online designs could immediately
spot a bug that I had missed?  If that ever happened, it would be bye-bye
potential client.&lt;/p&gt;

&lt;p&gt;I then &lt;a href=&quot;/blog/2018/01/22/formal-progress.html&quot;&gt;went back through all of my public designs, formally verifying
them&lt;/a&gt;,
and fixing any bugs I had found.&lt;/p&gt;

&lt;p&gt;Much to my dismay, &lt;a href=&quot;/blog/2018/04/02/formal-cpu-bugs.html&quot;&gt;I found (and fixed) many bugs in the
ZipCPU&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Needless to say, I was hooked.&lt;/p&gt;

&lt;h2 id=&quot;step-7-reap-the-profit&quot;&gt;Step 7: Reap the profit&lt;/h2&gt;

&lt;p&gt;Remember the proverb:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;In all labour there is profit: but the talk of the lips tendeth only to
penury.
(&lt;a href=&quot;https://www.blueletterbible.org/kjv/pro/14/23&quot;&gt;Prov 14:23&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Once I started getting into formal methods, I started making a profit.  I’ll
argue the proverb is true, but it took a while for my years of investment to
start paying off.&lt;/p&gt;

&lt;p&gt;The first key was a formal verification tool I could afford: the &lt;a href=&quot;https://github.com/YosysHQ/SymbiYosys&quot;&gt;open source
version of SymbiYosys&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The second key was that I went back to formally verify everything I had
previously posted–my online &lt;em&gt;portfolio&lt;/em&gt; if you will.  By doing this, I
ended up building a background in formal verification, learning how to
verify a large number of design types.&lt;/p&gt;

&lt;p&gt;Third, by blogging about what I had done, I became a recognized “expert”
in formal verification.&lt;/p&gt;

&lt;p&gt;Finally, I had people start calling me for work.&lt;/p&gt;

&lt;p&gt;The first contract I received was with Symbiotic EDA.  They wanted to sponsor
my blog, and eventually pay for me to help expand their customer base.
Since this was what I was already doing, the fit was natural.
They also wanted me to build a &lt;a href=&quot;/tutorial/formal.html&quot;&gt;formal verification
course&lt;/a&gt; and teach others
who might be interested.&lt;/p&gt;

&lt;h2 id=&quot;step-8-axi&quot;&gt;Step 8: AXI&lt;/h2&gt;

&lt;p&gt;I like to think the blog gained the majority of its notoriety &lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;when I started
blogging about AXI&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;AXI is a difficult protocol to work with.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;It’s also fairly ubiquitous.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=AkA_UfEWrIc&quot;&gt;Many, many, AXI designs are broken&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;– This includes example designs from both Xilinx and Intel&lt;/p&gt;

    &lt;p&gt;– It also includes some of Xilinx production designs.  (No, I haven’t tested any of Intel’s production designs.)&lt;/p&gt;

    &lt;p&gt;– It also includes most student designs that copy from those examples&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I can get nearly free publicity on Xilinx’s forums by just sharing the
above information, and pointing them to blog articles stating those facts.
It’s awesome!&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;From December, 2018, when I published &lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;my first AXI-lite
article&lt;/a&gt;, through this
summer, I did a lot of work verifying AXI cores.&lt;/p&gt;

&lt;p&gt;Most of this work centered around building formal properties for verifying
AXI designs.  Formal properties, however, need to be tested under various
environments–so I built &lt;a href=&quot;/blog/2019/05/29/demoaxi.html&quot;&gt;AXI
slaves&lt;/a&gt;,
&lt;a href=&quot;/blog/2019/07/17/crossbar.html&quot;&gt;crossbars&lt;/a&gt;,
bridges,
&lt;a href=&quot;/zipcpu/2019/08/30/subbus.html&quot;&gt;simplifiers&lt;/a&gt;,
&lt;a href=&quot;/blog/2020/06/16/axiaddr-limits.html&quot;&gt;bus masters&lt;/a&gt;,
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip&quot;&gt;anything I could get my hands&lt;/a&gt; on that
would test my properties and (as a result) teach me more about AXI verification.&lt;/p&gt;

&lt;p&gt;Just as a caution, (full) AXI verification is hard.  &lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;AXI-lite is
easy&lt;/a&gt;, but
&lt;a href=&quot;/formal/2019/05/13/axifull.html&quot;&gt;full AXI verification&lt;/a&gt;
is pretty hard.  It gets harder the more packets the
design allows to be in the pipeline, and so the
&lt;a href=&quot;/blog/2019/07/17/crossbar.html&quot;&gt;crossbar&lt;/a&gt;
was one of the harder designs I had to verify.&lt;/p&gt;

&lt;p&gt;It takes work, but it’s kind of fun work.&lt;/p&gt;

&lt;p&gt;I was doing pretty well at the task until this summer.  This summer, &lt;a href=&quot;https://www.avery-design.com&quot;&gt;Avery
design systems&lt;/a&gt; tried out my (formally verified)
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axixbar.v&quot;&gt;AXI crossbar&lt;/a&gt;.
They found a bug in it.  Worse, it was a very serious bug: The design allowed
two write &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AW*&lt;/code&gt; packets to be in transit, but only accounted for the beats
required to complete a single write &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;W*&lt;/code&gt; packet.  As a result, it would
hang if a second &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AW*&lt;/code&gt; packet was presented while the first was still
processing.&lt;/p&gt;

&lt;p&gt;This is a serious bug.  AXI is designed to allow the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AW*&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;W*&lt;/code&gt; channels
to be asynchronous.  Because they are asynchronous, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AW*&lt;/code&gt; requests are
supposed to be able to go through the
&lt;a href=&quot;/blog/2019/07/17/crossbar.html&quot;&gt;crossbar&lt;/a&gt;
ahead of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;W*&lt;/code&gt; packets, so that the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;W*&lt;/code&gt; beats never get slowed down
by the channel allocations that need to follow.&lt;/p&gt;

&lt;p&gt;What happened?&lt;/p&gt;

&lt;p&gt;What happened goes back to, AXI is hard.  I had struggled to figure out how to
handle out of order &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AW*&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;W*&lt;/code&gt; packets, so I &lt;em&gt;assumed&lt;/em&gt; the two would be
aligned.  (Oops.)  This became a limitation of the formal properties that I
hadn’t paid attention to.&lt;/p&gt;

&lt;p&gt;Fixing the &lt;a href=&quot;/blog/2019/07/17/crossbar.html&quot;&gt;crossbar&lt;/a&gt;
was easy.&lt;/p&gt;

&lt;p&gt;Fixing the proof of the
&lt;a href=&quot;/blog/2019/07/17/crossbar.html&quot;&gt;crossbar&lt;/a&gt;?  That’s
still not done.  Lord willing, I hope I’ll get another chance at that when
my current contract load lets up a bit.&lt;/p&gt;

&lt;h2 id=&quot;step-9-honesty&quot;&gt;Step 9: Honesty&lt;/h2&gt;

&lt;p&gt;Before I close up this story, I’d like to bring your attention back to the
beginning, where I promised that my business would be my service to God.
By working for myself, what I really mean is that Jesus is my lord, and that
I am His servant in business.&lt;/p&gt;

&lt;p&gt;This is not a position I intend to compromise on.&lt;/p&gt;

&lt;p&gt;This also requires honesty.  Honesty doesn’t always make friends.&lt;/p&gt;

&lt;p&gt;On one contract, I was asked to adjust the dates in the user’s guide to make
it look like the product was more mature than it was.  I had to explain to this
customer that honesty was a condition of our working together.&lt;/p&gt;

&lt;p&gt;One (potential) client asked me to fill out security forms, under penalty of
perjury, stating that I was working for him full time.  When I discovered there
was no paycheck attached, I turned him down.&lt;/p&gt;

&lt;p&gt;On another team I worked with, I was asked to call a man by female pronouns.
This one brings me more grief, as I enjoyed working with the individual in
question.  He wanted to declare himself to be a woman.  He changed his name, his
clothing, his looks, his dress, you name it.  While I might disagree with his
decisions, who made me a judge?  However, for me to call a man a “she” would
make &lt;em&gt;me&lt;/em&gt; a liar.  This I refused to do.&lt;/p&gt;

&lt;p&gt;Let’s be honest with one another.  &lt;a href=&quot;https://www.blueletterbible.org/kjv/mat/19/4&quot;&gt;God made man “male and
female”&lt;/a&gt; by design.  This is
obvious and &lt;a href=&quot;https://www.blueletterbible.org/kjv/rom/1/20&quot;&gt;evident from the creation
itself&lt;/a&gt;: Only women can give
birth.  Only women menstruate.  Only women suffer from miscarriages.  Men
dressed like women, who call themselves women, are nothing more than that: men
who dress like women, and who imagine themselves to be women.
Some may have even &lt;a href=&quot;https://www.blueletterbible.org/kjv/mat/19/12&quot;&gt;made themselves
eunuchs&lt;/a&gt;.  They have not made
themselves into women.&lt;/p&gt;

&lt;p&gt;When I declared that I was not going to use female pronouns when addressing
a man, I lost the funding for my AXI work.  That was paying me about $1.5k/mo
for some really fun work.  In the process, though, I gained another, much
larger contract (about $70k over 6 months or so), but my point here is simply
that the &lt;a href=&quot;/blog/2019/07/17/crossbar.html&quot;&gt;AXI crossbar&lt;/a&gt;
still needs some verification work that isn’t getting done.&lt;/p&gt;

&lt;p&gt;Lord willing, I’ll be able to get back to it next year–after I finish taping
out my first ASIC project.&lt;/p&gt;

&lt;p&gt;Just think about that, though: I’ve gone from work without pay, to now
needing to turn down work because my calendar is full.  That’s a good place
to be in business.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Today is Thanksgiving, 2020.  It’s that time of year in America when those of
the faith give thanks to God for the year’s harvest.&lt;br /&gt;
Looking back on how far I’ve come, I have a lot to be thankful for.
I’m thankful first and foremost for my relationship with Jesus.  Perhaps
you’ve heard Him speak in the verses above?  I’m thankful for my wife, who
has been willing to figure out how to make life work without knowing how much
income she will have to work with from one month to the next.  I’m thankful
for my family, and for their encouragement even through the more difficult
times.&lt;/p&gt;

&lt;p&gt;Today, I’m also very thankful that I’ve had contracts this year.  Indeed, I
like to think I’ve been pretty successful.  I certainly haven’t made the
$198/hr I had planned on for year round work, but I have made enough to keep
my family from any more debt–in spite of sending two of my daughters to
college this year.&lt;/p&gt;

&lt;p&gt;As an engineer, I’m not getting a lot of little contracts.  I’m getting just a
couple very large contracts, from about 3-4 good paying clients.
The &lt;a href=&quot;/tutorial/formal.html&quot;&gt;formal verification course&lt;/a&gt; is
fun, although it doesn’t really pay my bills unless I teach two students at
a time.  (Expect the price of the course to go up in the future.)  The blog
is also fun, and I enjoy it, but in spite of the wonderful individuals who
sponsor it, it’s not paying my bills either.  The few contracts I have,
those are paying my bills in abundance.&lt;/p&gt;

&lt;p&gt;When I started out writing a blog, my goal was always to find customers.  Now
that I’ve had to turn some down because I’m too busy, I’m going to judge that
it has been successful to date towards that end.&lt;/p&gt;

&lt;p&gt;So, let’s return to the question of whether or not it is possible to build
a business as a lone digital design engineer.  Or, more specifically, is it
possible to earn a living in such a business that is sufficient to support
a large family?  My answer to that question is a resounding, Yes, it is
possible.  Not only have I done so, but I have also met many others along the
way who have managed to do so as well.  Your success, however,
will depend upon your ability to find customers for your work.  I wasn’t
as prepared for that as I should’ve been.  Your success will also depend
upon your ability to endure through the hard times, since it may take you
some time to find those reliable customers that you need.&lt;/p&gt;

&lt;p&gt;The good news is that, in the case of digital design, &lt;a href=&quot;/blog/2020/04/01/design-flow.html&quot;&gt;you can download most of
the tools you need to get started&lt;/a&gt;.
You can then get started and do a lot of work before you ever purchase your
first piece of hardware.  Yes, it is possible to reap where you have not
sown, and to gather where you have not scatterred.&lt;/p&gt;
&lt;hr /&gt;&lt;p&gt;&lt;em&gt;For the kingdom of heaven is as a man travelling into a far country, who called his own servants, and delivered unto them his goods.  And unto one he gave five talents, to another two, and to another one; to every man according to his several ability; and straightway took his journey.  (Matt 25:14-15)&lt;/em&gt;</description>
        <pubDate>Thu, 26 Nov 2020 00:00:00 -0500</pubDate>
        <link>https://zipcpu.com/blog/2020/11/26/zipcpu-biz.html</link>
        <guid isPermaLink="true">https://zipcpu.com/blog/2020/11/26/zipcpu-biz.html</guid>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>Spectrograms need Window Functions</title>
        <description>&lt;p&gt;If you are going to be doing &lt;a href=&quot;/dsp/dsp.html&quot;&gt;DSP&lt;/a&gt; on an
FPGA, chances are you are going to want to know if your
&lt;a href=&quot;/dsp/dsp.html&quot;&gt;DSP&lt;/a&gt; is working.  That requires being
able to visualize what’s going on somehow.&lt;/p&gt;

&lt;p&gt;How shall waveforms be visualized?&lt;/p&gt;

&lt;p&gt;Perhaps the easiest answer, when dealing with audio rate signals, is not to
visualize them at all but just to play the sound into a set of headphones.  It’s
amazing how good the ear is at picking up sound quality–both good and bad.
The only problem is that while ears are good at telling you if there is a
problem, they’re not nearly as good for identifying the problem.  Worse,
from the standpoint of this blog, it’s hard to be communicate subtle
differences in sound within an article like this one.&lt;/p&gt;

&lt;p&gt;Perhaps the next best answer is to visualize the waveform in time.  This works
okay enough for some sounds.  For example, it’s not that hard to find when
certain percussion instruments strike, but there’s often more to percussive
instruments than just the striking itself.  How, for example, shall a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Marimba&quot;&gt;marimba&lt;/a&gt; be differentiated from a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Snare_drum&quot;&gt;snare drum&lt;/a&gt; or a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Xylophone&quot;&gt;xylophone&lt;/a&gt; for example?&lt;/p&gt;

&lt;p&gt;As an example, consider the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Humpback_whale&quot;&gt;humpack whale&lt;/a&gt; song shown in
Fig. 1 below.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 1. Humpback whale song in time&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/windowfn/humpbacksong-time.png&quot; alt=&quot;&quot; width=&quot;567&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Judging from this picture alone, what can you determine?  While I’m not trained
in &lt;a href=&quot;https://en.wikipedia.org/wiki/Whale_vocalization&quot;&gt;whale song&lt;/a&gt;,
I can see that this whale has spoken twice in this clip, but that’s about it.&lt;/p&gt;

&lt;p&gt;Were we examining music, a musician would want to know what notes are being
played and when.  This is great too, except … not all
“&lt;a href=&quot;https://en.wikipedia.org/wiki/C_(musical_note)#Middle_C&quot;&gt;middle C&lt;/a&gt;”s sound the
same.  A piano playing a
&lt;a href=&quot;https://en.wikipedia.org/wiki/C_(musical_note)#Middle_C&quot;&gt;middle C&lt;/a&gt;
sounds different from a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Trumpet&quot;&gt;trumpet&lt;/a&gt;, from a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Pipe_organ&quot;&gt;pipe organ&lt;/a&gt;, a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Clarinet&quot;&gt;clarinet&lt;/a&gt;, a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flute&quot;&gt;flute&lt;/a&gt;, etc.  This information would
need to be able to be visualized somehow as well.&lt;/p&gt;

&lt;p&gt;While I’m not a recording studio engineer, I’ve been told that there’s a big
difference between studio silence and other types of silence.  For example,
is your house really quiet when the dishwasher, laundry, and refrigerator are
all running?  How will you know your recording is good enough that these
background noises have been properly removed?&lt;/p&gt;

&lt;p&gt;The problem isn’t limited to music, either, nor is it limited to the human
hearing range.  What about
&lt;a href=&quot;https://en.wikipedia.org/wiki/Whale_vocalization&quot;&gt;whale song&lt;/a&gt; or
&lt;a href=&quot;https://en.wikipedia.org/wiki/Seismology&quot;&gt;seismic analysis&lt;/a&gt;?  Or, for that
matter, what about microwave
&lt;a href=&quot;https://en.wikipedia.org/wiki/Radar&quot;&gt;radar&lt;/a&gt;
analysis?  How shall you know if a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Radar&quot;&gt;radar&lt;/a&gt;,
or even a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Radar_jamming_and_deception&quot;&gt;radar jammer&lt;/a&gt; for
that matter, is producing the right waveform by looking at it?
You can’t listen to it–it’s too wideband, neither will it necessarily “sound”
like anything you might recognize.  (&lt;a href=&quot;https://www.youtube.com/watch?v=B9K4N328OI8&quot;&gt;I’ve known people who have found ways of
doing this anyway …&lt;/a&gt;.)&lt;/p&gt;

&lt;p&gt;As an example of what &lt;a href=&quot;https://en.wikipedia.org/wiki/Spectral_density_estimation&quot;&gt;spectral
analysis&lt;/a&gt; might show, consider Fig. 2 below, showing the same
&lt;a href=&quot;https://en.wikipedia.org/wiki/Whale_vocalization&quot;&gt;whale song&lt;/a&gt;
from Fig. 1 above.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 2. Humpback whale song spectra&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/windowfn/humpbacksong-an.png&quot; alt=&quot;&quot; width=&quot;567&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;In this image, time goes from left to right, and frequency from DC at the
bottom to about 9kHz on the vertical axis.  From here, you can see that the
two whale sounds have very different spectral features.  In the first,
the whale has emitted a rough tone.  In the second, the whale has changed the
sound of the tone, and hence you can see the introduction of harmonics.
Further, there’s a bit of a sweep to the second tone.&lt;/p&gt;

&lt;p&gt;Whales can also emit a series of clicks.  Fig. 3 below shows a series of
&lt;a href=&quot;https://en.wikipedia.org/wiki/Humpback_whale&quot;&gt;humpack whale&lt;/a&gt;
clicks–also using the same spectral representation.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 3. Humpback whale click spectra&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/windowfn/humpbackclicks-an.png&quot; alt=&quot;&quot; width=&quot;567&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Now consider the &lt;a href=&quot;https://en.wikipedia.org/wiki/Bowhead_whale&quot;&gt;bowhead whale&lt;/a&gt;
spectra, shown in Fig. 4 below.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 4. Bowhead whale spectra&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/windowfn/bowhead-an.png&quot; alt=&quot;&quot; width=&quot;567&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;From here, you can see that the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bowhead_whale&quot;&gt;bowhead&lt;/a&gt;
has a much higher pitch, and also that there are much larger frequency sweeps.&lt;/p&gt;

&lt;p&gt;Would you have been able to see these details without dividing the signal into
time and frequency?&lt;/p&gt;

&lt;p&gt;No, and that’s the bottom line: you’re going to want to do some type of
&lt;a href=&quot;https://ieeexplore.ieee.org/document/679147&quot;&gt;time-varying spectral analysis&lt;/a&gt;
when processing signals.  The purpose of
&lt;a href=&quot;https://ieeexplore.ieee.org/document/679147&quot;&gt;time-varying spectral analysis&lt;/a&gt;
is to determine the frequency content of a particular signal, and see
how that frequency content changes with time–much like we did with
the examples of the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Whale_vocalization&quot;&gt;whale song&lt;/a&gt; above.&lt;/p&gt;

&lt;p&gt;Some time ago, we discussed a &lt;a href=&quot;/dsp/2020/03/17/cheap-spectra.html&quot;&gt;super cheap way of doing spectral
analysis&lt;/a&gt;.
While this approach can work nicely in some circumstances–such as when
examining &lt;a href=&quot;https://en.wikipedia.org/wiki/Stationary_process&quot;&gt;stationary
processes&lt;/a&gt;, it’s not a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Real-time_computing&quot;&gt;real-time method&lt;/a&gt;
for the simple reason that part of the algorithm involves
dropping data.  Sure, it’s useful for debugging, but it’s not very useful
for seeing how a signal’s spectral content develops and changes over time.&lt;/p&gt;

&lt;p&gt;For all these reasons, let’s take a look today at the traditional way of
doing this within an FPGA:
&lt;a href=&quot;https://en.wikipedia.org/wiki/Window_function&quot;&gt;windowed&lt;/a&gt;
&lt;a href=&quot;/dsp/2018/10/02/fft.html&quot;&gt;FFTs&lt;/a&gt;.
Before we get there, though, let’s back up and develop the concept of a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Spectral_density&quot;&gt;spectral density&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;what-is-a-power-spectral-density&quot;&gt;What is a Power Spectral Density&lt;/h2&gt;

&lt;p&gt;One of the key purposes of
&lt;a href=&quot;https://en.wikipedia.org/wiki/Spectral_density&quot;&gt;spectral density&lt;/a&gt;
estimation is to find out where the energy in a signal lies spectrally.
For this reason, let’s start back at the beginning and discuss both
&lt;a href=&quot;https://en.wikipedia.org/wiki/Power_(physics)&quot;&gt;power&lt;/a&gt;
and &lt;a href=&quot;https://en.wikipedia.org/wiki/Spectral_density#Power_spectral_density&quot;&gt;power spectral densities
(PSDs)&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Let’s start at the top.  The voltage drop across a resistor, from &lt;a href=&quot;https://en.wikipedia.org/wiki/Ohm%27s_law&quot;&gt;Ohm’s
law&lt;/a&gt;, is given by the product
of the current going through the resistor times the resistance of the resistor.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/windowfn/eqn-ohms-law.png&quot; alt=&quot;&quot; width=&quot;102&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;The &lt;a href=&quot;https://en.wikipedia.org/wiki/Power_(physics)&quot;&gt;power&lt;/a&gt;
being consumed by this same resistor is given by
&lt;img src=&quot;/img/windowfn/expr-p-is-vi.png&quot; alt=&quot;P=VI&quot; /&gt;.  Hence,
if you know the voltage and the resistance across which it is measured, then
you know the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Power_(physics)&quot;&gt;power&lt;/a&gt; to be,&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/windowfn/eqn-ohms-power.png&quot; alt=&quot;&quot; width=&quot;208&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;You can use a &lt;a href=&quot;https://en.wikipedia.org/wiki/Voltmeter&quot;&gt;voltmeter&lt;/a&gt;,
or even an &lt;a href=&quot;https://en.wikipedia.org/wiki/Analog-to-digital_converter&quot;&gt;analog to digital
converter&lt;/a&gt;, to
measure voltage, so let’s work with that.  Let’s say we do this and get samples,
&lt;img src=&quot;/img/windowfn/expr-xn.png&quot; alt=&quot;`x[n]`&quot; /&gt;, from our &lt;a href=&quot;https://en.wikipedia.org/wiki/Analog-to-digital_converter&quot;&gt;A/D
converter&lt;/a&gt;.
&lt;a href=&quot;https://en.wikipedia.org/wiki/Power_(physics)&quot;&gt;Power&lt;/a&gt; is then related to,&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/windowfn/eqn-sampled-power.png&quot; alt=&quot;&quot; width=&quot;327&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;where the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(scale factor)&lt;/code&gt; captures the impact of both the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Resistor&quot;&gt;resistor&lt;/a&gt; and the &lt;a href=&quot;https://en.wikipedia.org/wiki/Sampling_(signal_processing)#Sampling_rate&quot;&gt;sample
rate&lt;/a&gt;.
This scale factor is important when converting from
&lt;a href=&quot;https://en.wikipedia.org/wiki/Analog-to-digital_converter&quot;&gt;A/D&lt;/a&gt; units
representing quantized values to true
&lt;a href=&quot;https://en.wikipedia.org/wiki/Power_(physics)&quot;&gt;power&lt;/a&gt;
measured in Watts, but for now we’re going to ignore it so that we can focus on
the algorithms used to separate this energy into separate frequency components.
In other words, now that I’ve noted the existence of this scale factor, I’m
going to drop it entirely from the discussion that follows.&lt;/p&gt;

&lt;p&gt;The &lt;img src=&quot;/img/windowfn/expr-1-over-n.png&quot; alt=&quot;1/N&quot; /&gt;
term comes from the simple fact that
&lt;a href=&quot;https://en.wikipedia.org/wiki/Power_(physics)&quot;&gt;power&lt;/a&gt; is a unit of
average energy per unit of time.  If, at every time instant, we get a new
&lt;img src=&quot;/img/windowfn/expr-abs-x-n-squared.png&quot; alt=&quot;`|x[n]|^2`&quot; /&gt; value,
then our
“&lt;a href=&quot;https://en.wikipedia.org/wiki/Power_(physics)&quot;&gt;power&lt;/a&gt;”
would appear to increase even if
&lt;img src=&quot;/img/windowfn/expr-abs-x-n-squared.png&quot; alt=&quot;`|x[n]|^2`&quot; /&gt;
were constant and all these values were the same.  Indeed,
&lt;img src=&quot;/img/windowfn/expr-abs-x-n-squared.png&quot; alt=&quot;`|x[n]|^2`&quot; /&gt;
is a measure of &lt;a href=&quot;https://en.wikipedia.org/wiki/Energy&quot;&gt;&lt;em&gt;energy&lt;/em&gt;&lt;/a&gt;, not
&lt;a href=&quot;https://en.wikipedia.org/wiki/Power_(physics)&quot;&gt;power&lt;/a&gt;.
Hold on to that thought, though, we’ll come back to it in a moment.&lt;/p&gt;

&lt;p&gt;For now, let’s increase our averaging interval until we are averaging across
all time.  This then becomes the total
&lt;a href=&quot;https://en.wikipedia.org/wiki/Power_(physics)&quot;&gt;power&lt;/a&gt;
in our signal, and it allows us to talk about and reason about
&lt;a href=&quot;https://en.wikipedia.org/wiki/Power_(physics)&quot;&gt;power&lt;/a&gt;
that might change over time while still having a measure of total
&lt;a href=&quot;https://en.wikipedia.org/wiki/Power_(physics)&quot;&gt;power&lt;/a&gt;.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/windowfn/eqn-total-power.png&quot; alt=&quot;&quot; width=&quot;349&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Now that we have this expression for the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Power_(physics)&quot;&gt;power&lt;/a&gt;
measured by an
&lt;a href=&quot;https://en.wikipedia.org/wiki/Analog-to-digital_converter&quot;&gt;A/D&lt;/a&gt;,
we’d like to know how much of this
&lt;a href=&quot;https://en.wikipedia.org/wiki/Power_(physics)&quot;&gt;power&lt;/a&gt; was captured in a
spectrally significant ways  Can we split this summation over frequency instead
of time?  Ideally, we’d like something that both measures our total
&lt;a href=&quot;https://en.wikipedia.org/wiki/Power_(physics)&quot;&gt;power&lt;/a&gt;,
yet also isolates that
&lt;a href=&quot;https://en.wikipedia.org/wiki/Power_(physics)&quot;&gt;power&lt;/a&gt;
by frequency.  This is the purpose of the &lt;a href=&quot;https://en.wikipedia.org/wiki/Spectral_density#Power_spectral_density&quot;&gt;Power Spectral Density Function
(PSD)&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;How shall we get there?  Simple, let’s take a &lt;a href=&quot;https://en.wikipedia.org/wiki/Fourier_transform&quot;&gt;Fourier
transform&lt;/a&gt; of the
elements of this summation.  We’ll start by letting
&lt;img src=&quot;/img/windowfn/expr-Fx.png&quot; alt=&quot;`F{x[n]}`&quot; /&gt; represent the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Fourier_transform&quot;&gt;Fourier transform&lt;/a&gt;
of our input.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/windowfn/eqn-spectral-operator.png&quot; alt=&quot;&quot; width=&quot;439&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;The &lt;a href=&quot;https://en.wikipedia.org/wiki/Spectral_density#Power_spectral_density&quot;&gt;PSD&lt;/a&gt;
of the signal, &lt;img src=&quot;/img/windowfn/expr-p-of-expf.png&quot; alt=&quot;`P(e^{j2pif})`&quot; /&gt;
is then just the square of this value.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/windowfn/eqn-power-at-f.png&quot; alt=&quot;&quot; width=&quot;271&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;This is where we run into our first problem.  What happened to the
&lt;img src=&quot;/img/windowfn/expr-1-over-n.png&quot; alt=&quot;1/N&quot; /&gt; term?
The answer is, we got sloppy and dropped it.  Worse, our
&lt;a href=&quot;https://en.wikipedia.org/wiki/Fourier_transform&quot;&gt;Fourier transform&lt;/a&gt;
summation above doesn’t converge when we apply it either to a constant signal
or a constantly varying signal.  No, we’ll need to back up and rework this.
In particular, we’ll need to be explicit about the limits in our
&lt;a href=&quot;https://en.wikipedia.org/wiki/Fourier_transform&quot;&gt;Fourier transform&lt;/a&gt;.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/windowfn/eqn-spectral-suboperator.png&quot; alt=&quot;&quot; width=&quot;450&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;If we insist that
&lt;img src=&quot;/img/windowfn/expr-N.png&quot; alt=&quot;`N`&quot; /&gt;
be finite, we’ll know that the transform converges.&lt;/p&gt;

&lt;p&gt;We can now apply &lt;a href=&quot;https://en.wikipedia.org/wiki/Parseval%27s_theorem&quot;&gt;Parseval’s
theorem&lt;/a&gt;, knowing that the
integral of this |X(f)|^2 function should give us back our total
&lt;a href=&quot;https://en.wikipedia.org/wiki/Energy&quot;&gt;energy&lt;/a&gt;, and that
&lt;a href=&quot;https://en.wikipedia.org/wiki/Energy&quot;&gt;energy&lt;/a&gt; averaged over time is
&lt;a href=&quot;https://en.wikipedia.org/wiki/Power_(physics)&quot;&gt;power&lt;/a&gt;.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/windowfn/eqn-spectral-energy.png&quot; alt=&quot;&quot; width=&quot;335&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Therefore,&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/windowfn/eqn-power-density-limit.png&quot; alt=&quot;&quot; width=&quot;367&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;and&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/windowfn/eqn-total-spectral-power.png&quot; alt=&quot;&quot; width=&quot;424&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/windowfn/rule-conservation-of-energy.svg&quot; alt=&quot;&quot; width=&quot;480&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;This leads to the first important rule of
&lt;a href=&quot;https://en.wikipedia.org/wiki/Spectral_density#Power_spectral_density&quot;&gt;PSD&lt;/a&gt;
estimation: No &lt;a href=&quot;https://en.wikipedia.org/wiki/Power_(physics)&quot;&gt;power&lt;/a&gt;
should be accidentally gained or lost during our analysis.  Our goal must be
to preserve this total received power measurement.&lt;/p&gt;

&lt;p&gt;What happens, though, if we only look at a band of frequencies instead?&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/windowfn/eqn-power-in-bw.png&quot; alt=&quot;&quot; width=&quot;318&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left; padding: 20px&quot;&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/windowfn/rule-spectral-localization.svg&quot; alt=&quot;&quot; width=&quot;480&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;We’d then have an estimate of how much
&lt;a href=&quot;https://en.wikipedia.org/wiki/Power_(physics)&quot;&gt;power&lt;/a&gt;
lied between these frequencies.&lt;/p&gt;

&lt;p&gt;If you then take the limit of this power measurement as the bandwidth goes
to zero, you’ll get a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Spectral_density#Power_spectral_density&quot;&gt;PSD&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Sadly, this infinite limit over time makes the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Spectral_density#Power_spectral_density&quot;&gt;PSD&lt;/a&gt;
difficult to work with, if for no other reason than it’s impossible to sample
a signal for all time in order to estimate its
&lt;a href=&quot;https://en.wikipedia.org/wiki/Spectral_density#Power_spectral_density&quot;&gt;PSD&lt;/a&gt;.
So, what if we didn’t take the limit as
&lt;img src=&quot;/img/windowfn/expr-N-to-infty.png&quot; alt=&quot;N-&amp;gt;Infty&quot; /&gt;?
We’d then have an &lt;em&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Energy&quot;&gt;energy&lt;/a&gt;&lt;/em&gt; measurement,
rather than a &lt;a href=&quot;https://en.wikipedia.org/wiki/Power_(physics)&quot;&gt;power&lt;/a&gt;
measurement.  Not only that, but our
measurements suddenly get a lot more practical to work with.&lt;/p&gt;

&lt;p&gt;For example, if our signal were limited to
&lt;img src=&quot;/img/windowfn/expr-N.png&quot; alt=&quot;`N`&quot; /&gt; samples rather than an
infinite number, then we could use a &lt;a href=&quot;https://en.wikipedia.org/wiki/Discrete-time_Fourier_transform&quot;&gt;discrete time Fourier transform
(DTFT)&lt;/a&gt; instead.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/windowfn/eqn-esd-defn.png&quot; alt=&quot;&quot; width=&quot;503&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Now we’re getting somewhere, right?  This is something I can calculate, and
a value I can use!&lt;/p&gt;

&lt;p&gt;Only … it’s not that useful.&lt;/p&gt;

&lt;p&gt;The problem has to do with our limits.  Our original signal was unlimited
in time.  We then arbitrarily forced limits in time upon it.  This will
cause spectral energy to spill from one frequency region to another.
The solution to this problem is to use a spectral taper, sometimes called
a &lt;a href=&quot;https://en.wikipedia.org/wiki/Window_function&quot;&gt;window function&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;the-short-time-fourier-transform&quot;&gt;The Short-Time Fourier Transform&lt;/h2&gt;

&lt;p&gt;There have been a lot of discussions regarding how to ideally decompose a
signal into time and frequency.  One reference I’ve enjoyed has been &lt;a href=&quot;https://www.amazon.com/Time-Frequency-Analysis-Theory-Applications/dp/0135945321&quot;&gt;Cohen’s
book on Time-Frequency Analysis&lt;/a&gt;.  It does a nice job of providing a good
overview of the topic.  That said, the first thing Cohen does is to reject
the &lt;a href=&quot;https://en.wikipedia.org/wiki/Short-time_Fourier_transform&quot;&gt;Short Time Fourier
Transform&lt;/a&gt;
based methods for other more generic quadratic methods–methods that don’t even
preserve the concept of &lt;a href=&quot;https://en.wikipedia.org/wiki/Energy&quot;&gt;&lt;em&gt;energy&lt;/em&gt;&lt;/a&gt;
in the first place.  Most of the methods he discusses will produce both
positive and negative
“&lt;a href=&quot;https://en.wikipedia.org/wiki/Energy&quot;&gt;&lt;em&gt;energy&lt;/em&gt;&lt;/a&gt;” estimates.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/windowfn/scharfs-rules.svg&quot; alt=&quot;&quot; width=&quot;480&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Negative energy?  That doesn’t make any sense.  Sorry, but I’ll need another
approach.&lt;/p&gt;

&lt;p&gt;The next important spectral estimation reference is &lt;a href=&quot;http://ieeexplore.ieee.org/document/679147/&quot;&gt;Scharf, Friedlander
and Mullis’ paper, Time-varying spectrum
estimators&lt;/a&gt;, which works
out the form of the ideal spectral estimator from first principles.  If you
are interested in this topic, I would highly recommend this paper to you before
any other references.  By insisting that energy should always be non-negative,
&lt;a href=&quot;http://ieeexplore.ieee.org/document/679147/&quot;&gt;Scharf, et.al.&lt;/a&gt;, are able to
drastically limit the kind of spectral estimation algorithms that need
to be examined.  By further limiting the set of all possible &lt;a href=&quot;http://ieeexplore.ieee.org/document/679147/&quot;&gt;time-varying
spectral estimators&lt;/a&gt;
to only those which preserve our understanding of both time and frequency,
they are able to limit the set of spectral estimators to the
set of estimator’s generated by &lt;a href=&quot;https://en.wikipedia.org/wiki/Window_function&quot;&gt;multiple-taper
windows&lt;/a&gt;.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/windowfn/eqn-multi-taper.png&quot; alt=&quot;&quot; width=&quot;559&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;I’d like to add to this discussion the proof that, if you want the maximum
&lt;a href=&quot;https://en.wikipedia.org/wiki/Uncertainty_principle&quot;&gt;time-frequency
resolution&lt;/a&gt;,
then &lt;em&gt;nothing&lt;/em&gt; beats a &lt;a href=&quot;https://en.wikipedia.org/wiki/Window_function&quot;&gt;single
taper&lt;/a&gt; representation.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/windowfn/eqn-single-taper.png&quot; alt=&quot;&quot; width=&quot;525&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;There’s a nice proof available for this, so it’s something we may need to come
back to later.
Getting there, however, will take some work–so let’s just look at how to
implement a single taper estimate in the first place.  For that, we want
to look into how to implement the single-taper implementation known as a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Window_function&quot;&gt;window function&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Here’s the basic idea of how this works:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;We’ll break a stream of incoming data into chunks, each the size of one
&lt;a href=&quot;/dsp/2018/10/02/fft.html&quot;&gt;FFT&lt;/a&gt; and
each separated by
&lt;img src=&quot;/img/windowfn/expr-D.png&quot; alt=&quot;`D`&quot; /&gt; samples.
If &lt;img src=&quot;/img/windowfn/expr-DltN.png&quot; alt=&quot;`D &amp;lt; N`&quot; /&gt;
then there will necessarily be some amount of overlap between
these various chunks.&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/img/windowfn/eqn-data-chunk.png&quot; alt=&quot;`CHUNK[nD] = x[nD-(N-1)], ... x[nD]`&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;We’ll come back to this in a moment, but for now remember that 50%
overlap is easy to build and (often) sufficient for most purposes.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;We’ll then apply our
&lt;a href=&quot;https://en.wikipedia.org/wiki/Window_function&quot;&gt;window function&lt;/a&gt;
to each chunk of data.&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/img/windowfn/eqn-windowed-raw.png&quot; alt=&quot;`WINDOWED[nD] = h[N-1]x[nD-(N-1)], ... h[0]x[nD]`&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;As a notational simplification, if we insist that
&lt;img src=&quot;/img/windowfn/eqn-hk-eq-zero.png&quot; alt=&quot;`h[k] = 0`&quot; /&gt; for
&lt;img src=&quot;/img/windowfn/ineq-k-lt-zero.png&quot; alt=&quot;`k&amp;lt;0`&quot; /&gt; or
&lt;img src=&quot;/img/windowfn/ineq-k-geq-N.png&quot; alt=&quot;`k&amp;gt;=N`&quot; /&gt;,
then we might just refer to
&lt;img src=&quot;/img/windowfn/expr-hk-xnD-k.png&quot; alt=&quot;`h[k]x[nD-k]`&quot; /&gt;.&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/img/windowfn/eqn-windowed-data.png&quot; alt=&quot;`WINDOWED[nD] = ... h[k]x[nD-k] ...`&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;You might also note that this
&lt;a href=&quot;https://en.wikipedia.org/wiki/Window_function&quot;&gt;window function&lt;/a&gt;
is starting to look like a &lt;a href=&quot;/dsp/2017/08/19/simple-filter.html&quot;&gt;digital
filter&lt;/a&gt;.  That’s
because it &lt;em&gt;is&lt;/em&gt; a &lt;a href=&quot;/dsp/2017/09/15/fastfir.html&quot;&gt;digital FIR
filter&lt;/a&gt;.  Indeed, one of
&lt;a href=&quot;http://ieeexplore.ieee.org/document/1162950/&quot;&gt;Allen’s observations&lt;/a&gt; is
that a &lt;a href=&quot;https://en.wikipedia.org/wiki/Window_function&quot;&gt;windowed&lt;/a&gt;
&lt;a href=&quot;/dsp/2018/10/02/fft.html&quot;&gt;Fourier transform&lt;/a&gt;
produces a series of filtered, downconverted,
and &lt;a href=&quot;/dsp/2020/07/28/down-sampler.html&quot;&gt;downsampled&lt;/a&gt;
outputs.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;As a final step, we’ll apply an
&lt;a href=&quot;/dsp/2018/10/02/fft.html&quot;&gt;FFT&lt;/a&gt; to that
&lt;a href=&quot;https://en.wikipedia.org/wiki/Window_function&quot;&gt;windowed&lt;/a&gt;
chunk of data, and report and record the results.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/windowfn/eqn-ym.png&quot; alt=&quot;&quot; width=&quot;371&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;To do this in a useful fashion, there are a couple of basic criteria you’ll
need:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;The &lt;a href=&quot;https://en.wikipedia.org/wiki/Window_function&quot;&gt;window function&lt;/a&gt;,
h[k], needs to be a &lt;a href=&quot;https://en.wikipedia.org/wiki/Low-pass_filter&quot;&gt;lowpass
filter&lt;/a&gt; with a strong
&lt;a href=&quot;https://en.wikipedia.org/wiki/Stopband&quot;&gt;stopband&lt;/a&gt; rejection.&lt;/p&gt;

    &lt;p&gt;While they may not be &lt;em&gt;optimal&lt;/em&gt;, most of your traditional
&lt;a href=&quot;https://en.wikipedia.org/wiki/Window_function&quot;&gt;window functions&lt;/a&gt;
meet this criteria:
&lt;a href=&quot;https://en.wikipedia.org/wiki/Hann_function&quot;&gt;Hann&lt;/a&gt;,
&lt;a href=&quot;https://en.wikipedia.org/wiki/Window_function#Blackman_window&quot;&gt;Blackman&lt;/a&gt;,
&lt;a href=&quot;https://en.wikipedia.org/wiki/Window_function#Hamming_window&quot;&gt;Hamming&lt;/a&gt;,
&lt;a href=&quot;https://en.wikipedia.org/wiki/Window_function#Triangular_window&quot;&gt;Bartlett&lt;/a&gt;,
&lt;a href=&quot;http://ieeexplore.ieee.org/document/1163506/&quot;&gt;etc.&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;To satisfy the requirements of the &lt;a href=&quot;https://en.wikipedia.org/wiki/Nyquist%E2%80%93Shannon_sampling_theorem&quot;&gt;Nyquist sampling
theorem&lt;/a&gt;,
it is important that the step size be related to the cutoff frequency of the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Low-pass_filter&quot;&gt;lowpass filter&lt;/a&gt;.
In general, this means that
&lt;img src=&quot;/img/windowfn/expr-D.png&quot; alt=&quot;`D`&quot; /&gt;
must be less than or equal to
&lt;img src=&quot;/img/windowfn/expr-N-over-2.png&quot; alt=&quot;`N/2`&quot; /&gt;.&lt;/p&gt;

    &lt;p&gt;This choice is actually related to the &lt;a href=&quot;https://en.wikipedia.org/wiki/Window_function&quot;&gt;window
function&lt;/a&gt; design.
What should the cutoff frequency of the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Window_function&quot;&gt;window function&lt;/a&gt; be?
One might argue that the ideal
&lt;a href=&quot;https://en.wikipedia.org/wiki/Window_function&quot;&gt;window function&lt;/a&gt;
would isolate various signal frequency components to their nearest bins.
For example, if a tone were anywhere within a frequency bin, it should
then create a response in that bin and that bin only.  Such a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Window_function&quot;&gt;window&lt;/a&gt;
would be a &lt;a href=&quot;https://en.wikipedia.org/wiki/Low-pass_filter&quot;&gt;lowpass filter&lt;/a&gt;
with a cutoff frequency of
&lt;img src=&quot;/img/windowfn/expr-half-bin.png&quot; alt=&quot;`1/2/N`&quot; /&gt;, an
infinitesimal &lt;a href=&quot;https://en.wikipedia.org/wiki/Transition_band&quot;&gt;transition
band&lt;/a&gt;, and an infinite
&lt;a href=&quot;https://en.wikipedia.org/wiki/Stopband&quot;&gt;stopband&lt;/a&gt; rejection.&lt;/p&gt;

    &lt;p&gt;If you’ve studied digital filter design at all, you’d recognize this
filter requirement as the first filter that gets studied–and then rejected
because it is unrealizable due to its infinite length.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/dsp/freq-teaser.html&quot;&gt;Better windows&lt;/a&gt; exist.&lt;/p&gt;

    &lt;p&gt;If we instead compromised and allowed
&lt;a href=&quot;https://en.wikipedia.org/wiki/Energy&quot;&gt;energy&lt;/a&gt; to spill a little bit
from one bin to the next, then we might allow
&lt;a href=&quot;https://en.wikipedia.org/wiki/Energy&quot;&gt;energy&lt;/a&gt;
to spill into the two FFT bins on either side of any bin of interest.
As a tone moved from one bin to the next, the decomposed
spectral &lt;a href=&quot;https://en.wikipedia.org/wiki/Energy&quot;&gt;energy&lt;/a&gt;
should also transition from one bin to the next.  This requires a filter
with a &lt;a href=&quot;https://en.wikipedia.org/wiki/Stopband&quot;&gt;stopband&lt;/a&gt; region starting at
&lt;img src=&quot;/img/windowfn/expr-1-over-n.png&quot; alt=&quot;`1/N`&quot; /&gt;,
but here’s the key criteria:
we don’t need a &lt;a href=&quot;https://en.wikipedia.org/wiki/Passband&quot;&gt;passband&lt;/a&gt;.
The &lt;em&gt;entire&lt;/em&gt; band of interest could be within the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Transition_band&quot;&gt;transition band&lt;/a&gt;
of this filter.  That makes the filter realizable.&lt;/p&gt;

    &lt;p&gt;It also means we want to sample the output at twice this rate in order
to avoid any &lt;a href=&quot;https://en.wikipedia.org/wiki/Aliasing&quot;&gt;aliasing&lt;/a&gt;,
which then brings us back to a minimum 50% overlap.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left; padding: 15px&quot;&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/windowfn/zero-padding.svg&quot; alt=&quot;&quot; width=&quot;480&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;While zero padding in time can help to create the illusion of better
   frequency resolution, you can also increase your overlap amount to create
   a similar illusion of better time resolution.  In this case, the right
   answer depends upon the cutoff frequency of your
   &lt;a href=&quot;https://en.wikipedia.org/wiki/Window_function&quot;&gt;window function&lt;/a&gt;,
   and the sample rate required to avoid losing information.  As an example,
   when using a &lt;a href=&quot;https://en.wikipedia.org/wiki/Hann_function&quot;&gt;Hann&lt;/a&gt; window,
   you might want to set
   &lt;img src=&quot;/img/windowfn/eqn-D-N4.png&quot; alt=&quot;`D=N/4`&quot; /&gt; to create a 75%
   overlap.  This will keep your spectral data from suffering any
   &lt;a href=&quot;https://en.wikipedia.org/wiki/Aliasing&quot;&gt;aliasing&lt;/a&gt; artifacts.&lt;/p&gt;

&lt;p&gt;The problem with using a greater overlap is simple: you end up with more
   data to process.  That is, if you have an incoming sample rate of
   &lt;img src=&quot;/img/windowfn/expr-Rs.png&quot; alt=&quot;`R_s`&quot; /&gt;, and
   you set the decimation factor to
   &lt;img src=&quot;/img/windowfn/eqn-D-N2.png&quot; alt=&quot;`D=N/2`&quot; /&gt;, you’ll now have
   a data rate that you need to process that’s twice as fast, or
   &lt;img src=&quot;/img/windowfn/expr-two-Rs.png&quot; alt=&quot;`2Rs`&quot; /&gt;.  If you set
   &lt;img src=&quot;/img/windowfn/eqn-D-N4.png&quot; alt=&quot;`D=N/4`&quot; /&gt; on the other hand,
   you now have to process a data stream at a rate of
   &lt;img src=&quot;/img/windowfn/expr-four-Rs.png&quot; alt=&quot;`4Rs`&quot; /&gt;, four times
   as fast as the original data stream.  While you can do this to avoid the
   &lt;a href=&quot;https://en.wikipedia.org/wiki/Aliasing&quot;&gt;aliasing&lt;/a&gt;
   problems associated with the
   &lt;a href=&quot;https://en.wikipedia.org/wiki/Hann_function&quot;&gt;Hann&lt;/a&gt; window,
   &lt;a href=&quot;https://en.wikipedia.org/wiki/Window_function&quot;&gt;window&lt;/a&gt;,
   there are &lt;a href=&quot;/dsp/freq-teaser.html&quot;&gt;better
   window functions&lt;/a&gt;
   with tighter cutoffs.&lt;/p&gt;

&lt;p&gt;Still, the &lt;a href=&quot;https://en.wikipedia.org/wiki/Hann_function&quot;&gt;Hann&lt;/a&gt;
   &lt;a href=&quot;https://en.wikipedia.org/wiki/Window_function&quot;&gt;window&lt;/a&gt; will
   be a nice one to work with when using the algorithm that follows.  Indeed,
   it is one of my favorites among the classic
   &lt;a href=&quot;https://en.wikipedia.org/wiki/Window_function&quot;&gt;window&lt;/a&gt; functions for the
   simple reason that it is fairly easy to analyze.&lt;/p&gt;

&lt;ol start=&quot;3&quot;&gt;
  &lt;li&gt;
    &lt;p&gt;The important part of
&lt;a href=&quot;/dsp/freq-teaser.html&quot;&gt;window function&lt;/a&gt;
selection is to make sure that whatever
&lt;a href=&quot;/dsp/freq-teaser.html&quot;&gt;window&lt;/a&gt;
you choose, it should preserve the conservation of
energy principle that we started with.  That is, when we are done, we’ll
want to make certain that,&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/img/windowfn/eqn-final-ptotal.png&quot; alt=&quot;`PTOTAL = LIMIT N-&amp;gt; INFTY (1/N) |ym[n]|^2`&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;This is one of the drawbacks of most of your traditional
&lt;a href=&quot;/dsp/freq-teaser.html&quot;&gt;window functions&lt;/a&gt;,
to include my favorite &lt;a href=&quot;https://en.wikipedia.org/wiki/Hann_function&quot;&gt;Hann&lt;/a&gt;
&lt;a href=&quot;/dsp/freq-teaser.html&quot;&gt;window&lt;/a&gt;.
Most of these functions will over or undercount certain spectral or temporal
energy.  The solution would be to use a root-Nyquist filter, of which
&lt;a href=&quot;https://en.wikipedia.org/wiki/Root-raised-cosine_filter&quot;&gt;Root-Raised
cosine filters&lt;/a&gt;
are the best known subset despite their poor out-of-band performance.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;At this point, if we have a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Low-pass_filter&quot;&gt;lowpass&lt;/a&gt;
&lt;a href=&quot;/dsp/freq-teaser.html&quot;&gt;windowing function&lt;/a&gt;,
together with better than Nyquist sampling, together with our conservation
of energy requirement, we know that our
&lt;a href=&quot;/dsp/freq-teaser.html&quot;&gt;window function&lt;/a&gt;
will localize the energy in the incoming signal to
a particular band.  Even better, we can take summations across multiple
band outputs to estimate the amount of energy limited by those spectral
bands.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/windowfn/eqn-psdhat-sum.png&quot; alt=&quot;hat{P}BS(m/N) = SUM^{k=-BW/2}^{BW/2} |ym+k[n]|^2&quot; width=&quot;243&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;This was one of our success criteria, and it looks like we’ve achieved it.&lt;/p&gt;

&lt;p&gt;It’s actually better than that.  Not only can we localize
&lt;a href=&quot;https://en.wikipedia.org/wiki/Energy&quot;&gt;energy&lt;/a&gt; spectrally, but we can also
locate &lt;a href=&quot;https://en.wikipedia.org/wiki/Energy&quot;&gt;energy&lt;/a&gt;
in time.  Hence, we have a &lt;a href=&quot;http://ieeexplore.ieee.org/document/679147/&quot;&gt;time–varying spectral energy
estimator&lt;/a&gt; as desired.&lt;/p&gt;

&lt;p&gt;Pretty cool, huh?&lt;/p&gt;

&lt;p&gt;Curiously, the conservation of energy criteria together with the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Low-pass_filter&quot;&gt;lowpass filter&lt;/a&gt;
cutoff criteria are sufficient for the transform to be invertible.
See &lt;a href=&quot;http://ieeexplore.ieee.org/document/1162950/&quot;&gt;Allen&lt;/a&gt; or
&lt;a href=&quot;https://www.amazon.com/Multirate-Digital-Signal-Processing-Crochiere/dp/0136051626&quot;&gt;Crochiere&lt;/a&gt;
for more information on this.&lt;/p&gt;

&lt;p&gt;For now, the question I would like to focus on today is how the basic
&lt;a href=&quot;https://en.wikipedia.org/wiki/Short-time_Fourier_transform&quot;&gt;Windowed&lt;/a&gt;
&lt;a href=&quot;/dsp/2018/10/02/fft.html&quot;&gt;FFT&lt;/a&gt;
structure should be implemented within an FPGA.&lt;/p&gt;

&lt;h2 id=&quot;implementation-overview&quot;&gt;Implementation Overview&lt;/h2&gt;

&lt;p&gt;Let’s start out with just a simple and general overview of how a spectral
analysis design might work.&lt;/p&gt;

&lt;p&gt;As with any data processing design, the data processing is typically done
within some tight data loop, where the first step is to grab data.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;	&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// Get some number of data samples&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;get_adc_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If the data isn’t (yet) ready, the easy answer is to stall within this
function until a sufficient amount of data becomes ready.  Once a buffer is
ready, then it can be returned and further processed.&lt;/p&gt;

&lt;p&gt;For the sake of discussion today, we’ll assume this buffer is a buffer of
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;double&lt;/code&gt; while working in C++.  Of course, we’ll have to change that to
&lt;a href=&quot;https://en.wikipedia.org/wiki/Fixed-point_arithmetic&quot;&gt;fixed point&lt;/a&gt;
once we switch to Verilog, but I’m likely to gloss over any difference
in details between the two–even though the difference between
&lt;a href=&quot;https://en.wikipedia.org/wiki/Floating-point_arithmetic&quot;&gt;floating&lt;/a&gt; and
&lt;a href=&quot;https://en.wikipedia.org/wiki/Fixed-point_arithmetic&quot;&gt;fixed point&lt;/a&gt;
formats is far from inconsequential.&lt;/p&gt;

&lt;p&gt;Once we have our data samples, we’ll apply our
&lt;a href=&quot;/dsp/freq-teaser.html&quot;&gt;window function&lt;/a&gt;
as described above and as we’ll discuss further below.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;		&lt;span class=&quot;c1&quot;&gt;// Apply a window function&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;apply_window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The result of applying a
&lt;a href=&quot;/dsp/freq-teaser.html&quot;&gt;window function&lt;/a&gt;
to our new data is a buffer of data, sized to the size of our
&lt;a href=&quot;/dsp/2018/10/02/fft.html&quot;&gt;FFT&lt;/a&gt;,
which we then send directly into the
&lt;a href=&quot;/dsp/2018/10/02/fft.html&quot;&gt;FFT&lt;/a&gt;.
For now, let’s assume the incoming data buffer size is the same as the
&lt;a href=&quot;/dsp/2018/10/02/fft.html&quot;&gt;FFT&lt;/a&gt; size–and fix this
in a second design attempt further down.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;		&lt;span class=&quot;c1&quot;&gt;// Take an FFT of the results&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;fft&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FFTSIZE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We now have the results of an
&lt;a href=&quot;/dsp/2018/10/02/fft.html&quot;&gt;FFT&lt;/a&gt;, only we can’t plot them.
&lt;a href=&quot;/dsp/2018/10/02/fft.html&quot;&gt;FFT&lt;/a&gt;s return
complex data: there’s both &lt;a href=&quot;https://en.wikipedia.org/wiki/Complex_number&quot;&gt;real and imaginary
components&lt;/a&gt;.  There’s no easy
way to plot
&lt;a href=&quot;https://en.wikipedia.org/wiki/Complex_number&quot;&gt;complex&lt;/a&gt;
data like that.  However, as described above, we don’t
really want
&lt;a href=&quot;https://en.wikipedia.org/wiki/Complex_number&quot;&gt;complex&lt;/a&gt;
data: we want the absolute value squared of our data.
Therefore, we want to replace our data with its absolute value squared.
Optionally, we could also convert the result to
&lt;a href=&quot;https://en.wikipedia.org/wiki/Decibel&quot;&gt;Decibels&lt;/a&gt; at this time as well.
(Note that this transformation is non-linear, so you may wish to keep a copy of
the original signal around when you do this.)&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;		&lt;span class=&quot;c1&quot;&gt;// Calculate absolute magnitude squared&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// of the complex results&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FFTSIZE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

			&lt;span class=&quot;c1&quot;&gt;// Optionally, convert to decibels&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;// buffer[k] = 20 * log(buffer[k]) / log(10.0);&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You might notice that I’m not being consistent here: I’m mixing real data and
&lt;a href=&quot;https://en.wikipedia.org/wiki/Complex_number&quot;&gt;complex&lt;/a&gt;
data together.  Were the original data set real, the
&lt;a href=&quot;/dsp/2018/10/02/fft.html&quot;&gt;FFT&lt;/a&gt; might return the
DC component in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;buffer[0]&lt;/code&gt; and the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;N/2&lt;/code&gt; component in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;buffer[1]&lt;/code&gt;.  In that
case, it would be inappropriate to mix these two components together.
Likewise, if the original data were
&lt;a href=&quot;https://en.wikipedia.org/wiki/Complex_number&quot;&gt;complex&lt;/a&gt; that were then
&lt;a href=&quot;https://en.wikipedia.org/wiki/Fourier_transform&quot;&gt;Fourier transformed&lt;/a&gt;,
you might now want to apply an &lt;a href=&quot;/dsp/2018/10/02/fft.html&quot;&gt;FFT&lt;/a&gt;
shift to place the DC value in the center of the band.  I’m just glossing over
these details for now because it’s not the focus of what
I really want to discuss–the implementation of the
&lt;a href=&quot;/dsp/freq-teaser.html&quot;&gt;window function&lt;/a&gt; itself.&lt;/p&gt;

&lt;p&gt;The next step, required prior to displaying any spectral energy data, is to
scale it to what the screen can display.  For a graph plot, this might also
mean adjusting the vertical axis so things can fit.  For rastered time
varying energy spectral data, you’ll need to scale the data so that it then
represents an index into a color map–something we can discuss again in another
article.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;		&lt;span class=&quot;c1&quot;&gt;// Possibly scale the results&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OPTIONALLY_SCALE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;scale&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Finally, at this point, we can now plot our buffer and repeat this whole
process for the next incoming data buffer.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;		&lt;span class=&quot;c1&quot;&gt;// Plot the result&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;plot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If you are curious what these steps might look like in Verilog, check out the
&lt;a href=&quot;https://github.com/ZipCPU/fftdemo/blob/master/rtl/main.v&quot;&gt;main verilog file&lt;/a&gt;
from this &lt;a href=&quot;https://github.com/ZipCPU/fftdemo&quot;&gt;FFT raster demonstration&lt;/a&gt;.
The biggest difference is that FPGAs operate on live data &lt;em&gt;streams&lt;/em&gt; rather
than data &lt;em&gt;blocks&lt;/em&gt;–but the concepts remain the same.&lt;/p&gt;

&lt;p&gt;So now that we’ve looked over the context of how a
&lt;a href=&quot;/dsp/freq-teaser.html&quot;&gt;window function&lt;/a&gt; might fit
into a larger algorithm, how should it be implemented?  It’s really
simple: we’d take our data, and multiply each sample of it by the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Window_function&quot;&gt;window function&lt;/a&gt;
before returning it.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;m_window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FFTSIZE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;	&lt;span class=&quot;nf&quot;&gt;apply_window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FFTSIZE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If we could keep the algorithm that simple, then it would also be quite easy to
implement in Verilog.  All we’d need to do would be to multiply every
incoming sample by the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Window_function&quot;&gt;window&lt;/a&gt;’s
coefficient to create an outgoing sample.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_ce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// For every incoming sample ...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// 1. Calculate a windowed outgoing sample&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;o_sample&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cmem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tidx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_sample&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;c1&quot;&gt;// 2. Mark the following outgoing sample as valid&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;o_ce&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;c1&quot;&gt;// 3. Increment the index into our coeffficient table&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;tidx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tidx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;c1&quot;&gt;// 4. Mark the first outgoing sample&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;o_frame&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tidx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// Clear the outgoing valid signal, making certain it's&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// only ever high for one cycle.&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;o_ce&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This rudimentary implementation has a couple of problems, however.  One
problem is that you can’t read from block RAM and use the result on the same
cycle.  A second more fundamental problem is the fact that this
&lt;a href=&quot;https://en.wikipedia.org/wiki/Window_function&quot;&gt;window function&lt;/a&gt;
implementation doesn’t handle any overlap.&lt;/p&gt;

&lt;p&gt;So let’s back up and discuss how we might handle overlap for a moment.&lt;/p&gt;

&lt;p&gt;At a minimum, we need to keep track of the last half
&lt;a href=&quot;/dsp/2018/10/02/fft.html&quot;&gt;FFT&lt;/a&gt;’s
worth of incoming data.  That will require a buffer.  Practically, we have
to keep track of more than just the last half of the
&lt;a href=&quot;/dsp/2018/10/02/fft.html&quot;&gt;FFT&lt;/a&gt;’s incoming data, since
it will be hard to capture the next half
&lt;a href=&quot;/dsp/2018/10/02/fft.html&quot;&gt;FFT&lt;/a&gt;’s
worth of data without destroying the data we still need to use along the way.&lt;/p&gt;

&lt;p&gt;Therefore, let’s start out with a buffer the size of a full
&lt;a href=&quot;/dsp/2018/10/02/fft.html&quot;&gt;FFT&lt;/a&gt;,
and an index into where the most recent data is within that buffer.  This
will allow us to use one half of the buffer, while reading new data into the
second half.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;m_loc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;// Index into our buffer&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;m_window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FFTSIZE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// Window function coefficients&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;m_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FFTSIZE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;// Data buffer&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now, every time we get &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;N/2&lt;/code&gt; samples, herein noted as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FFTSIZE/2&lt;/code&gt;, we’ll call
our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;apply_window()&lt;/code&gt; function.  This function will consume &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FFTSIZE/2&lt;/code&gt; samples,
and then produce &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FFTSIZE&lt;/code&gt; windowed samples as outputs.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;c1&quot;&gt;//&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// FFTSIZE/2 data comes in, filling the first FFTSIZE/2 samples of the&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// given buffer.  The input buffer's size, however, must be FFTSIZE in&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// length to handle the returned window data&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;	&lt;span class=&quot;nf&quot;&gt;apply_window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt;	&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;outp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The first task of this function will be to copy the new data into the
oldest position in our buffer.  If we keep the new data location aligned
with the overlap, then this copy can be done quite simply.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;	&lt;span class=&quot;c1&quot;&gt;// Add the input to our buffers ...&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;ptr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_loc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;inp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FFTSIZE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ptr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If the new data amount wasn’t a factor of the
&lt;a href=&quot;/dsp/2018/10/02/fft.html&quot;&gt;FFT&lt;/a&gt;
size, we would’ve then also needed to check for overflowing the end of our
buffer in the middle of the loop.  With an exact 50% overlap, though, we can
skip that check.&lt;/p&gt;

&lt;p&gt;We’ll then advance the data location pointer by a half
&lt;a href=&quot;/dsp/2018/10/02/fft.html&quot;&gt;FFT&lt;/a&gt;
length, and force it to stay within one
&lt;a href=&quot;/dsp/2018/10/02/fft.html&quot;&gt;FFT&lt;/a&gt;’s size.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;	&lt;span class=&quot;n&quot;&gt;m_loc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FFTSIZE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;m_loc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FFTSIZE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We now have a full
&lt;a href=&quot;/dsp/2018/10/02/fft.html&quot;&gt;FFT&lt;/a&gt;’s
worth of data to apply our
&lt;a href=&quot;https://en.wikipedia.org/wiki/Window_function&quot;&gt;window&lt;/a&gt; to.  This data
will either be the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;m_data&lt;/code&gt; buffer itself, or the two halves of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;m_data&lt;/code&gt;
buffer in reversed order.  That means we’d need to apply the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Window_function&quot;&gt;window&lt;/a&gt; one half at a time.&lt;/p&gt;

&lt;p&gt;So, let’s start with the first half–the half that starts out with the data
left in the buffer from the last &lt;a href=&quot;https://en.wikipedia.org/wiki/Window_function&quot;&gt;window
function&lt;/a&gt;
invocation.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;	&lt;span class=&quot;c1&quot;&gt;// Apply the filter to generate a block for FFT'ing&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;ptr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_loc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;outp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;tap&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FFTSIZE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;outp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ptr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Again, because we’ve guaranteed that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;m_loc&lt;/code&gt; is either 0 or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FFTSIZE/2&lt;/code&gt;, we
don’t need to check for pointer boundaries within this loop.&lt;/p&gt;

&lt;p&gt;To handle the next half, we’ll need to update our data pointer.  This will
either leave it the same, or set it to the first half.  We can then loop
over the second half.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;	&lt;span class=&quot;n&quot;&gt;ptr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_loc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FFTSIZE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FFTSIZE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;outp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ptr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Voila!  We’ve just accomplished a &lt;a href=&quot;https://en.wikipedia.org/wiki/Window_function&quot;&gt;window
function&lt;/a&gt;
while handling overlap.&lt;/p&gt;

&lt;p&gt;How would we do this from Verilog?&lt;/p&gt;

&lt;p&gt;Well, the first difference is that we’ll always have data coming in–whether
or not we’re ready for it.  That data will need to be stored into our buffer.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;dwidx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// Data write index&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_ce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;dmem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dwidx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_sample&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;dwidx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dwidx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The next big problem will be how to handle the data rate change–data comes into
our algorithm at one rate, and it must go out at twice that rate.  To handle
that, I’m going to create two “clock enable” inputs: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;i_ce&lt;/code&gt;, for when valid
data comes in, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;i_alt_ce&lt;/code&gt;, to describe the pipeline between valid data
samples.  Our rule will be that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;i_alt_ce&lt;/code&gt; must be high once, and only once,
between every pair of clocks having &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;i_ce&lt;/code&gt; high.  That way we have a data
stream clocking signal handling both clocks.  You can see an example of what
this might look like in Fig. 5 for an 8-point
&lt;a href=&quot;/dsp/2018/10/02/fft.html&quot;&gt;FFT&lt;/a&gt;.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 5. Two separate incoming CE signals, one outgoing CE signal&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/windowfn/wintrace.svg&quot; alt=&quot;&quot; width=&quot;780&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;&lt;!-- about 9+4=13 wide --&gt;&lt;/p&gt;

&lt;p&gt;Hence, for every incoming sample, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;i_ce&lt;/code&gt;, we’ll create an outgoing clock
enable.  Likewise for every incoming &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;i_alt_ce&lt;/code&gt;, we’ll also create an outgoing
clock enable.  Further, at the beginning of every outgoing burst we’ll set an
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;o_frame&lt;/code&gt; signal to indicate the first clock cycle in the frame.
This alternate data valid signal, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;i_alt_ce&lt;/code&gt;, could easily be set to a one-clock
delayed version of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;i_ce&lt;/code&gt;.  I’ve chosen not to do that here, lest the output
need to go through a “slow” DSP processing engine that depends upon a
minimum number of idle clocks between outgoing samples.&lt;/p&gt;

&lt;p&gt;You’ll also notice from Fig. 5 that the output starts with the first
four samples from the last &lt;a href=&quot;/dsp/2018/10/02/fft.html&quot;&gt;FFT&lt;/a&gt;,
followed by the new four samples.  In the picture, these last four samples
are listed as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WX0&lt;/code&gt; through &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WX3&lt;/code&gt;, whereas the new ones are listed as
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wD0&lt;/code&gt; through &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wD3&lt;/code&gt;.  In the second block of data, those same samples are listed
as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WD0&lt;/code&gt; through &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WD3&lt;/code&gt;–since they’ve now been multiplied by the second half
of the window function.&lt;/p&gt;

&lt;p&gt;Having two clock enable signals, whether &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;i_ce&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;i_alt_ce&lt;/code&gt;, will mean that
we need to update our internal indexes anytime either is true.  This would
lead to an indexing algorithm looking (almost) like:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_ce&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_alt_ce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;tidx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tidx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// Coefficient index&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;didx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;didx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// Data index&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;That would be the first clock of our processing.  Once we know which data
to read and what memory to read it from, we’d then read from the two
memories–both data and coefficient.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dmem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;didx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;tap&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cmem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tidx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;On the next clock, now that we have both of these values, we can multiply
them together to get the window product we want to create.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_sample&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We could then use a simple shift register to determine when an outgoing
sample should be valid.  We’ll use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;d_ce&lt;/code&gt; to represent when our data is valid,
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;p_ce&lt;/code&gt; to represent when our product is valid, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;o_ce&lt;/code&gt; to represent when
the outgoing sample is valid.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o_ce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p_ce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d_ce&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p_ce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d_ce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_ce&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_alt_ce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Sounds easy enough, right?  Fig. 6 shows how some of these respective CE
signals might relate.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 6. A more detailed trace&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/windowfn/detailed-trace.svg&quot; alt=&quot;&quot; width=&quot;780&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;&lt;!-- about 9+4=13 wide --&gt;&lt;/p&gt;

&lt;p&gt;Not quite.&lt;/p&gt;

&lt;p&gt;The first problem is the data index.  While it should go through the data
from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0...N-1&lt;/code&gt; the first time through, we want to go through
samples &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;N/2...N-1, 0 ... N/2-1&lt;/code&gt; the second time through.  We’ll then want
to alternate between these two index sequences.&lt;/p&gt;

&lt;p&gt;How shall we know which sequence to use at any given time?  For that, we can
use the data writing index.  On the last sample of any window set, following
the last &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;i_ce&lt;/code&gt; in the set, the data write index will then be set to write
a new sample to the next buffer.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_alt_ce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dwidx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LGNFFT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We can then use this write index as an indication that the data sample
&lt;em&gt;read&lt;/em&gt; index should be adjusted.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;c1&quot;&gt;// Restart on the first point of the next FFT&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;didx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LGNFFT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// Maintain the top bit, so as to keep&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// the overlap working properly&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;didx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LGNFFT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dwidx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LGNFFT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;For all other samples, though, we’ll simply increment the data read
index as before.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_ce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_alt_ce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// Process the next point in this FFT&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;didx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;didx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1'b1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Indeed, our process really shouldn’t be any more complicated than that.&lt;/p&gt;

&lt;h2 id=&quot;window-function-details&quot;&gt;Window Function Details&lt;/h2&gt;

&lt;p&gt;With all that background behind us, let’s turn our attention to the detailed
design and implementation of &lt;a href=&quot;https://github.com/ZipCPU/dblclockfft/blob/master/rtl/windowfn.v&quot;&gt;this window
function&lt;/a&gt;.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 7. Window Function port diagram&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/windowfn/blockd.svg&quot; alt=&quot;&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;&lt;!-- about 9+4=13 wide --&gt;&lt;/p&gt;

&lt;p&gt;We’ve gone over most of the ports already, so the port list of this function
shouldn’t be too surprising.&lt;/p&gt;

&lt;p&gt;The one item we haven’t discussed yet is a mechanism for updating the
coefficients of the window function.  In this case, I’ve chosen to use
the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;i_tap_wr&lt;/code&gt; interface to indicate that a new coefficient is available
in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;i_tap&lt;/code&gt; to write into the filter.  I suppose I could have used a more
general purpose block RAM interface, but I’ve chosen this interface to be
consistent with those faster filters that can’t handle the block RAM interface.&lt;/p&gt;

&lt;p&gt;We’ve discussed the rest of the ports above: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;i_clk&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;i_reset&lt;/code&gt; should
be self explanatory.  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;i_ce&lt;/code&gt; will be true for every incoming data value, and
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;i_alt_ce&lt;/code&gt; will need to be true once between every pair of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;i_ce&lt;/code&gt; values as
shown in Figs. 5 and 6 above.  When the output is ready, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;o_ce&lt;/code&gt; will be
asserted and the sample will be placed into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;o_sample&lt;/code&gt;.  We’ll also note
the first sample in any block by setting &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;o_frame&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;cp&quot;&gt;`default_nettype&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;none&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;windowfn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_tap_wr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_tap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;i_ce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_sample&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_alt_ce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_frame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o_ce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o_sample&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We’ll allow for an input width of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IW&lt;/code&gt; bits, an outgoing width of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OW&lt;/code&gt; bits,
and a coefficient width of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TW&lt;/code&gt; bits.  (Sorry, but I consider filter
coefficients to be &lt;em&gt;taps&lt;/em&gt;, and get my notation confused.  The term &lt;em&gt;tap&lt;/em&gt;
more appropriately describes the structure of the filter rather than the
coefficients themselves.  Still, you’ll find &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tidx&lt;/code&gt; referencing a coefficient
index below, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TW&lt;/code&gt; referencing the bit-width of coefficients here.)
The default implementation will also support an
&lt;a href=&quot;/dsp/2018/10/02/fft.html&quot;&gt;FFT&lt;/a&gt; size of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2^LGNFFT&lt;/code&gt;, or
16 samples.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;parameter&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;IW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LGNFFT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Why is the default so short?  It makes coverage easier to check.  That’s all.&lt;/p&gt;

&lt;p&gt;If you want to be able to update the coefficients on the fly, then you’ll want
to leave &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OPT_FIXED_TAPS&lt;/code&gt; at zero.  Likewise, if you want to load the
initial coefficients from a file, we’ll offer an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;INITIAL_COEFFS&lt;/code&gt; filename
for that purpose.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;parameter&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;OPT_FIXED_TAPS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1'b0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;parameter&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;INITIAL_COEFFS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The next optional parameter, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OPT_TLAST_FRAME&lt;/code&gt; deserves some more discussion.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;parameter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;OPT_TLAST_FRAME&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1'b0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If you want to convert this design from my own signaling scheme into an
AXI-stream based signaling protocol, you’ll run into a problem with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TLAST&lt;/code&gt;.
Yes, most of the conversion is easy.
For example, a small FIFO on the back end can handle stopping the window
on any &lt;a href=&quot;https://en.wikipedia.org/wiki/Back_pressure&quot;&gt;back pressure&lt;/a&gt;.
Just be careful to update the fill of that FIFO
based upon the data going into the front end.  The problem lies with the
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;o_frame&lt;/code&gt; output.  I’ve chosen to set &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;o_frame&lt;/code&gt; on the first sample of any
data set.  AXI Stream likes a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TLAST&lt;/code&gt; value, where &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TLAST&lt;/code&gt; would be true on
the &lt;em&gt;last&lt;/em&gt; item in any data set.  Hence the parameter, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OPT_TLAST_FRAME&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OPT_TLAST_FRAME&lt;/code&gt; is set, then &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;o_frame&lt;/code&gt; will be set on the last sample
in any &lt;a href=&quot;/dsp/2018/10/02/fft.html&quot;&gt;FFT&lt;/a&gt; frame–overriding my
favorite behavior.&lt;/p&gt;

&lt;p&gt;The rest of the port declarations are fairly unremarkable.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;localparam&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;//&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;			&lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;//&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;			&lt;span class=&quot;n&quot;&gt;i_tap_wr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;i_tap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;//&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;			&lt;span class=&quot;n&quot;&gt;i_ce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;i_sample&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;			&lt;span class=&quot;n&quot;&gt;i_alt_ce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;//&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;output&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;reg&lt;/span&gt;			&lt;span class=&quot;n&quot;&gt;o_frame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o_ce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;output&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;reg&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;o_sample&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;As I mentioned above, we’ll need two memories: one for the coefficients, and
one for the
&lt;a href=&quot;/dsp/2018/10/02/fft.html&quot;&gt;FFT&lt;/a&gt; data
itself so that we can maintain proper overlapping.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;kt&quot;&gt;reg&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;cmem&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LGNFFT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;reg&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;dmem&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LGNFFT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The coefficients themselves can be loaded from a basic &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$readmemh&lt;/code&gt; function
call.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;c1&quot;&gt;//&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// LOAD THE TAPS&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;//&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LGNFFT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;tapwidx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;generate&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OPT_FIXED_TAPS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SET_FIXED_TAPS&lt;/span&gt;

		&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;readmemh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;INITIAL_COEFFS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cmem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

		&lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DYNAMICALLY_SET_TAPS&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The more interesting case is the dynamic handling.&lt;/p&gt;

&lt;p&gt;In this case, we’ll need a coefficient writing index.  Then, on any
write to the coefficient memory, we’ll write to the value at this index
and increment it by one.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;c1&quot;&gt;// Coef memory write index&lt;/span&gt;
		&lt;span class=&quot;kt&quot;&gt;reg&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LGNFFT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;r_tapwidx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;r_tapwidx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;r_tapwidx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_tap_wr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;r_tapwidx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r_tapwidx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1'b1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;INITIAL_COEFFS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;readmemh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;INITIAL_COEFFS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cmem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_tap_wr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;cmem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r_tapwidx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_tap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;tapwidx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r_tapwidx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;endgenerate&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;From here, let’s work our way through the algorithm clock by clock in the
pipeline.&lt;/p&gt;

&lt;p&gt;Data is available on clock zero.  We’ll need to simply write this to our data
memory and increment the pointer.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;dwidx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;dwidx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_ce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;dwidx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dwidx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1'b1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_ce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;dmem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dwidx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_sample&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I’m also going to suppress the first block of
&lt;a href=&quot;/dsp/2018/10/02/fft.html&quot;&gt;FFT&lt;/a&gt; data.
This would be the block prior to where a full
&lt;a href=&quot;/dsp/2018/10/02/fft.html&quot;&gt;FFT&lt;/a&gt;’s worth
of data is available.  Hence, on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;first_block&lt;/code&gt;, I’ll set a flag noting
that fact, and I’ll then clear it later once we get to the last coefficient
index associated with processing that block.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;first_block&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1'b1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;first_block&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1'b1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_alt_ce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tidx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dwidx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;first_block&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1'b0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The next thing I want to keep track of is the top of the block.  That is,
I want a signal set prior to the first data element in any block, that I can
then use as an indication to reset things as part of the next run through any
data.  We’ll call this signal &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;top_of_block&lt;/code&gt;.  We’ll set it when we get the
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;i_alt_ce&lt;/code&gt; signal just prior to writing the first data value.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;top_of_block&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1'b0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;top_of_block&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1'b0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_alt_ce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;top_of_block&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tidx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first_block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dwidx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_ce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;top_of_block&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1'b0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Later on, we’ll dig into how to go about verifying this IP core.  In general,
my rule is that anything with a multiply within it cannot be formally verified.
But I’d like to pause here and note that neither the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;first_block&lt;/code&gt; flag,
nor the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;top_of_block&lt;/code&gt; flags above involve any multiplies.  Neither did I get
them right the first time I wrote this algorithm.  My point is simply this: just
because you can’t use formal methods to verify all of the functionality of an
IP core, doesn’t mean that you can’t use them at all.  For now, just think
about how much of the logic below can be easily verified formally, and how
much we’d need to verify using other methods.  I think you’ll find as we walk
through this implementation that the majority of it can be nicely verified
formally before you even fire up your simulator.&lt;/p&gt;

&lt;p&gt;Let’s now turn our attention to the data and coefficient memory indices.
As we noted above, it takes a clock to read from a memory.  Therefore, these
indices need to be available and ready &lt;em&gt;before&lt;/em&gt; the first sample arrives.
In general, the indices will need to keep pace with the incoming samples, and
be synchronized with that same clock zero stage of the pipeline.&lt;/p&gt;

&lt;p&gt;The data (read) index is the strange one.  This is the one that increments all
except for the top bit.  The top bit repeats itself between
&lt;a href=&quot;/dsp/2018/10/02/fft.html&quot;&gt;FFT&lt;/a&gt;s
in order to implement the 50% overlap we’ve asked for.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;didx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;didx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_alt_ce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dwidx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LGNFFT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// Restart on the first point of the next FFT&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;didx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LGNFFT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// Maintain the top bit, so as to keep&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// the overlap working properly&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;didx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LGNFFT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dwidx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LGNFFT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_ce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_alt_ce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// Process the next point in this FFT&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;didx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;didx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1'b1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;When it comes to the coefficient index, all but the top bit of that index
will match the data index.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;tidx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LGNFFT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;didx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LGNFFT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;At one time when building this design, I had a second counter for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tidx&lt;/code&gt;
coefficient index.  One counter was for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;didx&lt;/code&gt;, and a second one for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tidx&lt;/code&gt;.
Then, when verifying the two, I discovered the bottom &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LGNFFT-1&lt;/code&gt; bits needed
to be identical.  Why then maintain two counters?  Hence the combinatorial
expression above.&lt;/p&gt;

&lt;p&gt;The top bit of the coefficient index, however, takes some more work.  It
follows the same pattern as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;didx&lt;/code&gt;, with the exception that we reset the
top bit at the beginning of any run.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;tidx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LGNFFT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;tidx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LGNFFT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_alt_ce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dwidx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LGNFFT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// Restart the counter for the first point&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// of the next FFT.&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;tidx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LGNFFT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_ce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_alt_ce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;To maintain the top bit function, it needs to be set to the carry from all of
the lower bits when incrementing.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tidx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LGNFFT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;tidx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LGNFFT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tidx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LGNFFT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The next counter, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;frame_count&lt;/code&gt;, is kind of a misnomer.  It counts down
three clocks from the beginning of a frame–rather than frames themselves.
Indeed, this is really a pipeline counter.  It counts the stages going
through the pipeline after we receive the element that’s going to turn on
the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;o_frame&lt;/code&gt; flag once it gets through the pipeline.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;frame_count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;frame_count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OPT_TLAST_FRAME&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_alt_ce&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tidx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first_block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;frame_count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OPT_TLAST_FRAME&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_ce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;top_of_block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first_block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;frame_count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;frame_count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;frame_count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;frame_count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1'b1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We’ll discuss this more later when we get to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;o_frame&lt;/code&gt; value below.&lt;/p&gt;

&lt;p&gt;Finally, as the last step for this pipeline stage, let’s keep track of when
data values and product results are valid within our pipeline using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;d_ce&lt;/code&gt;
(for data) and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;p_ce&lt;/code&gt; (for the product results).&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p_ce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d_ce&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;2'h0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p_ce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d_ce&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;2'h0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p_ce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d_ce&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d_ce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first_block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_ce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_alt_ce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;That’s it for the first clock, or rather the first pipeline stage of the
algorithm.&lt;/p&gt;

&lt;p&gt;For the next stage, we’ll want to read the data and coefficient from memory.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;tap&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dmem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;didx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;tap&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cmem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tidx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Remember, because this is block RAM we are reading from, we need to be careful
that we don’t do anything more than simply read from it.&lt;/p&gt;

&lt;p&gt;Once the block RAM values are ready, we can multiply the two of them together.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;product&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;As before with the block RAM, you’ll want to be careful not to do anything more
than a single multiply, or possibly a multiply with a clock enable, in order
to insure the DSP will be properly inferred.&lt;/p&gt;

&lt;p&gt;Only, if you look through the &lt;a href=&quot;https://github.com/ZipCPU/dblclockfft/blob/master/rtl/windowfn.v&quot;&gt;actual
logic&lt;/a&gt;
for this component, you’ll see something that looks quite a bit different.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;c1&quot;&gt;// Multiply the two values together&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;`ifdef&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;FORMAL&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// We'll implement an abstract multiply below--just to make sure the&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// timing is right.&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;`else&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;product&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;`endif&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Why the difference?&lt;/p&gt;

&lt;p&gt;Because formal methods can’t handle multiplies very well.  There are just
too many possibilities for the formal engine to check.  Therefore, we’ll let
the formal tool generate whatever &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;product&lt;/code&gt; value it wants when using formal
methods–subject to only a small number of pipeline verification criteria.&lt;/p&gt;

&lt;p&gt;That’ll get us around the problem with the multiply.
More on that when we get to the formal methods section below.&lt;/p&gt;

&lt;p&gt;That brings us to the last stage of the pipeline–what I call clock #3.&lt;/p&gt;

&lt;p&gt;Now that we have our product, all that remains is to set the outgoing
indicators, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;o_ce&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;o_frame&lt;/code&gt;, and the outgoing sample, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;o_sample&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The first, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;o_ce&lt;/code&gt;, simply notes when the outgoing data is valid.  It will be
valid one clock after the product, allowing us to register the result of the
product.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;o_ce&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_ce&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_ce&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p_ce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The frame signal, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;o_frame&lt;/code&gt;, is only a touch different.  This is the signal that
marks frame boundaries.  In general, it will be true on the first sample of
any frame.  I can use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;frame_count&lt;/code&gt; counter, generated above from the
first sample at the top of the frame, or if &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OPT_TLAST_FRAME&lt;/code&gt; is set from
the last sample at the bottom of the frame, to generate this signal.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;o_frame&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1'b0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_frame&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1'b0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;frame_count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_frame&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1'b1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_frame&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1'b0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The last step in the algorithm is to set the outgoing sample.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;o_sample&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_sample&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_ce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_sample&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;product&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;For the purpose of this article, I’ve kept this final output sample logic
simple, although in the actual algorithm
&lt;a href=&quot;https://zipcpu.com/dsp/2017/07/22/rounding.html&quot;&gt;I rounded it&lt;/a&gt; to the output
bit width (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OW&lt;/code&gt;) instead.  This is just a touch cleaner to examine and discuss,
although in practice &lt;a href=&quot;https://zipcpu.com/dsp/2017/07/22/rounding.html&quot;&gt;that rounding operation is
pretty important&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;cover-checks&quot;&gt;Cover Checks&lt;/h2&gt;

&lt;p&gt;As we get into verification, let me ask you, where would you start?&lt;/p&gt;

&lt;p&gt;You could start with a simple verilog test bench, or even a more complex
C++ test bench integrating all of the stages of your
&lt;a href=&quot;/dsp/2018/10/02/fft.html&quot;&gt;FFT&lt;/a&gt;
together.  I chose to do something simpler instead.  I started with a simple
formal cover statement.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;kt&quot;&gt;reg&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;cvr_second_frame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;cvr_second_frame&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1'b0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_ce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_frame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;cvr_second_frame&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1'b1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;cover&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_ce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_frame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cvr_second_frame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Presenting it here, however, feels a bit out of order.  Normally, I group all
my cover statements at the end of the &lt;a href=&quot;https://github.com/ZipCPU/dblclockfft/blob/master/rtl/windowfn.v&quot;&gt;design
file&lt;/a&gt;.
Presenting cover here makes it more challenging to compare my draft blog
article against the original Verilog file to make sure the two remain in sync.&lt;/p&gt;

&lt;p&gt;Chronologically, however, I started verifying &lt;a href=&quot;https://github.com/ZipCPU/dblclockfft/blob/master/rtl/windowfn.v&quot;&gt;this
core&lt;/a&gt;
using cover.&lt;/p&gt;

&lt;p&gt;From just this cover statement above, I could easily get a trace from my
design.  Of course, the first trace looked horrible, and none of the logic
matched, but it was still a good place to start from.&lt;/p&gt;

&lt;p&gt;The next step that I’ve found useful for a lot of DSP algorithms is to create
a counter to capture the current phase of the processing.  Where are we,
for example, within a block?  I can then hang assertions and/or assumptions on
this counter if necessary.&lt;/p&gt;

&lt;p&gt;For this design, I called this backbone counter, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;f_phase&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;f_phase&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;f_phase&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_ce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;top_of_block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;f_phase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LGNFFT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_ce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_alt_ce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;f_phase&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_phase&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This forms the backbone, or the spine of the formal proof.&lt;/p&gt;

&lt;p&gt;To see how this works, consider how I can now make assumptions about the
relationship between the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;i_ce&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;i_alt_ce&lt;/code&gt; signals.&lt;/p&gt;

&lt;p&gt;After &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;i_ce&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;f_phase&lt;/code&gt; will be odd and so &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;f_phase[0]&lt;/code&gt; will be set.  No
more &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;i_ce&lt;/code&gt;’s can then follow, until after we’ve an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;i_alt_ce&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_phase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_ce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I can say the same thing about &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;i_alt_ce&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;!f_phase[0]&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_phase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_alt_ce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;That’s all it takes to get a trace.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 8. A quick cover trace&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;/img/windowfn/first-cover.png&quot;&gt;&lt;img src=&quot;/img/windowfn/first-cover.png&quot; alt=&quot;&quot; width=&quot;780&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;From that trace, I can look over the various signals and adjust them as
necessary until things &lt;em&gt;look&lt;/em&gt; right.  At that point, the logic should be
starting to work.  The next step is to pin down the various signals in the
design using assertions, so that we’ll know that the signals within our
design will always work this way.&lt;/p&gt;

&lt;p&gt;Even better, if we ever make a wrong assertion at this point, we know it should
fail within however many steps it took to generate the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cover()&lt;/code&gt; trace above
(52).  That limits our maximum formal depth.  Once I finished with
&lt;a href=&quot;/blog/2018/03/10/induction-exercise.html&quot;&gt;induction&lt;/a&gt;,
though, I managed to get the minimum depth down to four steps.  At less than
a second, the proof is pretty quick too.&lt;/p&gt;

&lt;h2 id=&quot;formal-verification&quot;&gt;Formal Verification&lt;/h2&gt;

&lt;p&gt;Let’s now work our way down through the design and see if we can pin down
the various relationships between our signals along the way.  Initially,
I’ll just be stating relationships I want to prove.  However, as we get
closer to
&lt;a href=&quot;/blog/2018/03/10/induction-exercise.html&quot;&gt;induction&lt;/a&gt;,
I’ll be relating these signals more and more to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;f_phase&lt;/code&gt; backbone we
generated earlier.&lt;/p&gt;

&lt;p&gt;If you were to watch me do this sort of thing, you might think I was just
throwing assertions at the wall to see what sticks.  Perhaps there is some
truth to that.  Indeed, someone once asked me, in a video chat I hosted as
he watched me throw assertions at a design, what would happen if you added
too many assertions.  Might the design accidentally pass, and so the formal
tool might convince you that your design was working when it wasn’t?&lt;/p&gt;

&lt;p&gt;That’s a good question.
If a design passes the proof, without actually getting properly checked, it’s
called a &lt;a href=&quot;https://en.wikipedia.org/wiki/Vacuous_truth&quot;&gt;&lt;em&gt;vacuous&lt;/em&gt; proof&lt;/a&gt;.
&lt;a href=&quot;https://en.wikipedia.org/wiki/Vacuous_truth&quot;&gt;&lt;em&gt;Vacuous&lt;/em&gt; proof&lt;/a&gt;s
are a real possibility, and
something the designer should be concerned with when verifying his logic.
However, additional &lt;em&gt;assertions&lt;/em&gt; won’t lead to
&lt;a href=&quot;https://en.wikipedia.org/wiki/Vacuous_truth&quot;&gt;vacuous proof&lt;/a&gt;s.  Additional
&lt;em&gt;assumptions&lt;/em&gt; will.  This makes assumptions dangerous.  Therefore, you should
always be careful when you assume something.  1) Never add more assumptions
than you need.  2) Never make assumptions about your internal logic.  3)
&lt;a href=&quot;/formal/2020/06/12/four-keys.html&quot;&gt;Verify your assumptions against a custom interface property
set&lt;/a&gt; whenever
possible.  4) Finally, always run a cover check to make sure that the proper
operation of the design is still possible in spite of any assumptions you may
have made.&lt;/p&gt;

&lt;p&gt;What happens, though, if you have too many assertions, or what happens if you
make an assertion that isn’t true about your design?  The design will fail to
prove and the formal tool will return a trace illustrating and showing what’s
wrong.  Even better, it’ll tell you which assertion failed.&lt;/p&gt;

&lt;p&gt;That I can work with.  Even better, the process is often faster than simulating,
and it’s certainly much faster than implementing the design, so that’s why I
use formal methods.&lt;/p&gt;

&lt;p&gt;If you have too many assertions, so much so that you have redundant assertions,
then that may or may not result in a performance problem–a slower proof.
Those I typically clean up when (if) I write a blog article about the
logic in question–like I’m doing today.&lt;/p&gt;

&lt;p&gt;That said, let’s throw some assertions on the wall and see what sticks.&lt;/p&gt;

&lt;p&gt;Let’s start with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;top_of_block&lt;/code&gt; signal.  We wanted this signal to be true
whenever we were about to start a new
&lt;a href=&quot;/dsp/2018/10/02/fft.html&quot;&gt;FFT&lt;/a&gt;
frame.  When that first sample comes
in, we’ll want to make certain that all of our data indexes point to the
beginning of a block.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_ce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;top_of_block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dwidx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LGNFFT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;didx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LGNFFT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dwidx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LGNFFT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;top_of_block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We can also check our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;first_block&lt;/code&gt; signal.  As you may recall, this was
the signal we used to make certain that nothing was output until a whole
frame of data was available to charge our
&lt;a href=&quot;/dsp/2018/10/02/fft.html&quot;&gt;FFT&lt;/a&gt;.  Here, let’s just make
sure that whenever that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;first_block&lt;/code&gt; signal clears, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;top_of_block&lt;/code&gt;
signal also rises to indicate that we’re ready for a new full block of data.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_past_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;($&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first_block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first_block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;top_of_block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;What’s the point of that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;first_block&lt;/code&gt; signal?  To make certain that we
never output any valid data until we’ve received a full first block.  Let’s
just double check that we got that right.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first_block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_ce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This may not be the best check, since &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;o_ce&lt;/code&gt; might still be erroneously high
due to a first block–simply because the two signals represent different
stages of the pipeline, but it should get us pretty close to what we want.&lt;/p&gt;

&lt;p&gt;Let’s now create a new signal to capture when we are waiting for that first
frame to come true.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;f_waiting_for_first_frame&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first_block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;f_waiting_for_first_frame&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1'b1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_ce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;f_waiting_for_first_frame&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1'b0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Let me pause here and note that one struggle students often have with formal
verification is that they think formal verification is limited to assertions
and assumptions.  As a result, they may be reluctant to generate additional
registers or signals to help them verify a design.&lt;/p&gt;

&lt;p&gt;Let me just point out that, as long as those additional signals lie within the
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ifdef FORMAL&lt;/code&gt; block that won’t end up in the final synthesized result, I don’t
see any problem with doing it.  Indeed, it can often dramatically simplify your
verification tasks.  Perhaps the most classic example is when working with
a bus: use a counter to count requests minus responses, and then make certain
every request gets a response.&lt;/p&gt;

&lt;p&gt;Now that we have this signal, we can make verify that the first &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;o_ce&lt;/code&gt; output
will have the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;o_frame&lt;/code&gt; flag set, and that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;o_frame&lt;/code&gt; won’t be
set unless &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;o_ce&lt;/code&gt; is also set.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_ce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_frame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OPT_TLAST_FRAME&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_waiting_for_first_frame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_frame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This only checks &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;o_frame&lt;/code&gt; if &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OPT_TLAST_FRAME&lt;/code&gt; is clear.  What about
in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OPT_TLAST_FRAME&lt;/code&gt; case?&lt;/p&gt;

&lt;p&gt;For this, I tried to capture that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;o_frame&lt;/code&gt; followed &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;top_of_block&lt;/code&gt; by two
clock periods.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OPT_TLAST_FRAME&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_past_valid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_past_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o_ce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_frame&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;top_of_block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Sadly, this property didn’t pass
&lt;a href=&quot;/blog/2018/03/10/induction-exercise.html&quot;&gt;induction&lt;/a&gt;
at first, so I threw another assertion into the design to see if it would
help.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OPT_TLAST_FRAME&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;frame_count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;top_of_block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;frame_count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;top_of_block&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d_ce&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p_ce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;It helped, but it wasn’t enough to keep the proof to three timesteps.
Adding a fourth helped, and so I continued.  Why did I need a fourth timestep?
In this case, it was because I was referencing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$past(top_of_block,2)&lt;/code&gt; and
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;top_of_block&lt;/code&gt; was allowed to get out of sync with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;frame_count&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Sadly, this kind of got stuck in my craw.  The design at one time verified
in three timesteps, and now it was requiring four?  With a little bit more
work, I added the following assertions and it now passed
&lt;a href=&quot;/blog/2018/03/10/induction-exercise.html&quot;&gt;induction&lt;/a&gt;
in three timesteps again.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;frame_count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;top_of_block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d_ce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;frame_count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;top_of_block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d_ce&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_ce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;frame_count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;top_of_block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d_ce&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_ce&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_ce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Remember that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;f_phase&lt;/code&gt; backbone we started with?  Wouldn’t it be nice to know
that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;top_of_block&lt;/code&gt; was always set for the first step of the design?  Using
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;f_phase&lt;/code&gt;, that becomes pretty easy.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_phase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LGNFFT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;top_of_block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first_block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;top_of_block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The only trick here is that I defined &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;f_phase&lt;/code&gt; to have one more bit than
was required to represent a full
&lt;a href=&quot;/dsp/2018/10/02/fft.html&quot;&gt;FFT&lt;/a&gt;’s
width, so the comparison here needs to be limited to the right number of bits
in order to pass properly.&lt;/p&gt;

&lt;p&gt;Let’s take another look at what happens when we are waiting for our first
output.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_waiting_for_first_frame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If more than three items (our pipeline depth) have arrived, and we are waiting
for our first frame, then all of our internal signals must be zero and
the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;first_block&lt;/code&gt; flag must still be true.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_phase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LGNFFT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first_block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_frame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_ce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p_ce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d_ce&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;frame_count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;f_phase&lt;/code&gt; is zero, then we haven’t yet had a first sample arrive.
Again, all of the pipeline signals must be zero.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_phase&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_frame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_ce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p_ce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d_ce&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;frame_count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Let me pause and ask you, why do I need these assertions?  It’s not to prove,
necessarily, that the design does the right thing.  That is, it’s not part
of the &lt;a href=&quot;/formal/2020/06/12/four-keys.html&quot;&gt;&lt;em&gt;contract&lt;/em&gt;&lt;/a&gt;
associated with the behavior of this component.  Rather, this is just one of
those things you need to make certain the design will pass
&lt;a href=&quot;/blog/2018/03/10/induction-exercise.html&quot;&gt;induction&lt;/a&gt; and
that the various registers within it will never get out of sync with each other.&lt;/p&gt;

&lt;p&gt;So, if &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;f_phase&lt;/code&gt; is either one or two, and this isn’t the first block but
we still haven’t produced any outputs yet and so &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;f_waiting_for_first_frame&lt;/code&gt;
is still clear, then we must have some signals moving through our pipeline.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_phase&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first_block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_ce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p_ce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d_ce&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I also want to make certain that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;o_sample&lt;/code&gt; only ever changes if &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;o_ce&lt;/code&gt;
is set.  That’s easy enough to express.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_past_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_ce&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;stable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_sample&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We can even use the backbone signal, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;f_phase&lt;/code&gt;, to guarantee that our
coefficient index is correct.  Just beware–the two have different widths.
(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;f_phase&lt;/code&gt; captures the width of &lt;em&gt;two&lt;/em&gt;
&lt;a href=&quot;/dsp/2018/10/02/fft.html&quot;&gt;FFT&lt;/a&gt;s.)  That means we need
to do a quick width conversion and rename here.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;f_tidx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_phase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_tidx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tidx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The data write index should also stay synchronized with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;f_phase&lt;/code&gt;, but
capturing this is more difficult.  Indeed, I needed to stare at the
traces a couple of times before I captured this properly and I wrote the
wrong assertion for this relationship more than once.  The key thing to note
here is that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dwidx&lt;/code&gt; increments once for every two increments of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;f_phase&lt;/code&gt;.
I thought I might just be able to downshift &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;f_phase&lt;/code&gt; to get the right
value of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dwidx&lt;/code&gt;, but both will increment on an incoming sample when both
are zero.  The key therefore is to offset the comparison by one first before
making it, and so &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;f_phase_plus_one&lt;/code&gt; has &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LGNFFT+1&lt;/code&gt; bits–just like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;f_phase&lt;/code&gt;,
but it’s one greater.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;f_phase_plus_one&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_phase&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	       &lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_phase_plus_one&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LGNFFT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dwidx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LGNFFT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We can also verify &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;f_phase&lt;/code&gt; against the data index.  Here you see why
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;f_phase&lt;/code&gt; needs to be &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LGNFFT+1&lt;/code&gt; bits in length–because for the first
&lt;a href=&quot;/dsp/2018/10/02/fft.html&quot;&gt;FFT&lt;/a&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;f_phase&lt;/code&gt; matches
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;didx&lt;/code&gt;, but for odd &lt;a href=&quot;/dsp/2018/10/02/fft.html&quot;&gt;FFT&lt;/a&gt;s
the top bit is flipped.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_phase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LGNFFT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_phase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LGNFFT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;didx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LGNFFT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;didx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LGNFFT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dwidx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LGNFFT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dwidx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LGNFFT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dwidx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LGNFFT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dwidx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LGNFFT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dwidx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LGNFFT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_phase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LGNFFT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])));&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_phase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LGNFFT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;didx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LGNFFT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;One of the things that was important for me to be able to prove was that
the write data would never overtake the read data function–corrupting the
memory read operation.  This part of the proof requires a subtraction, but
otherwise we’re just saying that the difference between the two indexes must
remain less than the size of one
&lt;a href=&quot;/dsp/2018/10/02/fft.html&quot;&gt;FFT&lt;/a&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;f_diff_idx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;didx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dwidx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first_block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_diff_idx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1'b1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LGNFFT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mb&quot;&gt;1'b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Let’s now look at that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;first_block&lt;/code&gt; signal.  Once we get to the top of
any block, that is once we’ve passed the last element in the last block,
then we can’t be in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;first_block&lt;/code&gt; anymore.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;top_of_block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first_block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Let’s now come back and talk about that multiply.&lt;/p&gt;

&lt;p&gt;Remember how I said multiplies were hard to verify?  We need some form of
alternative if we want to make certain the design works apart from the
multiply.&lt;/p&gt;

&lt;p&gt;You might also notice that we didn’t generate a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;product&lt;/code&gt; before if we
were running our formal proof.  The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;product&lt;/code&gt; logic was disabled by the
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ifdef FORMAL&lt;/code&gt; macro.  We’ll build that logic here.  First, we’ll let
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;f_pre_product&lt;/code&gt; be any number the solver wants it to be–the solver can
just choose anything on any clock–subject to a few constraints below.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;anyseq&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;reg&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;signed&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_pre_product&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Our first constraint is that if either of the inputs to the
multiply is zero, the pre-product should also be zero.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_pre_product&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tap&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_pre_product&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Similarly, if either of the inputs is one, then the pre-product value should
have the value of the other input as a result.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_pre_product&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tap&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_pre_product&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Finally, if the inputs don’t change, then the product shouldn’t either.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;($&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;stable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;stable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;($&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;stable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_pre_product&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I suppose this last assumption isn’t required, but it doesn’t really hurt me
either.&lt;/p&gt;

&lt;p&gt;Finally, we can now set &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;product&lt;/code&gt; equal to the pre-product, but delayed by
one clock cycle.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;product&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_pre_product&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now let’s sample a value as it works it’s way through our pipeline–just to
double check that all the processing of this value gets done properly.&lt;/p&gt;

&lt;p&gt;Let’s start by picking an address, I’ll call it &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;f_addr&lt;/code&gt;, and a value to
be at that address-we’ll call it &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;f_tap&lt;/code&gt; for the coefficient and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;f_value&lt;/code&gt;
for the data element.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;cp&quot;&gt;`ifdef&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;VERIFIC&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_past_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_tap&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cmem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dmem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;`else&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;assume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_tap&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cmem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;assume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dmem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;`endif&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now that we know the value was correct at the beginning of time, let’s
follow it through time.  First, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;f_tap&lt;/code&gt; gets updated if ever the coefficient
it matches gets updated.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_tap&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cmem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_tap_wr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tapwidx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;f_tap&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_tap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In a similar fashion, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;f_value&lt;/code&gt; needs to always match &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dmem[f_addr]&lt;/code&gt; at all
times.  Here, we’ll adjust it anytime a new value comes in and we write it to
our special address, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;f_addr&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dmem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;f_value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_ce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dwidx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;f_value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_sample&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Let’s now follow this data value through our pipeline.  I like to use
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;*this*&lt;/code&gt; indicators to highlight the special value being used.  Here, there’s
a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;this&lt;/code&gt; indicator for each of the various &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;*_ce&lt;/code&gt; steps in the pipeline.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_this_oce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_this_pce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_this_dce&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;3'h0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_tap_wr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_this_oce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_this_pce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_this_dce&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;3'h0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; 
		&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_this_oce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_this_pce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_this_dce&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_this_pce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_this_dce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_ce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_alt_ce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
					&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_past_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;didx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I could do the same with the coefficient, but realistically I only need to
capture the first step in the pipeline for that.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_this_tap&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;f_this_tap&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_ce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_alt_ce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;f_this_tap&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_past_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tidx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;f_this_tap&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now, let’s verify reading from the two memories respectively.  If this value
is read, it should find itself in both the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tap&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;data&lt;/code&gt; registers.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_this_tap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tap&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_tap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_past_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_this_dce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I also double checked this value with the output of the product, but I didn’t
really push the comparison any further.  This seemed to be sufficient, and
even overkill–as it now felt like I was verifying the obvious.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;f_past_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;f_past_tap&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_past_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_this_pce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_past_tap&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;product&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_past_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;product&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_past_tap&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;product&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=={&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_past_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_past_data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_past_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;product&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=={&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_past_tap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_past_tap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The bottom line was that this was enough to 1) pass
&lt;a href=&quot;/blog/2018/03/10/induction-exercise.html&quot;&gt;induction&lt;/a&gt;,
2) verify proper pipeline signal handling, and 3) guarantee that I wouldn’t
overwrite the data I was reading from as the algorithm was working through
it’s buffer.  Even better, I can see how well the design works from a quick
cover trace.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;There you have a basic
&lt;a href=&quot;https://en.wikipedia.org/wiki/Window_function&quot;&gt;Window function&lt;/a&gt;
calculator.  It operates on a data stream, breaking the stream into 
blocks with a 50% overlap and applying a taper to each block of data.  It’s
ideal as a first step prior to applying an
&lt;a href=&quot;/dsp/2018/10/02/fft.html&quot;&gt;FFT&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The reality is that all
&lt;a href=&quot;/dsp/2018/10/02/fft.html&quot;&gt;FFT&lt;/a&gt; processing uses a &lt;a href=&quot;https://en.wikipedia.org/wiki/Window_function&quot;&gt;Window
function&lt;/a&gt;.  Even if you aren’t
consciously using one, you are likely using a &lt;a href=&quot;https://en.wikipedia.org/wiki/Window_function#Rectangular_window&quot;&gt;rectangular window
function&lt;/a&gt;–and
getting poor performance as a result.  Let me encourage you instead to take
the time and do your homework.  You can get much better
performance than a &lt;a href=&quot;https://en.wikipedia.org/wiki/Window_function#Rectangular_window&quot;&gt;rectangular
window&lt;/a&gt;
with only the minimal amount of engineering above.&lt;/p&gt;

&lt;p&gt;Unfortunately, this article only touches the surface of spectral estimation
within FPGAs.  I feel like I could spend more time talking about what we haven’t
discussed over and above I’ve discussed above.  Here’s a list of just some
of the things we haven’t covered, that could easily fit into several nice
follow up articles:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Converting the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;i_ce&lt;/code&gt;/&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;o_ce&lt;/code&gt; signaling to AXI stream signaling.  It’s easy
to do, and so this might make for a nice and quick article on the topic.
The trick is handling the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Back_pressure&quot;&gt;back pressure&lt;/a&gt;
in an algorithm that has no
&lt;a href=&quot;https://en.wikipedia.org/wiki/Back_pressure&quot;&gt;back pressure&lt;/a&gt;
handling.  It’s easy to do, but if you haven’t seen the trick
to it you might scratch your head wondering how to do it for a while.
(Hint: it requires a FIFO on the back end, and the calculation of FIFO full
signaling on the incoming end.)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;A second, more challenging, protocol challenge is to convert the
&lt;a href=&quot;/dsp/2018/10/02/fft.html&quot;&gt;FFT&lt;/a&gt;’s signal handling to
AXI stream as well.  That’s quite doable, but doing it ended up being more
of a challenge than I was expecting.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;One of the fun things &lt;a href=&quot;http://ieeexplore.ieee.org/document/1162950/&quot;&gt;Allen&lt;/a&gt;
discusses is how to handle
&lt;a href=&quot;https://en.wikipedia.org/wiki/Window_function&quot;&gt;window&lt;/a&gt;s that are much
longer than a single &lt;a href=&quot;/dsp/2018/10/02/fft.html&quot;&gt;FFT&lt;/a&gt; in
length.  This is really a requirement if you want &lt;a href=&quot;/dsp/freq-teaser.html&quot;&gt;good spectral
resolution&lt;/a&gt;.  Indeed, it makes
the &lt;img src=&quot;/img/windowfn/eqn-D-N2.png&quot; alt=&quot;`D=N/2`&quot; /&gt; filtering
option both possible and sufficient for most uses.  The logic above, however,
won’t handle a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Window_function&quot;&gt;window&lt;/a&gt; longer than a single
&lt;a href=&quot;/dsp/2018/10/02/fft.html&quot;&gt;FFT&lt;/a&gt; length, so we may have
to come back to this topic again to discuss how to accomplish that operation.
The good news is that the required logic isn’t any more complex than the
&lt;a href=&quot;https://github.com/ZipCPU/dblclockfft/blob/master/rtl/windowfn.v&quot;&gt;logic above&lt;/a&gt;,
so once you understand how the algorithm works the logic is fairly easy.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I’d love to prove that a single-taper window &lt;em&gt;always&lt;/em&gt; performs at least
as good or better than a multi-taper window.  Sadly, I’m concerned that
the proof of this might be too esoteric for my audience, so I’m not sure
whether I’ll be able to get to that proof or not.  It’s a fun proof, though,
and only takes a couple of pages.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;There’s a lot to be said for
&lt;a href=&quot;https://en.wikipedia.org/wiki/Window_function&quot;&gt;window&lt;/a&gt;
design.  Lord willing, I look forward
to being able to post something on that topic.  For example, did you know
that a good &lt;a href=&quot;/dsp/2018/10/02/fft.html&quot;&gt;FFT&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Window_function&quot;&gt;window function&lt;/a&gt;,
one that conserves energy, is sufficient to render the
entire &lt;a href=&quot;/dsp/2018/10/02/fft.html&quot;&gt;FFT&lt;/a&gt;
operation invertible?  I mean invertible to the point of recovering the
original signal.  That’s a fun proof, and I look forward to sharing it
in due time as well.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I haven’t mentioned scaling
&lt;a href=&quot;/dsp/2018/10/02/fft.html&quot;&gt;FFT&lt;/a&gt; results for display, nor
have I mentioned my favorite choice in colormaps.  Both are essential
for display, and neither get discussed much.&lt;/p&gt;

    &lt;p&gt;Another, related question, is whether a log should be taken of any
&lt;a href=&quot;/dsp/2018/10/02/fft.html&quot;&gt;FFT&lt;/a&gt; results or not.
Perhaps the discussion above will help answer that question, although the
real bottom line answer is: it depends.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;My &lt;a href=&quot;https://github.com/ZipCPU/fftdemo&quot;&gt;FFT demo&lt;/a&gt; design has a fun capability
to scroll a raster across the screen horizontally.  This is a fun video
trick, using an external memory, that would be a lot of fun to share.&lt;/p&gt;

    &lt;p&gt;Scrolling vertically is easier.  Horizontally was a fun challenge.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If nothing else, there remains a lot left to discuss.&lt;/p&gt;

&lt;p&gt;Until that time, may God bless you and yours.&lt;/p&gt;

&lt;!-- [Allen](http://ieeexplore.ieee.org/document/1455039/) --&gt;
&lt;!-- [Uncertainty Principle](http://ieeexplore.ieee.org/document/1085842/) --&gt;
&lt;!-- [Windows with good Sidelobe Behavior](http://ieeexplore.ieee.org/document/1163506/) --&gt;
&lt;!-- [Analysis, Synthesis, and Modification](http://ieeexplore.ieee.org/document/1162950/) --&gt;
&lt;!-- [Time-Varying Spectrum Estimators](http://ieeexplore.ieee.org/document/679147/) --&gt;

&lt;hr /&gt;&lt;p&gt;&lt;em&gt;Now when Daniel knew that the writing was signed, he went into his house; and his windows being open in his chamber toward Jerusalem, he kneeled upon his knees three times a day, and prayed, and gave thanks before his God, as he did aforetime. (Daniel 6:10)&lt;/em&gt;</description>
        <pubDate>Sat, 21 Nov 2020 00:00:00 -0500</pubDate>
        <link>https://zipcpu.com/dsp/2020/11/21/spectrogram.html</link>
        <guid isPermaLink="true">https://zipcpu.com/dsp/2020/11/21/spectrogram.html</guid>
        
        
        <category>dsp</category>
        
      </item>
    
      <item>
        <title>A fun Friday evening--verifying an AXI-lite slave</title>
        <description>&lt;p&gt;On a whim, at the end of a long week, I decided to try something new yesterday.
I decided to try to verify an &lt;a href=&quot;https://github.com/olofk/axi_node/blob/master/axi_node.sv&quot;&gt;AXI
design&lt;/a&gt;
in front of others.  My goal was to do something fun and perhaps to have a
little excitement.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/friday/happyhour.jpg&quot; alt=&quot;&quot; width=&quot;300&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Sadly, one of the challenges of writing blog articles about formal verification
is that few people realize how easy it actually is.  They just look at the
article, figure it was a fun read, or perhaps that I as an author am an amazing
verification engineer.  What you don’t realize is that a lot of these things
can be done in just minutes, while saving you weeks of heartache trying to
debug something in hardware.&lt;/p&gt;

&lt;p&gt;So, I started out with a tweet yesterday morning asking if anyone would want
to see what it takes to formally verify a AXI-based design, and whether or not
any one had a design they wished to share.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/friday/tweet.png&quot; alt=&quot;&quot; width=&quot;547&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Many individuals indicated their interest in watching me verify a design, but
no one offered a sacrificial design.  So I went looking for a design with an
AXI interface that could be verified publicly.&lt;/p&gt;

&lt;p&gt;I first checked the Vivado sources that come with the install.  One of the fun
things about Vivado is that it comes with so much IP.  Much of this IP is in
VHDL.  VHDL wouldn’t be ideal, since it requires the commercial version of
&lt;a href=&quot;https://symbiyosys.readthedocs.io/en&quot;&gt;SymbiYosys&lt;/a&gt;, but its not out of the question thanks to the Symbiotic EDA team
who have provided me with a copy to work with.  Even better, I have a bit of
experience verifying Vivado IP, so I know the basic steps.  In the past
I’ve looked at their AXI-APB bridge, AHB-lite to AXI bridge,
&lt;a href=&quot;https://www.xilinx.com/products/intellectual-property/axi_ethernetlite.html&quot;&gt;AXI-ethernet lite&lt;/a&gt;,
&lt;a href=&quot;https://www.xilinx.com/products/intellectual-property/axi_gpio.html&quot;&gt;AXI GPIO&lt;/a&gt;,
and &lt;a href=&quot;https://www.xilinx.com/products/intellectual-property/axi_lite_ipif.html&quot;&gt;AXI IPIF&lt;/a&gt; logic cores.  I’ve also verified their demonstration
designs for AXI master, &lt;a href=&quot;/formal/2019/05/13/axifull.html&quot;&gt;AXI
slave&lt;/a&gt;, AXI-lite master,
&lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;AXI-lite slave&lt;/a&gt;, and their
AXI-stream master.  Several of these designs have nice bugs that are fun
to find with &lt;a href=&quot;https://symbiyosys.readthedocs.io/en&quot;&gt;SymbiYosys&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In the end, this didn’t pan out.  My problem was that I didn’t want to just
show a previously verified design and talk to it.  That’s boring.  There’s no
excitement in it.  The conclusion is already well known.  Instead, I wanted
to show the process as it happened–so folks could see how fast and
easy this is to do, and watch in real time to see what (if any) struggles I had.
As a result, I needed something new to verify.&lt;/p&gt;

&lt;p&gt;My first thought was to try &lt;a href=&quot;https://www.xilinx.com/products/intellectual-property/axi-firewall.html&quot;&gt;Xilinx’s AXI
firewall&lt;/a&gt;.
This would be an ideal AXI core, since there was no more interface to it other
than AXI that I might get wrong.  Sadly, this depended upon an encrypted
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sc_util*&lt;/code&gt; package, so I had to move on and keep looking.&lt;/p&gt;

&lt;p&gt;I next thought about verifying &lt;a href=&quot;https://www.xilinx.com/products/intellectual-property/axi-amm-bridge.html&quot;&gt;Xilinx’s Avalon to AXI
bridge&lt;/a&gt;.
This would also be pretty easy to verify, since I already have bus property
files for both
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/fav_slave.v&quot;&gt;Avalon&lt;/a&gt;
and AXI.  Unfortunately, this depended upon their (encrypted) datamover IP,
so I moved on again.&lt;/p&gt;

&lt;p&gt;I also put some time into their &lt;a href=&quot;https://www.xilinx.com/products/intellectual-property/axi_timer.html&quot;&gt;AXI timer
package&lt;/a&gt;.
Surely this one would be simple enough for a basic demonstration, no?
No.  Sadly, for some reason, I
wasn’t able to get the VHDL packages read into Yosys properly.  I’m not quite
sure what the problem was.  Perhaps with a bit more work at it this might turn
into a nice example later on, but I didn’t want to spend my day solving this
problem–I was actually trying to do other work at the time.&lt;/p&gt;

&lt;p&gt;I then turned to &lt;a href=&quot;https://duckduckgo.com&quot;&gt;duckduckgo&lt;/a&gt;, and searched for open
source AXI interconnects.  Interconnects have two well defined interfaces,
AXI slave interfaces and AXI master interfaces, to which I should be able
to attach formal slave and master bus property files.  I then found &lt;a href=&quot;https://github.com/olofk/axi_node&quot;&gt;this
repository&lt;/a&gt;, having an &lt;a href=&quot;https://github.com/olofk/axi_node/blob/master/axi_node.sv&quot;&gt;open source AXI
interconnect&lt;/a&gt;
within it.  Sadly, &lt;a href=&quot;https://github.com/olofk/axi_node/blob/master/axi_node.sv&quot;&gt;this
interconnect&lt;/a&gt; was
run-time configurable.  While such a programmable interconnect can certainly
be verified, I would need to provide several assumptions to make certain it
was programmed properly before expecting good behavior from it.  For example,
you don’t want to allow two master interfaces to be controlled from the
same address range.&lt;/p&gt;

&lt;p&gt;Not knowing quite how to handle this, I looked for any other designs in the
&lt;a href=&quot;https://github.com/olofk/axi_node&quot;&gt;same repository&lt;/a&gt;, and came across this
&lt;a href=&quot;https://github.com/olofk/axi_node/blob/master/axi_regs_top.sv&quot;&gt;axi_regs_top.sv&lt;/a&gt;
AXI slave.  Having been burned trying to get Xilinx’s designs into Yosys, I
just double checked that Yosys could parse it.  The open source version came
close, but it ended up struggling at the &lt;a href=&quot;https://github.com/olofk/axi_node/blob/0193125be350718e7fe8b44308f4dc44749ef60c/axi_regs_top.sv#L132-L141&quot;&gt;three dimensional
ports&lt;/a&gt;
used by the design.  However, the commercial version of Yosys that comes with
the SymbioticEDA Suite could parse it just fine.  Therefore, I figured this
design might have some verification potential.&lt;/p&gt;

&lt;p&gt;Again, my goal was to find a design which could be verified while others
watched, to show how easy the process can be.  So while I might still come
back to any of these designs and put some more work into them, I was just
looking for a quick demonstration that might be fun to share.&lt;/p&gt;

&lt;p&gt;At this point, I tweeted my intentions and set up a Zoom meeting room for
anyone who might want to join.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/friday/invite.png&quot; alt=&quot;&quot; width=&quot;568&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Having never seen &lt;a href=&quot;https://github.com/olofk/axi_node/blob/0193125be350718e7fe8b44308f4dc44749ef60c/axi_regs_top.sv&quot;&gt;the design&lt;/a&gt;
before, I wasn’t certain if it would have any
bugs in it or not.  Therefore, this was far from a canned demonstration.
Worse, from a business standpoint, I was doing this all wrong: I didn’t
take down any contact information, register participants, ask for market
surveys, any of that.  I didn’t even dress up in a suit or tie.  That’s
okay, I suppose, I mean … I wasn’t getting paid for this, and I’m already
quite loaded on customers at this point.  My goal was just to have a bit of fun.&lt;/p&gt;

&lt;h2 id=&quot;verifying-the-design&quot;&gt;Verifying the design&lt;/h2&gt;

&lt;p&gt;The Zoom chat started at 5pm local (Eastern) time.  About a dozen individuals
joined to watch.  Yes, I’ll admit, I was kind of worried that no one would
show up.  The whole “event”, if you want to call it that, was set up with
three hours notice.  I’m sure more folks might have attended if they would’ve
had more notice.  My apologies to anyone who may have felt cheated out of a
great opportunity–I was just out for some fun and perhaps to gauge a bit of
interest.  Was this something worth doing at all?  Would it be something I
enjoyed?  If so, perhaps I should do it again.  If not, oh well, at least
I would’ve had a fun evening.&lt;/p&gt;

&lt;p&gt;But for now, let’s turn our attention to the task at hand.&lt;/p&gt;

&lt;p&gt;If you’ve never &lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;verified an AXI-lite
slave&lt;/a&gt; before, it’s
not that hard at all.  There were just a couple of quick steps we went through.&lt;/p&gt;

&lt;p&gt;The first step was to instantiate a copy of &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/faxil_slave.v&quot;&gt;my AXI-lite slave
properties&lt;/a&gt;
within the design.  This consisted primarily of just a lot of typing.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;cp&quot;&gt;`ifdef&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;FORMAL&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;localparam&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;F_LGDEPTH&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F_LGDEPTH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;faxil_rd_outstanding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F_LGDEPTH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;faxil_wr_outstanding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F_LGDEPTH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;faxil_awr_outstanding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	
	&lt;span class=&quot;n&quot;&gt;faxil_slave&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;#(&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C_AXI_ADDR_WIDTH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C_S_AXI_ADDR_WIDTH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C_AXI_DATA_WIDTH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C_S_AXI_DATA_WIDTH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F_LGDEPTH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F_LGDEPTH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;faxil&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s_axi_aclk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_reset_n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s_axi_aresetn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;//&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_awready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s_axi_awready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_awaddr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s_axi_awaddr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_awvalid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s_axi_awvalid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_awprot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;3'h0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_awcache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;4'h0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;//&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_wready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s_axi_wready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_wdata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s_axi_wdata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_wstrb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s_axi_wstrb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_wvalid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s_axi_wvalid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;//&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_bready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s_axi_bready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_bvalid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s_axi_bvalid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_bresp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s_axi_bresp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;//&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_araddr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s_axi_araddr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_arvalid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s_axi_arvalid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_arready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s_axi_arready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_arprot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;3'h0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_arcache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;4'h0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;//&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_rvalid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s_axi_rvalid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_rready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s_axi_rready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_rdata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s_axi_rdata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_rresp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s_axi_rresp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;//&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_axi_rd_outstanding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;faxil_rd_outstanding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_axi_wr_outstanding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;faxil_wr_outstanding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_axi_awr_outstanding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;faxil_awr_outstanding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;`endif&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I then I built a quick SBY file to configure
&lt;a href=&quot;https://symbiyosys.readthedocs.io/en&quot;&gt;SymbiYosys&lt;/a&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;[tasks]
prf
cvr

[options]
prf: mode prove
prf: depth 4
cvr: mode cover
cvr: depth 40

[engines]
smtbmc

[script]
read -formal axi_regs_top.sv
read -formal faxil_slave.v
prep -top axi_regs_top

[files]
axi_regs_top.sv
faxil_slave.v&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If I recall correctly, this only took about 20-30 minutes, and it was mostly
typing and boilerplate.  I might’ve been able to go even faster if I wasn’t
explaining what I was doing, but I was enjoying sharing and so I took my time
to make certain that I explained what was going on and why I was doing what
I was doing.&lt;/p&gt;

&lt;p&gt;The first run took only 16 seconds from start to fail.  It produced the trace
shown in Fig. 1 below.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 1. Initial trace from formal&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;/img/friday/async-reset-bvalid-annotated.png&quot;&gt;&lt;img src=&quot;/img/friday/async-reset-bvalid-annotated.png&quot; alt=&quot;&quot; width=&quot;780&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;The “problem” the formal tools found is that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BVALID&lt;/code&gt; is raised and then lowered
while the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;B*&lt;/code&gt; channel is stalled.  This suggests that a packet might’ve been
dropped–until you look closer that is.&lt;/p&gt;

&lt;p&gt;The actual problem is that this particular design uses an asynchronous reset.
Did you notice how the reset was asserted the same cycle that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BVALID*&lt;/code&gt; dropped?
For many designers, this isn’t a bug but a feature or perhaps even a
requirement.  From my standpoint, this is a setup problem: I hadn’t enabled
asynchronous reset checking in the &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/faxil_slave.v&quot;&gt;formal property
file&lt;/a&gt;.
This was easily fixed,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;n&quot;&gt;faxil_slave&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;#(&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F_OPT_ASYNC_RESET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mb&quot;&gt;1'b1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;faxil&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;and so I re-ran the proof.&lt;/p&gt;

&lt;p&gt;Re-running the proof a second time turned up another problem: The design
didn’t keep &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RDATA&lt;/code&gt; from changing while the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;R*&lt;/code&gt; channel was supposed to be
stalled.  While it would be fun to declare the job done at this point
now that I had found the first bug, honesty isn’t that easy.  As an engineer,
I need to know if the design I’m verifying is broken, or if instead somehow my
test setup is broken.  Therefore, any failing trace needs to be investigated.
Perhaps this was just another setup bug like the asynchronous reset bug above.&lt;/p&gt;

&lt;p&gt;Not this time.&lt;/p&gt;

&lt;p&gt;In this case, it was a real bug, and I stumbled across what was going on
when collapsing the AXI write channel view for a view of the AXI read channel:
a register, controlled by the design, was being written to while the read
channel was stalled.  Since the design never latched read results but instead
always produced the current value of the register being read–there was no
protection against this fault.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 2. RDATA changes when the read return channel should be stalled&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;/img/friday/rdata-bug-annotated.png&quot;&gt;&lt;img src=&quot;/img/friday/rdata-bug-annotated.png&quot; alt=&quot;&quot; width=&quot;780&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Having now found a first fault, I made an assumption that this would never
happen again.  Such an assumption has the unfortunate consequence of
potentially hiding other failures,
so you always have to be careful when doing this and to document it well.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;c1&quot;&gt;// BUG #1: AXI_RDATA might change when stalled&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s_axi_aclk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s_axi_aresetn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s_axi_rvalid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s_axi_rready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;($&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;stable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s_axi_rdata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Here I documented it as bug #1 within the source.&lt;/p&gt;

&lt;p&gt;I also try to place all assumptions like this at a known place, in a block
at the end of the file, so I know where to find them when I come back to the
design later.  I label this block as “careless assumptions”, simply because
they artificially constrain the proof in a way that may match reality.&lt;/p&gt;

&lt;p&gt;I then ran &lt;a href=&quot;https://symbiyosys.readthedocs.io/en&quot;&gt;SymbiYosys&lt;/a&gt; again a third
time.  This time, however, after over ten minutes, Yosys hadn’t found any
bugs in a bounded model check of perhaps 8-10 steps.  It was time to switch to
&lt;a href=&quot;/blog/2018/03/10/induction-exercise.html&quot;&gt;induction&lt;/a&gt;.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 3. Only an inductive proof can verify a design for all time&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/friday/induction-results.png&quot; alt=&quot;&quot; width=&quot;417&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;For those who might not know, &lt;a href=&quot;/formal/2020/06/12/four-keys.html&quot;&gt;I am a real
fan&lt;/a&gt; of
&lt;a href=&quot;/blog/2018/03/10/induction-exercise.html&quot;&gt;induction&lt;/a&gt;.  I like
it a lot.  While a bounded model check can find problems in a &lt;em&gt;bounded&lt;/em&gt; number
of steps (only 8-10 timesteps so far), it can never prove that your design
works for all time.  Only
&lt;a href=&quot;/blog/2018/03/10/induction-exercise.html&quot;&gt;induction&lt;/a&gt;
can do that.  Not only that, but some errors can only be found using
&lt;a href=&quot;/blog/2018/03/10/induction-exercise.html&quot;&gt;induction&lt;/a&gt;:
counter overflows, buffer overruns, timeouts, and so forth.  These are
important, so whenever possible I like to use
&lt;a href=&quot;/blog/2018/03/10/induction-exercise.html&quot;&gt;induction&lt;/a&gt;.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 4. Induction can begin a design in an unreachable state&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/formal-induction.svg&quot; alt=&quot;&quot; width=&quot;320&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;The &lt;a href=&quot;/blog/2018/03/10/induction-exercise.html&quot;&gt;problem with
induction&lt;/a&gt;
is that the
&lt;a href=&quot;/blog/2018/03/10/induction-exercise.html&quot;&gt;induction&lt;/a&gt;
engine can start your design
in an unreachable state–one where the various registers within the design
aren’t consistent.  The engine might then go from there to breaking some
assertion or other that would never be broken in real life.&lt;/p&gt;

&lt;p&gt;I like to describe this concept using the blobology shown in Fig. 4.  The green
set of states are those which you want the design to reside within.  The
red blob are those states that are made illegal by assertions.  The
unbounded white area surrounding the entire design is made illegal by
assumptions.  That leaves the bounded yellow area.  Yellow describes states
your design can never get into.  You normally don’t care about these
states–you’ll never reach them via
&lt;a href=&quot;/blog/2018/08/22/what-is-simulation.html&quot;&gt;simulation&lt;/a&gt;.  Not
so with &lt;a href=&quot;/blog/2018/03/10/induction-exercise.html&quot;&gt;induction&lt;/a&gt;.
The &lt;a href=&quot;/blog/2018/03/10/induction-exercise.html&quot;&gt;induction&lt;/a&gt;
engine might &lt;em&gt;start&lt;/em&gt; your design from one of these states, and then proceed
to a state that you have specifically asserted is not possible.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left; padding: 20px&quot;&gt;&lt;caption&gt;Fig 5. Solving the induction problem&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/formal-induction-soln.svg&quot; alt=&quot;&quot; width=&quot;320&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;The solution to this problem comes from adding more assertions to the
design–enough to eliminate the yellow unreachable area.  These assertions will
then keep the
&lt;a href=&quot;/blog/2018/03/10/induction-exercise.html&quot;&gt;induction&lt;/a&gt;
engine from starting out in such an unreachable state.  The
problem, though, is when you are looking at a design that isn’t yours: what
assertions should you add?&lt;/p&gt;

&lt;p&gt;To answer that question, I turned to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cover()&lt;/code&gt;.  The first pass with cover
wasn’t what I wanted: it just covered one read return or one write return.
So I went back to the formal property file and added in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;F_OPT_COVER_BURST&lt;/code&gt;
option–setting it to find the first trace containing four writes as well
as the first trace containing four reads.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;n&quot;&gt;faxil_slave&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;#(&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F_OPT_COVER_BURST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;faxil&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/faxil_slave.v#L781-L790&quot;&gt;The logic required to make this happen is nothing more than a basic counter,
and so it hardly needs further
mentioning&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The fact that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cover()&lt;/code&gt; returns the first potential trace is important, because
it means you can use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cover()&lt;/code&gt; to measure throughput as well.  That comes for
free.  In my case, I just wanted to see everything that took place within
&lt;a href=&quot;https://github.com/olofk/axi_node/blob/0193125be350718e7fe8b44308f4dc44749ef60c/axi_regs_top.sv&quot;&gt;the core&lt;/a&gt;
between one read or write request and the next.  The throughput
measure was simply an added bonus on top.&lt;/p&gt;

&lt;p&gt;You can see the trace generated to cover burst reads in Fig. 6, below.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 6. A Cover trace showing four reads in rapid succession&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;/img/friday/cvr-reads.png&quot;&gt;&lt;img src=&quot;/img/friday/cvr-reads.png&quot; alt=&quot;&quot; width=&quot;780&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;As you can see, it takes this core four cycles from one read request
until it can accept the next one at its maximum speed.&lt;/p&gt;

&lt;p&gt;I first chose to examine the read side, to see what was happening on each of
these four clock cycles.  On the first clock cycle the read was accepted,
then there was an internal cycle to process the read, then &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RVALID&lt;/code&gt; was set,
cleared, and then finally &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ARREADY&lt;/code&gt; was set to allow a subsequent transaction.
While this is far from high speed, this wasn’t my own design–I was just
looking for AXI bugs.  If you want a better design, use my &lt;a href=&quot;/blog/2020/03/08/easyaxil.html&quot;&gt;easy AXI-lite
design&lt;/a&gt;
as a starting point.&lt;/p&gt;

&lt;p&gt;Incidentally, if you want a better AXI (not lite) design, you can either use &lt;a href=&quot;/blog/2019/05/29/demoaxi.html&quot;&gt;my
AXI slave&lt;/a&gt; as a starting point
or, if you’d rather work with AXI-lite, you can also start with &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axi2axil.v&quot;&gt;my AXI to
AXI-lite bridge&lt;/a&gt;.
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axi2axil.v&quot;&gt;That bridge&lt;/a&gt;
will feed an
&lt;a href=&quot;/blog/2019/01/12/demoaxilite.html&quot;&gt;AXI-lite design&lt;/a&gt;
with 100% throughput–allowing you to get full AXI performance from an
AXI-lite interface.  The cost?  Two extra clock cycles and some buffers.
Still, it’s quite usable.  But … I digress.&lt;/p&gt;

&lt;p&gt;Looking through the design, the first thing I noticed was that the design never
allowed more than one transaction to be outstanding at a time.  That’s
easy to enforce, by just using the transaction counters from the
&lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;formal AXI-lite properties&lt;/a&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;faxil_awr_outstanding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;faxil_wr_outstanding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;faxil_rd_outstanding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Looking a bit further, I found some &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;*done_reg&lt;/code&gt; signals that looked related
to the read channel’s processing.  If you plot these signals out, you can
see a basic relationship between them–as shown at the bottom of the trace
in Fig. 6 above.&lt;/p&gt;

&lt;p&gt;I quickly turned these relationships into a couple of assertions.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s_axi_aresetn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;araddr_done_reg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rresp_done_reg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;faxil_rd_outstanding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s_axi_aresetn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;araddr_done_reg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rresp_done_reg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s_axi_aresetn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;araddr_done_reg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s_axi_arready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I then turned around and repeated this process on the write side of the
interface.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s_axi_aresetn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;awaddr_done_reg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s_axi_awready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s_axi_aresetn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wdata_done_reg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s_axi_wready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s_axi_aresetn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;awaddr_done_reg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wresp_done_reg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;faxil_awr_outstanding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s_axi_aresetn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wdata_done_reg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wresp_done_reg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;faxil_wr_outstanding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wresp_done_reg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wdata_done_reg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;awaddr_done_reg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Curiously, if those &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;X==Y&lt;/code&gt; assertions hold, for two separate registers &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;X&lt;/code&gt;
and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Y&lt;/code&gt;, then … why keep both registers around?  I’d be tempted, if this
were my own design, to turn around and remove any extra registers after
seeing something like this–but we can do that after verification if we would
like.&lt;/p&gt;

&lt;p&gt;When I returned to verify
&lt;a href=&quot;https://github.com/olofk/axi_node/blob/0193125be350718e7fe8b44308f4dc44749ef60c/axi_regs_top.sv&quot;&gt;the core&lt;/a&gt;,
held for the first ten time steps–past the first transaction and potentially
even into the second.  That was the good news.  The bad news was that the
&lt;a href=&quot;/blog/2018/03/10/induction-exercise.html&quot;&gt;induction&lt;/a&gt;
engine suddenly slowed down after two steps.  (I had it set for 10 steps.
It counted down from 10 to 8 and … stopped.)  After about a minute, it got
to the next step, but the one after that required another five minutes.&lt;/p&gt;

&lt;p&gt;This is unacceptable (in my humble opinion)–especially for a core this simple.
I really don’t want to wait that long for a tool to tell me if my design is
working or not–and especially not when doing this for a small audience.  So
I adjusted the depth again, this time from ten cycles down to four.  After
another ten minutes of processing or so, the tool produced a trace where the
design had received an address, but hadn’t responded to the bus.  It was a
timeout bug.  (Curiously, when I repeat this test without running Zoom,
the tool returns within a minute.)&lt;/p&gt;

&lt;p&gt;This didn’t happen in a bounded model check, what was going on?&lt;/p&gt;

&lt;p&gt;A little more sleuthing discovered a set of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rresp_running_reg&lt;/code&gt; registers
that I hadn’t noticed before.  Looking over the cover traces, this register
looked like it was identical to the return valid signal.  Therefore, I
created a couple of assertions to see if this was the case.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s_axi_aresetn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
       		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wresp_running_reg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s_axi_bvalid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s_axi_aresetn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rresp_running_reg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s_axi_rvalid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now, at this point, the design passed both the bounded model check and the
&lt;a href=&quot;/blog/2018/03/10/induction-exercise.html&quot;&gt;induction&lt;/a&gt;
pass within seconds.&lt;/p&gt;

&lt;p&gt;But what about that bug?  So far, we’ve only assumed we’d never hit it.
Wouldn’t it make more sense to fix it?&lt;/p&gt;

&lt;p&gt;So I added in a set of FF’s to actually latch &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RDATA&lt;/code&gt; and the design now
passed.  Here’s what the design used to look like,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;c1&quot;&gt;// implement slave model register read mux&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always_comb&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;data_out_reg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cfg_reg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;raddr_reg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]];&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;and here’s what I updated it to:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s_axi_aclk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;araddr_done_reg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rresp_running_reg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;data_out_reg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cfg_reg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;raddr_reg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]];&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I then removed the assumption and re-ran the proof.  Within only a couple of
seconds, this design was now verified to be &lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;fully AXI-lite
compliant&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In all, the whole effort took just over an hour: one hour and twenty minutes
from start to finish.  Remember, I started with a design I’d never verified
before, and I didn’t know if there were bugs within the design or not.  On
top of that, most AXI-lite designs copy from a couple of base designs–such
&lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;as Xilinx’s (broken) demo&lt;/a&gt;.
This one didn’t copy from anywhere that I could tell, so it was a fun new
approach to AXI-lite to examine.&lt;/p&gt;

&lt;h2 id=&quot;questions-asked&quot;&gt;Questions asked&lt;/h2&gt;

&lt;p&gt;During this hour, however, there was a lot of time where nothing was happening.
During that time, I asked for and responded to a variety of questions posted
on the Zoom chat channel.  No, I didn’t record the event, nor did I record the
questions posed over the chat channel.  However, I can still remember some of
the questions that were asked, and so let me share those again below.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Will I be recording a video of the event?  or if not, would I allow someone
else to record it?&lt;/p&gt;

    &lt;p&gt;My response here was, No, I was not going to be recording the event.&lt;/p&gt;

    &lt;p&gt;Video production is a field in and of itself.  It’s not something I really
have any experience with, and I’m not sure how well I’d be able to do it.
Others, such as &lt;a href=&quot;https://www.youtube.com/channel/UC1kyKOb_sv52OfVTZW5WXPg&quot;&gt;Matt, understand the topic and do a much better job
than I expect to be able to
do&lt;/a&gt;.
Further, I wasn’t sure if this event would even be of any value and interest
or not.&lt;/p&gt;

    &lt;p&gt;So, instead, I asked the audience to let me know at the end of the
teleconference if this was something they found valuable and might
want to see a video of in the future.  If there’s an interest in it,
perhaps I can do a bit of research into what would be required.
Perhaps there might be some interest in an amateur hour, I don’t know.&lt;/p&gt;

    &lt;p&gt;One of  the other individuals who joined us recommended &lt;a href=&quot;https://www.youtube.com/watch?v=xWFo3L_weZA&quot;&gt;Matt’s video on
“Formally verifying an AXILite core with
sby.”&lt;/a&gt;  This video should
cover the same (rough) material I covered, yet looking at a different
AXI-lite core.  If you’d like to watch a how-to video, I’d certainly invite
you to check out this one.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;What tool was I using for formal verification?&lt;/p&gt;

    &lt;p&gt;As I mentioned above, I was using &lt;a href=&quot;https://symbiyosys.readthedocs.io/en&quot;&gt;SymbiYosys&lt;/a&gt;
for the formal verification.  You can also
read about &lt;a href=&quot;/blog/2020/04/01/design-flow.html&quot;&gt;the open source tool suite I normally use when doing design
here&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Do I always document my designs?&lt;/p&gt;

    &lt;p&gt;I try.&lt;/p&gt;

    &lt;p&gt;One of the things that comes with age is the recurring experience of
returning to your own work, weeks or months later, and wondering what you
were thinking when you wrote it.  This is usually when I start adding in
a lot of documentation, if not before.  Similarly, if I ever have to think
my way through a problem, then I am careful to document my train of thought
lest I not remember it five minutes later.&lt;/p&gt;

    &lt;p&gt;I’ve also discovered that blogging about various designs is a great way
to document them.  The process of explaining a design to someone else
forces me to think carefully through what I’m doing and why.  In other
words, I am not just blogging for my readers and sponsors, I also blog
for my own benefit.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Does &lt;a href=&quot;https://symbiyosys.readthedocs.io/en&quot;&gt;SymbiYosys&lt;/a&gt; come with &lt;a href=&quot;http://gtkwave.sourceforge.net&quot;&gt;GTKWave&lt;/a&gt;?&lt;/p&gt;

    &lt;p&gt;Yes and no.  &lt;a href=&quot;http://gtkwave.sourceforge.net&quot;&gt;GTKWave&lt;/a&gt;
is its own independent piece of open source software project.
I have it downloaded on my computer, and I just use it from there.
However, the commercial version of
&lt;a href=&quot;https://symbiyosys.readthedocs.io/en&quot;&gt;SymbiYosys&lt;/a&gt;, which comes as part of
the SymbioticEDA Suite, comes prepackaged with a copy of
&lt;a href=&quot;http://gtkwave.sourceforge.net&quot;&gt;GTKWave&lt;/a&gt; to ensure
a uniform customer experience.&lt;/p&gt;

    &lt;p&gt;Technically, &lt;a href=&quot;http://gtkwave.sourceforge.net&quot;&gt;GTKWave&lt;/a&gt;
isn’t required–any &lt;a href=&quot;/blog/2017/07/31/vcd.html&quot;&gt;VCD&lt;/a&gt;
viewer should work nicely with
&lt;a href=&quot;https://symbiyosys.readthedocs.io/en&quot;&gt;SymbiYosys&lt;/a&gt;.  Practically, I don’t
have experience with any other waveform viewing tools, so I’m not sure what
more I can say there.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;What tool do I use for the drawings on my blog?&lt;/p&gt;

    &lt;p&gt;I primarily use &lt;a href=&quot;https://wiki.gnome.org/Apps/Dia/&quot;&gt;dia&lt;/a&gt;.  It’s a basic
vector graphics package.  I really like it.&lt;/p&gt;

    &lt;p&gt;There is another tool out there called &lt;a href=&quot;https://inkscape.org&quot;&gt;inkscape&lt;/a&gt;
which is pretty nice as well.  One of the things I like about
&lt;a href=&quot;https://wiki.gnome.org/Apps/Dia/&quot;&gt;dia&lt;/a&gt; over my experience with
&lt;a href=&quot;https://inkscape.org&quot;&gt;inkscape&lt;/a&gt; is that it’s easy to force all diagram
element points onto a grid–something I haven’t figured out how to do
with &lt;a href=&quot;https://inkscape.org&quot;&gt;inkscape&lt;/a&gt;, or if it’s even possible with
&lt;a href=&quot;https://inkscape.org&quot;&gt;inkscape&lt;/a&gt;.&lt;/p&gt;

    &lt;p&gt;In this article, the traces were made using
&lt;a href=&quot;http://gtkwave.sourceforge.net&quot;&gt;GTKWave&lt;/a&gt;.  From there I took a screen
snapshot, saved it as a PNG file, and then imported the file into
&lt;a href=&quot;https://wiki.gnome.org/Apps/Dia/&quot;&gt;dia&lt;/a&gt; in order to add any annotations.&lt;/p&gt;

    &lt;p&gt;I use LaTeX to generate my &lt;a href=&quot;/tutorial/formal.html&quot;&gt;formal verification
courseware&lt;/a&gt;, and Fig. 3
is simply a screen capture of a LaTeX table with some PSTricks used to
make &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;k-Induction&lt;/code&gt; go sideways.&lt;/p&gt;

    &lt;p&gt;The blobs in Figs. 4 and 5 were created using
&lt;a href=&quot;https://wiki.gnome.org/Apps/Dia/&quot;&gt;dia&lt;/a&gt;.  If you check out &lt;a href=&quot;/tutorial/formal.html&quot;&gt;my formal
verification courseware&lt;/a&gt;, you’ll
see that I use the same blobs there–albeit with a bit more explanation and
context.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Are there any consequences to having too many assertions?  Might a design
vacuously pass?&lt;/p&gt;

    &lt;p&gt;This was a really good question.  From the viewer’s perspective,
it probably looked like I was just throwing random assertions into the
design to see what would stick.  Indeed, there was some truth to this as
I was trying to get the design to pass
&lt;a href=&quot;/blog/2018/03/10/induction-exercise.html&quot;&gt;induction&lt;/a&gt;.
So what are the consequences here of being wrong?  What if you add an
inappropriate assertion?  Or, alternatively, what if your assertions are
redundant?&lt;/p&gt;

    &lt;p&gt;Let’s deal with the inappropriate assertion first.  Suppose I make an
assertion of something that isn’t really true.  What happens then?  That’s
easy: the design will fail to prove.  When the proof fails,
&lt;a href=&quot;https://symbiyosys.readthedocs.io/en&quot;&gt;SymbiYosys&lt;/a&gt; will
generate a trace showing the problem, and you can then examine it to decide
if the assertion was in error or if, instead, the design was in error.
Indeed, that’s &lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;the whole purpose of formal
verification&lt;/a&gt;: to
find failing assertions.&lt;/p&gt;

    &lt;p&gt;It is also possible to assert the same thing more than once, or in multiple
different ways.  This isn’t really much of a &lt;em&gt;problem&lt;/em&gt; though.  While it
might cause some small performance hit, your design still won’t pass when it
shouldn’t–so you are still okay there.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 7. The master rule of formal verification&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/fv-master-rule.svg&quot; alt=&quot;&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Where things get scary are with assumptions–not assertions.  If you assume
   something you
   shouldn’t, then you might cause your design to pass vacuously.  (i.e., it
   passes when it shouldn’t.)  To keep this from happening, I have a rule
   that you should only make assumptions of inputs–never outputs nor registers
   internal to your design.  Even at this, though, I’ve made mistakes where
   I’ve assumed things that weren’t true.  My current best answer is to use
   &lt;a href=&quot;/formal/2020/06/12/four-keys.html&quot;&gt;custom interface files&lt;/a&gt;,
   so that everything that gets assumed on one side of an interface gets
   asserted on the other side.  While this doesn’t work for all of my problems,
   when it does work it works amazingly well.&lt;/p&gt;

&lt;ol start=&quot;7&quot;&gt;
  &lt;li&gt;
    &lt;p&gt;Where can I learn more about
&lt;a href=&quot;/blog/2018/03/10/induction-exercise.html&quot;&gt;induction&lt;/a&gt;?&lt;/p&gt;

    &lt;p&gt;I have two good resources on
&lt;a href=&quot;/blog/2018/03/10/induction-exercise.html&quot;&gt;induction&lt;/a&gt;
for those who are interested.  The first is &lt;a href=&quot;/blog/2018/03/10/induction-exercise.html&quot;&gt;my blog post on the
topic&lt;/a&gt;, and the
second are the &lt;a href=&quot;/tutorial/formal.html&quot;&gt;formal verification class
slides&lt;/a&gt;.  Both will tell you a
bit about how to do
&lt;a href=&quot;/blog/2018/03/10/induction-exercise.html&quot;&gt;induction&lt;/a&gt;, and
the unique problems associated with it.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Is there any way to get the tool to provide more meaningful names for
cover traces other than just &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;trace%d.vcd&lt;/code&gt;?&lt;/p&gt;

    &lt;p&gt;Not that I know of.  I know I had asked for this feature some time
ago.  Looking over the issue tracker, it looks like
&lt;a href=&quot;https://github.com/YosysHQ/SymbiYosys/issues/24&quot;&gt;Tom Verbeure also requested the
feature&lt;/a&gt;.
&lt;a href=&quot;https://github.com/YosysHQ/SymbiYosys/issues/24&quot;&gt;That request&lt;/a&gt;
hasn’t yet been closed, so I think it’s safe to assume the feature doesn’t
exist yet.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Why do you need to provide the counters to the &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/faxil_slave.v&quot;&gt;bus interface property
module&lt;/a&gt;?&lt;/p&gt;

    &lt;p&gt;This question was asked in reference to the three counters,
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;faxil_awr_outstanding&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;faxil_wr_outstanding&lt;/code&gt;, and
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;faxil_rd_outstanding&lt;/code&gt;.  The immediate answer to the question is that I’m
not providing them to the &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/faxil_slave.v&quot;&gt;interface property
module&lt;/a&gt;,
but rather it’s the other way around: the &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/faxil_slave.v&quot;&gt;interface property
module&lt;/a&gt;
is providing those counters as outputs to the rest of the design.&lt;/p&gt;

    &lt;p&gt;Are they necessary?  For a bounded proof, they can be left as internal
counters within the interface property set.  For an
&lt;a href=&quot;/blog/2018/03/10/induction-exercise.html&quot;&gt;induction&lt;/a&gt;
proof, however, you &lt;em&gt;need&lt;/em&gt; to tie the registers within your design to
these counters via assertions–or the proof won’t pass.&lt;/p&gt;

    &lt;p&gt;Go back and take another look at the assertions we made above to pass
&lt;a href=&quot;/blog/2018/03/10/induction-exercise.html&quot;&gt;induction&lt;/a&gt;.
See how this was done?  First we asserted there would never be more than
one transaction outstanding, then we came back and said that if there ever
was a transaction outstanding then the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;*_done_reg&lt;/code&gt; had to be set and the
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;*resp_done_reg&lt;/code&gt; had to be clear.  That’s an important part of making our
formal proof valid for all time, as well as for accomplishing the whole proof
in only four steps.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Can I see some part of this design or other?&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;One of the challenging problems of working with a design that doesn’t fit
   on the screen is that there will always be viewers who can’t see some part
   of it that they are interested in.  Since only the most trivial designs
   tend to fit on a screen at once, this means someone will always be struggling
   to follow–which is one of the reasons why I tend to dislike the video
   format for learning.&lt;/p&gt;

&lt;p&gt;Still, in case anyone wanted to study the design or the formal
   properties I added to it, I placed a copy in a &lt;a href=&quot;https://gist.github.com/ZipCPU/497c85a0dc7b84e9cd05b3ddf1bc2487&quot;&gt;github
   gist&lt;/a&gt;.
   Feel free to check it out.  There should be a decent comment block at the
   top of the SV file describing what we did.  You might also wish to compare
   the result against the &lt;a href=&quot;https://github.com/olofk/axi_node/blob/0193125be350718e7fe8b44308f4dc44749ef60c/axi_regs_top.sv&quot;&gt;design we started from&lt;/a&gt;,
   to see any differences.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Ok, so I admitted it up front. I was just in it to have a fun evening.  I
didn’t write down any business contacts, I didn’t keep track of potential
clients, I didn’t do any customer satisfaction surveys, or try to ask questions
like if anyone had ever used formal before or not and why or why not.  Neither
did I dress up in a suit or tie, and those who showed up early may have even
seen the soda can on my desk.&lt;/p&gt;

&lt;p&gt;Towards that end, I think I succeeded.&lt;/p&gt;

&lt;p&gt;Did my work help someone out?  Probably not.  I checked with
&lt;a href=&quot;https://twitter.com/OlofKindgren&quot;&gt;Olof&lt;/a&gt;, who hosts &lt;a href=&quot;https://github.com/olofk/axi_node&quot;&gt;this repository on
github&lt;/a&gt;, only to find out that the
authors had since &lt;a href=&quot;https://github.com/pulp-platform/axi&quot;&gt;rewritten everything&lt;/a&gt;
and so I was only verifying abandonware.  So, this wasn’t really all that much
of a good deed for the community from that standpoint.&lt;/p&gt;

&lt;p&gt;Now, let me ask you, my sponsors and readers, and especially those who were
able to join me: is this something you’d like to see more of?  Those who were
there asked for more, but I’d love to hear your thoughts as well.  Please let me
know if so.  To that end, I’ll post a link to this article on the
&lt;a href=&quot;https://reddit.com/r/ZipCPU&quot;&gt;ZipCPU Reddit&lt;/a&gt;–as I have with most of my
articles, where you’ll be able to comment one way or another if you would like
to weigh in on the question.&lt;/p&gt;

&lt;p&gt;Oh, and one more thing: I might need some help finding some other open source
AXI projects to verify for this purpose.  Someone pointed me towards
&lt;a href=&quot;https://github.com/alexforencich/verilog-axi&quot;&gt;alexforencich’s repo&lt;/a&gt; as
one possibility, and I’m also aware of &lt;a href=&quot;https://github.com/pulp-platform/axi&quot;&gt;the updated pulp-platform
AXI repo&lt;/a&gt;, but I’ll need more than
just those two in order to do this more than just a couple of times–assuming
there’s sufficient interest for it.&lt;/p&gt;
&lt;hr /&gt;&lt;p&gt;&lt;em&gt;And after the reading of the law and the prophets the rulers of the synagogue sent unto them, saying, Ye men and brethren, if ye have any word of exhortation for the people, say on.  (Acts 13:15)&lt;/em&gt;</description>
        <pubDate>Sat, 17 Oct 2020 00:00:00 -0400</pubDate>
        <link>https://zipcpu.com/formal/2020/10/17/friday.html</link>
        <guid isPermaLink="true">https://zipcpu.com/formal/2020/10/17/friday.html</guid>
        
        
        <category>formal</category>
        
      </item>
    
      <item>
        <title>Moving values and strobes cross clock domains</title>
        <description>&lt;p&gt;It’s been a while since we’ve discussed &lt;a href=&quot;/blog/2017/10/20/cdc.html&quot;&gt;cross-clock
domain&lt;/a&gt; anything,
so it’s probably worth coming back to the topic.  So far, we’ve already
discussed the &lt;a href=&quot;/blog/2017/10/20/cdc.html&quot;&gt;basics of crossing clock domains, and the need for a 2FF
synchronizer&lt;/a&gt;,
&lt;a href=&quot;/formal/2018/04/12/areset.html&quot;&gt;synchronizing resets&lt;/a&gt;,
and &lt;a href=&quot;/blog/2018/07/06/afifo.html&quot;&gt;formally verifying an asynchronous
FIFO&lt;/a&gt;.  Today, I’d like to
come back to the topic of moving data across clock domains, but without the
use of the &lt;a href=&quot;/blog/2018/07/06/afifo.html&quot;&gt;asynchronous FIFO&lt;/a&gt;.
Specifically, I’d like to revisit &lt;a href=&quot;/blog/2017/10/20/cdc.html&quot;&gt;the concept I posted earlier for moving words
across clock domains&lt;/a&gt;.  This time,
I intend to increase the speed of the transfer by nearly a factor of two over
the last time I presented the concept.&lt;/p&gt;

&lt;p&gt;Here’s the idea:  Imagine you have a design that requires two
&lt;a href=&quot;/blog/2017/10/20/cdc.html&quot;&gt;clock domains&lt;/a&gt;.
Let’s suppose one of those domains responds to a bus-based controller which
can be used to set design registers.  These values, set from the first clock
domain, are then needed in the second clock domain.  How shall this register
information cross clock domains, with the requirement that the register in
the new clock domain either has the prior value or the new value but never
any inconsistent values?  That is, we don’t want some bits to arrive earlier
than any others, but rather to have all the bits of our register arrive in the
new clock domain at the same time.&lt;/p&gt;

&lt;p&gt;A classic example of such a circuit is shown below in Fig. 1.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 1. Moving a counter across clock domains&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/tfrvalue/tfrcounter.svg&quot; alt=&quot;&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;This design requires moving a counter of many bits from one
&lt;a href=&quot;/blog/2017/10/20/cdc.html&quot;&gt;clock domains&lt;/a&gt;,
the launching domain shown in yellow, to a new
&lt;a href=&quot;/blog/2017/10/20/cdc.html&quot;&gt;clock domains&lt;/a&gt;, shown in green.
If the new &lt;a href=&quot;/blog/2017/10/20/cdc.html&quot;&gt;clock domains&lt;/a&gt;
is faster than the launching domain, then the updated clock
might skip some values to keep up.  This is normal.  What’s not normal
might be the counter appearing to count backwards or out of order  because
some bits arrive before others–such as I discuss in &lt;a href=&quot;/tutorial&quot;&gt;my
tutorial&lt;/a&gt;.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left; padding: 20pt&quot;&gt;&lt;caption&gt;Fig 2. A 4-phase clock transfer&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/cdc-dbl-ack.svg&quot; alt=&quot;&quot; width=&quot;320&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;&lt;a href=&quot;/blog/2017/10/20/cdc.html&quot;&gt;When we built this before&lt;/a&gt;,
we placed the value to be transferred into a holding
register, and then sent a request signal to the
new &lt;a href=&quot;/blog/2017/10/20/cdc.html&quot;&gt;clock domain&lt;/a&gt;.  Once an
acknowledgment was returned, we cleared the request, the acknowledgment was
then cleared, and we were then ready to send a new request.  You can see it
diagrammed in Fig. 2 on the left as a &lt;em&gt;four phase&lt;/em&gt; clock transfer.  (Not to be
confused with the &lt;a href=&quot;https://en.wikipedia.org/wiki/Four-Phase_Systems&quot;&gt;Four-Phase
Systems&lt;/a&gt; company my father
once worked for …)&lt;/p&gt;

&lt;p&gt;This whole process of going back and forth from one
&lt;a href=&quot;/blog/2017/10/20/cdc.html&quot;&gt;clock domain&lt;/a&gt; to the next,
however, is very time consuming.  If the two clocks were (nearly) synchronous,
it requires about ten clock cycles to move words from one domain to the
next, as shown in Fig. 2 above.  Anything faster would require an
&lt;a href=&quot;/blog/2018/07/06/afifo.html&quot;&gt;asynchronous FIFO&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Then one of my readers sent me another approach to the same challenge, an
approach which roughly halves the time required.&lt;/p&gt;

&lt;h2 id=&quot;the-new-approach&quot;&gt;The new approach&lt;/h2&gt;

&lt;p&gt;Here’s the diagram I was sent.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 3. A proposed 2-phase CDC structure&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;/img/tfrvalue/proposed.png&quot;&gt;&lt;img src=&quot;/img/tfrvalue/proposed.png&quot; alt=&quot;&quot; width=&quot;780&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Perhaps some of you may have seen this before.  It’s a &lt;em&gt;two phase&lt;/em&gt; clock
transfer circuit.  While you may have seen it before, this was quite new to
me.  It took me a while after seeing this diagram to fully get a grasp on
how this proposal was different–and then to make it better.&lt;/p&gt;

&lt;p&gt;As with the original design, data is first clocked in the one domain, and then
held constant until it’s transferred to the second domain.  The output value
of this design, at the new clock domain, &lt;em&gt;never&lt;/em&gt; changes except on the positive
edge of the new clock domain.  (Clock crossing changes are hidden internally.)
Similarly, as with
the first design, there are two
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flip-flop_(electronics)&quot;&gt;flip-flop&lt;/a&gt;
synchronizers in both paths.
Well, almost: the control path has a sort of modified three
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flip-flop_(electronics)&quot;&gt;flip-flop&lt;/a&gt;
synchronizer–but we’ll get to that in a moment.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 4. A 2-phase clock transfer&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/tfrvalue/two-phase-cdc.svg&quot; alt=&quot;&quot; width=&quot;320&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;The big difference is that the data updates any time the control line,
previously called a request line, &lt;em&gt;changes&lt;/em&gt;.  Before, we sent data by
asserting a request line, and so new data was indicated by a positive edge.
We then required the request line clear before sending a new piece of data–or
we’d never be able to generate a new positive edge.  This updated two-phase
design sends
a request by changing the control line–either positively or negatively.  Once
the change has been observed in the feedback path, this updated design doesn’t
wait to clear the control line back to its original value, but rather uses the
next change in the control line to send a new value.  This removes the
requirement for the second round trip to clear the control lines before going
back around again.  As such, this is a &lt;em&gt;two-phase&lt;/em&gt; data crossing design.&lt;/p&gt;

&lt;p&gt;So, how might we build this?&lt;/p&gt;

&lt;h2 id=&quot;the-design&quot;&gt;The design&lt;/h2&gt;

&lt;p&gt;For the sake of discussion, let’s use the basic &lt;a href=&quot;/dsp/2020/04/20/axil2axis.html&quot;&gt;AXI stream
protocol&lt;/a&gt;.  This will allow
&lt;a href=&quot;https://en.wikipedia.org/wiki/Back_pressure&quot;&gt;back pressure&lt;/a&gt;
at both the input and the output.  Better yet, if you don’t need this
&lt;a href=&quot;https://en.wikipedia.org/wiki/Back_pressure&quot;&gt;back pressure&lt;/a&gt;,
then just tie the ready wires to one.  We could also
use this basic protocol to pass a strobe across
&lt;a href=&quot;/blog/2017/10/20/cdc.html&quot;&gt;clock domains&lt;/a&gt;:
tie the readies
to one, then any time the valid is asserted on the input (provided it’s not
raised too often) will result on a single valid being asserted at the output.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 5. Basic AXI-Stream port list for crossing clock domains&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/tfrvalue/portlist.svg&quot; alt=&quot;&quot; width=&quot;480&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Fig. 5 shows our basic portlist above, enumerated again below.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tfrvalue&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;#(&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;parameter&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;W&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
		&lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;i_a_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;i_a_reset_n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;i_a_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;kt&quot;&gt;output&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;o_a_ready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;W&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;i_a_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;//&lt;/span&gt;
		&lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;i_b_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;i_b_reset_n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;kt&quot;&gt;output&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;reg&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;o_b_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;i_b_ready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;kt&quot;&gt;output&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;reg&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;W&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;o_b_data&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

	&lt;span class=&quot;c1&quot;&gt;// Register declarations&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;localparam&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;NFF&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;reg&lt;/span&gt;			&lt;span class=&quot;n&quot;&gt;a_req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a_ack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;reg&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;W&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;a_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;reg&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NFF&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;a_pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;kt&quot;&gt;reg&lt;/span&gt;			&lt;span class=&quot;n&quot;&gt;b_req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b_last&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b_stb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;reg&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NFF&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;b_pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I’ve used the prefix &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;i_a_*&lt;/code&gt; to describe signals from the source side of this
transaction, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;o_a_ready&lt;/code&gt; to capture any
&lt;a href=&quot;https://en.wikipedia.org/wiki/Back_pressure&quot;&gt;back pressure&lt;/a&gt;
feedback on this side.
Similarly, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;i_b_*&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;o_b_*&lt;/code&gt; prefixes describe the transaction on the
receiving side.  As you can see, we’ll be following AXI’s handshaking protocol
for this exercise.&lt;/p&gt;

&lt;p&gt;The first key to this algorithm is that on any incoming request, we’ll
toggle a request value.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;a_req&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_a_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;negedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_a_reset_n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_a_reset_n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;a_req&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1'b0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_a_valid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o_a_ready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;a_req&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a_req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We’re also going to grab a copy of the data before moving
&lt;a href=&quot;/blog/2017/10/20/cdc.html&quot;&gt;cross clock domains&lt;/a&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_a_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_a_valid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o_a_ready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;a_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_a_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This data copy is important.  It allows the launching side to continue on,
knowing that it’s request has been sent.  This will speed up your throughput
over forcing the sender to leave &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;i_a_valid&lt;/code&gt; high while waiting for the
return path to set &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;o_a_ready&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now that we’ve changed &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a_req&lt;/code&gt; and copied the data, it’s time to actually
&lt;a href=&quot;/blog/2017/10/20/cdc.html&quot;&gt;cross clock domains&lt;/a&gt;.
This is a basic two
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flip-flop_(electronics)&quot;&gt;flip-flop&lt;/a&gt;
&lt;a href=&quot;/blog/2017/10/20/cdc.html&quot;&gt;clock domain crossing&lt;/a&gt;,
with the exception that we’re using a third
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flip-flop_(electronics)&quot;&gt;flip-flop&lt;/a&gt;
to keep track of the last value.  We call this one-clock-ago value &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;b_last&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b_last&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b_req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b_pipe&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_b_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;negedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_b_reset_n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_b_reset_n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b_last&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b_req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b_pipe&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b_last&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b_req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b_pipe&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b_req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b_pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a_req&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_b_valid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_b_ready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;b_last&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b_last&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;There’s one additional trick to the definition of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;b_last&lt;/code&gt; above.  Did you
notice that I didn’t set &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;b_last&lt;/code&gt; until I knew that the prior output wasn’t
stalled?  As you may recall, a stall would be any time
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;o_b_valid &amp;amp;&amp;amp; !i_b_ready&lt;/code&gt;.  This extra stall check wasn’t in the original
design I was given, but it helps to guarantee proper &lt;a href=&quot;/dsp/2020/04/20/axil2axis.html&quot;&gt;AXI stream
protocol&lt;/a&gt;
handling.  This is where stalls will happen, if at all, but not until a prior
word has already
&lt;a href=&quot;/blog/2017/10/20/cdc.html&quot;&gt;crossed clock domains&lt;/a&gt;
and set &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;o_b_valid&lt;/code&gt; to indicate that
there’s a word ready to be received.  This also spares us some throughput,
since the receiving side can accept this data immediately if desired.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;b_last&lt;/code&gt; is therefore true once the word has
&lt;a href=&quot;/blog/2017/10/20/cdc.html&quot;&gt;crossed clock domains&lt;/a&gt; &lt;em&gt;and&lt;/em&gt;
once it has been accepted on our output port.  That means we can now start
sending the acknowledgment back to the beginning–the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a_*&lt;/code&gt; clock domain–even
before the outgoing word has been accepted (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;o_b_valid &amp;amp;&amp;amp; i_b_ready&lt;/code&gt;) by
the receiving stream.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_a_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;negedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_a_reset_n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_a_reset_n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a_ack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a_pipe&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;2'b00&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a_ack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a_pipe&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a_pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b_last&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Once this flag returns to the original clock domain, we can then compare it to
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a_req&lt;/code&gt; in order to know the round-trip is complete.  Until &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a_ack&lt;/code&gt; matches
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a_req&lt;/code&gt;, a transfer remains in progress and so &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;o_a_ready&lt;/code&gt; needs to be false.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;o_a_ready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a_ack&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a_req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Notice that, unlike the four-phase clock transfer, we can’t depend upon the
value of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a_ack&lt;/code&gt; to get this result, but rather need to compare &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a_ack&lt;/code&gt; to
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a_req&lt;/code&gt;.  That’s one of the keys to the success of this two-phase algorithm.&lt;/p&gt;

&lt;p&gt;Let’s now go back to the output port on the receiving side.  We’ll move our
word across that final clock whenever &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;b_last&lt;/code&gt; isn’t equal to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;b_req&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;b_stb&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b_last&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b_req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We also need to do a protocol check.  If ever &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;!o_b_valid || i_b_ready&lt;/code&gt;, we
can set the output.  However, we don’t want to set &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;o_b_data&lt;/code&gt; based upon
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a_data&lt;/code&gt; unless we are confident that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a_data&lt;/code&gt; has held steady for at least
one clock period in the new domain.  That way, we’re guaranteed there won’t
be any
&lt;a href=&quot;/blog/2017/10/20/cdc.html&quot;&gt;cross clock domain&lt;/a&gt;
issues with it.  Hence, we’ll only adjust
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;o_b_data&lt;/code&gt; if &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;b_stb&lt;/code&gt; is high, telling us that there’s a cross-clock data
request pending.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;o_b_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_b_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b_stb&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_b_valid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_b_ready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_b_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We’ve also discussed setting an &lt;a href=&quot;/dsp/2020/04/20/axil2axis.html&quot;&gt;AXI stream valid
before&lt;/a&gt;.
As with setting the data component, there’s a strict pattern
to setting valid:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;o_b_valid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_b_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;negedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_b_reset_n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_b_reset_n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_b_valid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1'b0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_b_valid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_b_ready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Once you follow the pattern, all that’s left is to set the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;o_b_valid&lt;/code&gt; value
to whatever your design requires.  This time, we’ll set it to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;b_stb&lt;/code&gt; to
indicate there’s a new value arriving on the new clock.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;n&quot;&gt;o_b_valid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b_stb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;That’s the design.  It’s pretty basic.&lt;/p&gt;

&lt;p&gt;I suppose I should offer a word about &lt;a href=&quot;/formal/2018/04/12/areset.html&quot;&gt;asynchronous
resets&lt;/a&gt;.
This design uses them, even though &lt;a href=&quot;/blog/2017/08/21/rules-for-newbies.html&quot;&gt;I recommend against them in
general&lt;/a&gt;.
Why?  Well, &lt;a href=&quot;/blog/2017/10/20/cdc.html&quot;&gt;cross clock domain&lt;/a&gt;
designs often require &lt;a href=&quot;/formal/2018/04/12/areset.html&quot;&gt;asynchronous
resets&lt;/a&gt;.
Without the &lt;a href=&quot;/formal/2018/04/12/areset.html&quot;&gt;asynchronous
reset&lt;/a&gt;,
there’s no real way to guarantee that both sides are
reset in proper order.&lt;/p&gt;

&lt;p&gt;Indeed, while writing this article, I had the opportunity of examining
another similar design that didn’t use &lt;a href=&quot;/formal/2018/04/12/areset.html&quot;&gt;asynchronous
resets&lt;/a&gt;.  That design had
no feedback to each
&lt;a href=&quot;/blog/2017/10/20/cdc.html&quot;&gt;clock domain&lt;/a&gt;
to know when the reset in the other
&lt;a href=&quot;/blog/2017/10/20/cdc.html&quot;&gt;clock domain&lt;/a&gt;
had completed.  As a result,
&lt;a href=&quot;https://symbiyosys.readthedocs.io/en/latest&quot;&gt;SymbiYosys&lt;/a&gt;
found many ways of violating the reset assumptions within that design.  For
example, &lt;a href=&quot;https://symbiyosys.readthedocs.io/en/latest&quot;&gt;SymbiYosys&lt;/a&gt;
found a way to launch a first value from the sending to the receiving domain,
followed by a reset and then a second value, only to see the first value end
up in the new domain &lt;em&gt;after&lt;/em&gt; the reset.&lt;/p&gt;

&lt;p&gt;Yes, those &lt;a href=&quot;/formal/2018/04/12/areset.html&quot;&gt;asynchronous
resets&lt;/a&gt; 
are an important part of this design.&lt;/p&gt;

&lt;p&gt;The next step, though, is the fun part: verifying that this design &lt;a href=&quot;/blog/2017/10/20/cdc.html&quot;&gt;crosses
clock domains&lt;/a&gt; properly.&lt;/p&gt;

&lt;h2 id=&quot;formal-verification&quot;&gt;Formal Verification&lt;/h2&gt;

&lt;p&gt;The first step to formally verifying any &lt;a href=&quot;/blog/2017/10/20/cdc.html&quot;&gt;cross-clock
domain&lt;/a&gt;
transfer is to adjust the &lt;a href=&quot;https://github.com/ZipCPU/website/blob/master/examples/tfrvalue.sby&quot;&gt;SBY
file&lt;/a&gt; to
set the &lt;a href=&quot;https://symbiyosys.readthedocs.io/en/latest/reference.html#options-section&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;multiclock on&lt;/code&gt;
option&lt;/a&gt;.
This is a minimum requirement of any design that uses more than one clock.
We’ll then need to get access to the formal timestep, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gbl_clk&lt;/code&gt; by using the
&lt;a href=&quot;http://www.clifford.at/yosys&quot;&gt;Yosys&lt;/a&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(* gclk *)&lt;/code&gt; attribute.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gclk&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;reg&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;gbl_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In order to use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$past()&lt;/code&gt; successfully, you’ll also need an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;f_past_valid*&lt;/code&gt;
type of value.  In this case, there are three separate clocks–each of which
need an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;f_past_valid*&lt;/code&gt; check.  I’ve labeled each of these with a suffix
identifying the clock they are associated with: the formal time step, the
incoming (launching or sending) clock on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_a_&lt;/code&gt; interface, and then the
clock on the outgoing (destination, or receiving) &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_b_&lt;/code&gt; interface.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;			&lt;span class=&quot;kt&quot;&gt;reg&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;f_past_valid_gbl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_past_valid_a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
					&lt;span class=&quot;n&quot;&gt;f_past_valid_b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;f_past_valid_gbl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gbl_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;f_past_valid_gbl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;f_past_valid_a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_a_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;f_past_valid_a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;f_past_valid_b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_b_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;f_past_valid_b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We have two more pieces of boiler plate left.  First, we’ll need to create
a clock, and then assume our two resets are properly related.  Let’s
start with the clocks.&lt;/p&gt;

&lt;p&gt;We’ll “generate” a clock by adding an arbitrary step to a counter.  We can
then assume the incoming clocks are equal to the MSB’s of each counter.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;anyconst&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;reg&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;f_step_a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;f_step_b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;kt&quot;&gt;reg&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;f_count_a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_count_b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gbl_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;f_count_a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_count_a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1'b0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_step_a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;f_count_b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_count_b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1'b0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_step_b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_a_clk&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_count_a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
	
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_b_clk&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_count_b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left; padding: 20pt&quot;&gt;&lt;caption&gt;Fig 6. Proof duration as a function of clock precision&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/tfrvalue/proof-durations.svg&quot; alt=&quot;&quot; width=&quot;480&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;This is your basic fractional clock divider circuit that we’ve covered many
times before.  Do be careful when you build one of these for a formal proof:
the number of bits in the divider will drive the length of the proof.
As it is, this proof as written will take 33 steps to verify against all
possible faults using a 5-bit counter.  You can see how this would change
with other counter lengths in Fig. 6.&lt;/p&gt;

&lt;p&gt;Normally I would assume that the step is greater than zero and less than or
equal to half the range.  Here, I’ve found another way of insisting on this
property–by using a step of one less bit than the counter’s bit width and
adding a constant one to it.  This guarantees that each counter will step
forward, and also that it won’t step forward so far that the counter appears
to go backwards.&lt;/p&gt;

&lt;p&gt;That should handle assuming the existence of two incoming clocks.&lt;/p&gt;

&lt;p&gt;The next step is to handle the &lt;a href=&quot;/formal/2018/04/12/areset.html&quot;&gt;two
resets&lt;/a&gt;.
As we did for the &lt;a href=&quot;/blog/2018/07/06/afifo.html&quot;&gt;asynchronous
FIFO&lt;/a&gt;, we’ll want to assume that
the design starts in reset and that both resets will fall together or never
at all.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_past_valid_gbl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_a_reset_n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_b_reset_n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

	&lt;span class=&quot;c1&quot;&gt;// Both resets will always fall together&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gbl_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;($&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;fell&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_b_reset_n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;fell&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_a_reset_n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This is also going to force all of our properties onto the global clock.
From here on out, we won’t be able to use any &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;always @(*) assert();&lt;/code&gt;
statements.  If we did otherwise, any such combinatorial assertions would get
applied before this assumption was applied.  For example, we might see one
reset becoming active prior to the other.  If we instead trigger any assertions
on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;always @(posedge gbl_clk)&lt;/code&gt;, the resets will behave properly.&lt;/p&gt;

&lt;p&gt;Just to see what I’m talking about here, consider the trace shown in
Fig. 7 below.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 7. Assertion failure on the final clock&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/tfrvalue/bad-reset.png&quot; alt=&quot;&quot; width=&quot;686&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;In this picture, the formal proof failed when &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a_req&lt;/code&gt; suddenly dropped,
due to the sending side reset getting activated before the receiving side
reset.  We can delay this check by one time cycle by using transitioning
our always block on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gbl_clk&lt;/code&gt; instead of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@(*)&lt;/code&gt;–something you’ll see more of
as we go along.&lt;/p&gt;

&lt;p&gt;Let’s move on and force our input values to be clock synchronous, while
verifying that our outputs are also clock synchronous.&lt;/p&gt;

&lt;p&gt;One of the sad realities of multi-clock domain proofs is that you have to
assume the inputs are synchronous to their respective clocks–something that you
get for free when running proofs with a single clock only.  Here, we’ll
assume that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;i_a_valid&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;i_a_data&lt;/code&gt; are synchronous to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;i_a_clk&lt;/code&gt;.
We’ll also force &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;i_a_reset_n&lt;/code&gt; to only rise synchronous to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;i_a_clk&lt;/code&gt; as well:
asynchronous reset assertion, synchronous release as it is sometimes called.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gbl_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;rose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_a_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;rose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_a_reset_n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;($&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;stable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_a_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;($&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;stable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_a_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_a_reset_n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;($&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;stable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_a_ready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We’ll also add an assertion above that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;o_a_ready&lt;/code&gt; is stable unless the
clock changes.  This follows my master rule of formal verification: assume
inputs, assert any local state or outputs.  However, since we are using an
&lt;a href=&quot;/formal/2018/04/12/areset.html&quot;&gt;asynchronous resets&lt;/a&gt;,
this value might change if the reset is ever activated.  Since we know the
reset will last more than one clock cycle, we can just escape the assertion
here if the reset is ever active.&lt;/p&gt;

&lt;p&gt;We can just about repeat those same properties on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_b_&lt;/code&gt; clock controlling
our outputs.  The difference here is that they now need to be assertions instead
of assumptions, since we are applying them to &lt;em&gt;outputs&lt;/em&gt;.  The only two
exceptions are the reset in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;B&lt;/code&gt; clock domain and the ready signal
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;i_b_ready&lt;/code&gt;, which are the only remaining inputs on this side.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gbl_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;rose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_b_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;rose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_b_reset_n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_past_valid_b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_b_reset_n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;stable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_b_reset_n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;($&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;stable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_b_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;($&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;stable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_b_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_b_reset_n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;assume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;($&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;stable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_b_ready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You might notice that I’m requiring the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;o_b_data&lt;/code&gt; value to be synchronous
with the destination clock.  While this isn’t strictly required, I find it to
be good form.  Another common approach is to insist that it is synchronous
with the destination clock only if &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;o_b_valid&lt;/code&gt; is true, and trust the
downstream logic to handle it properly.&lt;/p&gt;

&lt;p&gt;Now that we are set up, it’s time to address the key components of any
proof.  We’ll start with the &lt;a href=&quot;/dsp/2020/04/20/axil2axis.html&quot;&gt;AXI stream
protocol&lt;/a&gt;
&lt;a href=&quot;/formal/2020/06/12/four-keys.html&quot;&gt;interface properties&lt;/a&gt;.
Here, we assume these properties of our inputs:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Valid gets cleared following any reset&lt;/li&gt;
  &lt;li&gt;As long as an outgoing request is stalled, it isn’t allowed to change.&lt;/li&gt;
&lt;/ol&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_a_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_past_valid_a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_a_reset_n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_a_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;($&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_a_valid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_a_ready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_a_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;($&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;stable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_a_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We then repeat those properties, only this time as assertions applied
to our outputs.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_b_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_past_valid_b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_b_reset_n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_b_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;($&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_b_valid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_b_ready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_b_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;($&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;stable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_b_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Once our design passes these properties, we’ll know it is
&lt;a href=&quot;/dsp/2020/04/20/axil2axis.html&quot;&gt;AXI stream&lt;/a&gt;
compliant.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/blog/2018/03/10/induction-exercise.html&quot;&gt;Taming the induction
engine&lt;/a&gt;
can be a bit of a challenge.  In this case, we
need to make certain that the various &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ack&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pipe&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;last&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;req&lt;/code&gt; signals
are consistent.  These registers essentially form a changed pulse, expressed
as a shift register, through time.  Therefore, let’s place these values
together into a shift register and make sure the shift register only takes
on acceptable values.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gbl_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a_ack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a_pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b_last&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b_req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b_pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a_req&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;mb&quot;&gt;6'b000_000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
	&lt;span class=&quot;mb&quot;&gt;6'b000_001&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
	&lt;span class=&quot;mb&quot;&gt;6'b000_011&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
	&lt;span class=&quot;mb&quot;&gt;6'b000_111&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
	&lt;span class=&quot;mb&quot;&gt;6'b001_111&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
	&lt;span class=&quot;mb&quot;&gt;6'b011_111&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
	&lt;span class=&quot;mb&quot;&gt;6'b111_111&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
	&lt;span class=&quot;mb&quot;&gt;6'b111_110&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
	&lt;span class=&quot;mb&quot;&gt;6'b111_100&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
	&lt;span class=&quot;mb&quot;&gt;6'b111_000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
	&lt;span class=&quot;mb&quot;&gt;6'b110_000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
	&lt;span class=&quot;mb&quot;&gt;6'b100_000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
	&lt;span class=&quot;mb&quot;&gt;6'b000_000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
	&lt;span class=&quot;nl&quot;&gt;default:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;endcase&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Incidentally, this was the assertion I changed to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;always @(*)&lt;/code&gt; in order
to demonstrate the problem in Fig. 7 above.&lt;/p&gt;

&lt;p&gt;I personally like this &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;case&lt;/code&gt; statement means of expressing this sort of
thought, and so I’ve used it often in many of my designs.&lt;/p&gt;

&lt;p&gt;We have one final assertion–the one we’re doing this for, and that is that
the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a_data&lt;/code&gt; register won’t be changed for at least one &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;i_b_clk&lt;/code&gt; cycle
before it is read.  This guarantees that we won’t be suffering from any
&lt;a href=&quot;https://en.wikipedia.org/wiki/Metastability_in_electronics&quot;&gt;metastability&lt;/a&gt;
issues on the data register.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_b_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b_req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b_pipe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b_req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b_pipe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;($&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;stable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;For the most part, this proof is boiler plate.  It’s boiler plate
&lt;a href=&quot;/blog/2017/10/20/cdc.html&quot;&gt;clock domain crossing&lt;/a&gt;
properties, boiler plate properties to describe something
synchronous with a clock, and boilerplate &lt;a href=&quot;/dsp/2020/04/20/axil2axis.html&quot;&gt;AXI stream
properties&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;What isn’t here is a property to verify the correctness of the output data,
nor any properties to prove that the number of outputs equals the number of
inputs.  For those, I’ve only desk checked the design so far.  At this point,
that’s been good enough, although I may need to come back and do a better
job of that as time goes on.&lt;/p&gt;

&lt;h2 id=&quot;cover-checks&quot;&gt;Cover Checks&lt;/h2&gt;

&lt;p&gt;That leaves us with only one question, how well does this design work?&lt;/p&gt;

&lt;p&gt;To answer that question, I thought I might count the number of times a
valid is available and ready on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;b&lt;/code&gt; outgoing interface.  Given that a
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cover()&lt;/code&gt; check will return the &lt;em&gt;first&lt;/em&gt; possible time an item becomes valid,
this should also be a good check of the speed of the interface as a whole.&lt;/p&gt;

&lt;p&gt;Just for fun, I also added in the requirement that the outgoing data change
with the count of the number of outgoing items.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;cvr_stbcount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_b_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;negedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_b_reset_n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_b_reset_n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;cvr_stbcount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_b_valid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_b_ready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_b_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cvr_stbcount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;cvr_stbcount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cvr_stbcount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;That left me with the ability to check throughput.  However, after my first
cover check, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cover(cvr_stbcount[3])&lt;/code&gt; failed, I had to back up and start over.
I replaced that cover check therefore with several intermediate steps.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;cover&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cvr_stbcount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;cover&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cvr_stbcount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;cover&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cvr_stbcount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;cover&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cvr_stbcount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;cover&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cvr_stbcount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This allowed me to determine how many formal timesteps would be needed for
each step.  It also allowed me to answer the question of how much patience I
had.  In this case, five results required about nineteen seconds and six
&lt;a href=&quot;/blog/2017/10/20/cdc.html&quot;&gt;clock domain crossings&lt;/a&gt;
weren’t really necessary.  (Eight might’ve taken into the next century.)&lt;/p&gt;

&lt;p&gt;Here’s how the transfer looks.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 8. Cover trace illustrating performance&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;/img/tfrvalue/cover-trace.png&quot;&gt;&lt;img src=&quot;/img/tfrvalue/cover-trace.png&quot; alt=&quot;&quot; width=&quot;780&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;This is twice as fast as our previous method of moving data across clock
&lt;a href=&quot;/blog/2017/10/20/cdc.html&quot;&gt;clock domains&lt;/a&gt;.
Just for reference, I’ve posted &lt;a href=&quot;https://github.com/ZipCPU/website/blob/master/examples/tfrslow.v&quot;&gt;the older, slower, 4-phase
implementation&lt;/a&gt;
as well, and I’ve shown a before and after comparison below.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 9. Comparing the four phase and two phase CDC crossing approaches&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;/img/tfrvalue/comparison-trace-annotated.png&quot;&gt;&lt;img src=&quot;/img/tfrvalue/comparison-trace-annotated.png&quot; alt=&quot;&quot; width=&quot;780&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Given that there’s little to no logic difference between the two phase and four
phase
&lt;a href=&quot;/blog/2017/10/20/cdc.html&quot;&gt;CDC&lt;/a&gt; word transfers algorithms,
I think I’m going to recommend the two phase approach from now on.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;The two-phase handshake method of moving values from &lt;a href=&quot;/blog/2017/10/20/cdc.html&quot;&gt;one clock domain to
another&lt;/a&gt; isn’t about
speed.  It’s not.  If you want speed and throughput, use an &lt;a href=&quot;/blog/2018/07/06/afifo.html&quot;&gt;asynchronous
FIFO&lt;/a&gt;.
This method is instead about moving data coherently from one clock domain to
another for a &lt;em&gt;minimum amount of logic&lt;/em&gt;.  It works independent of the speed
of the two clocks: A can be faster, or B, it doesn’t matter, this method
will work both ways.  Indeed, we just proved that it would work for arbitrary
clocks A and B.&lt;/p&gt;

&lt;p&gt;The fascinating part of this upgrade over the four-phase handshake is that
it is a &lt;em&gt;no cost upgrade&lt;/em&gt; to our data transfer algorithm.  Whereas our prior
design used four &lt;a href=&quot;/blog/2017/06/12/minimizing-luts.html&quot;&gt;Xilinx
LUTs&lt;/a&gt;, this new and
updated design also uses four LUTs while achieving twice the speed.&lt;/p&gt;

&lt;p&gt;To this, I thank my reader for bringing this design approach to my attention.&lt;/p&gt;
&lt;hr /&gt;&lt;p&gt;&lt;em&gt;For God hath not given us the spirit of fear, but of power, and of love, and of a sound mind. (2Tim 1:7)&lt;/em&gt;</description>
        <pubDate>Sat, 03 Oct 2020 00:00:00 -0400</pubDate>
        <link>https://zipcpu.com/blog/2020/10/03/tfrvalue.html</link>
        <guid isPermaLink="true">https://zipcpu.com/blog/2020/10/03/tfrvalue.html</guid>
        
        
        <category>blog</category>
        
      </item>
    
  </channel>
</rss>
