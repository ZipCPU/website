<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>The ZipCPU by Gisselquist Technology</title>
    <description>The ZipCPU blog, featuring how to discussions of FPGA and soft-core CPU design.  This site will be focused on Verilog solutions, using exclusively OpenSource IP products for FPGA design.  Particular focus areas include topics often left out of more mainstream FPGA design courses such as how to debug an FPGA design.
</description>
    <link>https://zipcpu.com/</link>
    <atom:link href="https://zipcpu.com/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Mon, 28 Jun 2021 11:28:28 -0400</pubDate>
    <lastBuildDate>Mon, 28 Jun 2021 11:28:28 -0400</lastBuildDate>
    <generator>Jekyll v4.2.0</generator>
    <image>
      <url>https://zipcpu.com/img/gt-rss.png</url>
      <title></title>
      <link></link>
    </image>
    
      <item>
        <title>Examples of AXI4 bus masters</title>
        <description>&lt;p&gt;A &lt;a href=&quot;https://forums.xilinx.com/t5/Processor-System-Design-and-AXI/AXI-master-write-to-BRAM/td-p/1257966&quot;&gt;Xilinx forum poster recently asked for some example designs they might
use when designing and creating an AXI
master&lt;/a&gt;.  Since Xilinx has asked me not to post too many
links in any forum response, I thought I might post some AXI master examples
here that others might find valuable.&lt;/p&gt;

&lt;p&gt;Here are some examples I have that you might find useful:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;“&lt;a href=&quot;/blog/2020/03/23/wbm2axisp.html&quot;&gt;Building a basic AXI master&lt;/a&gt;”
discusses how to build an AXI-lite master.  The article also presents some
decent performance metrics regarding Xilinx’s block RAM controller,
explaining why it’s faster to use AXI bursts with this controller than the
single-beat transactions used by AXI-lite.  You might find those comparisons
valuable.  Xilinx’s MIG design, however, isn’t so crippled–it’ll handle AXI
bursts as well as AXI (and lite) singletons without the throughput
performance loss of the block RAM controller, but … with a tremendous lag.
If you are looking for the design itself, you can find that
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/wbm2axisp&quot;&gt;here&lt;/a&gt;.
You can also find it in use within many of my designs, since I commonly
bridge from Wishbone to AXI in order to access any DDR3 SDRAM via Xilinx’s
MIG controller.  (Going from Wishbone to the MIG’s native interface would
be better, but I haven’t tried that yet.)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Incidentally, &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axilite2axi.v&quot;&gt;AXI-lite is really easy to convert to AXI
full&lt;/a&gt;.  So,
one might argue that an AXI-lite master &lt;em&gt;is&lt;/em&gt; an AXI-full master.  I’ve had
to adjust my terms for precision, and so I often use the term “bursting AXI
master” to separate the difference that actually impacts things.  I’ll let
you decide whether the “bursting AXI master” term is a better or worse term
for this purpose–although I’m not really sure I have a better one beyond
that one to offer.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;If you need to test an AXI master, then you might want a slave to test it
against.  The article, “&lt;a href=&quot;/blog/2019/05/29/demoaxi.html&quot;&gt;Building the perfect AXI4
slave&lt;/a&gt;”, discusses how a
slave can be built that can achieve 100% throughput in either AXI4(full) or
AXI4-lite.  Practically, however, &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/demofull.v&quot;&gt;the
design&lt;/a&gt; suffers
from one clock cycle lost per burst since it insists that the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AW*&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;W*&lt;/code&gt;
channels are offset by a beat, but otherwise it would’ve had 100% throughput.
Further, since writing the article, I’ve adjusted the design so that  1) the
outputs–the inputs to the externally attached RAM–are registered, and
2) it support AXI exclusive access.  Registering the outputs introduces a
cycle of delay, but it doesn’t impact the design’s throughput.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;“&lt;a href=&quot;/blog/2020/06/16/axiaddr-limits.html&quot;&gt;The hard part of building a bursting AXI
master&lt;/a&gt;” discusses
the designs of several bursting AXI masters, and why they can be difficult
to build.  These include:&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;Open source AXI DMA’s: &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axidma.v&quot;&gt;Memory to memory&lt;/a&gt;, &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axis2mm.v&quot;&gt;Stream to memory&lt;/a&gt;, &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/aximm2s.v&quot;&gt;Memory to stream&lt;/a&gt;.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Video DMAs: &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axivdisplay.v&quot;&gt;Memory to video, as a framebuffer might use&lt;/a&gt;,
and &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axivcamera.v&quot;&gt;Video to memory, such as a video
recorder&lt;/a&gt;
might require.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axivfifo.v&quot;&gt;A “virtual” FIFO, which uses a RAM backing with an AXI4 interface&lt;/a&gt;.
This can be useful when you need a &lt;em&gt;REALLY LARGE&lt;/em&gt; FIFO, but not necessarily
a large throughput.  Sure, the design can theoretically achieve 100%
throughput, but I doubt any slave-interconnect-RAM combination would be
able to match it.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;I’ve also got an &lt;a href=&quot;https://github.com/ZipCPU/wbscope/blob/master/rtl/memscope.v&quot;&gt;AXI backed “scope”&lt;/a&gt;.
This follows &lt;a href=&quot;/blog/2017/06/08/simple-scope.html&quot;&gt;my basic Wishbone scope implementation&lt;/a&gt;,
only it uses an AXI-lite register for read access and an AXI4 back end to
record any data written to it at high speeds.  (i.e. DMA speeds.)  This
would be great for digital signal processing work, for whenever I need to
record something at high speed and then break or stop when your run into
 some feature of interest that you want to go back to and inspect.&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;More recently, I’ve been building AXI master implementations of the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;’s memory controllers.  (You’ll
currently need to find these in a &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/tree/zipcore&quot;&gt;special branch of the ZipCPU’s
repository&lt;/a&gt;,
as they represent a major upgrade in many ways.)  These AXI memory
controllers are often paired with an AXI-lite master equivalents.  For
example:&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;There’s a &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/zipcore/rtl/core/axiops.v&quot;&gt;basic AXI data controller&lt;/a&gt;,
and &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/zipcore/rtl/core/axilops.v&quot;&gt;it’s AXI-lite equivalent&lt;/a&gt;.
The &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/zipcore/rtl/core/axiops.v&quot;&gt;AXI version is unique&lt;/a&gt;
in that it’s my first foray into supporting exclusive access operations
from an AXI master standpoint–something AXI-lite doesn’t support.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;There’s also a &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/zipcore/rtl/core/axipipe.v&quot;&gt;basic pipelined AXI data controller&lt;/a&gt;
and it’s &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/zipcore/rtl/core/axilpipe.v&quot;&gt;AXI-lite equivalent&lt;/a&gt;.
Again, &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/zipcore/rtl/core/axipipe.v&quot;&gt;this AXI master supports exclusive access&lt;/a&gt;–something not supported by its
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/zipcore/rtl/core/axilpipe.v&quot;&gt;AXI-lite equivalent&lt;/a&gt;.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;The &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/zipcore/rtl/core/axilfetch.v&quot;&gt;basic instruction fetch&lt;/a&gt;
(i.e. w/o cache) doesn’t benefit from AXI full, so the &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/zipcore/rtl/core/axilfetch.v&quot;&gt;AXI-lite
version&lt;/a&gt;
is all I have for it.  Still, it has support for an arbitrary number of
outstanding requests, which can be tuned at design integration time to
match the expected latency within your system.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;The &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; now also features two
AXI cache examples: A
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/zipcore/rtl/core/axidcache.v&quot;&gt;data cache&lt;/a&gt;
and an &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/zipcore/rtl/core/axiicache.v&quot;&gt;instruction cache&lt;/a&gt;.
Both are single-way, and the data cache is a write-through cache design.
Both support AXI4 burst transactions.  Unlike my other AXI data interfaces,
the &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/zipcore/rtl/core/axidcache.v&quot;&gt;data cache&lt;/a&gt;
can’t handle unaligned accesses, nor can it handle exclusive access (yet).
&lt;a href=&quot;https://www.blueletterbible.org/kjv/jas/4/15&quot;&gt;If the Lord wills&lt;/a&gt;,
these may be features to be added later–although I’m more likely to add
uncached-pipeline reads before any other features.&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Not all masters are information sources.  Often a bridge makes a good example
design.  For example, my &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axi2axilite.v&quot;&gt;AXI-full to AXI-lite
bridge&lt;/a&gt; can
achieve 100% throughput at the cost of two additional cycles of latency.  I
also (now) have a &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axi2axilsub.v&quot;&gt;similar bridge that can bridge to a smaller AXI(lite)
interface&lt;/a&gt;,
although this second bridge has yet to be formally verified.  True, these
are only &lt;em&gt;AXI-lite&lt;/em&gt; masters, and not really &lt;em&gt;AXI-full&lt;/em&gt; masters.  I have
started building an AXI4 full data upsizer, but that design remains confused
enough that it won’t get past a couple cycles of formal verification.
(When I couldn’t wait any longer, &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axilupsz.v&quot;&gt;I built an AXI-lite data
upsizer&lt;/a&gt;–which
is functionally equivalent, but won’t preserve the burst capability of AXI4.
The original, still in progress AXI4 upsizer, would’ve preserved the burst
capability.)&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you’d like example designs that use these controllers, then feel free to
consider either my &lt;a href=&quot;https://github.com/ZipCPU/vgasim/tree/dev&quot;&gt;VGASIM&lt;/a&gt; or &lt;a href=&quot;https://github.com/ZipCPU/axidmacheck/tree/zipcpu&quot;&gt;AXI
DMA check&lt;/a&gt; repositories.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/ZipCPU/vgasim/tree/dev&quot;&gt;VGASIM&lt;/a&gt;  includes demonstrations
of the video DMA’s either&lt;a href=&quot;https://github.com/ZipCPU/vgasim/blob/dev/bench/rtl/axidemo.v&quot;&gt;generating video either from a static
framebuffer&lt;/a&gt;
or &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/dev/bench/rtl/axirepeater.v&quot;&gt;after first writing a section of the screen to a framebuffer
(continuously) and then reading that back to the
screen&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The &lt;a href=&quot;https://github.com/ZipCPU/axidmacheck/tree/zipcpu&quot;&gt;AXI DMA check&lt;/a&gt;
repository also includes a test bed for the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;’s AXI interfaces–something
I’ve been experimenting with recently.  (My goal has been to &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axilperf.v&quot;&gt;measure AXI
performance&lt;/a&gt;,
but I have yet to be pleased with the ability of my chosen measurements to
capture what’s actually going on so far.)&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Beware, both of these repositories are simulation only designs.  (In the Air
Force, we might call them “&lt;a href=&quot;https://en.wiktionary.org/wiki/hangar_queen&quot;&gt;hangar
queens&lt;/a&gt;”.)  They won’t
necessarily pass timing or resource requirements to fit on any practical
FPGA chip, but they are sufficient to verify that the core components within
them work as designed.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 1. AXI is not a simple protocol&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/tweets/axi-not-simple.svg&quot; alt=&quot;&quot; width=&quot;420&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Finally, let me warn anyone attempting to build their own AXI master: &lt;em&gt;AXI4
can be hard to get right&lt;/em&gt;.  I’m not sure I can emphasize that enough.  While
many of these designs have &lt;a href=&quot;/formal/2020/06/12/four-keys.html&quot;&gt;“just worked” the first time
out&lt;/a&gt; (after being
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formally verified&lt;/a&gt;, of
course!) – I can’t say the same for the designs of others.  Worse, one AXI
bug can easily bring the whole system down while offering you no insight into
where the bug took place.  If that weren’t bad enough, &lt;a href=&quot;/blog/2021/03/20/xilinx-forums.html&quot;&gt;I’m tracking many bugs
that have lived in the Xilinx repositories for years that just don’t get
triggered&lt;/a&gt;.  They
weren’t triggered by simulation, they weren’t triggered during sign off, but
can often be triggered by some inconsequential change in the design elsewhere
that then leads you looking in all the wrong places for the bug.  Hence, when
and if they do get triggered they often don’t lead to bug reports–since it
can be hard to pinpoint the fault at that late stage in the game.  I’ll also
point out that it’s not just Xilinx–even ASIC designs struggle with getting
their AXI interfaces right.  Indeed, &lt;a href=&quot;/blog/2020/06/16/axiaddr-limits.html&quot;&gt;getting the AXI master right can truly be
a challenge&lt;/a&gt;.
Simulation is a good start, but nothing beats a good formal verification check.&lt;/p&gt;

&lt;p&gt;Still, perhaps one or more of these designs will help you get up and running
with your own design needs.&lt;/p&gt;
&lt;hr /&gt;&lt;p&gt;&lt;em&gt;Be ye followers of me, even as I also am of Christ.  (1 Cor 11:1)&lt;/em&gt;</description>
        <pubDate>Mon, 28 Jun 2021 00:00:00 -0400</pubDate>
        <link>https://zipcpu.com/blog/2021/06/28/master-examples.html</link>
        <guid isPermaLink="true">https://zipcpu.com/blog/2021/06/28/master-examples.html</guid>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>Quiz #15: Pass-through memory</title>
        <description>&lt;!-- answer: &quot;2020/10/10/fv-answer15.html&quot; --&gt;

&lt;p&gt;Ever wondered what would happen if you wrote to and read from the same address
on the same clock cycle?  The assertion above captures that thought.  What do
you think, will the assertion pass?&lt;/p&gt;
</description>
        <pubDate>Sat, 12 Jun 2021 00:00:00 -0400</pubDate>
        <link>https://zipcpu.com/quiz/2021/06/12/quiz15.html</link>
        <guid isPermaLink="true">https://zipcpu.com/quiz/2021/06/12/quiz15.html</guid>
        
        
        <category>quiz</category>
        
      </item>
    
      <item>
        <title>Fixing Xilinx's Broken AXI-lite Design in VHDL</title>
        <description>&lt;p&gt;Someone recently posted on Xilinx’s forums that they were having issues with
their design.  Apparently, the design was hanging on startup.  When I asked if
they had an AXI-lite slave within it, they shared their design with me.  It
looked an awful lot like &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/xlnxdemo_2020_2.vhd&quot;&gt;Xilinx’s AXI-lite template
design&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It’s amazing how often this design comes up.&lt;/p&gt;

&lt;p&gt;This time, however, the design was written in VHDL.  Since I don’t normally
write about or discuss VHDL on the blog, I thought this might be an opportunity
to examine a VHDL design.  No, we won’t be examining VHDL today, just a VHDL
design.  Perhaps this will help someone new to AXI who isn’t (yet) familiar
with Verilog.&lt;/p&gt;

&lt;p&gt;Either way, let’s have some fun and examine &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/xlnxdemo_2020_2.vhd&quot;&gt;Xilinx’s demonstration AXI-lite
slave demonstration design, but this time in
VHDL&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I’ll be using the commercial Symbiotic EDA Suite for this evaluation.  The
suite is now sold under the name “&lt;a href=&quot;https://www.yosyshq.com/products-and-services&quot;&gt;Tabby CAD
Suite&lt;/a&gt;” by a company named
&lt;a href=&quot;https://www.yosyshq.com/&quot;&gt;YosysHQ&lt;/a&gt;,
but I’ll leave those details for their marketing folks.  Feel free to &lt;a href=&quot;https://www.yosyshq.com/contact&quot;&gt;contact
them&lt;/a&gt; and tell them I sent you.&lt;/p&gt;

&lt;!-- Matthew 8:4 --&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 1. VHDL Verification Setup&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/vhdlaxil/vhdl-setup.svg&quot; alt=&quot;&quot; width=&quot;320&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;The setup for this verification proof is nearly identical to any Verilog
setup, save that VHDL doesn’t really have a (supported) language for expressing
assertions.  (What about
&lt;a href=&quot;https://en.wikipedia.org/wiki/Property_Specification_Language&quot;&gt;PSL&lt;/a&gt;?  See the
word “supported”.)  For this reason, I’ll create a SystemVerilog wrapper around
the VHDL design, as shown in Fig. 1 on the right.  Within that wrapper, I’ll
instantiate both the AXI-lite slave module under test, as well as the &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/faxil_slave.v&quot;&gt;formal
AXI-lite slave property set&lt;/a&gt; that
&lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;we’ve discussed before&lt;/a&gt;.
It’s all quite straightforward and (mostly) boiler plate.  In this case I
needed only five properties at the top level in order to get the design to
pass &lt;a href=&quot;/blog/2018/03/10/induction-exercise.html&quot;&gt;induction&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The first thing to note about Xilinx’s VHDL design is that, yes, it’s
still broken.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 2. Xilinx's AXI-lite slave might accept 7 (or more) requests, while only returning a single response&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;/img/vhdlaxil/read-failure.png&quot;&gt;&lt;img src=&quot;/img/vhdlaxil/read-failure.png&quot; alt=&quot;&quot; width=&quot;780&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Indeed, Xilinx’s
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/xlnxdemo_2020_2.vhd&quot;&gt;AXI-lite VHDL design&lt;/a&gt; uses the same logic as their &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/xlnxdemo_2018_3.v&quot;&gt;AXI-lite
Verilog design&lt;/a&gt; does.  Register for register, it’s hard to see a difference
between the two designs.&lt;/p&gt;

&lt;h2 id=&quot;how-to-recognize-your-design-is-broken&quot;&gt;How to recognize your design is broken&lt;/h2&gt;

&lt;p&gt;Let’s suppose, however, that you didn’t have any formal tools.  How could you
tell this design is broken?&lt;/p&gt;

&lt;p&gt;After formally verifying many AXI-lite designs, it’s gotten really easy for me
for me to spot the same bugs that keep taking place over and over.  Indeed,
there are just a couple things I look for and then I can spot most of these
bugs (now) by eye.  Here are two quick checks.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AxVALID&lt;/code&gt; should (somehow) depend upon &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(not xVALID) or xREADY&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This is really the big criteria, and the one &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/xlnxdemo_2020_2.vhd&quot;&gt;Xilinx’s
design&lt;/a&gt;
fails.  Because AXI allows
&lt;a href=&quot;https://en.wikipedia.org/wiki/Back_pressure&quot;&gt;backpressure&lt;/a&gt;, at some
point when the return channel is stalled, such as when
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RVALID and (not RREADY)&lt;/code&gt;,
the source channel will have to stall as well.  This applies to both read
and write channels.&lt;/p&gt;

&lt;p&gt;So, let’s look at &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/xlnxdemo_2020_2.vhd&quot;&gt;Xilinx’s AXI-lite slave
design&lt;/a&gt;
and see if &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ARREADY&lt;/code&gt; somehow depends upon either &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;not RVALID&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RREADY&lt;/code&gt;.
The answer is: it doesn’t.  Here’s what their &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;axi_arready&lt;/code&gt; logic looks like:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-vhdl&quot; data-lang=&quot;vhdl&quot;&gt;	&lt;span class=&quot;c1&quot;&gt;-- Implement axi_arready generation&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;-- axi_arready is asserted for one S_AXI_ACLK clock cycle when&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;-- S_AXI_ARVALID is asserted. axi_awready is &lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;-- de-asserted when reset (active low) is asserted. &lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;-- The read address is also latched when S_AXI_ARVALID is &lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;-- asserted. axi_araddr is reset to zero on reset assertion.&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;process&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
	  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rising_edge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; 
	    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ARESETN&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'0'&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
	      &lt;span class=&quot;n&quot;&gt;axi_arready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'0'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	      &lt;span class=&quot;n&quot;&gt;axi_araddr&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;others&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'1'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
	      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axi_arready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'0'&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ARVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'1'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
	        &lt;span class=&quot;c1&quot;&gt;-- indicates that the slave has acceped the valid read address&lt;/span&gt;
	        &lt;span class=&quot;n&quot;&gt;axi_arready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'1'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	        &lt;span class=&quot;c1&quot;&gt;-- Read Address latching &lt;/span&gt;
	        &lt;span class=&quot;n&quot;&gt;axi_araddr&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ARADDR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;           
	      &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
	        &lt;span class=&quot;n&quot;&gt;axi_arready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'0'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                   
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Do you see any references there to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;S_AXI_RVALID&lt;/code&gt;?  How about to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;S_AXI_RREADY&lt;/code&gt;?
How about any other signals related (somehow) to one or both of those two
signals?&lt;/p&gt;

&lt;p&gt;No, you didn’t.  That’s because it’s not there.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/xlnxdemo_2020_2.vhd&quot;&gt;This design&lt;/a&gt;
is broken.  We’ll come back to this in a moment to fix it.&lt;/p&gt;

&lt;ol start=&quot;2&quot;&gt;
  &lt;li&gt;Transitions should only be made on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;xVALID and xREADY&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;When using AXI, nothing happens unless both the valid and ready signals are
asserted on the given channel at the same time.  While the formal tool
doesn’t detect any more bugs in &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/xlnxdemo_2020_2.vhd&quot;&gt;this
slave&lt;/a&gt;,
let’s still take a moment to look at some of the logic within it.&lt;/p&gt;

&lt;p&gt;For example, what about the slave’s internal write enable signal?&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-vhdl&quot; data-lang=&quot;vhdl&quot;&gt;&lt;span class=&quot;n&quot;&gt;slv_reg_wren&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axi_wready&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_WVALID&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axi_awready&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_AWVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Have you ever wondered what would happen if this were only partially true?
I mean, what would happen if &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;S_AXI_AWVALID &amp;amp;&amp;amp; axi_awready &amp;amp;&amp;amp; !S_AXI_WVALID&lt;/code&gt;?
What would happen is that the write address channel would accept a transaction
and the design would go downhill quickly.  In one design I remember, one
with a lot of activity, every following write transaction was issued to the
wrong address–much like you might expect.  Of course, the other possibility
is that the design might just hang.&lt;/p&gt;

&lt;p&gt;Indeed, this is why, in my own
&lt;a href=&quot;/blog/2020/03/08/easyaxil.html&quot;&gt;EasyAxil design&lt;/a&gt;,
I created a combinatorial signal, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;axil_write_ready&lt;/code&gt;, and fed this to both
the AW and W
&lt;a href=&quot;/blog/2019/05/22/skidbuffer.html&quot;&gt;skidbuffer&lt;/a&gt;s:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;axil_write_ready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;awskd_valid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wskd_valid&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_BVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_BREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;When I built the
&lt;a href=&quot;/blog/2020/03/08/easyaxil.html&quot;&gt;EasyAxil design&lt;/a&gt;
without &lt;a href=&quot;/blog/2019/05/22/skidbuffer.html&quot;&gt;skidbuffer&lt;/a&gt;s,
I did roughly the same thing–only I registered the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;axil_write_ready&lt;/code&gt;
signal–something we’ll do here in just a moment.&lt;/p&gt;

&lt;p&gt;On the other hand, if you are familiar with
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/xlnxdemo_2020_2.vhd&quot;&gt;Xilinx’s design&lt;/a&gt;,
you might quickly answer that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;axi_awready&lt;/code&gt; is the same as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;axi_wready&lt;/code&gt;,
and neither would be true unless &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;S_AXI_AWVALID and S_AXI_WVALID&lt;/code&gt; were both
already true.  Okay, so let’s go back and ask, then, why are &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;axi_awready&lt;/code&gt;
and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;axi_wready&lt;/code&gt; separate signals if they’re equivalent?&lt;/p&gt;

&lt;p&gt;Let me go one farther: this design won’t even set &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;axi_awready&lt;/code&gt; unless
both &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;S_AXI_AWVALID&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;S_AXI_WVALID&lt;/code&gt; are both true.  So … why do we need
to check for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;S_AXI_AWVALID&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;S_AXI_WVALID&lt;/code&gt; a second time?&lt;/p&gt;

&lt;p&gt;Let’s come back to this when we clean up the write logic further down.&lt;/p&gt;

&lt;p&gt;The problem is worse on the read side.  Consider the read enable signal.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-vhdl&quot; data-lang=&quot;vhdl&quot;&gt;&lt;span class=&quot;n&quot;&gt;slv_reg_rden&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axi_arready&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ARVALID&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axi_rvalid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now, ask yourself, what would happen if &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;axi_arready and S_AXI_ARVALID&lt;/code&gt; but
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;axi_rvalid&lt;/code&gt; were also true?  In that case, the master would believe a request
had been made, but this &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;slv_reg_rden&lt;/code&gt; signal would never go high.  This would
become a nasty bug.&lt;/p&gt;

&lt;p&gt;Here you can see the same condition repeated again when setting &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;axi_arready&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-vhdl&quot; data-lang=&quot;vhdl&quot;&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axi_arready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'1'&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ARVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'1'&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axi_rvalid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'0'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This time, there’s a second problem: the author intended to use the same
logic as the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;slv_reg_rden&lt;/code&gt; signal, but wrote out the logic instead.  That
means that if you ever have to fix this logic, you’ll have to do it multiple
times.  In this case, it would be better to replace this logic with
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;slv_reg_rden&lt;/code&gt; and then only fix it once.&lt;/p&gt;

&lt;p&gt;Let’s therefore take this as an opportunity to correct &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/xlnxdemo_2020_2.vhd&quot;&gt;Xilinx’s demonstration
design&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;fixing-the-read-side&quot;&gt;Fixing the read side&lt;/h2&gt;

&lt;p&gt;At this point, you should know the problem: in the presence of any
&lt;a href=&quot;https://en.wikipedia.org/wiki/Back_pressure&quot;&gt;backpressure&lt;/a&gt;,
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/xlnxdemo_2020_2.vhd&quot;&gt;Xilinx’s design&lt;/a&gt;
will drop requests.  This will cause the bus to freeze, which will then
cause your design to hang.  The CPU will stop.  To make matters worse, the
debugger will also lock up.  You will be unable to get any
diagnostic information using either the system bus or the CPU.&lt;/p&gt;

&lt;p&gt;This is nothing more than a recipe for &lt;a href=&quot;/blog/2017/05/19/fpga-hell.html&quot;&gt;FPGA
Hell&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I’ve already pointed out the root cause of the problem above: &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/xlnxdemo_2020_2.vhd&quot;&gt;the
design&lt;/a&gt;
never checks for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;S_AXI_RVALID = '1' and S_AXI_RREADY = '0'&lt;/code&gt; when adjusting
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;S_AXI_ARREADY&lt;/code&gt;.  As a result, it accepts requests into the design even when
it will be unable to return a response.&lt;/p&gt;

&lt;p&gt;Let’s start by fixing that.&lt;/p&gt;

&lt;p&gt;As it turns out, the fix is simple.  All we need to do is to adjust a &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/93565afffbe00da17e5f126137daaeb482bdd520/bench/formal/xlnxdemo_2020_2.vhd#L328&quot;&gt;single
line&lt;/a&gt;.
Instead of,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-vhdl&quot; data-lang=&quot;vhdl&quot;&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axi_arready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'0'&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ARVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'1'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;-- indicates that the slave has acceped the valid read address&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;axi_arready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'1'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;we’ll replace it with,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-vhdl&quot; data-lang=&quot;vhdl&quot;&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axi_arready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'0'&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ARVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'1'&lt;/span&gt;
		&lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_RVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'0'&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_RREADY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'1'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;-- indicates that the slave has acceped the valid read address&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;axi_arready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'1'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Voila!  This design will now pass a formal verification check.&lt;/p&gt;

&lt;p&gt;No, it’s not a great design.  At best, this design will only ever get 50%
throughput.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 3. Without a skidbuffer, this design can only get 50% throughput&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;/img/vhdlaxil/read-throughput.png&quot;&gt;&lt;img src=&quot;/img/vhdlaxil/read-throughput.png&quot; alt=&quot;&quot; width=&quot;780&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;While not great, at least it will now pass a formal property check.  That
also means that it won’t hang your design anymore, and you’ll be back to being
able to use the CPU debugger to debug your software.&lt;/p&gt;

&lt;p&gt;If we wanted to go further, we could do one better by dropping the read
latency by one clock cycle.  We can do this by holding &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;axi_arready&lt;/code&gt;
high until a request becomes available.  One small change to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;axi_arready&lt;/code&gt;
and we’re there.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-vhdl&quot; data-lang=&quot;vhdl&quot;&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axi_arready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'0'&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ARVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'0'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_RVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'0'&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_RREADY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'1'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;-- indicates that the slave has acceped the valid read address&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;axi_arready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'1'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;axi_arready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'0'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;While we are at it, we should also adjust the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;slv_reg_rden&lt;/code&gt; logic.  The
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/93565afffbe00da17e5f126137daaeb482bdd520/bench/formal/xlnxdemo_2020_2.vhd#L370&quot;&gt;original logic&lt;/a&gt;.
just didn’t make any sense:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-vhdl&quot; data-lang=&quot;vhdl&quot;&gt;&lt;span class=&quot;n&quot;&gt;slv_reg_rden&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axi_arready&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ARVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axi_rvalid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;As I mentioned above, what happens when
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;axi_arready and S_AXI_ARVALID and axi_rvalid&lt;/code&gt;?  With the new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;axi_arready&lt;/code&gt;
logic above, however, we’ve guaranteed that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;axi_arready&lt;/code&gt; will only be set if
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;axi_rvalid&lt;/code&gt; is also low.  Therefore, we can replace this logic with,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-vhdl&quot; data-lang=&quot;vhdl&quot;&gt;&lt;span class=&quot;n&quot;&gt;slv_reg_rden&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axi_arready&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ARVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;For completeness, we should also remove any further references to
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;S_AXI_ARVALID and axi_arready&lt;/code&gt; and simply replace them with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;slv_reg_rden&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You can see the performance of this updated design in Fig. 4 below.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 4. The AXI spec recommends leaving xREADY high if possible&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;/img/vhdlaxil/read-latency.png&quot;&gt;&lt;img src=&quot;/img/vhdlaxil/read-latency.png&quot; alt=&quot;&quot; width=&quot;780&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;The astute reader might also notice that this new and updated &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;axi_arready&lt;/code&gt;
signal looks an awful lot like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;not axi_rvalid&lt;/code&gt;.  A quick formal check confirms
that, with the exception of the reset value for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;axi_arready&lt;/code&gt;, this is indeed
the case.  I’ll leave that change to the student.&lt;/p&gt;

&lt;p&gt;Rather than simplifying the read logic any further, however, let’s instead move
on to the write logic.&lt;/p&gt;

&lt;h2 id=&quot;cleaning-up-the-write-logic&quot;&gt;Cleaning up the write logic&lt;/h2&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 5. What do to with a working design?&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/tweets/if-it-works.svg&quot; alt=&quot;&quot; width=&quot;320&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;One of the challenges I have when looking at a design like this is not
making edits throughout the design.  Sure, the one change above will “fix”
the protocol violations, but we could do much better with the write path as
well.&lt;/p&gt;

&lt;p&gt;The design works, though, why would we want to change it?  Other than for
the simple fact that I’m an engineer and that’s what I do, I can think of
several reasons why we might want to clean this up a little bit.&lt;/p&gt;

&lt;p&gt;First, the write logic as provided only gets 33% throughput.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 6. Write throughput is limited at 33%&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;/img/vhdlaxil/write-throughput-before.png&quot;&gt;&lt;img src=&quot;/img/vhdlaxil/write-throughput-before.png&quot; alt=&quot;&quot; width=&quot;780&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;That’s pitiful.&lt;/p&gt;

&lt;p&gt;Back when &lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;I first ran the formal
tools&lt;/a&gt; on &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/xlnxdemo_2020_2.vhd&quot;&gt;Xilinx’s demo
design&lt;/a&gt;,
the write channel got 50% throughput–even though it was broken.  Since then,
Xilinx has fixed the protocol violations in the write channel.  The only
problem is, when fixing it, they dropped that 50% throughput number down to 33%.&lt;/p&gt;

&lt;p&gt;In the process, they also added an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;aw_en&lt;/code&gt; register.  Indeed, the existence of
this register will tell you if the write channel is from their “fixed” version
or not.  Looking at Fig. 6 above, you can see that the design uses a minimum
of one clock cycle to acknowledge a write request, one clock cycle to return a
response, and then a third clock cycle to set &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;aw_en&lt;/code&gt;.  If we, instead, only
acknowledged a response when &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;S_AXI_BVALID = '0'&lt;/code&gt;, then we wouldn’t need
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;aw_en&lt;/code&gt;–we could use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;axi_awready&lt;/code&gt;–but I’ll get to that in a moment.&lt;/p&gt;

&lt;p&gt;Third, did you notice that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;axi_awready&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;axi_wready&lt;/code&gt; used the same
identical logic?  Sure, it works, but why would you have two registers to do
the same thing?  Why not just use one?  Indeed, if we just set &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;S_AXI_WREADY&lt;/code&gt;
to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;axi_awready&lt;/code&gt; we’d get the same performance for less logic.&lt;/p&gt;

&lt;p&gt;Finally, did you notice that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;S_AXI_BRESP&lt;/code&gt; is the constant &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;00&quot;&lt;/code&gt;?  Constant
expressions should be combinatorial expressions–not registered ones.&lt;/p&gt;

&lt;p&gt;Let’s make a couple of quick changes to the write logic therefore.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;As a first step, let’s remove the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;axi_wready&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;axi_bresp&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;aw_en&lt;/code&gt;
signal declarations.  You can also remove &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;axi_rresp&lt;/code&gt; while you are at it,
since that signal has the same problem &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;axi_bresp&lt;/code&gt; has.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;We can then set &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;S_AXI_WREADY&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;axi_awready&lt;/code&gt;, and both &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;S_AXI_BRESP&lt;/code&gt;
and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;S_AXI_RRESP&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;00&quot;&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Now that we’ve dropped the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;axi_wready&lt;/code&gt; definition, we’ll also need to
remove the &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/93565afffbe00da17e5f126137daaeb482bdd520/bench/formal/xlnxdemo_2020_2.vhd#L202-L224&quot;&gt;process defining it&lt;/a&gt;.
Remember, that process was producing a signal that was identical to
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;axi_awready&lt;/code&gt; anyway–so there’s no reason to use both.&lt;/p&gt;

    &lt;p&gt;That’ll get us started.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;We’ll then want to update the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;axi_awready&lt;/code&gt; logic to remove the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;aw_en&lt;/code&gt;
logic, while still checking for any backpressure.&lt;/p&gt;

    &lt;p&gt;That means we can change the first &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;if&lt;/code&gt; condition in the logic block below
to one that doesn’t use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;aw_en&lt;/code&gt;, but also won’t be broken.  Incidentally,
we’ll also want to clear &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;axi_awready&lt;/code&gt; in all other cases.  That means &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/93565afffbe00da17e5f126137daaeb482bdd520/bench/formal/xlnxdemo_2020_2.vhd#L167-L178&quot;&gt;this
original logic&lt;/a&gt;,&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-vhdl&quot; data-lang=&quot;vhdl&quot;&gt;      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axi_awready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'0'&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_AWVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'1'&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_WVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'1'&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;aw_en&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'1'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;-- slave is ready to accept write address when&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;-- there is a valid write address and write data&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;-- on the write address and data bus. This design &lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;-- expects no outstanding transactions. &lt;/span&gt;
           &lt;span class=&quot;n&quot;&gt;axi_awready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'1'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
           &lt;span class=&quot;n&quot;&gt;aw_en&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'0'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;elsif&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_BREADY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'1'&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axi_bvalid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'1'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
           &lt;span class=&quot;n&quot;&gt;aw_en&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'1'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
           &lt;span class=&quot;n&quot;&gt;axi_awready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'0'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;axi_awready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'0'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;can be simplified into the following:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-vhdl&quot; data-lang=&quot;vhdl&quot;&gt;&lt;span class=&quot;k&quot;&gt;process&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rising_edge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ARESETN&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'0'&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;axi_awready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'0'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axi_awready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'0'&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_AWVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'1'&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_WVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'1'&lt;/span&gt;
		&lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_BVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'0'&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_BREADY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'1'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;-- slave is ready to accept write address when&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;-- there is a valid write address and write data&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;-- on the write address and data bus. This design &lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;-- expects no outstanding transactions. &lt;/span&gt;
           &lt;span class=&quot;n&quot;&gt;axi_awready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'1'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;axi_awready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'0'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;where now I’ve shown the whole process.&lt;/p&gt;

&lt;p&gt;Unfortunately, we can’t remove the clock cycle of latency from the write
channel like we did with the read logic, since we’d then need to register
either the write address or write data if one came early.  Sure, that’s a
valid design approach, but I’m trying to make as few changes to
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/xlnxdemo_2020_2.vhd&quot;&gt;Xilinx’s template&lt;/a&gt;
as possible.  If you’d rather go all out to build a better design from scratch,
then go for the &lt;a href=&quot;/blog/2020/03/08/easyaxil.html&quot;&gt;EasyAxil&lt;/a&gt;
design.  That one will get you much better performance.&lt;/p&gt;

&lt;ol start=&quot;5&quot;&gt;
  &lt;li&gt;Our next simplification will be to change the write enable signal,
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;slv_reg_wren&lt;/code&gt;,&lt;/li&gt;
&lt;/ol&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-vhdl&quot; data-lang=&quot;vhdl&quot;&gt;&lt;span class=&quot;n&quot;&gt;slv_reg_wren&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axi_wready&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_WVALID&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axi_awready&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_AWVALID&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;to the much simpler &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;axi_awready&lt;/code&gt; signal.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-vhdl&quot; data-lang=&quot;vhdl&quot;&gt;&lt;span class=&quot;n&quot;&gt;slv_reg_wren&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axi_awready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This, of course, doesn’t change how the design performs at all–it just
simplifies the logic required to get it to perform in the first place.&lt;/p&gt;

&lt;p&gt;But, shouldn’t we be checking here that
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AWVALID &amp;amp;&amp;amp; AWREADY &amp;amp;&amp;amp; WVALID &amp;amp;&amp;amp; WREADY&lt;/code&gt;?&lt;/p&gt;

&lt;p&gt;In this case, it’s not required–we already did that when setting &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;axi_awready&lt;/code&gt;.
If you aren’t convinced, then add an assertion to the wrapper:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARESETN&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axi_awready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_AWVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_AWREADY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_WVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_WREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You might notice that this &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;slv_reg_wren&lt;/code&gt; signal is different from its read
equivalent.  For the read equivalent, we only set &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;slv_reg_rden&lt;/code&gt; high if
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;S_AXI_ARVALID and axi_arready&lt;/code&gt; were both true.  Here, we are only checking
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;axi_awready&lt;/code&gt;.  The difference is because &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;axi_arready&lt;/code&gt; remains asserted
even when the design is idle, and so &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;slv_reg_rden&lt;/code&gt; requires that we check
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;S_AXI_ARVALID&lt;/code&gt; as well whereas &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;slv_reg_wren&lt;/code&gt; does not.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;As I mentioned above, the resulting design isn’t that great.  At best, it can
only ever achieve a 50% throughput.  AXI-lite is a much more capable bus than
that.  Indeed, we should be able to get 100% throughput from an AXI-lite slave,
&lt;a href=&quot;/blog/2020/03/08/easyaxil.html&quot;&gt;just like this design does&lt;/a&gt;.
Doing so, however, requires a
&lt;a href=&quot;/blog/2019/05/22/skidbuffer.html&quot;&gt;skidbuffer&lt;/a&gt;, and adding a
&lt;a href=&quot;/blog/2019/05/22/skidbuffer.html&quot;&gt;skidbuffer&lt;/a&gt; would remove
any remaining semblance of this being a Xilinx design in the first place.&lt;/p&gt;

&lt;p&gt;There’s also a much more fundamental lesson to be learned here: just because
a design comes from a vendor doesn’t mean it works.  I’ve come across a lot
of individuals on Xilinx’s forums who want to use Xilinx’s demonstration design
if for no other reason than because it came from Xilinx.&lt;/p&gt;

&lt;p&gt;Logically, this is called a “faulty appeal to authority.”  The logic goes,
1) Bill is an authority, 2) Bill said &lt;em&gt;X&lt;/em&gt;, therefore  3) &lt;em&gt;X&lt;/em&gt; must be true.  In
this case, 1) Xilinx is an FPGA vendor, 2) that makes them an authority,
3) Xilinx provided &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/xlnxdemo_2020_2.vhd&quot;&gt;this demonstration AXI-lite
design&lt;/a&gt;,
therefore 4) the demonstration design must work.&lt;/p&gt;

&lt;p&gt;Unfortunately this logic is quite fallacious.  Not only is &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/xlnxdemo_2020_2.vhd&quot;&gt;Xilinx’s
demonstration design&lt;/a&gt;
faulty, but I’ve also been tracking flaws in two other demonstration designs,
as well as in Xilinx’s &lt;a href=&quot;/blog/2020/01/01/2019-in-review.html&quot;&gt;AXI Ethernet-Lite
IP&lt;/a&gt;, and now
even in their AXI QuadSPI IP.&lt;/p&gt;

&lt;p&gt;The obvious conclusion should be that you should think for yourself.  Verify
your own designs.  Don’t trust an authority simply because he or she is an
authority.&lt;/p&gt;

&lt;p&gt;This reality applies to much more than just digital logic designs.  It applies
to the “science” regarding the Coronavirus–the same science that has been
changing on a day to day basis over the last year.  It applies to climate
change.  Indeed, I still remember when the climate scientists were warning of
an impending ice age.  It applies to the COVID “vaccine”, which you can choose
to have injected into your bloodstream or not.  It also applies to your
relationship to the Almighty.  In that final judgment day, you will stand
before the Almighty.  It won’t be your spouse, your boss, or your pastor,
and it certainly won’t be your church.  You will stand there alone.&lt;/p&gt;

&lt;p&gt;Think about that, then live accordingly.&lt;/p&gt;
&lt;hr /&gt;&lt;p&gt;&lt;em&gt;Though I speak with the tongues of men and of angels, and have not charity, I am become as sounding brass, or a tinkling cymbal. (1 Cor 13:1)&lt;/em&gt;</description>
        <pubDate>Sat, 22 May 2021 00:00:00 -0400</pubDate>
        <link>https://zipcpu.com/blog/2021/05/22/vhdlaxil.html</link>
        <guid isPermaLink="true">https://zipcpu.com/blog/2021/05/22/vhdlaxil.html</guid>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>Building a Simple AXI-lite Memory Controller</title>
        <description>&lt;p&gt;When I first built the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;,
I built it for the
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone bus&lt;/a&gt;.
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone&lt;/a&gt;
is very easy to work with, and a good
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone&lt;/a&gt;
pipeline implementation should
be able to achieve (roughly) the same performance as AXI-lite.  At the time, I
had yet to build a
&lt;a href=&quot;/blog/2019/07/17/crossbar.html&quot;&gt;crossbar interconnect&lt;/a&gt;,
so &lt;a href=&quot;/blog/2017/06/22/simple-wb-interconnect.html&quot;&gt;my basic interconnect
designs&lt;/a&gt; were
fairly simple and depended upon the existence of no more than a single master.
This forced the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
to have an &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/ex/wbdblpriarb.v&quot;&gt;internal
arbiter&lt;/a&gt;,
and to only expose that one
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone&lt;/a&gt;
interface.  You can see this basic structure in Fig. 1 below.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 1. Basic ZipCPU architecture&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/zipcpu.svg&quot; alt=&quot;&quot; width=&quot;560&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;My &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/memops.v&quot;&gt;first memory
controller&lt;/a&gt; was
quite simple.  It could handle issuing a single
read or write at a time and waiting for the return.&lt;/p&gt;

&lt;p&gt;When this &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/memops.v&quot;&gt;memory
controller&lt;/a&gt;
turned out to be a CPU performance bottleneck, I
chose to write a &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/pipemem.v&quot;&gt;pipelined memory
controller&lt;/a&gt;.
To get there, I first noticed that the CPU
doesn’t need the results of any write operation, so nothing keeps the CPU from
continuing with further operations while the write operation is ongoing.
Even better, you could issue a string of write operations and as long as the
memory controller was able to issue further
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
requests, nothing kept the CPU from allowing many requests to be outstanding
only to be retired later.&lt;/p&gt;

&lt;p&gt;I continued this reasoning to reads as well.  A string of memory reads could
be issued by the CPU, under the condition that none of those reads overwrote
either the base address register, from which the read addresses were being
determined, or the program counter.  When these conditions held, multiple read
requests could thn issued to be retired later–just like the write requests
above.&lt;/p&gt;

&lt;p&gt;To see how this concept might work, consider Fig. 2 below showing a notional
subroutine.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 2. Memory operation sequences&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/axilops/membusy.svg&quot; alt=&quot;&quot; width=&quot;780&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;In this notional example, the CPU starts out with a jump to the subroutine
instruction.  The subroutine then creates a
stack frame by subtracting from the stack pointer (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SUB&lt;/code&gt;), and stores three
registers to the stack frame via three store-word (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SW&lt;/code&gt;) instructions.  The
memory controller then becomes busy handling these three requests.  While the
requests are active, further requests of the same type are allowed.  Moreover,
since the requests are to store data to memory, the CPU can go on with other
instructions.  It doesn’t wait for the stores to complete, and so the
CPU issues first an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ADD&lt;/code&gt; and then an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AND&lt;/code&gt; instruction.
Once the CPU is finished, it clears up the stack frame by loading (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LW&lt;/code&gt;) the
copies of the registers it used back from the stack.  These loads, however,
need to first wait for the stores to complete–and so they stall the CPU.
Once all the loads have been issued, we then add to the stack pointer to return
the stack frame to what it was.  However, since the CPU doesn’t keep track of
what load requests are
outstanding, it can’t tell if this ADD is to a value yet to be returned from
the LOAD.  Therefore, the CPU stalls again until all loads are complete.&lt;/p&gt;

&lt;p&gt;While this might seem slow, consider the alternative.  What if the CPU had to
wait for every load or store to complete before issuing the next one?  Fig. 3
below gives a taste of what that might look like, save that we’ve allowed the
CPU to still continue while store operations are ongoing.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 3. Singleton operations only&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/axilops/memslow.svg&quot; alt=&quot;&quot; width=&quot;780&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;There were a couple issues with this new approach, however.  One was that my
&lt;a href=&quot;/blog/2017/06/22/simple-wb-interconnect.html&quot;&gt;original interconnect&lt;/a&gt;
implementation didn’t understand the concept of a currently active slave.
Any slave could respond to a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt; request and the
&lt;a href=&quot;/blog/2017/06/22/simple-wb-interconnect.html&quot;&gt;interconnect&lt;/a&gt;
would be none
the wiser.  Keeping the returns in order meant insisting that the memory
accesses were to incrementing addresses, and that slaves were sorted on the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
by how long they would take to respond to a request–so that the fastest
responding slaves were always at lower addresses.  I handled this by &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/f45617713f0fb1390fa3675e8d05fb84d1369b52/rtl/core/idecode.v#L669-L758&quot;&gt;insisting,
within the instruction decoder&lt;/a&gt;,
that any string of memory operations had to be to
either the same address or subsequent addresses.&lt;/p&gt;

&lt;p&gt;A second issue with this pipelined memory approach involved how to handle
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;errors&lt;/a&gt;.
Once a CPU can issue requests without waiting for their responses, then it
becomes possible for the CPU to issue requests for multiple operations before
the first one returns a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;error&lt;/a&gt;.
While this makes analyzing a program in &lt;a href=&quot;/zipcpu/2017/08/25/hw-debugging.html&quot;&gt;the
debugger&lt;/a&gt; that much
more challenging, the speed benefit provided by this approach was really quite
tremendous, and often outweighed any drawbacks.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 4. Comparing several GPIO toggle rates&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/tweets/gpio.svg&quot; alt=&quot;&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;The result was a &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/pipemem.v&quot;&gt;basic pipelined memory
controller&lt;/a&gt;.
As an example of the performance that could be achieved using this technique,
the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; can &lt;a href=&quot;/zipcpu/2019/02/09/cpu-blinky.html&quot;&gt;toggle an output pin at
47MHz while running the bus at
100MHz&lt;/a&gt;,
whereas others have measured the Zynq running a 250MHz bus as only able to
toggle the same pin at 3.8MHz.  In percentages, the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; was able to
demonstrate a 47% bus utilization using this technique vs. the Zynq’s 1.5%
bus utilization.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/pipemem.v&quot;&gt;This pipelined
memory&lt;/a&gt;
architecture worked quite well for the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;.
Hand optimized loops could easily be unrolled for much better performance.
Without hand optimization, however, the greatest benefit of this technique was
when generating or recovering stack frames where the technique was an awesome
fit.&lt;/p&gt;

&lt;p&gt;Indeed, I was a bit taken aback later when I finally built a
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/dcache.v&quot;&gt;data cache&lt;/a&gt;
only to discover the &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/pipemem.v&quot;&gt;pipelined memory
controller&lt;/a&gt;
was often as fast or faster than the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/dcache.v&quot;&gt;data cache&lt;/a&gt;.
What?? How could that happen?
Well, part of the problem was the time it took to load the cache in the first
place.  Loading the cache could generate more memory requests than necessary,
such as if the CPU only wanted a single value but had to load the entire cache
line, and so the cache might unnecessarily slow down the CPU.  The other problem
was that my original data cache implementation resorted to single operations
when accessing uncachable memory.  As a result, I had to go back and retrofit
the &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/dcache.v&quot;&gt;data cache&lt;/a&gt;
to handle pipelined operations for uncached memory just to recover the lost
performance.&lt;/p&gt;

&lt;p&gt;Recently, however, I’ve found myself doing a lot of work with AXI and not
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone&lt;/a&gt;.
How should the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
be modified to handle AXI?  One approach would be to use my &lt;a href=&quot;/blog/2020/03/23/wbm2axisp.html&quot;&gt;Wishbone to AXI
bridge&lt;/a&gt;.  This approach,
however, loses some of the benefits of AXI.  The
&lt;a href=&quot;/blog/2020/03/23/wbm2axisp.html&quot;&gt;Wishbone to AXI bridge&lt;/a&gt;
will never allow both read and write transactions to be outstanding (nor will
the CPU …), neither will it allow the CPU to use &lt;a href=&quot;/blog/2020/06/16/axiaddr-limits.html&quot;&gt;AXI
bursts&lt;/a&gt;
or to issue exclusive access requests.  The piece breaking the camel’s back,
however, is simply the &lt;a href=&quot;http://zipcpu.com/blog/2019/04/27/axi-addr.html&quot;&gt;lost performance going through a bus
bridge&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To avoid any lost performance when driving an
&lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;AXI&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt; interface I would need to
make the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
agnostic.&lt;/p&gt;

&lt;h2 id=&quot;bus-agnostic-cpu-design&quot;&gt;Bus Agnostic CPU Design&lt;/h2&gt;

&lt;p&gt;At present, I’m still in the process of making the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
agnostic.  As a result, I don’t (yet) have any good examples of completed
designs to show you how well (or poorly) the newly updated design works.
Expect those within the year.  For now, however, I’d like to discuss some of
the changes that have taken place.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
as originally written had two problems when it comes to building a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
agnostic implementation.  The first is that
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone&lt;/a&gt;
was central to the CPU.  The
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
interface therefore needed to be removed from
the CPU itself and made into &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/zipcore/rtl/core/zipwb.v&quot;&gt;a sort of
wrapper&lt;/a&gt;.
The second problem was that the &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/ex/wbdblpriarb.v&quot;&gt;Wishbone
arbiter&lt;/a&gt;
was integrated into the CPU.  This also needed to be removed from the CPU
core and placed into an external wrapper.&lt;/p&gt;

&lt;p&gt;This naturally led to what I’m calling the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/zipcore/rtl/core/zipcore.v&quot;&gt;ZipCore&lt;/a&gt;.
The &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/zipcore/rtl/core/zipcore.v&quot;&gt;ZipCore&lt;/a&gt;
is the logic left over after removing the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
logic from the original
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;.
The &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/zipcore/rtl/core/zipcore.v&quot;&gt;ZipCore&lt;/a&gt;
is independent of any
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
implementation.  Instead, it exports a custom interface to both the &lt;a href=&quot;/zipcpu/2017/11/18/wb-prefetch.html&quot;&gt;instruction
fetch&lt;/a&gt; and the memory
controller.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left; padding: 25px&quot;&gt;&lt;caption&gt;Fig 5. Separating the ZipCPU into independent proofs&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/tweets/zipcpu/cpu-verification.svg&quot; alt=&quot;&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;This also presented a wonderful opportunity to separate the &lt;a href=&quot;/blog/2018/04/02/formal-cpu-bugs.html&quot;&gt;formal verification
of the ZipCPU&lt;/a&gt;
from the verification of the instruction and data
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
interfaces.
This is shown in Fig. 5 by the introduction of custom interface property sets
sitting between the CPU and these two sets of interface modules.  I now have
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/zipcore/bench/formal/ffetch.v&quot;&gt;one custom property set for verifying the instruction
fetch&lt;/a&gt;,
and &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/zipcore/bench/formal/fmem.v&quot;&gt;another for verifying the memory controller
fetch&lt;/a&gt;.
This means that any instruction fetch or memory controller meeting these
properties will then be able to work with the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/zipcore/rtl/core/zipcore.v&quot;&gt;ZipCore&lt;/a&gt;.
As a result, I no longer need to verify that the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/zipcore/rtl/core/zipcore.v&quot;&gt;ZipCore&lt;/a&gt;.
will work with a particular instruction fetch or a particular memory controller
implementation.  Instead, I just need to prove that those controllers will work
with the appropriate custom interface property set.  If they do, then they’ll
work with the CPU.&lt;/p&gt;

&lt;p&gt;Of course, they’ll also need to work with the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
they are connected to, and so this requires a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt; &lt;a href=&quot;/formal/2020/06/12/four-keys.html&quot;&gt;interface property
set&lt;/a&gt;–either
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone&lt;/a&gt;
or &lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;AXI&lt;/a&gt;, but
we’ll get to that in a bit.&lt;/p&gt;

&lt;p&gt;For now, let’s look at what the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;’s memory interface looks like.&lt;/p&gt;

&lt;h2 id=&quot;cpu-interface&quot;&gt;CPU Interface&lt;/h2&gt;

&lt;p&gt;The &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;’s
memory controller interface can support one of two basic operations: read
and write.  Each leads to a slightly different sequence.  These are shown in
Fig. 6.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 6. Memory operation sequences&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/axilops/mem-tasks.svg&quot; alt=&quot;&quot; width=&quot;400&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;In the case of a write, the CPU provides the address and the value to be written
to the controller.  The controller then becomes busy.  Once it finishes the
task, if all goes well, it quietly ceases to be busy.  If something went wrong,
the memory controller will instead return an error.&lt;/p&gt;

&lt;p&gt;Reads are similar, with the difference that the result needs to be returned
to the CPU once the operation is complete.  In this case, the memory controller
sets a valid signal for the CPU, the value returned from the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;, and then
returns to the CPU the register address that this value is to be written into.
At least the way the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
handles this interface, it is the memory controller
that keeps track of what register the result will be written into.  That’s
what happens if all goes well.  However, if the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt; returns an
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;error&lt;/a&gt;, then the
controller will set an error flag instead of the valid flag.  It’s up to
the CPU then to determine what to do in case of a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;error&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In general, the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
will do one of two things on a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;error&lt;/a&gt;.  If the CPU
is in user mode, it will switch to supervisor mode.  If, on the other hand,
the CPU is in supervisor mode then it will halt.  If desired, an external
wrapper can reset the CPU as an attempt to recover from the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;error&lt;/a&gt;, but in
general it just halts and waits for the
&lt;a href=&quot;/zipcpu/2017/08/25/hw-debugging.html&quot;&gt;debugger&lt;/a&gt;.  The &lt;a href=&quot;https://github.com/ZipCPU/s6soc&quot;&gt;S6SoC
project&lt;/a&gt; was my one exception to this rule,
since &lt;a href=&quot;/blog/2017/06/12/minimizing-luts.html&quot;&gt;there was no room for an external debugging
bus&lt;/a&gt; in that design.
In that case, the CPU would simply restart, dump the last CPU register contents,
and then attempt to continue a reboot from there.&lt;/p&gt;

&lt;p&gt;No matter how the software handles the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;error&lt;/a&gt;, the memory controller will
not return further results from any ongoing set of operations.  Returns from
outstanding reads following a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;error&lt;/a&gt; will be ignored.  Outstanding
writes may, or may not be, completed–depending on their status within the
memory controller and the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt; implementation.  At a
minimum, only one
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;error&lt;/a&gt; will be returned.  Further
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;error&lt;/a&gt; responses from any
outstanding accesses on the &lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
will not be returned to the CPU.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left; padding: 25px&quot;&gt;&lt;caption&gt;Fig 7. The memory controller interface&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/axilops/mem-interface.svg&quot; alt=&quot;&quot; width=&quot;400&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Fig. 7 on the left shows the basic interface between the CPU core and it’s
memory controller used to implement these operations.  Let’s take a moment
before going any further to discuss the various signals in this interface.
Indeed, the basic interface is fairly simple:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;The &lt;a href=&quot;/blog/2020/03/14/axi-reset.html&quot;&gt;bus reset&lt;/a&gt;,
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;i_bus_reset&lt;/code&gt;: This is just another name for the system reset
pin.  Everything resets when the
&lt;a href=&quot;/blog/2020/03/14/axi-reset.html&quot;&gt;bus reset&lt;/a&gt; is asserted.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The CPU reset, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;i_cpu_reset&lt;/code&gt;: With
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone&lt;/a&gt;,
it’s easy to reset the CPU
separate from the bus.  All you need to do is drop the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CYC&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;STB&lt;/code&gt; lines.
With AXI, &lt;a href=&quot;/blog/2020/03/14/axi-reset.html&quot;&gt;this is a bit
harder&lt;/a&gt;,
since you will still get responses back from the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
from any requests that were made before your reset if you don’t
also reset the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;.
This is why the memory interface separates the CPU
reset from the system reset, so that the CPU can be reset separate from
the rest of the design.  It’s up to the memory controller to make sure
that the CPU doesn’t get any stale memory results from prior to the reset
request returning afterwards.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;i_stb&lt;/code&gt;: This is the basic request line.  When the CPU raises &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;i_stb&lt;/code&gt;, it
wants to initiate a memory operation.  For those familiar with the AXI
stream protocol, you can think of this as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TVALID &amp;amp;&amp;amp; TREADY&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;o_pipe_stalled&lt;/code&gt;: This is the basic stall line.  When raised, the CPU
will not raise &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;i_stb&lt;/code&gt; to make a request of the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;.
Continuing with the AXI stream analogy from above, this is similar to the
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;!TREADY&lt;/code&gt; signal in AXI stream.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 8. i_op encoding&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/axilops/iop-encoding.svg&quot; alt=&quot;&quot; width=&quot;400&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;i_op&lt;/code&gt;: This specifies the type of operation.  To keep logic counts low,
the bits to the memory operation are drawn directly from the instruction
word.  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;i_op[0]&lt;/code&gt; will be true for a write (store) instruction, and false for a
read (load) instruction.  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;i_op[2:1]&lt;/code&gt; then specifies the size of that
operation.  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2'b11&lt;/code&gt; specifies a byte-wise read or write, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2'b10&lt;/code&gt; a
half-word/short (16b) operation, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2'b01&lt;/code&gt; a full word operation.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;i_addr&lt;/code&gt;: The address to be written to or read from.  This only has meaning
when &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;i_stb&lt;/code&gt; is true.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;i_data&lt;/code&gt;: The data to be written to the address above.  This only has meaning
when both &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;i_stb&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;i_op[0]&lt;/code&gt;.  For 8’bit writes, only the lower 8-bits
have meaning.  Likewise for 16’bit writes only the lower 16-bits have any
meaning.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;i_oreg&lt;/code&gt;: For reads, this specifies the register address that the read result
will be placed into upon completion.  The memory unit will hold onto this
value, and then return it to the CPU again later.  In the case of the
pipelined operators, this value will go into a FIFO to be returned later with
any read results.  This value is ignored in the case of writes.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;o_busy&lt;/code&gt;: If the memory core is busy doing anything, it will set &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;o_busy&lt;/code&gt;.
For example, if you issue a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
operation, then &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;o_busy&lt;/code&gt; will go true.  If you later reset the CPU, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;o_busy&lt;/code&gt;
will remain true until the memory core can accept another operation.&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;o_busy&lt;/code&gt; is subtly different from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;o_pipe_stalled&lt;/code&gt; in that the CPU may issue
additional memory operations while &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;o_busy &amp;amp;&amp;amp; !o_pipe_stalled&lt;/code&gt;.  However,
the CPU will not start a new string of memory operations, nor will it change
direction while the memory core asserts &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;o_busy&lt;/code&gt;.&lt;/p&gt;

    &lt;p&gt;It’s important to note that the CPU may move on to a non-memory instruction
if &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;o_busy&lt;/code&gt; is true as long as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;o_rdbusy&lt;/code&gt; is low.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;o_rdbusy&lt;/code&gt;: If the memory core is busy reading values from the memory, then
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;o_rdbusy&lt;/code&gt; will be set to indicate that a read is in progress and the CPU
should not proceed to any other instructions (other than additional reads).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;o_valid&lt;/code&gt;: Once a read value is returned, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;o_valid&lt;/code&gt; will be set to indicate
the need to write to the register file the value returned from the read.  If
all goes well, there will be exactly one &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;o_valid&lt;/code&gt; for every
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;i_stb &amp;amp;&amp;amp; !i_op[0]&lt;/code&gt;, although CPU resets and
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;error&lt;/a&gt;s may keep this count
from being exact.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;o_err&lt;/code&gt;: This will be set following any
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;error&lt;/a&gt;, with two exceptions:
First, if the CPU is reset while operations are outstanding, then any
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;error&lt;/a&gt; response for those
outstanding operations will not be returned.  Second, after the first
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;error&lt;/a&gt;, the memory controller will
first flush any ongoing operations before returning any more
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;error&lt;/a&gt;s to the CPU.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;o_wreg&lt;/code&gt;: When returning a data value to the CPU, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;o_wreg&lt;/code&gt; value tells
the CPU where to write the value.  This is basically the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;i_oreg&lt;/code&gt; value
given to the memory controller reflected back to the CPU, together with the
data value that goes with it.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;o_result&lt;/code&gt;: The value from any read return is provided in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;o_result&lt;/code&gt;.
In the case of an 8-bit read, the upper 24-bits will be cleared.  Likewise,
for a 16’bit read, the upper 16’bits will be cleared.&lt;/p&gt;

    &lt;p&gt;Some CPU’s sign extend byte reads to the full word size, some do not.  By
default, the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
simply clears any upper bits.  Two following instructions,
a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TEST&lt;/code&gt; instruction followed by a conditional &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OR&lt;/code&gt; can turn a zero extended
read into a sign extended read.  Alternatively, &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/c8c2f9aa68c07bbd33276d3e198290bf9335ef4f/rtl/core/axilops.v#L706-L723&quot;&gt;changing the memory
controller from one behavior to another is fairly easy to
do&lt;/a&gt;.  Adjusting the GCC
toolchain and following support, however, can take a bit more work.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are two other important signals in this interface.  These are signals
we won’t be addressing today, but they are important parts of the more
complex controller implementations.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;i_clear_cache&lt;/code&gt;: This is my way of dealing with cache’s and DMA’s.  The CPU
can issue a special instruction to clear the cache if the memory may have
changed independent of the CPU.  This input is also asserted if the
debug interface changes memory in a way the CPU is unaware of.  If raised,
the memory controller will mark any and all cached data as invalid–forcing
the cache to reload from scratch on the next request.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;i_lock&lt;/code&gt;: This flag is used when implementing atomic memory instructions.
It will be raised by a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LOCK&lt;/code&gt; instruction, and then lowered three instructions
later.  This allows for certain four instruction sequences: LOCK, LOAD,
(ALU operation), STORE.  A large variety of atomic instructions can be
implemented this way.  Examples include atomic adds, subtracts, or even the
classic test and set instruction.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left; padding: 25px&quot;&gt;&lt;caption&gt;Fig 9. Comparing ZipCPU and MicroBlaze test and set implementations&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;/img/axilops/testnset.svg&quot;&gt;&lt;img src=&quot;/img/axilops/testnset.svg&quot; alt=&quot;&quot; width=&quot;460&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;During these three instructions, the CPU is prevented from switching to
  supervisor mode on any interrupt until all three instructions following the
  lock have completed.&lt;/p&gt;

&lt;p&gt;Atomic access requests are generally easy to implement when using
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone&lt;/a&gt;.  The
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone&lt;/a&gt;
cycle line is simply raised with the first LOAD instruction (LB, for load byte
in Fig. 9), and then held high between the LOAD and STORE instructions (SB, for
store byte in Fig. 9).  Things are a bit more complicated with AXI, however,
since AXI doesn’t allow a &lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;.
master to lock the &lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;.
Instead, the CPU will only
discover if it’s atomic instruction was successful when/if the final store
operation fails.  In that case, the memory controller needs to tell the CPU to
back up to the lock instruction and start over.  How to make this happen,
however, is a longer discussion for the day we discuss the &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/zipcore/rtl/core/axiops.v&quot;&gt;full AXI version
of this same memory
controller&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To see how this interface might work when driving an
&lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;AXI bus&lt;/a&gt;, I thought I
might provide examples of both writing to and reading from the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;.
Here’s the write example.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 10. An example write trace&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;/img/axilops/writeop.svg&quot;&gt;&lt;img src=&quot;/img/axilops/writeop.svg&quot; alt=&quot;&quot; width=&quot;460&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Note the key steps:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;The CPU makes a request by setting &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;i_stb&lt;/code&gt;, placing the data to be written
into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;i_data&lt;/code&gt;, and the address of the transaction into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;i_addr&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The memory controller then becomes busy.  It raises both &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;M_AXI_AWVALID&lt;/code&gt; and
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;M_AXI_WVALID&lt;/code&gt; to request a transaction of the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;.
In this example, we
also raise &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;M_AXI_BREADY&lt;/code&gt; as a bit in our state machine, to indicate that
we are expecting data to be returned from the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt; in the future.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;M_AXI_AWVALID&lt;/code&gt; must remain high, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;M_AXI_AWADDR&lt;/code&gt; must remain constant
until &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;M_AXI_AWREADY&lt;/code&gt; is high.  In this highly compressed example,
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;M_AXI_AWREADY&lt;/code&gt; just happens to be high when &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;M_AXI_AWVALID&lt;/code&gt; is set, so that
it &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;M_AXI_AWVALID&lt;/code&gt; can be dropped on the next cycle.&lt;/p&gt;

    &lt;p&gt;The same rule applies to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;M_AXI_WVALID&lt;/code&gt;.  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;M_AXI_WVALID&lt;/code&gt; must stay high
and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;M_AXI_WDATA&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;M_AXI_WSTRB&lt;/code&gt; must stay constant until &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;M_AXI_WREADY&lt;/code&gt;.&lt;/p&gt;

    &lt;p&gt;I’ve seen several beginner mistakes with this handshake.  Remember: this 
chart in Fig. 10 is only &lt;em&gt;representative!&lt;/em&gt;  Some slaves will delay setting
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;M_AXI_AWREADY&lt;/code&gt; longer than others, some will set &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;M_AXI_AWREADY&lt;/code&gt; before
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;M_AXI_WREADY&lt;/code&gt; and others will set them in a different order.  To be
compliant, an AXI master must be able to deal with all these situations.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;In this compressed example, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;M_AXI_BVALID&lt;/code&gt; is set on the clock immediately
following &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;M_AXI_AWVALID &amp;amp;&amp;amp; M_AXI_AWREADY &amp;amp;&amp;amp; M_AXI_WVALID &amp;amp;&amp;amp; M_AXI_WREADY&lt;/code&gt;.&lt;/p&gt;

    &lt;p&gt;Do not depend upon this condition!  I’ve seen beginner mistakes where
the beginner’s logic requires all four of these signals to be high at the
same time.  Remember, either one of these two channels might get accepted
before the other.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Once &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;M_AXI_BVALID&lt;/code&gt; has been received, the memory controller drops &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;o_busy&lt;/code&gt;
to indicate that it is idle.  A new request may then be made on the same
cycle.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now let’s take a look at a read example using this interface.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 11. An example read trace&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;/img/axilops/readop.svg&quot;&gt;&lt;img src=&quot;/img/axilops/readop.svg&quot; alt=&quot;&quot; width=&quot;460&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;While this example is very similar to the previous write example, there are some
key differences.  Therefore, let’s walk through it.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;The CPU indicates the desire to read from memory by raising &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;i_stb&lt;/code&gt; and
placing the address to be read from in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;i_addr&lt;/code&gt;.  The register that will
be read into is also placed into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;i_wreg&lt;/code&gt;–the memory controller will need
to return this value back when the operation is complete.&lt;/p&gt;

    &lt;p&gt;Not shown is the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;i_op&lt;/code&gt; input indicating the size of the read, whether
byte (8b), halfword (16b), or word (32b).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Once the memory controller receives &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;i_stb&lt;/code&gt;, it immediately sets
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;M_AXI_ARVALID&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;M_AXI_ARADDR&lt;/code&gt; with the information it is given.&lt;/p&gt;

    &lt;p&gt;This controller also sets &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;M_AXI_RREADY&lt;/code&gt; high at this point, as part of
its internal state tracking.  This is to indicate that a read return is
expected.&lt;/p&gt;

    &lt;p&gt;Finally, the controller sets both &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;o_busy&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;o_rdbusy&lt;/code&gt;.  The first
indicates that a memory operation is ongoing, and the second indicates
that we will be writing back to a register upon completion.  This latter
flag, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;o_rdbusy&lt;/code&gt;, is used to prevent the CPU from moving onto its next
operation and so helps avoid any pipeline hazard.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;M_AXI_ARVALID&lt;/code&gt; must stay high and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;M_AXI_ARADDR&lt;/code&gt; constant until the slave
asserts &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;M_AXI_ARREADY&lt;/code&gt;.  In this example, that happens immediately, but
this will not be the case with all slaves.&lt;/p&gt;

    &lt;p&gt;Holding &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;M_AXI_ARVALID&lt;/code&gt; high past &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;M_AXI_ARVALID &amp;amp;&amp;amp; M_AXI_ARREADY&lt;/code&gt; will
request a second read.  Since we don’t want that here, we immediately drop
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;M_AXI_ARVALID&lt;/code&gt; upon seeing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;M_AXI_ARREADY&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Once the slave accomplishes the read, it sets &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;M_AXI_RVALID&lt;/code&gt; and
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;M_AXI_RDATA&lt;/code&gt;.  Since the memory controller is holding &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;M_AXI_RREADY&lt;/code&gt; high,
these will only be set for a single cycle.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The memory controller then copies the data from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;M_AXI_RDATA&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;o_result&lt;/code&gt;
to send it back to the CPU.  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;o_valid&lt;/code&gt; is set to indicate a result is valid.
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;o_rdbusy&lt;/code&gt; is dropped, since we are no longer in the middle of any operation.
Finally, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;o_wreg&lt;/code&gt; returns the register address that the CPU entrusted to the
memory controller.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;These are examples drawn from &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/zipcore/rtl/core/axilops.v&quot;&gt;the controller we’ll be examining
today&lt;/a&gt;.  Just
to prove that the throughput of this CPU interface isn’t
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt; limited in general, here is
a trace drawn from &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/zipcore/rtl/core/axilpipe.v&quot;&gt;an AXI-lite memory controller capable of issuing multiple
ongoing operation&lt;/a&gt;.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 12. An example pipelined read trace, from another controller&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;/img/axilops/piperead.svg&quot;&gt;&lt;img src=&quot;/img/axilops/piperead.svg&quot; alt=&quot;&quot; width=&quot;460&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Just for the purposes of illustration, I dropped &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;M_AXI_ARREADY&lt;/code&gt; on the
first cycle of the request for address &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;A3&lt;/code&gt;, all this behavior is highly
slave dependent.  Doing this, however, helps to illustrate how a bus stall
will propagates through &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/zipcore/rtl/core/axilpipe.v&quot;&gt;that
controller&lt;/a&gt;.
Notice how the CPU then suffers one stall, and that the result takes an extra
cycle to return the item from that address.  Beyond that, however, we’ll need
to save the examination of &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/zipcore/rtl/core/axilpipe.v&quot;&gt;that
controller&lt;/a&gt;
for another day.  For now we’ll limit ourselves to &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/zipcore/rtl/core/axilops.v&quot;&gt;a
controller&lt;/a&gt;
that can only handle a 33% &lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
throughput at best.&lt;/p&gt;

&lt;p&gt;33% throughput?  Is that the performance that can be expected from this type
of controller?  Well, not really.  That would be the performance you’d see if
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/zipcore/rtl/core/axilops.v&quot;&gt;this memory controller&lt;/a&gt;
were connected directly to &lt;a href=&quot;/blog/2019/05/29/demoaxi.html&quot;&gt;a (good) block RAM
memory&lt;/a&gt;.  If you connect it to
a &lt;a href=&quot;/blog/2019/07/17/crossbar.html&quot;&gt;crossbar interconnect&lt;/a&gt;
instead, you can expect it to cost you two clock cycles going into the
&lt;a href=&quot;/blog/2019/07/17/crossbar.html&quot;&gt;interconnect&lt;/a&gt;, and another
clock cycle coming out.  Hence, to read from a block RAM memory, it will now
cost you 6 cycles, not 3, for a 16%
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
throughput.  Worse, if you
connect it to &lt;a href=&quot;https://www.xilinx.com/support/documentation/ip_documentation/axi_bram_ctrl/v4_0/pg078-axi-bram-ctrl.pdf&quot;&gt;Xilinx’s AXI block RAM controller&lt;/a&gt;,
it’ll then take you an additional 4 clock cycles.  As a result, your
blazing fast &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; would be crippled
down to one access for every 10 clock cycles simply due to a non-optimal
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
architecture.  Unfortunately, it only gets worse from there when you attach
your CPU to a slower AXI slave.&lt;/p&gt;

&lt;p&gt;Here’s a trace showing what that whole operation, from CPU through
&lt;a href=&quot;/blog/2019/07/17/crossbar.html&quot;&gt;interconnect&lt;/a&gt;
to &lt;a href=&quot;https://www.xilinx.com/support/documentation/ip_documentation/axi_bram_ctrl/v4_0/pg078-axi-bram-ctrl.pdf&quot;&gt;Xilinx’s AXI block RAM controller&lt;/a&gt;
and back might look like.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 13. Adjacent single read requests through an interconnect and then Xilinx's AXI block RAM controller&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;/img/axilops/rdloaded-an.svg&quot;&gt;&lt;img src=&quot;/img/axilops/rdloaded-an.svg&quot; alt=&quot;&quot; width=&quot;780&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;In this trace, we have the outputs of our controller &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;M_AXI_ARVALID&lt;/code&gt; and
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;M_AXI_ARADDR&lt;/code&gt; going into a
&lt;a href=&quot;/blog/2019/07/17/crossbar.html&quot;&gt;crossbar&lt;/a&gt;.  The
&lt;a href=&quot;/blog/2019/07/17/crossbar.html&quot;&gt;crossbar&lt;/a&gt; forwards these
requests to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BRAM_AXI_ARVALID&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BRAM_AXI_ARADDR&lt;/code&gt;, the inputs to &lt;a href=&quot;https://www.xilinx.com/support/documentation/ip_documentation/axi_bram_ctrl/v4_0/pg078-axi-bram-ctrl.pdf&quot;&gt;Xilinx’s
AXI block RAM controller&lt;/a&gt;.
&lt;a href=&quot;https://www.xilinx.com/support/documentation/ip_documentation/axi_bram_ctrl/v4_0/pg078-axi-bram-ctrl.pdf&quot;&gt;This block RAM controller&lt;/a&gt;
takes a clock cycle to raise &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BRAM_ARREADY&lt;/code&gt;, and then two more clock cycles
before it raises its output on the result pipe, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BRAM_RVALID&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BRAM_RDATA&lt;/code&gt;.
From here it will take another clock to go through the
&lt;a href=&quot;/blog/2019/07/17/crossbar.html&quot;&gt;crossbar&lt;/a&gt;.  This clock is
the minimum timing allowed by the &lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI
spec&lt;/a&gt;.  As a result, the read takes a
full 10 cycles.  The &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;’s memory
interface will allow a second request as soon as this one returns, yielding a
maximum throughput of 11%.&lt;/p&gt;

&lt;p&gt;As I mentioned above, fixing this horrendous throughput will require a
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/zipcore/rtl/core/axilpipe.v&quot;&gt;redesigned memory
controller&lt;/a&gt;.
Of course, a &lt;a href=&quot;htpps://github.com/ZipCPU/wb2axip/blob/master/rtl/demofull.v&quot;&gt;better AXI block RAM
controller&lt;/a&gt;
would also help as well.&lt;/p&gt;

&lt;p&gt;We’ll get there.&lt;/p&gt;

&lt;p&gt;For now, a &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/zipcore/rtl/core/axilops.v&quot;&gt;working AXI memory
controller&lt;/a&gt;
is a good place to start from.  We can come back to this project and optimize
it later if we get the chance.&lt;/p&gt;

&lt;h2 id=&quot;basic-operator&quot;&gt;Basic Operator&lt;/h2&gt;

&lt;p&gt;Now that we know what our interface looks like, let’s peel the onion back
another layer deeper to see how we might implement these operations when using
AXI-lite.&lt;/p&gt;

&lt;p&gt;First, let me answer the question of why AXI-lite and not AXI?  And, moreover,
what will the consequences be of not using the full AXI4 interface?  For
today’s discussion, I have several reasons for not using the full AXI4
interface:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;AXI-lite is simpler.&lt;/p&gt;

    &lt;p&gt;This may be my biggest reason.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axilite2axi.v&quot;&gt;AXI-lite can easily be converted to AXI (full) by just setting the missing
  signals&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The CPU memory unit doesn’t need AXI IDs.  While a CPU might use two
  separate AXI IDs, only one would ever be needed for any source.  Therefore,
  the fetch unit might use one ID and the memory controller another.  If a
  DMA were integrated into the CPU, it might use a third ID and so on.  There’s
  just no need for separate ID’s in the memory controller itself.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Since we’re only implementing a single access at a time today, or in the
case of misaligned accesses two accesses at a time, there’s no reason
to use AXI bursts.&lt;/p&gt;

    &lt;p&gt;When (if) we get to building an AXI
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/zipcore/rtl/axiicache.v&quot;&gt;instruction&lt;/a&gt;
or &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/zipcore/rtl/axidcache.v&quot;&gt;data
cache&lt;/a&gt;,
then bursts will make sense.  In such cases, a natural burst length will be
the size of a single cache line.&lt;/p&gt;

    &lt;p&gt;While it might make sense to issue a burst request when dealing with
misaligned accesses later, AXI’s requirement that burst accesses never cross
4kB boundaries &lt;a href=&quot;/blog/2020/06/16/axiaddr-limits.html&quot;&gt;could make this a
challenge&lt;/a&gt;.  By
leaving adjacent memory accesses as independent, we don’t need to worry
about this 4kB requirement.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;There is one critical
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
capability that we will lose by implementing &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/zipcore/rtl/core/axilops.v&quot;&gt;this
memory controller for AXI4-lite&lt;/a&gt; rather than AXI4 (full), and that is the
ability to implement atomic access instructions.  If for no other reason,
let’s consider this implementation only a first draft of a simple controller,
so that we can come back later with a more complicated and full featured
controller at a later time.  Indeed, if you compare &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/zipcore/rtl/core/axilops.v&quot;&gt;this
core&lt;/a&gt; to a
comparable &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/zipcore/rtl/core/axiops.v&quot;&gt;full AXI memory
controller&lt;/a&gt;,
you’ll see the two mostly share the same structure.&lt;/p&gt;

&lt;p&gt;For now, let’s work our way through a first draft of setting our various
AXI4-lite signals.&lt;/p&gt;

&lt;p&gt;The first signals we’ll control will be the various &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;xVALID&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;xREADY&lt;/code&gt;
signals associated with any AXI request.  As discussed above, we’ll use the
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;xREADY&lt;/code&gt; signals as internal state variables to know when something is
outstanding.  Hence, on a write request we’ll set &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;M_AXI_BREADY&lt;/code&gt; and we’ll
clear it once the request is acknowledged.  We’ll treat read requests
similarly, only using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;M_AXI_RREADY&lt;/code&gt; for that purpose instead.&lt;/p&gt;

&lt;p&gt;The first step will be to clear these signals on any reset.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARESETN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;M_AXI_AWVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1'b0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;M_AXI_WVALID&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1'b0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;M_AXI_ARVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1'b0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;M_AXI_BREADY&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1'b0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;M_AXI_RREADY&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1'b0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;While it’s a little out of order, the next group in this block controls
how to handle an ongoing operation.  In general, if ever &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AxREADY&lt;/code&gt; then the
associated &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AxVALID&lt;/code&gt; signal will be cleared.  Likewise, once &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BVALID&lt;/code&gt; or
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RVALID&lt;/code&gt; are returned, we can close up and finish our operation and clear
our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;xREADY&lt;/code&gt; signals.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_BREADY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M_AXI_RREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Something is outstanding&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_AWREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;M_AXI_AWVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_WREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;M_AXI_WVALID&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_ARREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;M_AXI_ARVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_BVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M_AXI_RVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;M_AXI_BREADY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1'b0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;M_AXI_RREADY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1'b0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;As I mentioned above, getting this signaling wrong is a common beginning
AXI mistake.  Remember, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AW*&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;W*&lt;/code&gt; channels are independent, and
that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VALID&lt;/code&gt; cannot be lowered until &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;READY&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The last step in controlling these signals is to set them on any request.
Assuming a request is incoming, we’ll want to set the various write
flags if &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;i_op[0]&lt;/code&gt; is ever true–indicating a write operation request.
Otherwise, for read operations, we’ll want to set &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;M_AXI_ARVALID&lt;/code&gt; and
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;M_AXI_RREADY&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// New memory operation&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// Initiate a request&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;M_AXI_AWVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;i_op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// Write request&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;M_AXI_WVALID&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;i_op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// Write request&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;M_AXI_ARVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// Read request&lt;/span&gt;

		&lt;span class=&quot;c1&quot;&gt;// Set BREADY or RREADY to accept the response.  These will&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// remain ready until the response is returned.&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;M_AXI_BREADY&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;i_op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;M_AXI_RREADY&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Of course, that’s only if a request is being made on this cycle.  Hence,
let’s caveat these new values.  If there’s no request being made, then these
lines should be kept clear.  Likewise, if the request is for an unaligned
address then (in our first draft) we’ll return an error to the CPU and not
issue any request.  Finally, on either a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;error&lt;/a&gt;
or a CPU reset we’ll need
to make certain that we don’t start a new request that will immediately
be unwanted one the next cycle.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_cpu_reset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o_err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_stb&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w_misaligned&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;M_AXI_AWVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;M_AXI_WVALID&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;M_AXI_ARVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

			&lt;span class=&quot;n&quot;&gt;M_AXI_BREADY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;M_AXI_RREADY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Judging from the AXI requests associated with Xilinx forum posts that I’ve
examined, getting those five signals right tends to be half the battle.&lt;/p&gt;

&lt;p&gt;There is another signal, however, that we’ll need to pay attention to, and
this is the one capturing whether or not the CPU was reset separate from the
system.  In such cases, we’ll need to flush any ongoing
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
operation without returning its results to the CPU at a later time.  To
handle this, we’re going to implement an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;r_flushing&lt;/code&gt; signal.  This
signal will capture the idea of the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt; begin busy,
even through the CPU isn’t expecting a result from it.&lt;/p&gt;

&lt;p&gt;This signal will be cleared on any system reset.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARESETN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;r_flushing&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1'b0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The primary purpose of this signal is to let us know to flush any outstanding
returns following a CPU reset while a bus operation is ongoing without also
needing to reset the bus.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_BREADY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M_AXI_RREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_cpu_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;// If only the CPU is reset, however, we have a problem.&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;// The bus hasn't been reset, and so it is still active.&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;// We can't respond to any new requests from the CPU&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;// until we flush any transactions that are currently&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;// active.&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;r_flushing&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1'b1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;There’s one caveat to this, however, and that is that we don’t want to set
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;r_flushing&lt;/code&gt; if the CPU is reset on the same cycle the outstanding value is
returned to the CPU.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_BVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M_AXI_RVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;// A request just came back, therefore we can clear&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;// r_flushing&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;r_flushing&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1'b0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Otherwise if the bus is idle, we can leave the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;r_flushing&lt;/code&gt; signal at zero–no
matter whether the CPU is reset or not.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// If nothing is active, we don't care about the CPU reset.&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// Flushing just stays at zero.&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;r_flushing&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1'b0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Handling the bus address for this simple controller is really easy.  As long
as we aren’t in the middle of any operations, we can set the address to the
CPU’s requested address.  Even better, we can use the same logic for both
read and write addresses.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;M_AXI_AWADDR&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_BREADY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_RREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;M_AXI_AWADDR&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;M_AXI_ARADDR&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M_AXI_AWADDR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;AXI requires an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AxPROT&lt;/code&gt; signal accompany any request.  Looking through the
AXI spec, it looks like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;3'h0&lt;/code&gt; will work nicely for us.  This will specify
an unprivileged, secure data access.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;M_AXI_AWPROT&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;3'h0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;M_AXI_ARPROT&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;3'h0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;That brings us to setting &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;M_AXI_WDATA&lt;/code&gt; and its associated &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;M_AXI_WSTRB&lt;/code&gt;.
In general, we’re going to need to up shift these values based upon where
the data given us will fit on the bus.  I like to use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AXILSB&lt;/code&gt; to capture the
number of address bits, in an AXI interface, necessary to define which octet
the address is referencing.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;localparam&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;AXILSB&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;clog2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C_AXI_DATA_WIDTH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Remember not to copy Xilinx’s formula for this bus width, since &lt;a href=&quot;/blog/2019/05/29/demoaxi.html&quot;&gt;their
calculation is only valid for 16, 32, or 64-bit bus
widths&lt;/a&gt;.  (You can see &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/1a4f62693540e6a6c8f25a626a2fbec74f3974a2/bench/formal/xlnxdemo.v#L132&quot;&gt;their
bug here&lt;/a&gt;.  In their defense, this doesn’t really
matter in an AXI-lite interface, since Xilinx only allows AXI-lite to ever have
a data width of 32-bits.  Sadly, they &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/1a4f62693540e6a6c8f25a626a2fbec74f3974a2/bench/formal/xlnxfull_2018_3.v#L234&quot;&gt;made the same mistake in their AXI
full demonstrator&lt;/a&gt;.)&lt;/p&gt;

&lt;p&gt;We can now use this value to shift our data input by eight times the value of
these lower address bits to place our write data in its place on the bus.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_stb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;casez&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
		&lt;span class=&quot;mb&quot;&gt;2'b10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axi_wdata&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Half-word store&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C_AXI_DATA_WIDTH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1'b0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AXILSB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
		&lt;span class=&quot;mb&quot;&gt;2'b11&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axi_wdata&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 8-bit (byte) store&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C_AXI_DATA_WIDTH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;mb&quot;&gt;1'b0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AXILSB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
		&lt;span class=&quot;nl&quot;&gt;default:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axi_wdata&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AXILSB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;endcase&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We’ll come back in a moment and assign &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;M_AXI_WDATA&lt;/code&gt; to be the same as
this &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;axi_wdata&lt;/code&gt;.  For now, let’s just note that the logic for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;axi_wstrb&lt;/code&gt;
is almost identical.  In this case, we’re upshifting a series of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1&lt;/code&gt;s,
one for each byte we wish to write, by subword address bits.  The second
big difference is that we aren’t multiplying the low order address bits by
eight like we did for the data.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;c1&quot;&gt;// next_wstrb, axi_wstrb&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;casez&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
		&lt;span class=&quot;mb&quot;&gt;2'b0?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axi_wstrb&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mb&quot;&gt;1'b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
						&lt;span class=&quot;mb&quot;&gt;4'b1111&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AXILSB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
		&lt;span class=&quot;mb&quot;&gt;2'b10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axi_wstrb&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mb&quot;&gt;1'b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
						&lt;span class=&quot;mb&quot;&gt;4'b0011&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AXILSB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
		&lt;span class=&quot;mb&quot;&gt;2'b11&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axi_wstrb&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mb&quot;&gt;1'b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
						&lt;span class=&quot;mb&quot;&gt;4'b0001&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AXILSB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;endcase&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;There’s one last step here, and that is that we need to keep track of both the
operation size as well as the lower bits of the address.  We’re going to need
these later, on a read return to know how to grab the byte of interest from
the bus.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;n&quot;&gt;r_op&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AXILSB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M_AXI_WSTRB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M_AXI_WDATA&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axi_wstrb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axi_wdata&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;That leaves only one other signal required to generate a bus request, and that
signal is going to tell us if and when we need to abort the request due to
the fact that it will require two operations.  For this initial implementation,
we’ll simply return an error to the CPU in this case.  We’ll come back to this
in a moment to handle misaligned accesses, but this should be good enough
for a first pass.&lt;/p&gt;

&lt;p&gt;An access is misaligned if the access doesn’t fit within a single bus word.
For a 4-byte request, if adding 3 to the address moves you into the next
word then the request is misaligned.  For a 2-byte request, if adding one
moves you to the next word then the request is misaligned.  Single byte
requests, however, cannot be misaligned.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;casez&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// Full word&lt;/span&gt;
	&lt;span class=&quot;mb&quot;&gt;2'b0?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w_misaligned&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AXILSB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AXILSB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// Half word&lt;/span&gt;
	&lt;span class=&quot;mb&quot;&gt;2'b10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w_misaligned&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AXILSB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AXILSB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// Bytes are always aligned&lt;/span&gt;
	&lt;span class=&quot;mb&quot;&gt;2'b11&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w_misaligned&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1'b0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;endcase&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now, if this flag is ever true, we’ll skip issuing the request and instead
return a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;error&lt;/a&gt;
to the CPU.  (We’ll get to that in a moment.)&lt;/p&gt;

&lt;p&gt;That’s what it takes to make a request of the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The next request is to handle the return from the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;.
and to forward it to the CPU.&lt;/p&gt;

&lt;p&gt;The first part of any return to the CPU is returning a value.  We’ll have a
value to return if and when &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RVALID&lt;/code&gt; is true.  We’ll take a clock cycle
to set this &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;o_valid&lt;/code&gt; flag, so as to allow us a clock cycle to shift &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RDATA&lt;/code&gt;
to the right value.&lt;/p&gt;

&lt;p&gt;For now, notice that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;o_valid&lt;/code&gt; needs to be kept clear following a reset of
any type.  Further, it needs to be kept clear if we are flushing responses
as part of a CPU reset separate from an AXI bus reset.  Finally, we’ll set
the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;o_valid&lt;/code&gt; flag on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RVALID&lt;/code&gt; as long as the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
didn’t return an &lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;error&lt;/a&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_cpu_reset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r_flushing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_valid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1'b0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_valid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M_AXI_RVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_RRESP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We now turn our attention to the CPU
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;error&lt;/a&gt; flag.  In general, a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;error&lt;/a&gt;
will be returned when either &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BVALID&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RVALID&lt;/code&gt; and the response is an
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;error&lt;/a&gt;.  We’ll also return a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;error&lt;/a&gt;
on any request to send something misaligned to the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;.  The exceptions,
however, are important.  If the CPU is reset, we don’t want to return an
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;error&lt;/a&gt;,
nor if we are waiting for that reset to complete.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;o_err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1'b0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_cpu_reset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r_flushing&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o_err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1'b0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_stb&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w_misaligned&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1'b1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_BVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M_AXI_BRESP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_RVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M_AXI_RRESP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We’ll also need to return some busy flags.  This core is busy if ever
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;M_AXI_BREADY&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;M_AXI_RREADY&lt;/code&gt; are true.  We’ll also set our
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;o_pipe_stalled&lt;/code&gt; flag to be equivalent to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;o_busy&lt;/code&gt; for this simple controller,
but that setting will be external to this logic.  Similarly, the CPU can
expect a response if &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;M_AXI_RREADY&lt;/code&gt; is true and we aren’t flushing the result.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_busy&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M_AXI_BREADY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M_AXI_RREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// also pipe_stalled&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_rdbusy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M_AXI_RREADY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r_flushing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;When returning a result to the CPU, we need to tell the CPU which register
to write the read result into.  Since this simple memory controller only
ever issues a single read or write request of the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;,
we can choose to simply capture the register on any new request and know that
there will never be any other register to return.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_stb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_wreg&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_oreg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;That leaves us only one more signal to return to the CPU, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;o_result&lt;/code&gt; from
a data read.  There are two parts to returning this value.  The first part
is that we’ll need to shift the value back down from (wherever) it is placed
in the return
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;,
word.  This was why we kept the subword address bits in our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;r_op&lt;/code&gt; register.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;c1&quot;&gt;// o_result&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_RVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M_AXI_RDATA&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r_op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AXILSB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We also kept the size of our operation in the upper bits of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;r_op&lt;/code&gt;.  We can
use these now to zero extend octets and half words into 32-bits.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;casez&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r_op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AXILSB&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
		&lt;span class=&quot;mb&quot;&gt;2'b10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o_result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;31&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;mb&quot;&gt;2'b11&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o_result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;31&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;nl&quot;&gt;default:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;endcase&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Some CPU’s sign extend sub word values on reading.  Not the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;.  The
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
zero extends subword values to full words on any read.  This behavior,
however, is &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/c8c2f9aa68c07bbd33276d3e198290bf9335ef4f/rtl/core/axilops.v#L706-L723&quot;&gt;easy enough to adjust if you want a different
behavior&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There you go, &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/zipcore/rtl/core/axilops.v&quot;&gt;a basic AXI-lite based CPU memory
controller&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;handling-misaligned-requests&quot;&gt;Handling Misaligned Requests&lt;/h3&gt;

&lt;p&gt;Perhaps I should have been satisfied with that first draft of &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/zipcore/rtl/core/axilops.v&quot;&gt;a basic memory
controller&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I wasn’t.&lt;/p&gt;

&lt;p&gt;The draft controller will return a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;error&lt;/a&gt;
response to the CPU if you ever try to write a misaligned word to the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;.  Try, for example, to
write a 32-bit word to address three.  The operation will fail with a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;error&lt;/a&gt;.  This was by design.
Why?  Because otherwise you’d then need to write across multiple words.&lt;/p&gt;

&lt;p&gt;Well, why can’t we build a controller that will read or write across multiple
words when requested?  Such a controller could handle misaligned requests.&lt;/p&gt;

&lt;p&gt;So, let’s start again, using the design template above, and see if we can
adjust this controller to handle misaligned requests.&lt;/p&gt;

&lt;p&gt;The first thing we are going to need are some flags to capture a bit of
state.  Let’s try these:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;misaligned_aw_request&lt;/code&gt;: This is the first request of two &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AW*&lt;/code&gt; requests,
as a result of a misaligned write.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;misaligned_request&lt;/code&gt;: This is the first request of either two &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;W*&lt;/code&gt; requests,
or two &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AR*&lt;/code&gt; requests.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;misaligned_response_pending&lt;/code&gt;: Two responses are expected.  As a result, if
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;misaligned_response_pending&lt;/code&gt; is ever true, then we still expect either
two &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BVALID&lt;/code&gt; returns or two &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RVALID&lt;/code&gt; returns.  (One might be present on this
clock cycle.)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;misaligned_read&lt;/code&gt;: This signal is very similar to
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;misaligned_response_pending&lt;/code&gt;, except that it isn’t cleared on the first
read response.  It’s used at the end to let us know that two read results
need to be merged together into one before returning them to the CPU.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pending_err&lt;/code&gt;: Of our two responses, the first has returned an error.  Since
it is only the first of two, we haven’t returned the error response to the
CPU yet.  Hence, if &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pending_err&lt;/code&gt;, then we need to return a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;error&lt;/a&gt;
to the CPU on the next bus return–regardless of what status response is
returned with it.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We can now go back to the top and re-look at our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;xVALID&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;xREADY&lt;/code&gt;
handshaking request flags again.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;M_AXI_AWVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1'b0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;M_AXI_WVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1'b0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;M_AXI_ARVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1'b0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;M_AXI_BREADY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1'b0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;M_AXI_RREADY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1'b0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARESETN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;M_AXI_AWVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1'b0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;M_AXI_WVALID&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1'b0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;M_AXI_ARVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1'b0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;M_AXI_BREADY&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1'b0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;M_AXI_RREADY&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1'b0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The big difference here is in how we handle a return.  If a misaligned request
is outstanding, then you don’t want to drop &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;xVALID&lt;/code&gt; on the first cycle–you
will want to wait for the second return.  The same applies to waiting for two
responses.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_BREADY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M_AXI_RREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Something is outstanding&lt;/span&gt;

		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_AWREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;M_AXI_AWVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M_AXI_AWVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;misaligned_aw_request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_WREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;M_AXI_WVALID&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M_AXI_WVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;misaligned_request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_ARREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;M_AXI_ARVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M_AXI_ARVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;misaligned_request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_BVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M_AXI_RVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;misaligned_response_pending&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;M_AXI_BREADY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1'b0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;M_AXI_RREADY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1'b0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;That’s the big change there.  The logic required to start a memory operation
won’t change.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// New memory operation&lt;/span&gt;

		&lt;span class=&quot;c1&quot;&gt;// Initiate a request&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;M_AXI_AWVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;i_op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// Write request&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;M_AXI_WVALID&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;i_op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// Write request&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;M_AXI_ARVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// Read request&lt;/span&gt;

		&lt;span class=&quot;c1&quot;&gt;// Set BREADY or RREADY to accept the response.  These will&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// remain ready until the response is returned.&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;M_AXI_BREADY&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;i_op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;M_AXI_RREADY&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_cpu_reset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o_err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_stb&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w_misalignment_err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;M_AXI_AWVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;M_AXI_WVALID&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;M_AXI_ARVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

			&lt;span class=&quot;n&quot;&gt;M_AXI_BREADY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;M_AXI_RREADY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;r_flushing&lt;/code&gt; signal, indicating that shouldn’t forward results to the
CPU is a little more complex.  The big difference here is if a misaligned
response is pending.  In that case, we don’t want to clear our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;r_flushing&lt;/code&gt;
signal on a return, but rather on the next return.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;r_flushing&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1'b0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARESETN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// If everything is reset, then we don't need to worry about&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// or wait for any pending returns--they'll be canceled by the&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// global reset.&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;r_flushing&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1'b0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_BREADY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M_AXI_RREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_cpu_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;// If only the CPU is reset, however, we have a problem.&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;// The bus hasn't been reset, and so it is still active.&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;// We can't respond to any new requests from the CPU&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;// until we flush any transactions that are currently&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;// active.&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;r_flushing&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1'b1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_BVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M_AXI_RVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;// A request just came back, therefore we can clear&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;// r_flushing&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;r_flushing&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1'b0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;misaligned_response_pending&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;// ... unless we're in the middle of a misaligned&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;// request.  In that case, there will be a second&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;// return that we still need to wait for.  This request,&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;// though, will clear misaligned_response_pending.&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;r_flushing&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r_flushing&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_cpu_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// If nothing is active, we don't care about the CPU reset.&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// Flushing just stays at zero.&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;r_flushing&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1'b0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Address handling gets just a touch more complicated as well.  In this case,
any time an address is accepted we’ll increment it to the next word address.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;M_AXI_AWADDR&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARESETN&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OPT_LOWPOWER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;M_AXI_AWADDR&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_BREADY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_RREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Initial address&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;M_AXI_AWADDR&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_AWVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M_AXI_AWREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_ARVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M_AXI_ARREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Subsequent addresses&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;M_AXI_AWADDR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C_AXI_ADDR_WIDTH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AXILSB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M_AXI_AWADDR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C_AXI_ADDR_WIDTH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AXILSB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;c1&quot;&gt;// All subsequent addresses shall be aligned per spec&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;M_AXI_AWADDR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AXILSB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;There’s a couple things to remember here.  First, when handling a misaligned
request, we must always move to the next word—that’s what a misaligned request
is.  Second, the low address bits should be zero.  This will be appropriate for
little endian systems.  It’s not necessarily appropriate for big endian
systems like the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;,
but at least it won’t hurt.&lt;/p&gt;

&lt;p&gt;The next trick is the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;M_AXI_WDATA&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;M_AXI_WSTRB&lt;/code&gt; values indicating which
bytes to write to and the values to be written to them.  The trick to making
this work is to map the request onto two separate
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
words.  Once mapped to two words, we can then send the result to those words
one at a time.&lt;/p&gt;

&lt;p&gt;We’ll add one intermediate step here, though, which is to create the
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;M_AXI_WSTRB&lt;/code&gt;
value combinatorially first.  This just simplifies writing the logic out,
but not much more.  Note that we are again shifting a set of ones up by
the address in the low order bits of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;i_addr&lt;/code&gt;–just like we did before, only
this time onto two words worth of byte enables instead of just one.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;shifted_wstrb_word&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mb&quot;&gt;1'b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
						&lt;span class=&quot;mb&quot;&gt;4'b1111&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AXILSB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;shifted_wstrb_halfword&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mb&quot;&gt;1'b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
						&lt;span class=&quot;mb&quot;&gt;4'b0011&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AXILSB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;shifted_wstrb_byte&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mb&quot;&gt;1'b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
						&lt;span class=&quot;mb&quot;&gt;4'b0001&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AXILSB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The next change is that we’ll add two new registers: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;next_wdata&lt;/code&gt; and
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;next_wstrb&lt;/code&gt;.  These will hold the &lt;em&gt;next&lt;/em&gt; values of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;M_AXI_WDATA&lt;/code&gt; and
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;M_AXI_WSTRB&lt;/code&gt;–the values we’ll use for them on the second clock cycle
of any misaligned request.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;axi_wdata&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;axi_wstrb&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;next_wdata&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;next_wstrb&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OPT_LOWPOWER&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARESETN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;axi_wdata&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;axi_wstrb&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;n&quot;&gt;next_wdata&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;next_wstrb&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;n&quot;&gt;r_op&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Here’s the first of the key steps with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;next_wdata&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;next_wstrb&lt;/code&gt;: their
logic is identical to the logic we used before, save that they are applied
across two bus words.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_stb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;casez&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
		&lt;span class=&quot;mb&quot;&gt;2'b10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;next_wdata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axi_wdata&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C_AXI_DATA_WIDTH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mb&quot;&gt;1'b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
			    &lt;span class=&quot;n&quot;&gt;i_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AXILSB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
		&lt;span class=&quot;mb&quot;&gt;2'b11&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;next_wdata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axi_wdata&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C_AXI_DATA_WIDTH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mb&quot;&gt;1'b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
			    &lt;span class=&quot;n&quot;&gt;i_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AXILSB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
		&lt;span class=&quot;nl&quot;&gt;default:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;next_wdata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axi_wdata&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C_AXI_DATA_WIDTH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mb&quot;&gt;1'b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
			    &lt;span class=&quot;n&quot;&gt;i_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AXILSB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;endcase&lt;/span&gt;

		&lt;span class=&quot;c1&quot;&gt;// next_wstrb, axi_wstrb&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;casez&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
		&lt;span class=&quot;mb&quot;&gt;2'b0?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;next_wstrb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axi_wstrb&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;swapped_wstrb_word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;mb&quot;&gt;2'b10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;next_wstrb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axi_wstrb&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;swapped_wstrb_halfword&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;mb&quot;&gt;2'b11&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;next_wstrb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axi_wstrb&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;swapped_wstrb_byte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;endcase&lt;/span&gt;

		&lt;span class=&quot;n&quot;&gt;r_op&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AXILSB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Given that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;axi_wdata&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;axi_wstrb&lt;/code&gt; are going to map directly to
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;M_AXI_WDATA&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;M_AXI_WSTRB&lt;/code&gt;, that just leaves handling the second
write cycle.  For that, we just copy &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;next_wdata&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;axi_wdata&lt;/code&gt; as soon
as the channel isn’t stalled.  We’ll likewise do the same for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;next_wstrb&lt;/code&gt;
and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;axi_wstrb&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_WREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;axi_wdata&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;next_wdata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;axi_wstrb&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;next_wstrb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M_AXI_WSTRB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M_AXI_WDATA&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axi_wstrb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axi_wdata&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;What about detecting a misalignment?  More than that, what if we want this
core to either generate a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;error&lt;/a&gt; as before on misalignment,
or to issue multiple requests?&lt;/p&gt;

&lt;p&gt;To handle both capabilities, we’ll create an single bit &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OPT_ALIGNMENT_ERR&lt;/code&gt;
parameter.  If this bit is set, misaligned requests will generate
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;error&lt;/a&gt;s.  If not, misaligned
requests will be allowed to take place.&lt;/p&gt;

&lt;p&gt;We’ll also split our misalignment signal into two.  The first signal,
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;w_misaligned&lt;/code&gt;, will simply indicate a misaligned request.  The second
signal, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;w_misaligned_err&lt;/code&gt;, will indicate that we want this misaligned
request to turn into a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;error&lt;/a&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;casez&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// Full word&lt;/span&gt;
	&lt;span class=&quot;mb&quot;&gt;2'b0?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w_misaligned&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AXILSB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AXILSB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// Half word&lt;/span&gt;
	&lt;span class=&quot;mb&quot;&gt;2'b10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w_misaligned&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AXILSB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AXILSB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// Bytes are always aligned&lt;/span&gt;
	&lt;span class=&quot;mb&quot;&gt;2'b11&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w_misaligned&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1'b0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;endcase&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;w_misalignment_err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OPT_ALIGNMENT_ERR&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w_misaligned&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The next big component will be handling our new misalignment signals.
Obviously, if we are just generating errors on any misaligned request, then
we won’t need these signals and they can be kept at zero.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;generate&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OPT_ALIGNMENT_ERR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;

		&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;misaligned_request&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1'b0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;misaligned_aw_request&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1'b0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;misaligned_response_pending&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1'b0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;misaligned_read&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1'b0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;pending_err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1'b0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This will allow the optimizer to simplify our logic when we just adjust the
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OPT_ALIGNMENT_ERR&lt;/code&gt; parameter.&lt;/p&gt;

&lt;p&gt;On the other hand, if we are generating misaligned requests, then we’ll need
to define these signals.  The first indicates that this is a misaligned
request, and a second &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;W*&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AR*&lt;/code&gt; operation is required.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;kt&quot;&gt;reg&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;r_misaligned_request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r_misaligned_aw_request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;r_misaligned_response_pending&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r_misaligned_read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;r_pending_err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;r_misaligned_request&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARESETN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;r_misaligned_request&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_stb&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_cpu_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;r_misaligned_request&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w_misaligned&lt;/span&gt;
						&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w_misalignment_err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_WVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M_AXI_WREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
					&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_ARVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M_AXI_ARREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;r_misaligned_request&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1'b0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;misaligned_request&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r_misaligned_request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Since the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AW*&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;W*&lt;/code&gt; channels need to be handled independently, we need
a separate signal to handle the second request on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AW*&lt;/code&gt; channel.  This
signal is almost identical to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;misaligned_request&lt;/code&gt; above, save that it is
cleared on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AWREADY&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;r_misaligned_aw_request&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARESETN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;r_misaligned_aw_request&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_stb&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_cpu_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;r_misaligned_aw_request&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w_misaligned&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
					&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w_misalignment_err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_AWREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;r_misaligned_aw_request&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1'b0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;misaligned_aw_request&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r_misaligned_aw_request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Knowing if a response will be the first of two expected is the purpose of
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;misaligned_response_pending&lt;/code&gt;.  It’s set much the same as the other two.
The big difference in this signal is that it is cleared on either &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;M_AXI_BVALID&lt;/code&gt;
or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;M_AXI_RVALID&lt;/code&gt;–the first return of the misaligned response.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;r_misaligned_response_pending&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARESETN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;r_misaligned_response_pending&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_stb&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_cpu_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;r_misaligned_response_pending&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w_misaligned&lt;/span&gt;
						&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w_misalignment_err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_BVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M_AXI_RVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;r_misaligned_response_pending&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1'b0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;misaligned_response_pending&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r_misaligned_response_pending&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The next signal, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;misaligned_read&lt;/code&gt;, simply tells us we will need to reconstruct
the read response from two separate read values before returning it to the
CPU.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;r_misaligned_read&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARESETN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;r_misaligned_read&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_stb&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_cpu_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;r_misaligned_read&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w_misaligned&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
						&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w_misalignment_err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;misaligned_read&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r_misaligned_read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Finally, our last misalignment signal is the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pending_err&lt;/code&gt; signal.  This signal
gets set on any write or read error, and then cleared when that error is
returned to the CPU.  Once set, we’ll clear it any time the interface
clears.  This guarantees that we’ll be clear following any request or response
to the CPU as well.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;r_pending_err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1'b0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_cpu_reset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_BREADY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_RREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r_flushing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;r_pending_err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1'b0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_BVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M_AXI_BRESP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_RVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M_AXI_RRESP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;r_pending_err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1'b1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;pending_err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r_pending_err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;endgenerate&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The next several signals have only minor modifications.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;o_valid&lt;/code&gt; signal, indicating a valid read return to the CPU, needs to be
adjusted so that it waits for the second return of any misaligned response.
Similarly, we don’t return &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;o_valid&lt;/code&gt; if either the current or past response,
in the case of a pair of responses, indicates a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;error&lt;/a&gt;.
In those cases, we’ll set &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;o_err&lt;/code&gt; next.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;o_valid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1'b0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_cpu_reset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r_flushing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_valid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1'b0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_valid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M_AXI_RVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_RRESP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pending_err&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;misaligned_response_pending&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The error return is also quite similar.  There are only a few differences.
The first is that we don’t want to return an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;o_err&lt;/code&gt; response if there’s still
a response pending.  The second difference is that we’ll also return an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;o_err&lt;/code&gt;
response if the prior response indicated a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;error&lt;/a&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;o_err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1'b0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_cpu_reset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r_flushing&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o_err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1'b0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_stb&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w_misalignment_err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1'b1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_BVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M_AXI_RVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;misaligned_response_pending&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_BVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M_AXI_BRESP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_RVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M_AXI_RRESP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pending_err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1'b0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Our busy signal returns to the CPU don’t change.  Those are the same as before,
as is the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;o_wreg&lt;/code&gt; register.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_busy&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M_AXI_BREADY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M_AXI_RREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// also pipe_stalled&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_rdbusy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M_AXI_RREADY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r_flushing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_stb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_wreg&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_oreg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;That leaves one complicated piece left of this–reconstructing the read
return.  This is sort of the reverse of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;next_wdata, axi_wdata&lt;/code&gt; from above,
save that this time we are using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;M_AXI_RDATA, last_result&lt;/code&gt;.  Note the
reverse ordering–the first value is always going to be on the right in a
little endian bus.&lt;/p&gt;

&lt;p&gt;The first step is to construct the two-word wide return, and then to shift
it appropriately so the desired data starts at the bottom byte.  We handle
this with a separate logic block so that we don’t get lint errors when
shifting from a value of one size to another.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;misaligned_read&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OPT_ALIGNMENT_ERR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;pre_result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M_AXI_RDATA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;last_result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
					&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r_op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AXILSB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;pre_result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;32'h0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M_AXI_RDATA&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
						&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r_op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AXILSB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now that we have this pre-result, we can construct our final value.
First, on any read return we copy the return to our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;last_result&lt;/code&gt; register–in
case this is a misaligned return.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_RVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;last_result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;endian_swapped_rdata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OPT_ALIGNMENT_ERR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;last_result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The next step is to turn this &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pre_result&lt;/code&gt; value into the value we return
to the CPU.  If this is a half-word or octet request, we’ll zero the upper
bits as well.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;n&quot;&gt;o_result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pre_result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;c1&quot;&gt;// Fill unused return bits with zeros&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;casez&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r_op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AXILSB&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
		&lt;span class=&quot;mb&quot;&gt;2'b10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o_result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;31&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;mb&quot;&gt;2'b11&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o_result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;31&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;nl&quot;&gt;default:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;endcase&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In many ways, this second pass at this design illustrates the way most of my
development has taken place recently.  I’ll often draft a simple version of
a design, and then slowly layer on top of it more and more complicated
functionality until it’s everything I want.&lt;/p&gt;

&lt;p&gt;In hindsight, the misalignment processing wasn’t nearly as complicated as I
was fearing.  I know, I tend to dread handling misaligned requests.  However,
it never seems to be that hard when I actually get down to building it.
Once you adjust the signaling to handle two requests, the remaining process
is fairly basic: place the data into a two word shift register and shift
it as appropriate, then deal with each half of that register.&lt;/p&gt;

&lt;p&gt;If you look over &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/zipcore/rtl/core/axilops.v&quot;&gt;the design for this memory
controller&lt;/a&gt;,
you might notice other options as well.  For example, there’s an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OPT_LOWPOWER&lt;/code&gt;
option that will force all unused signals to zero.  There’s a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OPT_SIGN_EXTEND&lt;/code&gt;
option to sign extend the return data.  We’ve already mentioned the
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OPT_ALIGNMENT_ERR&lt;/code&gt; option.  Finally, there are some experimental
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SWAP_ENDIANNESS&lt;/code&gt; options that I’m still working with–as part of hoping that
I can somehow keep a big endian CPU running on a little endian bus without
massive changes.  (I’m not convinced any of these endianness parameters,
either the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SWAP_ENDIANNESS&lt;/code&gt; or the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SWAP_WSTRB&lt;/code&gt; options, will work–they’re
still part of my ongoing development.)&lt;/p&gt;

&lt;h2 id=&quot;formal-verification&quot;&gt;Formal Verification&lt;/h2&gt;

&lt;p&gt;At this point in my design, I’ve only formally verified &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/zipcore/rtl/core/axilops.v&quot;&gt;this memory
controller&lt;/a&gt;.
I haven’t yet simulated it.  Yes, I’m expecting some problems when I get
to simulation, but, hey, one step at a time, right?&lt;/p&gt;

&lt;p&gt;Let’s now take some time, though, to look over some of the major parts of that
proof.  These include the AXI-lite interface properties, the CPU interface
properties, and some cover checks to make sure the design works.  This follows
from &lt;a href=&quot;/formal/2020/06/12/four-keys.html&quot;&gt;what I’ve learned from previous experiences about what works for verifying
a design&lt;/a&gt;.  Perhaps it
will work the first time I try it in simulation.  We’ll see.  (I’m still not
convinced the big-endian CPU will work with this little-endian controller,
formal proof or not … but we’ll see.)&lt;/p&gt;

&lt;h3 id=&quot;axi-lite-interface&quot;&gt;AXI-lite interface&lt;/h3&gt;

&lt;p&gt;Two years ago, &lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;I posted a set of interface properties for working with
AXI-lite&lt;/a&gt;.  At the time,
I was very excited about these properties.  By capturing &lt;a href=&quot;htpps://github.com/ZipCPU/wb2axip/blob/master/bench/formal/faxil_slave.v&quot;&gt;all the requirements
of an AXI-lite interface into a set of formal properties&lt;/a&gt;,
I could simplify any future verification problems.  I predicted
&lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;AXI-lite&lt;/a&gt;
designs would become easy to build as a result.&lt;/p&gt;

&lt;p&gt;I haven’t been disappointed.  While I’ve made small adjustments to &lt;a href=&quot;htpps://github.com/ZipCPU/wb2axip/blob/master/bench/formal/faxil_slave.v&quot;&gt;those
properties&lt;/a&gt;
since that time, they’ve seen me through a lot.  Using them, I’ve been able
to very quickly check designs posted on Xilinx’s forums.  The check tends to
take about a half hour or so.  Even better, it’s pretty conclusive.&lt;/p&gt;

&lt;p&gt;So how hard is it?  There are only a couple steps.  First, on any new
design, I start by instantiating my &lt;a href=&quot;htpps://github.com/ZipCPU/wb2axip/blob/master/bench/formal/faxil_master.v&quot;&gt;AXI-lite master property set into the
design&lt;/a&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;n&quot;&gt;faxil_master&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;#(&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C_AXI_DATA_WIDTH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C_AXI_DATA_WIDTH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C_AXI_ADDR_WIDTH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C_AXI_ADDR_WIDTH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F_OPT_ASSUME_RESET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mb&quot;&gt;1'b1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F_LGDEPTH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F_LGDEPTH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;faxil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_reset_n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARESETN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;//&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_awready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_AWREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_awaddr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M_AXI_AWADDR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_awcache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;4'h0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_awprot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M_AXI_AWPROT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_awvalid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_AWVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;//&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_wready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_WREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_wdata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M_AXI_WDATA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_wstrb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M_AXI_WSTRB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_wvalid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_WVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;//&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_bresp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M_AXI_BRESP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_bvalid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_BVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_bready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_BREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;//&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_arready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_ARREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_araddr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M_AXI_ARADDR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_arcache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;4'h0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_arprot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M_AXI_ARPROT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_arvalid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_ARVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;//&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_rresp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M_AXI_RRESP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_rvalid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_RVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_rdata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M_AXI_RDATA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_rready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_RREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;//&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_axi_rd_outstanding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;faxil_rd_outstanding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_axi_wr_outstanding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;faxil_wr_outstanding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_axi_awr_outstanding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;faxil_awr_outstanding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I’ll then create a &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/zipcore/bench/formal/axilops.sby&quot;&gt;SymbiYosys script
file&lt;/a&gt;.
These files are pretty basic, enough so that I now have a script to handle
generating just about all but three lines of the file.  At this point, I’ll
run the design and often find any bugs.&lt;/p&gt;

&lt;p&gt;This design is almost that simple.  In this case, I also need to incorporate
a &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/zipcore/bench/formal/fmem.v&quot;&gt;CPU interface property
file&lt;/a&gt; as
well, but we’ll get to that part in the next section.&lt;/p&gt;

&lt;p&gt;At this point, SymbiYosys will either return a bug in 20 clock cycles in about
5 seconds, or there will likely not be a bug in the design at all.  Sometimes
I’ll just run it for 40-50 cycles if I’m not sure–or longer, depending on my
patience level.&lt;/p&gt;

&lt;p&gt;Once I get that far, most of the bugs in the design are gone.&lt;/p&gt;

&lt;p&gt;Perhaps I’m a bit of a perfectionist, but this is rarely enough for me.
I like to go further and verify these same properties for all time via
&lt;a href=&quot;/blog/2018/03/10/induction-exercise.html&quot;&gt;induction&lt;/a&gt;.
This, to me, is just a &lt;a href=&quot;/formal/2020/06/12/four-keys.html&quot;&gt;part of being
complete&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So let’s spend some time working through some properties we might use to
guarantee that this design passes an
&lt;a href=&quot;/blog/2018/03/10/induction-exercise.html&quot;&gt;induction&lt;/a&gt; check.&lt;/p&gt;

&lt;p&gt;In the case of the AXI-lite bus, this primarily consists of constraining the
three counters: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;faxil_awr_outstanding&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;faxil_wr_outstanding&lt;/code&gt;, and
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;faxil_rd_outstanding&lt;/code&gt;.  We’ll go a bit farther here, and constrain some of our
internal signals as well.&lt;/p&gt;

&lt;p&gt;For example, if we are ever in a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;misaligned_request&lt;/code&gt;, then either &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WVALID&lt;/code&gt;
or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ARVALID&lt;/code&gt; should be set since this is our signal that we are in the first
of two request cycles.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;misaligned_request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_WVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M_AXI_ARVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Similarly, if &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;misaligned_aw_request&lt;/code&gt; is ever true, then we are in the first
of two &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AWVALID&lt;/code&gt; cycles.  That means &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;M_AXI_AWVALID&lt;/code&gt; had better be true.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;misaligned_aw_request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_AWVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If no misaligned responses are pending, then we should be able to at least
limit the number of outstanding items.  If any of the request lines, whether
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;M_AXI_AWVALID&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;M_AXI_WVALID&lt;/code&gt;, or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;M_AXI_ARVALID&lt;/code&gt; are true, then, since
there’s no misaligned responses pending, there must be nothing outstanding.
In all other cases, with no misaligned responses pending the number of
outstanding items must be less than one.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;misaligned_response_pending&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;faxil_awr_outstanding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_AWVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;faxil_wr_outstanding&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_WVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;faxil_rd_outstanding&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_ARVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Inequality constraints like this aren’t usually very effective, but they’re
often where I’ll start a proof.  Over time, I usually turn these inequalities
into exact descriptions–although I didn’t do so for &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/zipcore/rtl/core/axilops.v&quot;&gt;this
design&lt;/a&gt;.
Indeed, this particular proof is unusual in that the
inequalities above are still important parts of my proof.  (If I remove them,
the proof fails …)&lt;/p&gt;

&lt;p&gt;Of course, if there are no misaligned responses pending, then there can’t be
any misaligned requests.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;			&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;misaligned_request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;misaligned_aw_request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;On the other hand, if a misaligned response is pending, and we are in a read
cycle, then the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;misaligned_read&lt;/code&gt; signal should be true.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_RREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;misaligned_read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now let’s turn our attention to flags specific to read cycles.&lt;/p&gt;

&lt;p&gt;For example, if we aren’t in a read cycle then &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ARVALID&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;misaligned_read&lt;/code&gt;,
and the number of outstanding read requests should all be zero.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_RREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_ARVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;faxil_rd_outstanding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;misaligned_read&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1'b0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;On the other hand, if this is a read request then this can only be a misaligned
request if nothing else is outstanding.  After that, we do our best come up
with the correct read count.  (It’s still an inequality, but it’s enough …)&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;misaligned_request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;faxil_rd_outstanding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;faxil_rd_outstanding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;misaligned_read&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Let’s now turn our attention to write signals.  If we aren’t in the middle of
a write cycle, then the write signals should all be zero.  There should be
no writes outstanding, nor any being requested.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_BREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_AWVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_WVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;faxil_awr_outstanding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;faxil_wr_outstanding&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;On the other hand, if we are within a write cycle, then what conclusions can
we draw?  If we are still within a request, then the number of outstanding
items must be zero.  Likewise, we will only ever have at most two requests
outstanding at a time.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;misaligned_request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;faxil_wr_outstanding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;misaligned_aw_request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;faxil_awr_outstanding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;faxil_awr_outstanding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;faxil_wr_outstanding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;But once I got this far, I punted.
I just wasn’t certain how to constrain the write counters.
So, I fell back on an old trick I’ve come across: the case statement.  Using a
case statement, I can often work my way through all the possibilities of
something.  A case statement also forces me to think about each of the
possibilities of something happening individual.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;			&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;misaligned_request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
					&lt;span class=&quot;n&quot;&gt;misaligned_aw_request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
					&lt;span class=&quot;n&quot;&gt;misaligned_response_pending&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;mb&quot;&gt;3'b000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;faxil_awr_outstanding&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_BREADY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;faxil_wr_outstanding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_BREADY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
			&lt;span class=&quot;mb&quot;&gt;3'b001&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;faxil_awr_outstanding&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_AWVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;faxil_wr_outstanding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_WVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
			&lt;span class=&quot;mb&quot;&gt;3'b010&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
			&lt;span class=&quot;mb&quot;&gt;3'b011&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;faxil_wr_outstanding&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_WVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;faxil_awr_outstanding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_AWVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
			&lt;span class=&quot;mb&quot;&gt;3'b100&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
			&lt;span class=&quot;mb&quot;&gt;3'b101&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;faxil_awr_outstanding&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_AWVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;faxil_wr_outstanding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_WVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
			&lt;span class=&quot;mb&quot;&gt;3'b110&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
			&lt;span class=&quot;mb&quot;&gt;3'b111&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;faxil_awr_outstanding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;faxil_wr_outstanding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_AWVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_WVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
			&lt;span class=&quot;nl&quot;&gt;default:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;endcase&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;As I’ve mentioned before on this blog, don’t worry about creating too many
assertions.  If you do, the worst that will happen is that there will be a
minor performance penalty–assuming that you have valid assertions.  If you
assert something that isn’t true, the formal tool will catch it, and you’ll
be patiently corrected.  Indeed, there’s no way through creating too many
assertions to get a design to pass an assertion that isn’t so.  The problem
isn’t usually too many assertions, rather it is not having enough assertions.&lt;/p&gt;

&lt;p&gt;Moving on, and perhaps I should’ve asserted this earlier, we can either be in
a write cycle, a read cycle, or no cycle.  There should never be a time when
both &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;M_AXI_BREADY&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;M_AXI_RREADY&lt;/code&gt; are true together.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;c1&quot;&gt;// Rule: Only one of the two xREADY's may be valid, never both&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_BREADY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_RREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Let’s put a quick constraint on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;r_flushing&lt;/code&gt;: if we aren’t &lt;em&gt;busy&lt;/em&gt;, then we
shouldn’t be flushing any responses.  Since we’ve constrained &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;o_busy&lt;/code&gt;
to only ever be true if either &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;M_AXI_BREADY&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;M_AXI_RREADY&lt;/code&gt;, this also
effectively forces &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;r_flushing&lt;/code&gt; to zero if nothing is outstanding and none
of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AxVALID&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WVALID&lt;/code&gt; requests lines are active.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_busy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r_flushing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;When putting &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/zipcore/rtl/core/axilops.v&quot;&gt;this
core&lt;/a&gt;
together, I made some of the signals combinatorial.  One example is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;o_busy&lt;/code&gt;,
which is set if either &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;M_AXI_BREADY&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;M_AXI_RREADY&lt;/code&gt;
are true.  I may wish to come back later and adjust this design so that
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;o_busy&lt;/code&gt; is registered.  Indeed, this sort of task is common enough that it
forms the basis for a project I often use in my &lt;a href=&quot;/tutorial/formal.html&quot;&gt;formal
courseware&lt;/a&gt;: given a working
design, with a working set of constraints, adjust a combinatorial value so
that it is now registered, and then prove that the design still works.  In
order to support this possibility later, I’ve included the combinatorial
descriptions of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;o_busy&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;o_rdbusy&lt;/code&gt; among my formal property set.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_busy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_BREADY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M_AXI_RREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_rdbusy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_RREADY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r_flushing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In general, I like to have one or more constraints forcing every register into
their correct setting with everything else.  Here, we constrain &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pending_err&lt;/code&gt;:
If we are busy, and there’s a misaligned response pending, then we haven’t
yet gotten our first response back in return.  Therefore, if we haven’t gotten
our first of the two responses back, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pending_err&lt;/code&gt; should be zero.  It
shouldn’t get set until and unless one of our return responses comes back
in error.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_busy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;misaligned_response_pending&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pending_err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;While I have more assertions in this section of &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/zipcore/rtl/core/axilops.v&quot;&gt;the
design&lt;/a&gt;,
that’s probably enough to convince you that I’ve fully constrained the
various &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;faxil_*_outstanding&lt;/code&gt; counters to the internal state of the design.&lt;/p&gt;

&lt;p&gt;What we haven’t done yet, however, is constrain the other half of the design:
the CPU interface.  Let’s do that next.&lt;/p&gt;

&lt;h3 id=&quot;cpu-interface-1&quot;&gt;CPU Interface&lt;/h3&gt;

&lt;p&gt;One of the challenges associated with blindly attempting to formally verify
an AXI design you’ve never seen before is that many AXI designs, like this
one, are effectively bridges.  That means they have two or more interfaces to
them.  An &lt;a href=&quot;htpps://github.com/ZipCPU/wb2axip/blob/master/bench/formal/faxil_slave.v&quot;&gt;interface property
file&lt;/a&gt;
will only provide you with instant properties for one of those interfaces.
You’ll still need to constrain the other interface.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 14. Bridges require two interfaces to be constrained&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/axilops/bridge-constraints.svg&quot; alt=&quot;&quot; width=&quot;460&quot; /&gt;&amp;lt;/A&amp;gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;In the case of the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;,
there are two interfaces to memory.  The
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;, also has many memory interface
implementations split across the two categories: instruction and data.
When it comes to instruction fetching, the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;,
has a &lt;a href=&quot;/zipcpu/2017/11/18/wb-prefetch.html&quot;&gt;very simple and basic single instruction
fetch&lt;/a&gt;, as well as a &lt;a href=&quot;/zipcpu/2018/03/21/dblfetch.html&quot;&gt;two
instruction pipeline fetch&lt;/a&gt;
and an &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/pfcache.v&quot;&gt;instruction fetch and
cache&lt;/a&gt;.  In
a similar vein, the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
has three basic
data interfaces: a &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/memops.v&quot;&gt;basic single load or store
interface&lt;/a&gt;, &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/pipemem.v&quot;&gt;a
pipelined memory
controller&lt;/a&gt;, and a
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/dcache.v&quot;&gt;data cache&lt;/a&gt;.  These
three categories have served the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
well, allowing me to easily adjust the CPU to fit in smaller spaces, or to
use more logic in order to run faster in larger spaces.&lt;/p&gt;

&lt;p&gt;Those original interfaces, however, are also all
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone&lt;/a&gt; interfaces.&lt;/p&gt;

&lt;p&gt;When it came time to build an AXI interface, I stepped back to rethink
my verification approach.  The problem with each of those prior
memory controllers was that they each had their own assumptions about the
CPU within them.  When I then &lt;a href=&quot;/blog/2018/04/02/formal-cpu-bugs.html&quot;&gt;verified the
CPU&lt;/a&gt;, I switched those
assumptions to assertions, but otherwise
&lt;a href=&quot;/blog/2018/04/02/formal-cpu-bugs.html&quot;&gt;verified the CPU&lt;/a&gt;
with the memory interfaces intact within it.  The consequence of this approach
was that I needed to re-verify the CPU with every possible data interface it
might have.&lt;/p&gt;

&lt;p&gt;This seemed rather painful, so I separated the instruction and data interface
assumptions from their respective controllers into one of two property files:
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/zipcore/bench/formal/ffetch.v&quot;&gt;one for the instruction
interface&lt;/a&gt;,and &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/zipcore/bench/formal/fmem.v&quot;&gt;another for the data
interface&lt;/a&gt;.
The property files therefore describe a contract between the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/zipcore/rtl/core/zipcore.v&quot;&gt;CPU core&lt;/a&gt; and
the instruction and data interfaces.  Anything the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/zipcore/rtl/core/zipcore.v&quot;&gt;CPU core&lt;/a&gt;
needs to assume
about those interfaces gets asserted when verifying the interface, or
assumed when verifying the CPU.  By capturing this contract into one place,
verifying new interfaces has become much easier.&lt;/p&gt;

&lt;p&gt;All of the former
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone&lt;/a&gt;
memory interfaces have now been re-verified using one of these two property
sets as appropriate.&lt;/p&gt;

&lt;p&gt;Not only that, but now the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
has new AXI interfaces.  There’s an &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/zipcore/rtl/core/axilfetch.v&quot;&gt;AXI-lite
instruction fetch&lt;/a&gt;
module that can 1) handle one outstanding transaction, 2) two outstanding
instruction fetch bus transactions, or even 3) an arbitrary number of
outstanding instruction fetch transactions.  I’ve also rebuilt the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;’s &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/zipcore/rtl/core/axiicache.v&quot;&gt;prefetch and instruction
cache&lt;/a&gt;.
One neat feature about these new AXI or AXI-lite interfaces is that they are
all parameterized by
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
width.  That means that I won’t need to slow a 64-bit memory
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
down to a 32-bit width for the CPU anymore.&lt;/p&gt;

&lt;p&gt;It’s not just instruction fetch interfaces, either.  This approach has made it
easy to build data interfaces in the same way.&lt;/p&gt;

&lt;p&gt;For now, let’s take a look at how easy it is to use this new interface.&lt;/p&gt;

&lt;p&gt;The first step is to declare some signal wires to be shared between the
memory module and the interface property set.  These extra (formal verification
only) signals are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cpu_outstanding&lt;/code&gt;: A count of how many requests the CPU thinks the memory is
working on.  This count will get cleared on a CPU reset, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;i_cpu_reset&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;f_done&lt;/code&gt;: This signal is generated by the memory controller to tell the
property set that an operation has completed–whether read or write.
Normally, something like this would be part of the interface between the
memory unit and the CPU, something like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;o_valid&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;o_err&lt;/code&gt; above.
However, there’s no means in this interface to announce the completion of
a write operation other than dropping &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;o_busy&lt;/code&gt;, so &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;f_done&lt;/code&gt; takes its
place.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;f_last_reg&lt;/code&gt;: Is a copy of the last register target of any CPU load
operation.  This is important for the CPU pipeline, since there’s enough
room in the CPU pipeline to read into any register but the last one, and so
this last register needs to be tracked by the memory property set.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;f_addr_reg&lt;/code&gt;: One of the rules of pipelined memory operations is that, in
any string of ongoing operations, they all need to use the same base address
register.  This keeps the CPU from needing to keep track of which
register will be written to by the operation.  In particular, the address
register shall not be written to by any operation–save perhaps the last one.
The CPU will insure this, by never issuing a read request into the address
register unless it waits for the memory controller to finish all of its
reads first.  The property set will accept this value as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;f_areg&lt;/code&gt;–again,
it’s not part of the CPU’s interface proper, so we just assume it’s presence
here.  The CPU will actually produce such a register, since it knows what it
is, and properties of that register will be asserted there–here they are
only assumed.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;f_pc&lt;/code&gt;: This flag, returned from the memory property set, will be true if the
last read request is to read into either the program
counter or the condition codes, both of which might cause the CPU to branch.
Reads into the program counter or condition codes, if done at all, need to be
the last read in any string.  This return wire, from the property set,
helps to make sure that property is kept.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;f_gie&lt;/code&gt;: The &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
has a lot of “GIE” flags all throughout it.  “GIE” in
this case stands for “Global Interrupt Enable”.  In supervisor mode, the
“GIE” bits are clear, whereas they are set in user mode–the only mode where
the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; can be interrupted.
These are also the most significant bit in any register address–since the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; has one
register set for user mode (GIE=1) and one for supervisor mode (GIE=0).&lt;/p&gt;

    &lt;p&gt;Any string of read (or write) operations must have the same GIE bit, so this
flag captures what that bit is.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;f_read_cycle&lt;/code&gt;: This value, returned by the interface property set,
just keeps track of if we are in a read cycle vs a write cycle.  To avoid
hazards, the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; will only ever
do reads or writes–never both at the same time.  Knowing this value helps
keep track of what types of request are currently outstanding, so we can
make sure we don’t switch cycles.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;f_axi_write_cycle&lt;/code&gt;: This one won’t get used below.  It’s a new one I had
to create to support exclusive access when using AXI.&lt;/p&gt;

    &lt;p&gt;First, a brief overview of how AXI exclusive access works
when using the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;:
the CPU must first issues a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LOCK&lt;/code&gt; instruction, and then a load instruction
of some size.  This load is treated as an AXI exclusive access read, so
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;M_AXI_ARLOCK&lt;/code&gt; will be set.  If the read comes back as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OKAY&lt;/code&gt;, rather than
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EXOKAY&lt;/code&gt;, a &lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;error&lt;/a&gt; is returned to the CPU
indicating that the memory doesn’t support exclusive access.  Otherwise, an
ALU operation may (optionally) take place followed by a store instruction.  If
the store instruction fails, that is if the result is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OKAY&lt;/code&gt; rather than
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EXOKAY&lt;/code&gt; in spite of receiving the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EXOKAY&lt;/code&gt; result from the previous read
access, than the memory controller returns a read result.  (From a write
operation?  Yes!)  That read result writes into the program counter a jump
back to the original LOCK instruction to start over.&lt;/p&gt;

    &lt;p&gt;For this reason, an AXI exclusive access store instruction is the only
type of write instruction that will set &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;o_rdbusy&lt;/code&gt;.&lt;/p&gt;

    &lt;p&gt;That’s a long story, just to explain why this flag is necessary–to
explain why &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;o_rdbusy&lt;/code&gt; might be set on a store instruction, and to help
guarantee that the result (if any) will either be written to the program
counter or quietly ignored if the write was successful.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;cpu_outstanding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;reg&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;f_done&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;f_last_reg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_addr_reg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;anyseq&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;reg&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;f_areg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;f_read_cycle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_pc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_gie&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;One last step before instantiating this property set is to create the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;f_done&lt;/code&gt;
signal.  For this AXI interface, that’s pretty easy.  An operation is done
when we receive the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;M_AXI_BVALID&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;M_AXI_RVALID&lt;/code&gt; signal–with a couple
of exceptions.  We’re not done if a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;error&lt;/a&gt; will be produced.
That’s another, separate, signal.  Neither are we done if there’s a pending
error, if this is the first of two responses, or if we are flushing requests
that a recently reset CPU wouldn’t know about.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;f_done&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1'b0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARESETN&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r_flushing&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_cpu_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;f_done&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1'b0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;f_done&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_RVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_RRESP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M_AXI_BVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_BRESP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pending_err&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;misaligned_response_pending&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Still, it’s not much more complicated than anything we’ve already done.&lt;/p&gt;

&lt;p&gt;With that out of the way, we can simply instantiate the &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/zipcore/bench/formal/fmem.v&quot;&gt;formal memory property
interface&lt;/a&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;n&quot;&gt;fmem&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;fcheck&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_bus_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARESETN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_cpu_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_cpu_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_stb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_stb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_pipe_stalled&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_busy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_clear_cache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mb&quot;&gt;1'b0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_oreg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_oreg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_busy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_busy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
			&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_areg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_areg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_rdbusy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_rdbusy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_done&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_done&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wreg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_wreg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_outstanding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cpu_outstanding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_pc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_pc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_gie&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_gie&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_read_cycle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_read_cycle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_last_reg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_last_reg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_addr_reg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_addr_reg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now, with all this background out of the way, we can finally verify &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/zipcore/rtl/core/axilops.v&quot;&gt;this
memory core&lt;/a&gt;.
As I mentioned in the AXI-lite verification section above, if it weren’t
for wanting to pass
&lt;a href=&quot;/blog/2018/03/10/induction-exercise.html&quot;&gt;induction&lt;/a&gt;,
these two property sets alone might well be sufficient to verify
all but the data path through the logic.&lt;/p&gt;

&lt;p&gt;How well does it work?  Well, typically the formal tool takes less than twenty
seconds to return any bugs.  Even better, it points me directly to the
property that failed, and the exact timestep where it failed.&lt;/p&gt;

&lt;p&gt;That’s not something you’ll get from simulation.&lt;/p&gt;

&lt;p&gt;However, since I like to verify a design using
&lt;a href=&quot;/blog/2018/03/10/induction-exercise.html&quot;&gt;induction&lt;/a&gt;
as well, I’ll often want to add some more properties.&lt;/p&gt;

&lt;p&gt;Our first additional property just asserts that if we are every &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;r_flushing&lt;/code&gt;,
then the CPU should’ve have just be reset so it shouldn’t be expecting
anything more.  If we aren’t flushing, then either this design is busy, or
it is in the process of returning a result or an
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;error&lt;/a&gt; to the CPU.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r_flushing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cpu_outstanding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cpu_outstanding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_busy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_done&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o_err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;f_pc&lt;/code&gt; is ever set, then our one (and only) output must be to either
the program counter, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;o_wreg[3:0] == 4'hf&lt;/code&gt;, or the condition codes
register, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;o_wreg[3:0] == 4'he&lt;/code&gt;.  Otherwise, if &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;f_pc&lt;/code&gt; is clear, then no
reads can read into either PC or CC registers.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_pc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_wreg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;3'h7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_rdbusy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_wreg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;3'h7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If any items are outstanding, then &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;o_wreg&lt;/code&gt; must match the last register
address requested.  Hence, following a load into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;R0&lt;/code&gt;, both &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;o_wreg&lt;/code&gt; and
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;f_last_reg&lt;/code&gt; should both point to the register address of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;R0&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cpu_outstanding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_wreg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_last_reg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;As long as we are busy, the high bit of the return register must match
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;f_gie&lt;/code&gt;.  This finishes our constraints upon all of the bits of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;o_wreg&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_busy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_wreg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_gie&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;As one last property, let’s make sure &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;f_read_cycle&lt;/code&gt; matches our logic.
If &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;M_AXI_RREADY&lt;/code&gt; is true, then we should be in a read cycle–unless we
are flushing things out of our pipeline following a CPU reset.  Similarly,
if &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;M_AXI_RREADY&lt;/code&gt; is not true and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;M_AXI_BREADY&lt;/code&gt; is, then we should be in a
write cycle and so we can assert &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;!f_read_cycle&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_RREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_read_cycle&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r_flushing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_BREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_read_cycle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Notice how easy that was?  All we had to do was to tie a couple of return
wires from the &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/zipcore/bench/formal/fmem.v&quot;&gt;interface property
set&lt;/a&gt;
together to the internal state of our design, and we then have all the
properties we need.&lt;/p&gt;

&lt;h3 id=&quot;cover-properties&quot;&gt;Cover properties&lt;/h3&gt;

&lt;p&gt;As a final step in this proof, I’d like to see how well it works.  For that,
let’s just create some quick counters and count the number of returns
we receive–both for writes and then again for reads.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;kt&quot;&gt;reg&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;cvr_writes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cvr_reads&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;cvr_writes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARESETN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;cvr_writes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_BVALID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;misaligned_response_pending&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cvr_writes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;cvr_writes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cvr_writes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;cvr_reads&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARESETN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;cvr_reads&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_RVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;misaligned_response_pending&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cvr_reads&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;cvr_reads&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cvr_reads&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Once we have this count, a simple &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cover&lt;/code&gt; check can produce some very useful
and instructive traces.  Indeed, these traces will show how fast
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/zipcore/rtl/core/axilops.v&quot;&gt;this core&lt;/a&gt;
can operate at it’s fastest speed.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;cover&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cvr_writes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;cover&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cvr_reads&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The traces themselves are shown in Figs. 10 and 11 above.  They show that
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/zipcore/rtl/core/axilops.v&quot;&gt;this core&lt;/a&gt;
can only ever achieve a 33% throughput at best.&lt;/p&gt;

&lt;p&gt;No, 33% is not great.  In fact, when you put 33% in context of the rest
of any surrounding system, as we did in Fig. 13 above, it’s downright
dismal performance.  However, all designs need to start somewhere, and in
many ways this is a minimally working AXI master memory controller design.&lt;/p&gt;

&lt;h2 id=&quot;conclusions&quot;&gt;Conclusions&lt;/h2&gt;

&lt;p&gt;This is now our third article on building AXI masters.  The &lt;a href=&quot;/blog/2020/03/23/wbm2axisp.html&quot;&gt;first article
discussed AXI masters in
general&lt;/a&gt; followed by a
demonstration &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/wbm2axisp.v&quot;&gt;Wishbone to AXI
bridge&lt;/a&gt;.
The &lt;a href=&quot;/blog/2020/06/16/axiaddr-limits.html&quot;&gt;second article discussed several of the problems associated with getting
AXI bursts working properly, and why they are so
challenging&lt;/a&gt;.
This one returns to the simple AXI-lite master protocol, while also illustrating
a working CPU memory interface.&lt;/p&gt;

&lt;p&gt;As I’ve alluded to earlier, this is only the first of a set of three AXI
memory controllers for the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;:
This was the single access controller.  I’ve also built a &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/zipcore/rtl/core/axilpipe.v&quot;&gt;pipelined
controller&lt;/a&gt;
which should get much better performance.  These are both AXI-lite designs.
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/zipcore/rtl/core/axilops.v&quot;&gt;This particular
controller&lt;/a&gt;
also has an &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/zipcore/rtl/core/axiops.v&quot;&gt;AXI (full) sister
core&lt;/a&gt;,
implementing the same basic design while also supporting exclusive access.
My intent is to make a similar sister design to support pipelined access
and AXI locking as well, but I haven’t gotten that far yet.  I have gotten
far enough, though, to have ported my &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/dcache.v&quot;&gt;basic Wishbone data
cache&lt;/a&gt; to AXI.
While usable, that work isn’t quite done yet, since it doesn’t (yet) support
either pipelined memory access or locking, but it’s at least a &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/zipcore/rtl/axidcache.v&quot;&gt;data
cache implementation using
AXI&lt;/a&gt; that should
be a step in the right direction.  (Remember, I tend to design things in
layers these days …)&lt;/p&gt;

&lt;p&gt;Lord willing, I’d like to spend some time discussing AXI exclusive access
operations next.  I’ve recently modified my AXI property sets so that they
can handle verifying AXI designs with exclusive access, and I’ve also tested
the approach on an updated version of my &lt;a href=&quot;/blog/2019/05/29/demoaxi.html&quot;&gt;AXI (full) demonstration
slave&lt;/a&gt;.  Sharing those updates
will be valuable, especially since neither Xilinx’s MIG-based DDR3 memory 
controller, nor their &lt;a href=&quot;https://www.xilinx.com/support/documentation/ip_documentation/axi_bram_ctrl/v4_0/pg078-axi-bram-ctrl.pdf&quot;&gt;AXI block RAM
controller&lt;/a&gt;
appear to support exclusive access at all.  (Remember, the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; will return a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;error&lt;/a&gt; on any attempt at an exclusive
access operation on a memory that doesn’t support it, so having a supporting
memory is a minimum requirement for using this capability.) This can then be a
prelude to a companion article to this one, discussing how to modify this
controller so that it handles exclusive access requests in the future.&lt;/p&gt;

&lt;p&gt;Let me also leave you with one last haunting thought: What would happen if,
during a misaligned read operation across two words, a write took place at the
same time?  That’ll be something to think about.&lt;/p&gt;
&lt;hr /&gt;&lt;p&gt;&lt;em&gt;Whom shall he teach knowledge?  And whom shall he make to understand doctrine?  Them that are weaned from the milk, and drawn from the breasts.  For precept must be upon precept, precept upon precept; line upon line, line upon line; hear a little and there a little (Is 28:9-10)&lt;/em&gt;</description>
        <pubDate>Sat, 17 Apr 2021 00:00:00 -0400</pubDate>
        <link>https://zipcpu.com/zipcpu/2021/04/17/axilops.html</link>
        <guid isPermaLink="true">https://zipcpu.com/zipcpu/2021/04/17/axilops.html</guid>
        
        
        <category>zipcpu</category>
        
      </item>
    
      <item>
        <title>Common AXI Themes on Xilinx's Forum</title>
        <description>&lt;p&gt;Xilinx has committed their infrastructure to AXI.  Zynq’s are built around AXI3,
while most of the Vivado generated infrastructure within their FPGA
environment is now AXI4.  As we’ve examined on this forum, their training
materials will lead you to either a &lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;broken demonstration
AXI-lite slave design&lt;/a&gt;,
or a &lt;a href=&quot;/formal/2019/05/13/axifull.html&quot;&gt;broken AXI (full) slave
design&lt;/a&gt;.  Both of these
designs will hang your bus if the bugs within them are ever triggered.
As of Vivado 2020.2, these bugs have yet to be fixed.  (You can find better,
working examples of an &lt;a href=&quot;/blog/2020/03/08/easyaxil.html&quot;&gt;AXI4-lite slave design
here&lt;/a&gt;, or a &lt;a href=&quot;/blog/2019/05/29/demoaxi.html&quot;&gt;working AXI4 full
slave design here&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;AXI is also ARM’s published bus standard.   The popularity of placing a ARM
CPUs within custom SoCs has helped to make this standard ubiquitous.&lt;/p&gt;

&lt;p&gt;While I have filed bug reports in 2017 and 2018 on Xiling’s forums regarding
these broken demonstration designs, Xilinx has yet to fix their designs as of
Vivado 2020.2.
&lt;a href=&quot;https://forums.xilinx.com/t5/Simulation-and-Verification/Formally-verifying-the-functionality-of-an-AXI-lite-peripheral/m-p/924562&quot;&gt;[1]&lt;/a&gt;,
&lt;a href=&quot;https://forums.xilinx.com/t5/AXI-Infrastructure/AXI-demonstration-slave-core-has-multiple-bugs-within-it/m-p/973670&quot;&gt;[2]&lt;/a&gt;
Indeed, at this point, it’s not clear if Xilinx will ever fix their
demonstration designs.  Perhaps I shouldn’t complain–their broken designs
simply make the services I offer and sell that much more valuable.&lt;/p&gt;

&lt;p&gt;In the meantime, however, I have been browsing &lt;a href=&quot;https://forums.xilinx.com&quot;&gt;Xilinx’s
forums&lt;/a&gt; to see if I can help individuals working
struggling to get their designs to work with AXI.  My one claim to fame?  I
have now formally verified &lt;a href=&quot;https://github.com/ZipCPU/wb2axip&quot;&gt;several AXI and AXI-lite
designs&lt;/a&gt;.  From this claim alone, I hoped to
demonstrate myself qualified to comment on problems Xilinx users might have.&lt;/p&gt;

&lt;p&gt;Along the way, I’ve had mixed success.  I’ve formally verified several user
designs, and I’ve tried formally verifying several of Xilinx’s IP designs.
Sometimes I’ve been successful, and so I’ve found bugs in &lt;a href=&quot;/blog/2020/01/01/2019-in-review.html&quot;&gt;their AXI
Ethernet-lite core&lt;/a&gt;
and verified that there were no bugs in either their &lt;a href=&quot;/blog/2020/03/23/wbm2axisp.html&quot;&gt;AXI
GPIO or their AXI Block RAM
Controller&lt;/a&gt; (limited bounded
model checks only).
Neither was I able to find any bugs in their demonstration AXI or AXI-lite
masters.  (Their AXI stream master, on the other hand …)  Other designs,
however, such as their datamover, their
&lt;a href=&quot;/blog/2019/07/17/crossbar.html&quot;&gt;interconnect&lt;/a&gt;,
their Avalon to AXI bridge, their AXI
&lt;a href=&quot;/formal2020/05/16/firewall.html&quot;&gt;firewall&lt;/a&gt;, or even their
AXI timer all
depend on encrypted IP components, and so I have been unable to verify them
or comment on their internal operations and details.&lt;/p&gt;

&lt;p&gt;Still, I thought it might be worth taking some time to look at a sample of the
Xilinx forum threads I’ve contributed to which have discussed AXI.  Yes, this
sample set is biased: it’s a subset of only those posts I’ve contributed to.
Still, I’ve tried to be active in as many AXI issues as I could have, and so I
have at least convinced myself that this is a representative sampling of AXI
problems Xilinx users have come across.&lt;/p&gt;

&lt;h2 id=&quot;getting-started&quot;&gt;Getting started&lt;/h2&gt;

&lt;p&gt;The first problem beginning AXI users tend to come across is finding an easy
how-to discussion or example.
This user, for example, was &lt;a href=&quot;https://forums.xilinx.com/t5/Embedded-Development-Tools/How-to-design-a-custom-ip-axi-compatible-to-read-and-write-from/m-p/924333&quot;&gt;looking for instructions on how to design a custom
AXI master&lt;/a&gt;.
Here, &lt;a href=&quot;https://forums.xilinx.com/t5/Processor-System-Design-and-AXI/AXI-Hello-world-equivalent/m-p/1090446&quot;&gt;another user is asking for an AXI Hello world
equivalent?&lt;/a&gt;
The best answer I have to these questions is to offer &lt;a href=&quot;/blog/2020/03/08/easyaxil.html&quot;&gt;my EasyAxil
design&lt;/a&gt; as a starting point
for learning how to build an AXI-lite slave design.&lt;/p&gt;

&lt;p&gt;In general, however, Xilinx’s answer to the getting started problem is to offer
one of three basic approaches of relatively increasing complexity:&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 1. Learning Waypoints for learning AXI&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/xilinx-forums/baby-steps.svg&quot; alt=&quot;&quot; width=&quot;420&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Use &lt;a href=&quot;https://www.xilinx.com/support/documentation/ip_documentation/axi_gpio/v2_0/pg144-axi-gpio.pdf&quot;&gt;Xilinx’s AXI GPIO controller&lt;/a&gt;.
This provides an easy on-ramp for an
engineer to control digital logic by controlling wires within the design.
This approach is quite easy, and it sounds great.  It sounds great, that is,
until you start reading the various user experiences among those who have
used this approach.  &lt;a href=&quot;https://forums.xilinx.com/t5/Xilinx-Evaluation-Boards/AXI-GPIO-too-slow/td-p/725431&quot;&gt;This user, for example, measured his
GPIO toggling perfromance at 3.8MHz&lt;/a&gt;.
&lt;a href=&quot;https://forums.xilinx.com/t5/Processor-System-Design-and-AXI/Improve-IO-Performance-for-Microblaze-to-IO-register-using-AXI/m-p/1168976&quot;&gt;Another user measured a cycle time of 120ns per instruction when accessing
his AXI-lite peripheral from a 100MHz clock&lt;/a&gt;.
These are both kind of slow, given that the &lt;a href=&quot;/zipcpu/2019/02/09/cpu-blinky.html&quot;&gt;ZipCPU can toggle a GPIO at
47MHz when starting from a 100MHz clock, but that’s really another
story&lt;/a&gt;.&lt;/p&gt;

    &lt;p&gt;The bottom line here, however, is that while the approach works–it’s really
not the way to achieve high speed communication between your CPU and the
rest of your design.  CPUs just aren’t designed to toggle GPIO registers at
high speeds.  (We’ll ignore the fact that &lt;a href=&quot;https://www.xilinx.com/support/documentation/ip_documentation/axi_gpio/v2_0/pg144-axi-gpio.pdf&quot;&gt;Xilinx’s AXI GPIO
device&lt;/a&gt;
requires a minimum of four clocks per access, together with the inherent
latency in their interconnect–or even any interconnect for that matter,
and …)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Their second recommendation is that you start with &lt;a href=&quot;https://www.xilinx.com/support/documentation/ip_documentation/axi_bram_ctrl/v4_0/pg078-axi-bram-ctrl.pdf&quot;&gt;Xilinx’s AXI block RAM
controller&lt;/a&gt;,
and then connect both this controller and your design to a shared block RAM.
This will get you closer to an ability to adjust registers within a design,
but it only offers the ability to read and write a shared RAM–not to read
and write control registers within a design, which is a common usage model.
I mean, how do you tell your programming logic (PL) that new data is in the
block RAM, or that it should start processing that data?  A second problem
with this approach is that there’s no way to stall something until your
design is ready or a previous task has completed.  This could easily reduce
a CPU to polling for results that might otherwise be accomplished in a clock
or two.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The third approach is often the recommended one: &lt;a href=&quot;/formal/2019/05/13/axifull.html&quot;&gt;request Vivado create a
demonstration AXI design for
you&lt;/a&gt;, and then modify
that design to meet your needs.  This is certainly Xilinx’s recommended
approach. &lt;a href=&quot;https://forums.xilinx.com/t5/Vitis-Acceleration-SDAccel-SDSoC/Access-Custom-RAM-module-from-Zynq/m-p/1200037&quot;&gt;[1]&lt;/a&gt;,
&lt;a href=&quot;https://forums.xilinx.com/t5/Embedded-Development-Tools/IP-Core-Axi4-Axi-Lite/m-p/930618&quot;&gt;[2]&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The problem with this third approach is that &lt;a href=&quot;/formal/2019/09/06/axi-story.html&quot;&gt;Xilinx’s demonstration designs
are quite broken&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Here’s a list of links to forum posts regarding user designs that have been
broken by using (what appears to be) Xilinx’s AXI-lite slave demonstration
design:&lt;/p&gt;

    &lt;p&gt;– Reads hang: &lt;a href=&quot;https://forums.xilinx.com/t5/High-Level-Synthesis-HLS/Unable-to-access-write-read-custom-slave-AXI-peripheral-register/m-p/1014382&quot;&gt;1&lt;/a&gt;,
   &lt;a href=&quot;https://forums.xilinx.com/t5/PCIe-and-CPM/XDMA-AXI-Lite-write-works-but-read-causes-Ubuntu-16-04-to-crash/m-p/1130550&quot;&gt;2&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;– Writes hang: &lt;a href=&quot;https://forums.xilinx.com/t5/Processor-System-Design-and-AXI/AXI4-lite-Write-Channel-starts-the-next-transaction-before-the/m-p/1083247&quot;&gt;1&lt;/a&gt;,
   &lt;a href=&quot;https://forums.xilinx.com/t5/Processor-System-Design-and-AXI/Writing-bytes-on-AXI-error/m-p/1069895&quot;&gt;2&lt;/a&gt;,
   &lt;a href=&quot;https://forums.xilinx.com/t5/Embedded-Development-Tools/What-are-the-possible-reasons-of-AXI-Lite-wrintings-hang/m-p/1072286&quot;&gt;3&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;– Other unspecified: &lt;a href=&quot;https://forums.xilinx.com/t5/Processor-System-Design-and-AXI/Multidriven-AXI-Lite-registers-in-packaged-IP-Core/m-p/1151467&quot;&gt;1&lt;/a&gt;,
   &lt;a href=&quot;https://forums.xilinx.com/t5/Design-Entry/Custom-AXI-Lite-Slave-IP-causing-Microblaze-to-stall/m-p/1132152&quot;&gt;2&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;Even with these bugs, many Xilinx user’s would much rather &lt;a href=&quot;https://forums.xilinx.com/t5/Processor-System-Design-and-AXI/Testing-AXI4-Lite-Slave/m-p/1085153&quot;&gt;just blindly
trusting Xilinx’s broken designs&lt;/a&gt; based upon a
&lt;a href=&quot;https://www.logicallyfallacious.com/logicalfallacies/Appeal-to-Authority&quot;&gt;faulty appeal to authority&lt;/a&gt;.
 Much to my surprise, some individuals have even found &lt;a href=&quot;/blog/2020/03/08/easyaxil.html&quot;&gt;my easy
 example&lt;/a&gt; to be &lt;a href=&quot;https://forums.xilinx.com/t5/Xilinx-IP-Catalog/Rading-BRAM-from-custom-IP-Verilog/m-p/993133&quot;&gt;too
 complicated&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Here’s a similar list to posts about Xilinx’s demonstration AXI full slave:
&lt;a href=&quot;https://forums.xilinx.com/t5/Processor-System-Design-and-AXI/AXI-SLAVE-WREADY/m-p/1137871&quot;&gt;1&lt;/a&gt;,
&lt;a href=&quot;https://forums.xilinx.com/t5/Processor-System-Design-and-AXI/Using-AXI-FULL-accessing-ZYNQ-MPSoc-DDR-on-ZCU106-board/m-p/1174700&quot;&gt;2&lt;/a&gt;,
&lt;a href=&quot;https://forums.xilinx.com/t5/Processor-System-Design-and-AXI/BID-and-AWID-are-not-matched-in-AXI-interface/m-p/996443&quot;&gt;3&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;These actually follow a common pattern, where a user will complain of one
problem yet subsequent analysis then reveals another problem within.&lt;/p&gt;

    &lt;p&gt;Sadly, while I can often find bugs in user designs when they are posted,
a common theme is that of someone with &lt;a href=&quot;https://forums.xilinx.com/t5/Design-Methodologies-and/PL-to-AXI-reg/m-p/1079951&quot;&gt;a design bug, but where they cannot
share their AXI slave component&lt;/a&gt;.
Without any RTL to work off of, these bugs can be hard to find.&lt;/p&gt;

    &lt;p&gt;Another recent complaint was that &lt;a href=&quot;https://forums.xilinx.com/t5/Processor-System-Design-and-AXI/AXI4-full-slave-read-burst-RVALID-50/m-p/1205683&quot;&gt;Xilinx’s demo design only gets 50% read
throughput&lt;/a&gt;.
Yes, this was also one of the problems I discovered with &lt;a href=&quot;/formal/2019/05/13/axifull.html&quot;&gt;a formal
examination  of their AXI full design&lt;/a&gt;.
It’s a bit of a shame too, since AXI was supposed to be designed as a &lt;em&gt;high
performance&lt;/em&gt; bus, to find so many example designs that can’t achieve high
performance.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As always, be careful who you trust.  Not every demonstration design someone
will recommend to you works.  One poster,
&lt;a href=&quot;https://forums.xilinx.com/t5/user/viewprofilepage/user-id/128087&quot;&gt;[larshb]&lt;/a&gt;
had a design he’d used successfully for years.  When &lt;a href=&quot;https://forums.xilinx.com/t5/Embedded-Development-Tools/Unable-to-perform-AXI-handshake-with-custom-AXIS-IP/m-p/1069905&quot;&gt;he recommended it to
another&lt;/a&gt;,
I was able to run a formal proof of it and discover many of the same bugs
within it that others had complained of above.  I wouldn’t hold it against him
now, though.  My bet is the next time he makes such a recommendation he’ll
have fixed his bugs.  My worry is more about those who are still unaware that
Xilinx’s demo designs are buggy–just like
&lt;a href=&quot;https://forums.xilinx.com/t5/user/viewprofilepage/user-id/128087&quot;&gt;[larshb]&lt;/a&gt;
used to be.&lt;/p&gt;

&lt;p&gt;If you want a better design to start from, you should consider &lt;a href=&quot;/blog/2020/03/08/easyaxil.html&quot;&gt;this Easy
AXI-lite design&lt;/a&gt;, and even
the associated &lt;a href=&quot;/blog/2020/12/19/axil-register-checking.html&quot;&gt;register handling
check&lt;/a&gt;.
Alternatively, &lt;a href=&quot;https://github.com/analogdevicesinc/hdl/blob/master/library/common/up_axi.v&quot;&gt;Analog Devices posts a nice AXI-lite design&lt;/a&gt;
that I’ve seen a couple designs built from as well.  While that one works
nicely, it’s not setup within for a formal proof.  How then will you know if
any changes you make to the design break it?  (You won’t.)&lt;/p&gt;

&lt;p&gt;Either example, however, should help you get started.&lt;/p&gt;

&lt;h2 id=&quot;debugging-axi-components&quot;&gt;Debugging AXI components&lt;/h2&gt;

&lt;p&gt;A second reoccurring theme centers around how should one go about debugging
AXI components.  Of all things, debugging AXI components &lt;em&gt;should&lt;/em&gt; be easy.
There are three basic steps involved.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left; padding: 25px&quot;&gt;&lt;caption&gt;Fig 2. Steps to Verifying an AXI design&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/xilinx-forums/debug-methods.svg&quot; alt=&quot;&quot; width=&quot;320&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Formally verify your AXI component.&lt;/p&gt;

    &lt;p&gt;If you haven’t tried verifying an AXI4 design before, then you should know
that &lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;it is really easy to do for an AXI-lite
component&lt;/a&gt;: Just
instantiate &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/faxil_slave.v&quot;&gt;these AXI-lite slave
properties&lt;/a&gt;,
and then &lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;apply SymbiYosys to your
design&lt;/a&gt;.&lt;/p&gt;

    &lt;p&gt;AXI (full) designs are a bit more complicated, but I provide AXI4 properties,
examples and a bit of instruction to &lt;a href=&quot;https://patreon.com/ZipCPU&quot;&gt;my Patreon
supporters&lt;/a&gt;, so those are still quite doable as
well.&lt;/p&gt;

    &lt;p&gt;I should also point out that, of all the logic that can be formally verified,
bus logic tends to be some of the easiest to verify.  It’s also some of the
most critical logic within a design.  Consider, for example, what would
happen if a single component failed to follow the rules of the bus: the
entire design will likely lock up.  On the other hand, if that component
follows the rules of the bus but just failed to do what it was designed
to do, you might still manage to recover the rest of the design–at
least enough to use your design to debug what’s going on.  The point here is,
&lt;em&gt;getting your bus logic right is critical to debugging the application you
are really interested in&lt;/em&gt;.&lt;/p&gt;

    &lt;p&gt;While many individuals would recommend building a simulation test bench to
stimulate your brand new component in a
&lt;a href=&quot;/blog/2018/08/22/what-is-simulation.html&quot;&gt;simulation&lt;/a&gt;
environment, you should be aware that the &lt;a href=&quot;https://www.xilinx.com/products/design-tools/vivado/verification-ip.html&quot;&gt;AXI Verification IP offered by
Xilinx&lt;/a&gt;
isn’t known for triggering the bugs within their own designs–or surely they
would’ve never published them in the first place.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Once you’ve formally verified your design, the next step is to place your
component into an &lt;a href=&quot;/blog/2018/08/22/what-is-simulation.html&quot;&gt;integrated design
simulation&lt;/a&gt;,
and verify that it works together with the other components of your design.&lt;/p&gt;

    &lt;p&gt;As I mentioned above, be careful with &lt;a href=&quot;https://www.xilinx.com/products/design-tools/vivado/verification-ip.html&quot;&gt;Xilinx’s AXI Verification
IP&lt;/a&gt;.
It won’t necessarily trigger any of the bugs within their designs.  To my
knowledge, this isn’t unique to Xilinx either.  On one contract I’m working
on, with a custom AXI Verification IP, the AXI VIP has &lt;em&gt;the exact same
problem&lt;/em&gt;.  The problem itself is rooted in the fact that the bugs are often
triggered by a busy interconnect–something rarely simulated when the
design is examined in isolation.&lt;/p&gt;

    &lt;p&gt;That leads to the real difficult part of simulation: testing your design
in a sufficiently complex environment–such as with the Processing System
(PS) of the Zynq attached.  While I’ll admit that I’m still looking for a
good way to do this reasonably, I can also share that I rarely have any
problems with formally verified designs not working when integrated into
larger environments.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Connect your design to actual hardware and try it out.&lt;/p&gt;

    &lt;p&gt;This should only ever be the &lt;em&gt;third&lt;/em&gt; method you try, not the first.  Sadly,
this becomes the method many individuals end up using to debug their designs.
Given that many of the bugs listed in the previous section will hang the
entire system, and worse that &lt;a href=&quot;https://www.xilinx.com/products/design-tools/vivado/verification-ip.html&quot;&gt;Xilinx’s AXI Verification
IP&lt;/a&gt;
isn’t known for triggering these bugs in simulation, users who take this road
often find themselves struggling to figure out where their design actually
failed.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The result is that there are a lot of forum requests for help debugging
custom IPs.  See for example,
&lt;a href=&quot;https://forums.xilinx.com/t5/Implementation/AXI4-lite-register-implementation-problems/m-p/923908&quot;&gt;[1]&lt;/a&gt;,
&lt;a href=&quot;https://forums.xilinx.com/t5/Processor-System-Design-and-AXI/AXI-Counter/m-p/1030089&quot;&gt;[2]&lt;/a&gt;,
&lt;a href=&quot;https://forums.xilinx.com/t5/Processor-System-Design-and-AXI/AXI4-Lite-read-hangs-and-RREADY-is-not-deasserting-after-RVALID/m-p/1035006&quot;&gt;[3]&lt;/a&gt;,
&lt;a href=&quot;https://forums.xilinx.com/t5/Embedded-Development-Tools/Custom-AXI-peripheral-register-0-showing-fixed-data-even-without/m-p/1158158&quot;&gt;[4]&lt;/a&gt;,
&lt;a href=&quot;https://forums.xilinx.com/t5/Processor-System-Design-and-AXI/Adding-AXI-Write-wait-states/m-p/1169544&quot;&gt;[5]&lt;/a&gt;,
&lt;a href=&quot;https://forums.xilinx.com/t5/Processor-System-Design-and-AXI/Axi4-lite-slave-wrong-AWADDR-transfer/m-p/1176688&quot;&gt;[6]&lt;/a&gt;, or
&lt;a href=&quot;https://forums.xilinx.com/t5/Design-Entry/why-does-custom-axi4-ip-fail-at-2nd-write-in-simulation/m-p/1190568&quot;&gt;[7]&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Here are some forum posts from users requesting simulation help:
&lt;a href=&quot;https://forums.xilinx.com/t5/Processor-System-Design-and-AXI/How-to-debug-an-AXI4-peripheral/m-p/1202103&quot;&gt;[1]&lt;/a&gt;,
&lt;a href=&quot;https://forums.xilinx.com/t5/Processor-System-Design-and-AXI/Simulating-Custom-AXI-Slave-Peripheral/m-p/1105197&quot;&gt;[2]&lt;/a&gt;,
&lt;a href=&quot;https://forums.xilinx.com/t5/Processor-System-Design-and-AXI/Testing-AXI4-Lite-Slave/m-p/1079475&quot;&gt;[3]&lt;/a&gt;.
One person even asked about a technique dear to my heart–&lt;a href=&quot;https://forums.xilinx.com/t5/Vivado-Debug-and-Power/FPGA-Verification/m-p/1077142&quot;&gt;formal
methods&lt;/a&gt;,
although these tend to only rarely be discussed on the forum.&lt;/p&gt;

&lt;p&gt;Here’s another crazy one: in &lt;a href=&quot;https://forums.xilinx.com/t5/Simulation-and-Verification/simulating-simple-AXI4-Lite-read-amp-write-with-a-custom-IP/m-p/930345&quot;&gt;this case, the user didn’t want a full fledged
AXI test.  He believed he could perform a sufficient test in
hardware&lt;/a&gt;.
While &lt;a href=&quot;/blog/2017/06/02/design-process.html&quot;&gt;I’ll admit to having been there
before&lt;/a&gt;, the cost of
debugging in hardware is a lot of pain.  Worse, a piece of hardware might
&lt;em&gt;appear&lt;/em&gt; to work for weeks or months on end, only to have an undetected and
latent bug lying within it.  (That was my case with &lt;a href=&quot;https://github.com/ZipCPU/xulalx25soc/blob/master/rtl/wbsdram.v&quot;&gt;my own SDRAM
controller&lt;/a&gt;,
before I formally verified it.)  Finding and fixing such bugs can be even more
challenging when they don’t present themselves often.  This is not a path I
would recommend, therefore, if you can avoid it.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 3. Using a firewall to find an AXI4 bug&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/xilinx-forums/using-an-axi-firewall.svg&quot; alt=&quot;&quot; width=&quot;420&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;One piece of advice I often offer to users forced to do their debugging in
hardware is to connect an &lt;a href=&quot;/formal/2020/05/16/firewall.html&quot;&gt;AXI
firewall&lt;/a&gt; to a design.
This can be useful when trying to determine whether the fault is your own, or
Xilinx’s AXI infrastructure.  If the fault occurs with the
&lt;a href=&quot;/formal/2020/05/16/firewall.html&quot;&gt;firewall&lt;/a&gt; in place,
then the fault must lie somewhere else in your design (or you didn’t wire
it up right).  Even better, the
&lt;a href=&quot;/formal/2020/05/16/firewall.html&quot;&gt;firewall&lt;/a&gt; will provide a
fault signal which you can use to trigger an &lt;a href=&quot;/blog/2017/06/08/simple-scope.html&quot;&gt;internal logic
analyzer&lt;/a&gt; to capture
what’s going on.  The technique isn’t perfect, however, as the &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axisafety.v&quot;&gt;AXI
firewall&lt;/a&gt; I have
modifies the environment it is observing–so it is possible to pass the
&lt;a href=&quot;/formal/2020/05/16/firewall.html&quot;&gt;firewall&lt;/a&gt; test while still
having a bug within your design.  (Doh!)&lt;/p&gt;

&lt;h2 id=&quot;custom-axi-masters&quot;&gt;Custom AXI masters&lt;/h2&gt;

&lt;p&gt;The problem isn’t limited to the design of AXI slaves.  Many users have also
written in with problems debugging their custom AXI masters as well.  Examples
include: &lt;a href=&quot;https://forums.xilinx.com/t5/Simulation-and-Verification/UART-lite-IP-halts-reading-after-data-is-transmitted/m-p/1170279&quot;&gt;messing up AXI
handshaking&lt;/a&gt;,
&lt;a href=&quot;https://forums.xilinx.com/t5/Processor-System-Design-and-AXI/I-want-the-burst-length-to-be-different-in-every-Burst/m-p/1127226&quot;&gt;not knowing how to set up a master to handle arbitrary burst
lengths&lt;/a&gt;,
&lt;a href=&quot;https://forums.xilinx.com/t5/Other-FPGA-Architecture/Block-RAM-access-with-AXI-Master-Interface/m-p/1100339&quot;&gt;needing help just getting started with building an AXI master&lt;/a&gt;, and
&lt;a href=&quot;https://forums.xilinx.com/t5/Design-Entry/axi-araddr-lt-16-h0-IN-ADDR-31-24-1-IN-ADDR-15-8-1-is-ok/m-p/1095897&quot;&gt;just not handling AXI outputs per spec&lt;/a&gt;.
Beware that your problem might not just be the master at fault.  &lt;a href=&quot;https://forums.xilinx.com/t5/Processor-System-Design-and-AXI/Custom-AXI-Master-VIP-failed/m-p/981512&quot;&gt;In this
example the master was producing a wider ID field than the interconnect was
expecting&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Some of these  problems we’ve discussed on this blog, although I’ll admit to
being rather light on how to generate burst-capable AXI masters.  Still, I
have &lt;a href=&quot;/blog/2020/03/23/wbm2axisp.html&quot;&gt;posted how to build a generic AXI(lite)
master&lt;/a&gt;, and again on
&lt;a href=&quot;/blog/2020/06/16/axiaddr-limits.html&quot;&gt;the problems associated with building a burst-capable AXI
master&lt;/a&gt;.  &lt;a href=&quot;https://www.blueletterbible.org/kjv/jas/4/15&quot;&gt;If the Lord
wills&lt;/a&gt;, we may even discuss a &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/b0d4944b13ad6b3b447172dd3f9d27dc86388907/rtl/core/axilops.v&quot;&gt;new
AXI4 memory unit for the
ZipCPU&lt;/a&gt;
that I’ve been working on recently.&lt;/p&gt;

&lt;p&gt;Another common AXI problem is specifying the length of an AXI burst in AxLEN,
rather than one less than the burst’s length.  Although I have &lt;a href=&quot;https://forums.xilinx.com/t5/Processor-System-Design-and-AXI/BVALID-stays-low-in-custom-ip/m-p/1052704&quot;&gt;only one link
for this&lt;/a&gt;,
I’m still going to declare it to be a &lt;em&gt;common&lt;/em&gt; problem if for no other reason
than it’s one I’ve struggled with myself.  Not only that, this is one of the
first things I look for when attempting to debug someone else’s design: do
the number of requests match the number of responses?  For this, it helps
to have the computer help count, and so either a good AXI VIP or an
&lt;a href=&quot;/formal/2020/05/16/firewall.html&quot;&gt;AXI firewall&lt;/a&gt; can also be
useful here.&lt;/p&gt;

&lt;h2 id=&quot;out-of-protocol-designs&quot;&gt;Out-of-protocol designs&lt;/h2&gt;

&lt;p&gt;Sadly, there’s only so much you can do for the user who hasn’t done their
reading on how AXI is supposed to work.  Often these individuals can get their
design to work with the AXI VIP suite, or perhaps with one or two peripherals,
or one implementation of the AXI interconnect.  The moment their environment
changes, however, their design then breaks.  Some of these users will then
even go so far as to blame every one nearby when the failure was actually to be
found within their non-protocol compliant implementation in the first
place.&lt;/p&gt;

&lt;p&gt;As one example, the AXI4 specification is very clear that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AWVALID&lt;/code&gt; is not
allowed to wait on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WREADY&lt;/code&gt; and vice versa, and yet users will still create
designs where they expect one transaction, whether &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AW&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;W&lt;/code&gt;, to take place
before the other.
&lt;a href=&quot;https://forums.xilinx.com/t5/Processor-System-Design-and-AXI/AXI-Interconnect-awready-arready-not-going-high-on-one-SI/m-p/1090680&quot;&gt;[1]&lt;/a&gt;,
&lt;a href=&quot;https://forums.xilinx.com/t5/Memory-Interfaces-and-NoC/MIG-do-not-assert-axi-awready/m-p/1138828&quot;&gt;[2]&lt;/a&gt;,
&lt;a href=&quot;https://forums.xilinx.com/t5/Processor-System-Design-and-AXI/AXI-Intrerconnect-holds-off-WDATA-without-AWADDR/m-p/1138307&quot;&gt;[3]&lt;/a&gt;
The problem is generally compounded by the fact that few AXI slave substitutes
act like the MIG AXI slave individuals ultimately want to use.  Therefore, once
they verify their core against a generic AXI slave–perhaps even the VIP–they
often pick up a bad habit along the way.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left; padding: 25px&quot;&gt;&lt;caption&gt;Fig 4. In Xilinx's Ethernet-lite controller, RVALID depends on RREADY contrary to spec&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/xilinx-axi-ethernetlite/axi_rvalid.png&quot; alt=&quot;&quot; width=&quot;511&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;I should also point out that this isn’t just a beginning user mistake either,
since &lt;a href=&quot;/blog/2020/01/01/2019-in-review.html&quot;&gt;Xilinx made a very similar mistake in their AXI Ethernet-lite
controller&lt;/a&gt;
of not setting &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RVALID&lt;/code&gt; unless &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RREADY&lt;/code&gt; was already set.&lt;/p&gt;

&lt;p&gt;Not every problem is so obvious.  &lt;a href=&quot;https://forums.xilinx.com/t5/Simulation-and-Verification/Writing-to-AXI-Slave-using-VIP-package-doesn-t-work/m-p/1097505&quot;&gt;This user set a valid signal on the clock
immediately following a reset&lt;/a&gt;,
not realizing that this would violate the specification.  Indeed, I might
argue that the AXI4 specification isn’t very clear on this issue–a figure
alone is used to explain it with a bare minimum of accompanying text.  (See Fig.
A3-1 on page A3-36 in &lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;this copy of the
spec&lt;/a&gt;.)&lt;/p&gt;

&lt;p&gt;As with any bus protocol, you need to know when a request is made.  This
follows from the requirement that there must be one response for every
request.  An AXI request, for example, is made any time &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;xVALID &amp;amp;&amp;amp; xREADY&lt;/code&gt;
are true on the same clock cycle.  Moreover, if &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;xVALID &amp;amp;&amp;amp; !xREADY&lt;/code&gt;, the
request needs to be held into the next cycle.  &lt;a href=&quot;https://forums.xilinx.com/t5/Design-Entry/AXI4-cycles-but-no-response/m-p/1112425&quot;&gt;This
user&lt;/a&gt;,
however, didn’t see a problem with holding &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AWVALID&lt;/code&gt; high until his request
had been made and then dropping it when &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AWREADY&lt;/code&gt; was low.  Breaking the
protocol in this fashion will also break valid AXI components.  Not all
components ignore bus signals when &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;xVALID &amp;amp;&amp;amp; !xREADY&lt;/code&gt;.  Many components I’ve
come across, such as &lt;a href=&quot;https://www.xilinx.com/support/documentation/ip_documentation/axi_gpio/v2_0/pg144-axi-gpio.pdf&quot;&gt;Xilinx’s
GPIO&lt;/a&gt;
or even their IPIF register handler as just two examples,
accomplish their internal task before setting &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;xREADY&lt;/code&gt; to accept the request
for that task.  In other words, these designs, those that depend upon them,
and many other AXI slave designs will start working on the request &lt;em&gt;before&lt;/em&gt;
they accept the request in the first place.&lt;/p&gt;

&lt;p&gt;Finally, there was one user who assigned meaning to AXI ID’s coming from his
master.  If I recall, he was attempting to send side-channel information in the
ID bits–something probably more appropriately left for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;xUSER&lt;/code&gt; bits.
This user was then disappointed to discover that the AXI width converter didn’t
preserve AXI ID’s.  &lt;a href=&quot;https://forums.xilinx.com/t5/Processor-System-Design-and-AXI/AXI-width-converter-master-has-no-IDs/m-p/1166800&quot;&gt;[1]&lt;/a&gt;  Had he stuck with
the rules of the bus, instead of trying to use an undocumented feature, he
wouldn’t have needed to try to rearrange his design when the feature he wanted
was suddenly no longer implemented.&lt;/p&gt;

&lt;h2 id=&quot;throughput-throughput-throughput&quot;&gt;Throughput, throughput, throughput!&lt;/h2&gt;

&lt;p&gt;Much to my surprise, when I started tallying these forum posts together, there
were &lt;em&gt;a lot&lt;/em&gt; of requests for help achieving higher AXI throughput.  Perhaps
this shouldn’t surprise anyone.  One of the main purposes of custom digital
logic in the first place is to implement complex algorithms which can’t be
done in real time on a high powered CPU.  One of the things that is often
missed, however, is that high powered CPUs have carefully designed high speed
bus implementations.  How shall FPGA designs built upon AXI compete?&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 5. What is a &quot;side effect&quot;?&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/xilinx-forums/side-effects.svg&quot; alt=&quot;&quot; width=&quot;320&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Yes, AXI was designed to be a high performance bus.  That doesn’t mean that
every implementation will achieve that high performance.  Indeed, there have
been a lot of requests for help to achieve higher throughput, or complaints
about the throughput provided by Xilinx’s infrastructure.  Here are just a few
of those:
&lt;a href=&quot;https://forums.xilinx.com/t5/Processor-System-Design-and-AXI/AXI4-Lite-Memory-Mapped-Performance-poor/m-p/1115566&quot;&gt;[1]&lt;/a&gt;,
&lt;a href=&quot;https://forums.xilinx.com/t5/Processor-System-Design-and-AXI/Throughput-of-AXI-interconnect/m-p/1117062&quot;&gt;[2]&lt;/a&gt;,
&lt;a href=&quot;https://forums.xilinx.com/t5/Memory-Interfaces-and-NoC/How-to-implement-memset-memcpy-to-PL-memory-space/m-p/1127227&quot;&gt;[3]&lt;/a&gt;,
&lt;a href=&quot;https://forums.xilinx.com/t5/Embedded-Development-Tools/AXI-BRAM-64-bit/m-p/1129534&quot;&gt;[4]&lt;/a&gt;,
&lt;a href=&quot;https://forums.xilinx.com/t5/Processor-System-Design-and-AXI/Can-ARM-Master-send-data-to-mutiple-AXI-slave-interfaces-in/m-p/1147271&quot;&gt;[5]&lt;/a&gt;,
&lt;a href=&quot;https://forums.xilinx.com/t5/Processor-System-Design-and-AXI/Can-t-latch-input-from-PS-to-PL-each-clock-cycle/m-p/1146449&quot;&gt;[6]&lt;/a&gt;,
&lt;a href=&quot;https://forums.xilinx.com/t5/Processor-System-Design-and-AXI/How-can-I-define-AXI4-full-data-size-to-be-larger-than-32-bit/m-p/1146670&quot;&gt;[7]&lt;/a&gt;,
&lt;a href=&quot;https://forums.xilinx.com/t5/Processor-System-Design-and-AXI/AXI4-Lite-interface/m-p/1184689&quot;&gt;[8]&lt;/a&gt;,
&lt;a href=&quot;https://forums.xilinx.com/t5/Processor-System-Design-and-AXI/Improve-IO-Performance-for-Microblaze-to-IO-register-using-AXI/m-p/1169474&quot;&gt;[9]&lt;/a&gt;,
&lt;a href=&quot;https://forums.xilinx.com/t5/Processor-System-Design-and-AXI/Custom-AXI-slave-simulation-ADDR-LSB-OPT-MEM-ADDR-BITS/m-p/1182659&quot;&gt;[10]&lt;/a&gt;,
&lt;a href=&quot;https://forums.xilinx.com/t5/Processor-System-Design-and-AXI/Advantage-of-Multi-slave-AXI-on-my-IP/m-p/1196157&quot;&gt;[11]&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I was a bit surprised to discover that the &lt;a href=&quot;https://forums.xilinx.com/t5/Processor-System-Design-and-AXI/What-is-the-processor-s-command-for-AXI-Full/m-p/1168545&quot;&gt;PS (i.e. ARM’s CPU) doesn’t
automatically communicate using bursts with the Programming Logic
(PL)&lt;/a&gt;,
but rather needs to be set up for that purpose.  When you think about it,
however, it makes sense.  If the design hadn’t been built that way, then you
might find yourself accidentally reading from a peripheral where reads also
cause side effects not normally present when simply reading from a memory.
Still, it’s worth remembering.&lt;/p&gt;

&lt;p&gt;But let’s start at the top.  If you want high throughput through your AXI
subsystem, then there are some very specific things you can and should be
doing:&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left; padding: 25px&quot;&gt;&lt;caption&gt;Fig 6. &quot;Rules&quot; for achieving maximum bus performance&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/xilinx-forums/axi-performance-rules.svg&quot; alt=&quot;&quot; width=&quot;320&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Use a common clock across all components if possible.  &lt;a href=&quot;/blog/2017/10/20/cdc.html&quot;&gt;Crossing from one
domain to another&lt;/a&gt; will add
at least two clocks of latency from each domain.  It will also slow your
bus down to the speed of the slowest clock.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Avoid width conversions by using a common width for your data bus.  Even the
most basic width conversion will add two clocks of latency to your design.
More complicated conversions, or converters designed to be generic will
likely take more latency.  For example, even &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axi2axilsub.v&quot;&gt;my own AXI
downsizer&lt;/a&gt;
takes two clocks to process an incoming write request, and another clock
(or two) on the return.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;If possible, use the maximum data width you can for this purpose–but make
it common across all bus components.&lt;/p&gt;

    &lt;p&gt;In one case, a user connected their 32-bit design to the 128-bit port of the
ARM (PS).  They were then disappointed to discover that a 32-bit request
from the ARM was coming into the bus at 128-bits (no surprise there), but
then being converted into four independent 32-bit requests–one valid one
and three empty requests!  (In the after-analysis, this may have been a
result of the PS configuration getting out of sync with the RTL design.)&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;It’s not just throughput that’s at issue.  &lt;a href=&quot;https://forums.xilinx.com/t5/Processor-System-Design-and-AXI/AXI-Intereconnector/m-p/1054644&quot;&gt;This user complained of too much
latency in the interconnect&lt;/a&gt;, and
&lt;a href=&quot;https://forums.xilinx.com/t5/Versal-and-UltraScale/Strategy-for-lowest-latency-to-access-AXI-register/m-p/1096094&quot;&gt;this one was looking for a strategy to achieve low latency
access&lt;/a&gt;.  Indeed, latency and
throughput are both related performance numbers.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 7. Steps to optimizing any design&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/xilinx-forums/optimization-rules.svg&quot; alt=&quot;&quot; width=&quot;320&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Finally, as with all optimization tasks, your first step will be to get the
design to work slowly, your second step will be to measure your performance,
and then your third step will be to do any actual optimizations.  That
leads to &lt;a href=&quot;https://forums.xilinx.com/t5/Processor-System-Design-and-AXI/Transmission-time-FPGA-CPU-Zynq/m-p/1156187&quot;&gt;this discussion of how to measure
throughput&lt;/a&gt;.  There was also &lt;a href=&quot;https://forums.xilinx.com/t5/Simulation-and-Verification/calculation-of-throughput-in-FPGA/m-p/1007913&quot;&gt;this question about
how to measure the throughput to memory within an
FPGA&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I also have an approach I hope to write about soon for measuring AXI throughput.
It’s built around this &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axiperf.v&quot;&gt;basic throughput measuring AXI-lite
slave&lt;/a&gt;.  The
slave examines AXI (full) bursts and makes measurements of the bus it can snoop
on.  From this information, I should be able to measure bus throughput and
latency–but that’s a project for another day.&lt;/p&gt;

&lt;p&gt;Don’t expect too much from software running on the PS either.  I’ve seen a
couple of users asking what it would take to get a software &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;memcpy()&lt;/code&gt; to run
using burst mode.  &lt;a href=&quot;https://forums.xilinx.com/t5/Processor-System-Design-and-AXI/How-do-I-use-burst-transfer-using-AXI-Full-interface/m-p/958398&quot;&gt;How then shall a user command an AXI burst from
software&lt;/a&gt;?
(with links &lt;a href=&quot;https://forums.xilinx.com/t5/AXI-Infrastructure/AXI-burst-access-to-the-AXI-full-slave-from-Microblaze-is-this/td-p/843235&quot;&gt;1&lt;/a&gt;
and &lt;a href=&quot;https://forums.xilinx.com/t5/AXI-Infrastructure/How-Do-I-Perform-an-AXI-Burst-in-Software/td-p/592502&quot;&gt;2&lt;/a&gt;)  As I mentioned above, the bottom line
answer is … you can’t.&lt;/p&gt;

&lt;p&gt;This follows from the nature of how CPUs work.  CPUs execute instructions.  They
don’t execute bursts of instructions, but singular instructions.  Hence, if you
have a software loop to read a string, the CPU doesn’t know to issue a burst.
It only knows each instruction individually.  To make matters worse, if any read
instruction receives a bus error, the CPU needs to stop on a dime at that
instruction without issuing any further memory accesses or updating any further
registers.  That makes burst memory handling challenging at best.&lt;/p&gt;

&lt;p&gt;One potential solution is to tell the CPU that the memory address range in
question is cachable, and then to read it into the cache since cache reads
can be done in bursts.  This has other problems, however, since you might
accidentally read peripheral memory you didn’t intend to read as a result of
reading an entire cache line.  The bottom line here is that if it looks like
memory, you might be able to cache it and get burst access.  If not, you’ll
either need a DMA or be stuck with singleton reads and writes.&lt;/p&gt;

&lt;h3 id=&quot;axi-datamover-bugs&quot;&gt;AXI Datamover Bugs&lt;/h3&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left; padding: 25px&quot;&gt;&lt;caption&gt;Fig 8. Three types of AXI Data Mover DMAs&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/xilinx-forums/data-movers.svg&quot; alt=&quot;&quot; width=&quot;320&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;A second topic that surprised me due to its prevalence was the number of
issues surrounding &lt;a href=&quot;https://www.xilinx.com/support/documentation/ip_documentation/axi_datamover/v5_1/pg022_axi_datamover.pdf&quot;&gt;Xilinx’s Datamovers (DMAs)&lt;/a&gt;.
Xilinx provides three basic datamovers: a memory to memory DMA sometimes
called MM2MM, a memory to stream DMA (MM2S), and a stream to memory DMA
(S2MM).  They also provide other similar cores to include their &lt;a href=&quot;https://www.xilinx.com/support/documentation/ip_documentation/axi_cdma/v4_1/pg034-axi-cdma.pdf&quot;&gt;centralized
DMA (CDMA)&lt;/a&gt; and &lt;a href=&quot;https://www.xilinx.com/support/documentation/ip_documentation/axi_vdma/v6_2/pg020_axi_vdma.pdf&quot;&gt;Video DMA (VDMA)&lt;/a&gt; controllers.
Sure enough, they’re all encrypted, or I would’ve run a formal check on them
given all the controversy surrounding the S2MM datamover in particular.&lt;/p&gt;

&lt;p&gt;Since we’ve just discussed AXI performance, it follows that the official answer
to achieving high performance on an AXI bus is to use a datamover (DMA) for
high speed memory transfer.  The good news is that these vendor provided data
movers are indeed high speed, full of features,  and provided with a &lt;a href=&quot;https://forums.xilinx.com/t5/Processor-System-Design-and-AXI/DMA-transfer-tutorial/m-p/1169995&quot;&gt;tutorial
on how to do DMA transfers&lt;/a&gt;.
In particular, these DMAs are some of the few vendor supplied AXI masters that
will &lt;a href=&quot;/blog/2020/06/16/axiaddr-limits.html&quot;&gt;use the full AXI burst
capability&lt;/a&gt;.
Even better, many user tasks can be placed nicely between an
AXI MM2S and an S2MM, leaving the vendor tools to handle all of the complicated
data movement processing.  What more could you want?&lt;/p&gt;

&lt;p&gt;The problem here seems to stem from certain non-intuitive S2MM design features
found in Xilinx’s deesign.  Whether or not these are actually &lt;em&gt;bugs&lt;/em&gt; appears
to be a matter of debate, but their S2MM design clearly doesn’t do what many
users are expecting.&lt;/p&gt;

&lt;p&gt;I have not personally used Xilinx’s S2MM design, so I’m more of a witness
and idea pollinator regarding it than anything else.  That said, I have built
(and formally verified) &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axis2mm.v&quot;&gt;my own S2MM
DMA&lt;/a&gt;, and I can
assure you that mine does not have these non-intuitive features.&lt;/p&gt;

&lt;p&gt;What non-intuitive features am I talking about?  Well, first, the S2MM design
will stop its transfer upon receiving a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TLAST&lt;/code&gt; signal.  I’m told this feature
was created to support network packets, where the full length of the packet
might not be known until the end of the packet.  The second problem is that
without the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TLAST&lt;/code&gt; signal, the S2MM design will hang while waiting for it.
If that weren’t enough, users need to prevent the S2MM component from receiving
any stream data prior to being configured with a transfer length, destination
address, and a command to start transferring.  Failing to prevent data from
entering prior to configuration will cause the S2MM design to hang.  Or, at
least, this is what I’ve managed to learn from the various S2MM posts I’ve
been watching.&lt;/p&gt;

&lt;p&gt;Here are just some of these S2MM posts that I’ve come across:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://forums.xilinx.com/t5/Processor-System-Design-and-AXI/Problem-with-AXI-DMA-data-transfer/m-p/1165733&quot;&gt;Broken S2MM&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://forums.xilinx.com/t5/Processor-System-Design-and-AXI/Tready-S2MM-of-DMA-constantly-low/m-p/1154812&quot;&gt;Tready S2MM of DMA constantly low&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://forums.xilinx.com/t5/Processor-System-Design-and-AXI/Custom-IP-works-functionally-but-on-integration-with-processor/m-p/1151489&quot;&gt;S2MM core locks on TLAST&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://forums.xilinx.com/t5/Processor-System-Design-and-AXI/Strange-AXI-DMA-behavior/m-p/1146003&quot;&gt;DMA transfer fails&lt;/a&gt; (No solution identified)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://forums.xilinx.com/t5/Processor-System-Design-and-AXI/How-do-I-verify-if-my-processor-Clock-is-entering-my-custom-IP/m-p/1150933&quot;&gt;Absent clock?&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://forums.xilinx.com/t5/Xilinx-IP-Catalog/How-to-recover-DMA-S2MM-Direct-not-S-G-without-losing-data/m-p/1135825&quot;&gt;Need to generate a missing TLAST signal&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://forums.xilinx.com/t5/Processor-System-Design-and-AXI/AXI-DMA-Receive-by-chunks/m-p/1116887&quot;&gt;Generating TLAST?&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://forums.xilinx.com/t5/FPGA-Configuration/axi-dma-internal-error/m-p/1116414&quot;&gt;S2MM Requires pre-configuration&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://forums.xilinx.com/t5/FPGA-Configuration/Problem-with-AXI-DMA/m-p/1116001&quot;&gt;S2MM Accepts data, then hangs&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://forums.xilinx.com/t5/Processor-System-Design-and-AXI/AXI-DMA-S2MM-LENGTH-Register/m-p/1112349&quot;&gt;Transfers end early&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://forums.xilinx.com/t5/FPGA-Configuration/AXI-master-read-and-write-in-RTL/m-p/1102576&quot;&gt;Need a stream to memory solution&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://forums.xilinx.com/t5/Processor-System-Design-and-AXI/Axi-dma-S2MM-receive-data-are-not-all-perfectly-normal/m-p/1092067&quot;&gt;First several words of S2MM transfer get lost&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://forums.xilinx.com/t5/Embedded-Development-Tools/Problem-with-AXI-S2MM-DMA-and-SDK/m-p/1060268&quot;&gt;S2MM sometimes runs and works, other times just fails and trashes the SDK&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://forums.xilinx.com/t5/Processor-System-Design-and-AXI/AXI-Datamover-Status-INTERR-Internal-Error/m-p/1166803&quot;&gt;Internal error in AXI Datamover&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://forums.xilinx.com/t5/Processor-System-Design-and-AXI/AXI-DMA-wrong-length-internal-error/td-p/1207387&quot;&gt;Wrong DMA Length ?&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Like I said, however, the official answer is that this S2MM design is bug free.
Your mileage, however, might vary.&lt;/p&gt;

&lt;p&gt;You are, of course, welcome to use &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axis2mm.v&quot;&gt;my own
S2MM&lt;/a&gt;
controller if you would rather.  It is available for free under the Apache
license.  It has worked nicely for some users.  However, unlike Xilinx’s
controller, mine doesn’t come with any Linux kernel or other software drivers.
At the same time, it doesn’t have the surprising features either.&lt;/p&gt;

&lt;h3 id=&quot;resetting-dma&quot;&gt;Resetting DMA&lt;/h3&gt;

&lt;p&gt;Before I move on to the smaller categories,
there is one large theme left and that is the problem associated with resetting
an AXI DMA.  Indeed, this problem has been such an issue that I’ve written
two posts on the topic–I’ll get to those in a moment.  The general problem
here seems to be either that users just naturally want to reset the DMA
between bursts, or that somehow the DMA gets hung and so they want to reset
things and start over.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 9. Resetting the DMA alone&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/xilinx-forums/reset-desired.svg&quot; alt=&quot;&quot; width=&quot;560&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Why might your DMA hang?  Perhaps because you’ve copied one of Xilinx’s
demonstration designs and you are trying to copy data from it?  That’s a common
theme through this section, but also a theme I’ve rarely been able to prove.
Perhaps the DMA failed because of the bugs in the demonstration designs.
Perhaps it failed because an off-chip interface hung when the chip it was
talking to went off line.  Perhaps something else went wrong with either the
DMA or the AXI infrastructure and now the user wants to reset the DMA.
&lt;a href=&quot;/formal/2019/09/06/axi-story.html&quot;&gt;[1]&lt;/a&gt;
The problem, however, is that the user typically wants to reset the DMA
&lt;em&gt;without resetting the rest of his design&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;This is a problem in AXI, since AXI has no mechanism to abort an ongoing
transaction simply because the master is no longer interested in either
continuing it or receiving the results from it.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 10. Resetting the DMA requires resetting everything touching the AXI bus&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/xilinx-forums/full-axi-reset.svg&quot; alt=&quot;&quot; width=&quot;560&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;The first post I wrote to address this problem was my post discussing protocol
&lt;a href=&quot;/formal/2020/05/16/firewall.html&quot;&gt;firewalls&lt;/a&gt;.  If the
problem is caused by a misbehaving user peripheral, a
&lt;a href=&quot;/formal/2020/05/16/firewall.html&quot;&gt;firewall&lt;/a&gt; should fix the
problem.  The &lt;a href=&quot;/formal/2020/05/16/firewall.html&quot;&gt;firewall&lt;/a&gt;
would guarantee that all AXI requests get responses, and that (following any
protocol error) the DMA gets an appropriate bus error response.  Even better,
my own &lt;a href=&quot;/formal/2020/05/16/firewall.html&quot;&gt;firewalls&lt;/a&gt; can
be configured to reset the downstream slave, and so allow you to recover from
a failure should one ever happen.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 11. Using a firewall to limit the reset to a single peripheral&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/xilinx-forums/firewalled-reset.svg&quot; alt=&quot;&quot; width=&quot;560&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;The second post discussed &lt;a href=&quot;/blog/2020/03/14/axi-reset.html&quot;&gt;the difficulty of resetting an AXI
component&lt;/a&gt; such as a DMA.
The problem, as mentioned above, is that you need to continue to provide any
write data that you’ve committed to, and you need to continue to wait for any
writes or reads to complete before you can declare a component idle.  That
also means that you need to leave &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RREADY&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BREADY&lt;/code&gt; high during this time,
and further that you need to know how many responses are outstanding.  This
is quite doable if the core was designed properly with a transaction abort
function, but such a function is fundamentally &lt;em&gt;very different&lt;/em&gt; from a soft
reset.  That’s the good news.  The bad news is that there’s no way to recover
from a non-compliant slave apart from using a
&lt;a href=&quot;/formal/2020/05/16/firewall.html&quot;&gt;firewall&lt;/a&gt;–otherwise
your design may well hang until the next reset.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://forums.xilinx.com/t5/Processor-System-Design-and-AXI/Processor-System-reset-freezes-PS-with-long-aux-reset-pulse/m-p/1140853&quot;&gt;Short resets reset the DMA, long ones don’t&lt;/a&gt;.  This is probably another example of looking for the
bug in the wrong place.  The underlying bug was associated with properly
engineering separate reset domains, but that wasn’t apparent from the
original question.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://forums.xilinx.com/t5/PCIe-and-CPM/XDMA-Simulation-works-for-many-transfers-then-descriptor-count-0/m-p/1106305&quot;&gt;User reports a design lock up when the downstream hiccups and takes too
long to respond&lt;/a&gt;.  Unfortunately,
even with some help from an official Xilinx representative, this issue was
never resolved to know what the root cause was.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://forums.xilinx.com/t5/Processor-System-Design-and-AXI/AXI-DMA-S2MM-issue/m-p/1087561&quot;&gt;Resetting S2MM, but not the rest of the design&lt;/a&gt;.  This looks
like the S2MM problem above, where the S2MM was given data before being
configured.  (But &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TREADY&lt;/code&gt; was high …?)  This was then compounded when the
user tried to recover his design by resetting his S2MM component and not the
rest of the design.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://forums.xilinx.com/t5/Processor-System-Design-and-AXI/S2MM-DMA/m-p/1087864&quot;&gt;Resetting between every pair of transactions&lt;/a&gt;.  This user felt that it
was appropriate to reset the S2MM core between every usage.  Such resets
should  &lt;em&gt;never&lt;/em&gt; be required.  In reality, his underlying problem was probably
the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TREADY&lt;/code&gt; bug listed above.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://forums.xilinx.com/t5/PCIe-and-CPM/Software-Reset-for-QDMA-IP-Not-Working/m-p/1069901&quot;&gt;Software resets hang the DMA&lt;/a&gt;.  This follows from our
discussion above.  It also appears that &lt;a href=&quot;https://forums.xilinx.com/t5/PCIe-and-CPM/Software-Reset-for-QDMA-IP-Not-Working/m-p/1036558&quot;&gt;this user complained about the same
issue twice&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://forums.xilinx.com/t5/Processor-System-Design-and-AXI/How-do-you-reset-the-AXI-DMA-IP/m-p/1008913&quot;&gt;How do you reset the AXI DMA IP&lt;/a&gt;?  This user was
looking for a guaranteed way to restart the AXI DMA from software from
scratch.  He was looking for a failsafe way to do this.  The problem is that,
if your FPGA logic is hanging the DMA, there may be no hardware way to reset
the design without resetting the entire design.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The bottom line answer remains the same as before: 1) formally verify
&lt;em&gt;everything&lt;/em&gt; that touches your bus, 2) Simulate everything before placing
it onto your hardware, and 3) use logic analyzers if necessary if you are
struggling with any problems afterwards.  If you do find hardware bugs in
step three, that’s a sign you messed up steps 1 and 2.  Go back and re-do
those better, so they won’t have the same problems again in the future.&lt;/p&gt;

&lt;p&gt;If you can’t simulate an ARM CPU, then get a digital design with a CPU within it
that you can simulate.&lt;/p&gt;

&lt;h3 id=&quot;fft-ip-core&quot;&gt;FFT IP core&lt;/h3&gt;

&lt;p&gt;FFT questions aren’t really AXI questions, but they aren’t all that uncommon
either.  Indeed, FFT questions are common enough that we’ve discussed &lt;a href=&quot;/digilent/2017/05/29/fft-debugging.html&quot;&gt;how to
solve FFT problems in
general&lt;/a&gt;
already, as well as how to handle &lt;a href=&quot;/dsp/2020/04/20/axil2axis.html&quot;&gt;in-hardware protocol testing with an
AXI-stream based component&lt;/a&gt;.
Both approaches should help the users below get closer to their solution.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://forums.xilinx.com/t5/AI-Engine-DSP-IP-and-Tools/FFT-IP-core-hanging-after-sometime/m-p/1169001&quot;&gt;The FFT core hangs&lt;/a&gt;.  From a forum question
standpoint, this one was horrible.  The user provided a vague description
of something going wrong, but then provided no other information suitable
for narrowing the problem down.  In the end, the user explained the issue
by stating that there was an AXI protocol error of some unspecified type.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://forums.xilinx.com/t5/AI-Engine-DSP-IP-and-Tools/FFT-IP-pipeline-latency/m-p/1164810&quot;&gt;What is the FFT IP core’s pipeline latency&lt;/a&gt;?  This question
confused me.  Why not just measure it?  Any good simulation should be able
to provide this answer.  This leaves me wondering if the user didn’t
simulate his design before moving to hardware, and so had no hard insight into
how the design was actually working now that he had placed it onto his
hardware.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;cache-coherency&quot;&gt;Cache coherency&lt;/h3&gt;

&lt;p&gt;When working with a CPU, always be aware of the issue of cache coherency.  It’s
not uncommon to use a DMA to transfer data and then, only later, to discover
that the DMA has changed data within the CPU cache.  I know &lt;a href=&quot;/blog/2019/11/14/sdspi.html&quot;&gt;I’ve had that
problem when working with the
ZipCPU&lt;/a&gt;.  That also appears to
be the &lt;a href=&quot;https://forums.xilinx.com/t5/Memory-Interfaces-and-NoC/PL-DDR-ACCESS/m-p/1090876&quot;&gt;problem this user was struggling
from&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;how-to-debug-an-axi4-interconnect&quot;&gt;How to debug an AXI4 interconnect?&lt;/h3&gt;

&lt;p&gt;It wasn’t clear from &lt;a href=&quot;https://forums.xilinx.com/t5/Processor-System-Design-and-AXI/FPGA-Verification/m-p/1180297&quot;&gt;this post&lt;/a&gt; if the user wanted to verify
their own interconnect, or one they built on their own.&lt;/p&gt;

&lt;p&gt;Personally, I would recommend formal verification.  That said, my own AXI
interconnect has been failing its formal proof for some time (while passing
simulation tests), so … I have some work to do here in my own back yard.&lt;/p&gt;

&lt;h3 id=&quot;failing-to-provide-a-full-16-clock-reset&quot;&gt;Failing to provide a full 16-clock reset&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://forums.xilinx.com/t5/Processor-System-Design-and-AXI/Block-Memory-Generator-IP-AXI4-Lite/m-p/1185875&quot;&gt;This one&lt;/a&gt; isn’t quite as simple as my title
indicates.  Re-reading the post again today, it appears as though the user
had multiple reset domains across clock domains, and that they weren’t properly
synchronized.&lt;/p&gt;

&lt;h3 id=&quot;ethernet-lite&quot;&gt;Ethernet-Lite&lt;/h3&gt;

&lt;p&gt;Remember how I mentioned that Xilinx’s AXI ethernet lite core was not
bus compliant?  Here’s &lt;a href=&quot;https://forums.xilinx.com/t5/Design-Entry/AXI-Ethernet-Lite-Core-behaviour-to-AXI-master-bus/m-p/1169426&quot;&gt;how that looks from this user’s
perspective&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Bottom line takeaway?  What you see may be leading you very far from the
true underlying problem.  Verification needs to start at the low level,
and it needs to be methodical, lest you end up with an &lt;a href=&quot;/zipcpu/2017/12/28/ugliest-bug.html&quot;&gt;inexplicable
mystery in hardware&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;mm2s-performance&quot;&gt;MM2S performance&lt;/h3&gt;

&lt;p&gt;While most of the problems seem to center around the unexpected S2MM behavior,
&lt;a href=&quot;https://forums.xilinx.com/t5/Processor-System-Design-and-AXI/Problem-with-AXI-datamover-MM2S/m-p/1174964&quot;&gt;one user had a real challenge with the
MM2S&lt;/a&gt;.  In this case, the user was getting horrendous
performance from the MM2S DMA.  A DMA &lt;em&gt;should&lt;/em&gt; be able to transfer one beat of
data on every cycle.  In this example, the MM2S wasn’t maintaining that speed.
Looking over the problem again now, I wonder if his data FIFOs weren’t deep
enough.  Not knowing how the detailed design was actually configured, it’s
hard to be certain.&lt;/p&gt;

&lt;h3 id=&quot;measuring-logic-usage&quot;&gt;Measuring logic usage&lt;/h3&gt;

&lt;p&gt;One of the challenges associated with a complicated bus design is the logic
complexity required to implement it.  In my own work, I’ve done lots of
comparisons between Wishbone, AXI, and AXI-lite “equivalent” components.
(I use “equivalent” in quotes, because the various differences between
bus implementations make it hard to do true apples to apples comparisons.)&lt;/p&gt;

&lt;p&gt;Needless to say, since FPGA cost goes up with available logic, logic usage
comes up as a topic.  Much to my surprise, I only found two posts among
my set dealing with this topic.  In the first post, the user is asking
&lt;a href=&quot;https://forums.xilinx.com/t5/Other-FPGA-Architecture/FPGA-logic-estimator-to-select-device/m-p/1165735&quot;&gt;how to quickly and easily estimate logic resource
requirements&lt;/a&gt;.
This is usually pretty easy to do with Yosys at all levels of the design,
although I’m not quite sure how I would do it with Vivado without building
my entire design and connecting it to an XDC file.&lt;/p&gt;

&lt;p&gt;A second user is looking for tips and tricks to reduce his design size.  The
key to this post is that &lt;a href=&quot;https://forums.xilinx.com/t5/Synthesis/Size-Optimized-HDL-Tricks-Guidlines/m-p/1093591&quot;&gt;his timer is taking up 60% of his 25k LUT
area&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Yes, FPGAs are getting bigger and more powerful every day.  However, if you
take that FPGA and place a microblaze on it, a flash-based boot loader, a MIG
SDRAM controller, and the necessary AXI interconnect to connect them all
together, you might quickly find that half of your resources are already
used.  As with my rules for optimization above, step number one is to get
something working, and step two is to start measuring the problem.  From there
you can start to balance performance needs as required.&lt;/p&gt;

&lt;p&gt;Indeed, &lt;a href=&quot;https://forums.xilinx.com/t5/Processor-System-Design-and-AXI/Native-Control-of-AXI4-Lite-Master/m-p/978697&quot;&gt;this post&lt;/a&gt; really takes the cake.  The
user wanted to know the easiest way to control an AXI4-lite peripheral.
&lt;a href=&quot;https://forums.xilinx.com/t5/Processor-System-Design-and-AXI/Native-Control-of-AXI4-Lite-Master/m-p/978697&quot;&gt;Xilinx’s answer was to recommend using a microblaze CPU&lt;/a&gt;.  Seriously?  Just to control an AXI4-lite peripheral, you now need
a CPU, an interconnect, a flash device, and a block RAM and/or external
SDRAM.  Why not just build a simple state machine?&lt;/p&gt;

&lt;h3 id=&quot;mig-generates-extra-rvalids&quot;&gt;MIG generates extra RVALIDs&lt;/h3&gt;

&lt;p&gt;Much to my surprise, the MIG generated AXI interface is highly dependent upon
the performance of the memory chip itself.  Indeed, if you misconfigure your
memory chip and its timings, the result will often masquerade as an AXI bug.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://forums.xilinx.com/t5/Memory-Interfaces-and-NoC/MIG-DDR3-SDRAM-controller-responding-without-request/m-p/1038755&quot;&gt;When I first encountered this problem&lt;/a&gt;, I was absolutely convinced Xilinx’s controller had an AXI bug within it.
I could count AXI requests and responses, and sure enough I was getting a
response without ever issuing a request.  Upon further investigation, I
discovered I had the MIG configured for the wrong memory chip.  The controller
was issuing read requests of the MIG to keep the PLL locked, the responses
weren’t coming back in their expected windows, and so I was getting read
returns I wasn’t expecting.&lt;/p&gt;

&lt;p&gt;At the time, I thought I was the only one who had ever or would ever have this
issue.  I was wrong.  &lt;a href=&quot;https://forums.xilinx.com/t5/Memory-Interfaces-and-NoC/MIG-generating-RVALID-without-having-a-AXI-read-cycle-Kingston/m-p/1167170&quot;&gt;Here’s a user with a similar issue, discovering in the
end that their chosen memory chip wasn’t
supported&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;design-works-infrastructure-is-broken&quot;&gt;Design works, infrastructure is broken&lt;/h3&gt;

&lt;p&gt;One of the complaints that always catch my eyes are those claiming that Xilinx’s
AXI infrastructure is broken.  I see this complaint often enough that I thought
I’d create my own category for it here.  Unfortunately, in spite of all the
complaints I’ve seen, few can actually be traced to Xilinx’s interconnect.  Of
those I’ve reviewed, I’ve moved them into other sections in this post simply
because the problems were caused by user designs rather than Xilinx’s
interconnect.&lt;/p&gt;

&lt;p&gt;Sure, I’d love to say I’d found a problem with their interconnect.  That would
be great advertising material for &lt;a href=&quot;/about/gisselquist-technology.html&quot;&gt;Gisselquist
Technology&lt;/a&gt;!  You can
rest assured that I’d certainly post about it here if I had found such!
Unfortunately, all of the bugs I’ve actually traced down that started with
complaints about Xilinx’s interconnect have turned into bugs elsewhere.  I’m
not going to go as far as to say that there aren’t any bugs in their
interconnect, but I sure haven’t seen any evidence of such … yet.
(I’m still looking …)&lt;/p&gt;

&lt;p&gt;To make matters worse for my own pride, &lt;a href=&quot;https://www.avery-design.com&quot;&gt;Avery Design
Systems&lt;/a&gt; pointed out to me (gently) that Xilinx’s
AXI interconnect put &lt;a href=&quot;/blog/2019/07/17/crossbar.html&quot;&gt;my own AXI
crossbar&lt;/a&gt; to shame in
terms of performance.  Ouch.&lt;/p&gt;

&lt;p&gt;What I have instead for this section appears to be a list of dissatisfied users
who just wanted more than the tools were offering them.&lt;/p&gt;

&lt;p&gt;For example, here’s a question from someone who just wasn’t satisfied with what
he had.  &lt;a href=&quot;https://forums.xilinx.com/t5/Processor-System-Design-and-AXI/AXI-Lite-Register-Array/m-p/1158304&quot;&gt;He wanted a simple way to connect and control a massive numbers of
registers to a peripheral&lt;/a&gt;.
The constraint here was apparently imposed by his work environment, where he
was “asked to add as little custom as possible and instead use vendor IPs as
much as [he could].”  That’s a great idea, when the vendor IPs 1) do what you
want, and 2) work.  Once we realized this, there wasn’t much more we could do
to help him.  It was a shame, however, since &lt;a href=&quot;/blog/2020/03/08/easyaxil.html&quot;&gt;building a basic AXI slave
register controller&lt;/a&gt; is
actually pretty easy to do–even for a hundred (or more) registers.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://forums.xilinx.com/t5/Processor-System-Design-and-AXI/AXI-SmartConnect-limited-to-8-masters/m-p/1089712&quot;&gt;Another user complained that Xilinx’s brand new (at the time) SmartConnect
was limited to 8 masters&lt;/a&gt;.
While I offered him an &lt;a href=&quot;/blog/2019/07/17/crossbar.html&quot;&gt;open source AXI interconnect
alternative&lt;/a&gt;, he didn’t
reply and so it’s not clear if his issue was ever answered.&lt;/p&gt;

&lt;p&gt;In my final example, I wish I could tell you what &lt;a href=&quot;https://forums.xilinx.com/t5/Processor-System-Design-and-AXI/AXI-Full-Master-64bit-MSB-32bit-error/m-p/1153145&quot;&gt;this user’s error
was&lt;/a&gt;.
Looking over his design, I couldn’t see anything wrong with it.
When I later commented to that effect, he accepted my comment as the
solution.  Perhaps there was something else wrong elsewhere in his design?&lt;/p&gt;

&lt;p&gt;Just to round out the section with an actual “problem”, I’ll point out that at
one time I complained about the fact that Xilinx’s AXI to AXI-lite bridge
limited the AXI-lite downstream to only one burst at a time.  The response I
discovered was two-fold.  First, I discovered that this was a “feature” of
their area optimized interconnect.  Second, I was told that AXI-lite was never
designed for speed, so you shouldn’t expect high performance from it anyway.
If you want speed, you should be using AXI full (and a custom DMA-type of
master, not a CPU).&lt;/p&gt;

&lt;p&gt;Sorry, that’s all I have for (validated) complaints about Xilinx’s AXI
infrastructure.&lt;/p&gt;

&lt;h3 id=&quot;limited-size&quot;&gt;Limited size&lt;/h3&gt;

&lt;p&gt;One complaint that’s come up a couple of times is that the various DMAs have
a limited size that they can transfer.  &lt;a href=&quot;https://forums.xilinx.com/t5/Processor-System-Design-and-AXI/AXI-DMA-IP-Core-upgrade/m-p/1034872&quot;&gt;This user, for example, is complaining
that the DMA size is limited to 8MB&lt;/a&gt;.  (Yes, I remember
when nobody thought anyone would ever need more than 640kB …)&lt;/p&gt;

&lt;p&gt;I know from my own experience that I came across this issue as well when
designing &lt;a href=&quot;https://github.com/ZipCPU/wb2axip&quot;&gt;my own DMAs&lt;/a&gt;.  At some point,
you need to allocate how many bits will be used to capture the transfer
length.  You also need to decide how wide the address bus should be, and
whether or not the DMA will be allowed to wrap from high addresses back
around to low addresses, etc., etc.  (Welcome to hardware design!)  In my case,
I parameterized most if not all of these items.  That way, if you don’t like my
default choices, you can just adjust the parameters until you have the choice
you want.&lt;/p&gt;

&lt;p&gt;Unfortunately, Xilinx doesn’t appear to have parameterized their DMA’s transfer
sizes.  This means that you’ll either need to interrupt your CPU that much
more, use a scatter-gather engine to script multiple DMA transfers, or
choose to switch to an open source implementation that doesn’t have that limit.&lt;/p&gt;

&lt;h3 id=&quot;partial-address-decoding&quot;&gt;Partial address decoding&lt;/h3&gt;

&lt;p&gt;Every now and again, someone writes in asking about something absolutely crazy
taking place in their design–something so crazy it doesn’t make any sense.
&lt;a href=&quot;https://forums.xilinx.com/t5/Processor-System-Design-and-AXI/AXI-Peripheral-Register-Access/m-p/1014667&quot;&gt;In this case, a user wrote in describing how every 16th byte in his design
was getting written in a single write&lt;/a&gt;.  It made no
sense to him.  Indeed, it doesn’t make much sense at all–until you dig into
how address decoding is done within an FPGA.&lt;/p&gt;

&lt;p&gt;This phenomenon is a consequence of what’s known as “partial address decoding”.
This is the cheap way of address decoding, where you don’t compare against all
address bits.  Instead you only compare against enough bits to make sure that
the peripherals are all at the addresses they are promised to be at and you
make no promises regarding phantom peripherals which may appear to reside at
any of the other addresses.&lt;/p&gt;

&lt;p&gt;Here was &lt;a href=&quot;https://forums.xilinx.com/t5/Processor-System-Design-and-AXI/Vivado-what-is-addresses-and-address-ranges-of-IPs-in-vivado/m-p/984656&quot;&gt;another user asking how address decoding is accomplished within an
interconnect&lt;/a&gt;.  It’s
really not that hard to understand–especially not when you dig into it
just a little bit.&lt;/p&gt;

&lt;p&gt;To read more on this topic, feel free to look at &lt;a href=&quot;/zipcpu/2019/09/03/address-assignment.html&quot;&gt;how AutoFPGA handles address
assignments&lt;/a&gt;,
since I discuss the topic there.&lt;/p&gt;

&lt;h3 id=&quot;know-the-specification&quot;&gt;Know the specification&lt;/h3&gt;

&lt;p&gt;FPGA design is a type of engineering.  As an engineer, you’ll be required to
read, study, and understand complex data sheets.  This is the nature of the
business.  One such data sheet is the &lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI
specification&lt;/a&gt;.  That’s sort of a
requirement when working with AXI.  Know &lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;the
specification&lt;/a&gt;, and things will get much
easier.&lt;/p&gt;

&lt;p&gt;One user I remember declared that AXI was too hard.  &lt;a href=&quot;https://forums.xilinx.com/t5/Processor-System-Design-and-AXI/Read-and-write-through-AXI4/m-p/999075&quot;&gt;He wanted something
easier&lt;/a&gt;.
I wish I had a better answer for him, but the bottom line is that engineering
requires reading, studying, and understanding complex data sheets.  It’s what
engineers get paid for.   If you don’t like it, find something you do like.&lt;/p&gt;

&lt;p&gt;Another user just wanted to know the easiest way to drive an AXI UART-lite?
&lt;a href=&quot;https://forums.xilinx.com/t5/Xilinx-Evaluation-Boards/AXI-4-UART-Lite/m-p/998352&quot;&gt;He just needed a basic AXI master&lt;/a&gt;.
Their request could’ve been quite simply handled, with the exception that they
were limiting themselves to &lt;em&gt;proven IP only&lt;/em&gt; (i.e. Xilinx’s vendor libraries).
&lt;a href=&quot;https://forums.xilinx.com/t5/Xilinx-Evaluation-Boards/AXI-4-UART-Lite/m-p/997614&quot;&gt;[2nd Ref]&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Without understanding AXI, &lt;a href=&quot;https://forums.xilinx.com/t5/Processor-System-Design-and-AXI/AXI-DMA-changing-some-value-to-0/m-p/998347&quot;&gt;this user assumed READY would just stay high once
it rose initially&lt;/a&gt;.  Sure enough, his design didn’t
do what he was expecting.  Like most of the engineers I’ve known, myself
included, this engineer was also quite convinced the problem wasn’t in his
own design but in the DMA he was using.&lt;/p&gt;

&lt;p&gt;I’d love to say that all bugs get solved.  &lt;a href=&quot;https://forums.xilinx.com/t5/Embedded-Development-Tools/Writing-data-in-AXI-register-through-XIo-Out32-address-data-or/m-p/998160&quot;&gt;This user posted that something
was causing his design to freeze when accessing his custom AXI IP component&lt;/a&gt;.  The bug dates back to 2012.
I don’t have records going back that far, but I do know the demo IP was broken
back in 2016.  I also have reason to believe it was broken earlier–in 2014
based on some user designs I’ve examined dating back that far.&lt;/p&gt;

&lt;p&gt;It’s not that uncommon to find students asking for help, and just trying to
get their homework done.  They’ll take the demo design and modify it as little
as possible.  As an example, here’s an individual complaining that his &lt;a href=&quot;https://forums.xilinx.com/t5/Implementation/custom-ip-creation-in-vivado/m-p/995679&quot;&gt;matrix
solution AXI slave not working&lt;/a&gt;.  Sadly, this individual’s design had so
many problems within it that we never got far enough to get to the problem
he was struggling with.&lt;/p&gt;

&lt;p&gt;It’s a shame to find someone who used Xilinx’s demo design.  In this case,
&lt;a href=&quot;https://forums.xilinx.com/t5/Synthesis/AXI-custom-ip-with-microblaze/m-p/993821&quot;&gt;the user design only worked once&lt;/a&gt;.  When I pointed out the bugs in Xilinx’s
demo design, the user upgraded to the latest version of Vivado thinking that
the bugs would have been fixed.  Imagine their surprise, and indeed my own,
when the bugs reported in 2017 are still present in Vivado 2020.2.&lt;/p&gt;

&lt;p&gt;Here’s a crazy discussion of things not working: &lt;a href=&quot;https://forums.xilinx.com/t5/Processor-System-Design-and-AXI/Xil-In32-taking-excessively-long-time-to-read-two-registers/m-p/983131&quot;&gt;in this example, a user
measures the time difference between two AXI reads in his design&lt;/a&gt;.  Two reads, with nothing else in between
them, are recorded to take around 50us.  That’s dismal performance!  In the
end, he discovered that he could drop this time down to less than a microsecond
by switching the C compiler from debug mode to release mode.&lt;/p&gt;

&lt;p&gt;Reading &lt;a href=&quot;https://forums.xilinx.com/t5/Processor-System-Design-and-AXI/Xil-In32-taking-excessively-long-time-to-read-two-registers/m-p/983131&quot;&gt;his post&lt;/a&gt;
again today, in hind sight, it looks like I missed his implicit conversion from
integer to double in between his two AXI reads.  The bottom line here is that
you need to know what your CPU is doing.  You might also find it helps to dig
into the assembly of what’s going on every now and again.  This should’ve been
one of those times.&lt;/p&gt;

&lt;p&gt;There should be a rule against complicated AXI signaling.  Looking over
&lt;a href=&quot;https://forums.xilinx.com/t5/Processor-System-Design-and-AXI/AXI-lite-read-channel-overflow/m-p/961738&quot;&gt;this user’s custom AXI peripheral&lt;/a&gt;, he makes one
of the more fundamental mistakes.  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RVALID&lt;/code&gt; should be set based upon
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ARVALID &amp;amp;&amp;amp; ARREADY&lt;/code&gt; &lt;em&gt;and nothing else&lt;/em&gt;!  Keep it simple.  If your design isn’t
ready to handle the its inputs, then keep &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ARREADY&lt;/code&gt; low.  Much to my surprise,
his design was producing two &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RVALID&lt;/code&gt;s for every &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ARVALID &amp;amp;&amp;amp; ARREADY&lt;/code&gt;.
No wonder the design wasn’t working!  Had he posted his full custom AXI
module, I would’ve provided a simple formal check–I might’ve even been able
to point out the line that was broken.  Indeed, the formal check should’ve
taken place before he ever tried his design in actual hardware.  Failing
that, a good &lt;a href=&quot;/formal/2020/05/16/firewall.html&quot;&gt;firewall&lt;/a&gt;
would’ve helped find the problem nicely.&lt;/p&gt;

&lt;h2 id=&quot;looking-for-a-tutorial&quot;&gt;Looking for a tutorial&lt;/h2&gt;

&lt;p&gt;If the above posts haven’t made the case for it, several users have asked for
better training materials.  &lt;a href=&quot;https://forums.xilinx.com/t5/Ethernet/AXI-Lite-Slave-Example-Tutorial/m-p/967775&quot;&gt;Here’s a user looking for an AXI-lite slave
example/tutorial&lt;/a&gt;.    Here’s &lt;a href=&quot;https://forums.xilinx.com/t5/Design-Entry/Custom-AXI-IP-Tutorial/m-p/1085203&quot;&gt;another, requesting a custom IP AXI
tutorial&lt;/a&gt;.  Or a third, &lt;a href=&quot;https://forums.xilinx.com/t5/Memory-Interfaces-and-NoC/How-to-interface-custom-IP-with-MIG-DDR3-via-AXI-master-burst/m-p/1073843&quot;&gt;wondering how to move data from memory to an FPGA
processing core and back to memory
again&lt;/a&gt;.
Again, the common theme here is, where shall I go to find the training material
I need to learn how to do what I need to?&lt;/p&gt;

&lt;p&gt;Not everything fits nicely into official training material.  Some questions,
&lt;a href=&quot;https://forums.xilinx.com/t5/Processor-System-Design-and-AXI/AXI4-4K-address-boundary/m-p/996921&quot;&gt;like this one on how to handle non-power of two burst
lengths&lt;/a&gt;, just need simple explanations.  Questions like
these make the forums fun.&lt;/p&gt;

&lt;h2 id=&quot;conclusions&quot;&gt;Conclusions&lt;/h2&gt;

&lt;p&gt;Yes, AXI can be complex.  Frankly, it’s becoming the cost of doing business
with either a CPU or external memory on an FPGA.  Read &lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;the
specification&lt;/a&gt;, study it, and
understand it.&lt;/p&gt;

&lt;p&gt;You can also look up the various AXI articles I’ve posted.  I’ve posted articles
on designing both AXI and AXI-lite slaves and masters.  We’ve discussed
on this blog &lt;a href=&quot;/blog/2020/03/14/axi-reset.html&quot;&gt;how to reset AXI
designs&lt;/a&gt;, and &lt;a href=&quot;/formal/2020/06/12/four-keys.html&quot;&gt;the problems
with Xilinx’s DMAs&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Let me also encourage you to formally verify your AXI designs.  The formal
verification tool can be one of the better teachers you come across.  You
just need to provide the formal solver with your design and &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/faxil_slave.v&quot;&gt;an
AXI-lite&lt;/a&gt;
or AXI property file.  Then, run the solver.  If the design fails, the solver
will give you the line number of a failing property together with a trace
showing the bug.  Believe me, two hours with a formal solver will fix a lot
more bugs in your design than you’ll fix in two hours just trying to get your
design placed on hardware.&lt;/p&gt;

&lt;p&gt;Finally, let me also point out that a lot of the user problems above could’ve
been avoided if the user had access to the RTL designs for the other half
of the interface they were working with.&lt;/p&gt;

&lt;hr /&gt;&lt;p&gt;&lt;em&gt;There hath no temptation taken you but such as is common to man: but God is faithful, who will not suffer you to be tempted above that ye are able; but will with the temptation also make a way to escape, that ye may be able to bear it. (1Cor 10:13)&lt;/em&gt;</description>
        <pubDate>Sat, 20 Mar 2021 00:00:00 -0400</pubDate>
        <link>https://zipcpu.com/blog/2021/03/20/xilinx-forums.html</link>
        <guid isPermaLink="true">https://zipcpu.com/blog/2021/03/20/xilinx-forums.html</guid>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>Whatever happened to the ZipOS?</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://www.reddit.com/u/Vitalrnixofnutrients&quot;&gt;[Vitalrnixofnutrients]&lt;/a&gt; recently
&lt;a href=&quot;https://www.reddit.com/r/ZipCPU/comments/m7hqe7/where_is_the_source_code_for_zipos/&quot;&gt;asked on the ZipCPU Reddit page&lt;/a&gt;, whatever happened to the
ZipOS?  Or, more specifically, “Where is the source code for ZipOS”?&lt;/p&gt;

&lt;p&gt;That’s a good question, and worthy of a blog post in its own right.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;https://github.com/ZipCPU/s6soc/tree/master/sw/zipos&quot;&gt;ZipOS&lt;/a&gt; was an
“Operating System” of my own design (if you can even call it that) that I
then used on the &lt;a href=&quot;https://github.com/ZipCPU/s6soc/tree/master/sw/zipos/&quot;&gt;S6SoC
project&lt;/a&gt;
to demonstrate the multiple tasking capability of the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;.
As demonstrated, it consisted of a couple of small but primary components.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;There was the O/S Kernel.  You can find an example of it here for the &lt;a href=&quot;https://github.com/ZipCPU/s6soc/tree/master/sw/zipos/&quot;&gt;S6SoC
project&lt;/a&gt;.  The key to
getting it to operate in real time for the doorbell application of the S6SoC
project was to &lt;a href=&quot;https://github.com/ZipCPU/s6soc/blob/master/sw/zipos/cmodram.ld&quot;&gt;split the
kernel&lt;/a&gt; into
both &lt;a href=&quot;https://github.com/ZipCPU/s6soc/blob/master/sw/zipos/kernel.c&quot;&gt;realtime&lt;/a&gt;
and &lt;a href=&quot;https://github.com/ZipCPU/s6soc/blob/master/sw/zipos/ksetup.c&quot;&gt;non-realtime&lt;/a&gt;
components.&lt;/p&gt;

    &lt;p&gt;The real-time
“&lt;a href=&quot;https://github.com/ZipCPU/s6soc/blob/master/sw/zipos/kernel.c&quot;&gt;kernel&lt;/a&gt;”,
such as it was, &lt;a href=&quot;https://github.com/ZipCPU/s6soc/blob/master/sw/zipos/doorbell.c#L196-L238&quot;&gt;required all tasks to be loaded and defined at build
time&lt;/a&gt;.  It wasn’t very generic, in that you couldn’t start a new
task at a later time.  Worse, &lt;a href=&quot;https://github.com/ZipCPU/s6soc/blob/master/sw/zipos/taskp.c#L45-L59&quot;&gt;you had to know the stack
size&lt;/a&gt;
required of all of the tasks at build time as well.  That was always a key
limitation whenever I wanted to use it for a new project.&lt;/p&gt;

    &lt;p&gt;Part of the problem was due to my (non-existent) &lt;a href=&quot;https://github.com/ZipCPU/s6soc/blob/master/sw/zipos/ksetup.c#L122-L125&quot;&gt;malloc
implementation&lt;/a&gt;
at the time.  It worked great, as long as you never wanted to “free” any
memory.&lt;/p&gt;

    &lt;p&gt;Did I say “real-time”?  What made this kernel
&lt;a href=&quot;https://github.com/ZipCPU/s6soc/blob/master/sw/zipos/kernel.c&quot;&gt;this kernel&lt;/a&gt;
“real-time” wasn’t anything more than the fact that it met its realtime
requirements.  I managed that by placing the real-time critical parts of the
system into RAM, and leaving the rest running from Flash.  (RAM was a &lt;em&gt;very
precious&lt;/em&gt; resource on the S6, since there was only ever 16kB of block RAM
and no off chip RAM.)  Putting software into RAM was therefore a big deal,
&lt;a href=&quot;/zipcpu/2018/03/21/dblfetch.html&quot;&gt;but given how slow the flash
operated&lt;/a&gt;, it was a
necessity.)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The second key component of the ZipOS was the &lt;a href=&quot;https://github.com/ZipCPU/s6soc/blob/master/sw/zipos/syspipe.c&quot;&gt;System Pipe architecture,
syspipe&lt;/a&gt;.
This was a piece I was particularly proud of, in that it was a
multiprocessing O/S component that could be shared across all user tasks.&lt;/p&gt;

    &lt;p&gt;The &lt;a href=&quot;https://github.com/ZipCPU/s6soc/blob/master/sw/zipos/syspipe.c&quot;&gt;SysPipe
component&lt;/a&gt;
allowed one process to write into it, and another process to read out of it.
In many ways, this was a basic AXI-stream protocol – just written in
software.  If the wasn’t enough space within it to write, the writing task
would either block or raise an error flag (and cause a panic if I recall
correctly).  Reads were similar.  If there wasn’t enough used memory within
the pipe, the pipe would block until another task filled it with sufficient
memory.&lt;/p&gt;

    &lt;p&gt;Indeed, the pipe task was kind of unique, in that while one process wrote
into the pipe, another process might try reading from it, and the second
process would then block until the write was finished–meaning that “two
threads” might be active with the pipe at the same time, even though only
one thread would ever actually be active while the other one was blocking.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;A third piece was the &lt;a href=&quot;https://github.com/ZipCPU/s6soc/blob/master/sw/zipos/traps.h&quot;&gt;traps (i.e. syscalls) that were
defined&lt;/a&gt;.
Do note the key word in that statement: “defined.”  Not all of the defined
traps were implemented.  For example, there were traps for getting and
returning semaphores that were never implemented in the Kernel.&lt;/p&gt;

    &lt;p&gt;The kernel implemented the
&lt;a href=&quot;https://github.com/ZipCPU/s6soc/blob/master/sw/zipos/kernel.c#L270-L289&quot;&gt;WAIT&lt;/a&gt;,
&lt;a href=&quot;https://github.com/ZipCPU/s6soc/blob/master/sw/zipos/kernel.c#L290-L307&quot;&gt;CLEAR&lt;/a&gt;,
&lt;a href=&quot;https://github.com/ZipCPU/s6soc/blob/master/sw/zipos/kernel.c#L308-L311&quot;&gt;POST&lt;/a&gt; software interrupt,
&lt;a href=&quot;https://github.com/ZipCPU/s6soc/blob/master/sw/zipos/kernel.c#L312-L314&quot;&gt;YIELD&lt;/a&gt;,
&lt;a href=&quot;https://github.com/ZipCPU/s6soc/blob/master/sw/zipos/kernel.c#L315-L326&quot;&gt;READ&lt;/a&gt;,
&lt;a href=&quot;https://github.com/ZipCPU/s6soc/blob/master/sw/zipos/kernel.c#L327-L339&quot;&gt;WRITE&lt;/a&gt;,
get &lt;a href=&quot;https://github.com/ZipCPU/s6soc/blob/master/sw/zipos/kernel.c#L340-L342&quot;&gt;TIME&lt;/a&gt;,
&lt;a href=&quot;https://github.com/ZipCPU/s6soc/blob/master/sw/zipos/kernel.c#L343-L345&quot;&gt;MALLOC&lt;/a&gt;,
(ignored) &lt;a href=&quot;https://github.com/ZipCPU/s6soc/blob/master/sw/zipos/kernel.c#L346-L349&quot;&gt;FREE&lt;/a&gt;, and
&lt;a href=&quot;https://github.com/ZipCPU/s6soc/blob/master/sw/zipos/kernel.c#L350-L355&quot;&gt;EXIT&lt;/a&gt;
system calls (traps).&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Those are the big components of the ZipOS.&lt;/p&gt;

&lt;p&gt;Development stalled, however, when I tried to make the ZipOS more generic.
In many ways, this reveals how far the ZipOS was from a general purpose
Operating System.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;The fact that the all tasks, and their stack sizes and pipe connections,
all needed to be known at startup didn’t bode well for larger or more
generic systems.&lt;/p&gt;

    &lt;p&gt;Frankly, this was quite cumbersome to work with.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The lack of a good free() system call meant that all memory was once allocated
and never released.  While this might be great for a small, embedded
task managing system that only ever had 16kB of RAM, it was never generic
enough to be used in a system that would start new tasks after it had started.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;It wasn’t just tasks that were the problem.  At the time, I didn’t have a good
means of adding and removing new devices into the O/S.  The methods I had
weren’t generic enough to easily move on to the next project.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So, rather than fixing the ZipOS, I’ve been spending my time fixing the
foundations that made the ZipOS difficult to work with.&lt;/p&gt;

&lt;h2 id=&quot;autofpga&quot;&gt;AutoFPGA&lt;/h2&gt;

&lt;p&gt;One of the bigger problems was the challenge of &lt;a href=&quot;/blog/2017/06/22/simple-wb-interconnect.html&quot;&gt;building a bus interconnect for
a design&lt;/a&gt;.  It
seems like every design I use has a different set of peripherals, and they all
get &lt;a href=&quot;/zipcpu/2019/09/03/address-assignment.html&quot;&gt;mapped to new addresses with every new
project&lt;/a&gt;.  It’s
not just the addresses that get remapped from one FPGA design to another, the
interrupts get remapped as well.&lt;/p&gt;

&lt;p&gt;I needed a means of generating a design, connecting all the peripherals, and
providing an address mapping from the FPGA design portion to the software
that was controlling it.  This became the project
&lt;a href=&quot;https://github.com/ZipCPU/autofpga&quot;&gt;AutoFPGA&lt;/a&gt;.  You can read an &lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;overview of
the project here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;malloc&quot;&gt;Malloc&lt;/h2&gt;

&lt;p&gt;A second big problem I had was the lack of a good memory allocation scheme.
Anyone who has studied memory allocation will know this is a field of study
in and of itself.  I needed to fix the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;malloc()&lt;/code&gt; issue, but didn’t want to get
stuck in a lifetime of studying memory allocation to come up with the perfect
memory allocator.&lt;/p&gt;

&lt;p&gt;My solution was to adapt &lt;a href=&quot;http://sourceware.org/newlib/&quot;&gt;NEWLIB&lt;/a&gt; for the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;.
Most of my projects today now use this &lt;a href=&quot;http://sourceware.org/newlib/&quot;&gt;NEWLIB&lt;/a&gt;
port.  The &lt;a href=&quot;http://sourceware.org/newlib/&quot;&gt;NEWLIB&lt;/a&gt; port is now a part of the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu&quot;&gt;ZipCPU repository&lt;/a&gt;, and these
&lt;a href=&quot;/zipcpu/2018/02/12/zbasic-intro.html&quot;&gt;ZBasic&lt;/a&gt; instructions
should be enough to get you started with it.&lt;/p&gt;

&lt;h2 id=&quot;disk-drive&quot;&gt;Disk Drive&lt;/h2&gt;

&lt;p&gt;A second big problem with the ZipOS was that it didn’t have any support for a
disk drive or other non-volatile storage of any type.  Sure, I had my
&lt;a href=&quot;/blog/2019/03/27/qflexpress.html&quot;&gt;flash&lt;/a&gt; controller,
but this worked better as a ROM than a disk-drive which could hold any type of
file system.&lt;/p&gt;

&lt;p&gt;This was fixed in &lt;a href=&quot;/blog/2019/11/14/sdspi.html&quot;&gt;one of my recent SONAR
projects&lt;/a&gt;.  In that project, my
customer didn’t have a Linux setup.  He couldn’t load software onto the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; in my usual &lt;a href=&quot;/blog/2017/06/05/wb-bridge-overview.html&quot;&gt;debugging bus
fashion&lt;/a&gt;.  Worse,
without the debugging bus, I couldn’t really load a bootloader design &lt;a href=&quot;/blog/2019/03/27/qflexpress.html&quot;&gt;into the
flash&lt;/a&gt;.  I needed a new way
of delivering software to him.&lt;/p&gt;

&lt;p&gt;My solution was to use my &lt;a href=&quot;https://github.com/ZipCPU/sdspi&quot;&gt;SDSPI SD-Card
controller&lt;/a&gt; together with the
&lt;a href=&quot;http://elm-chan.org/fsw/ff/00index_e.html&quot;&gt;FATFS library&lt;/a&gt;.  I placed the
bootloader for this project into RAM, and then used it to read a file from the
SD-Card into memory which would then be the program file that my customer then
ran.&lt;/p&gt;

&lt;p&gt;The pieces from this solution can be found in a couple of places.  First, the
files that made my &lt;a href=&quot;https://github.com/ZipCPU/sdspi&quot;&gt;SDSPI controller&lt;/a&gt; work with
&lt;a href=&quot;http://elm-chan.org/fsw/ff/00index_e.html&quot;&gt;FATFS&lt;/a&gt; are posted in the &lt;a href=&quot;https://github.com/ZipCPU/sdspi/tree/master/sw&quot;&gt;software
directory of the
SDSPI controller&lt;/a&gt; controller.
Many of the other pieces are hidden in the &lt;a href=&quot;https://github.com/ZipCPU/videozip/tree/dev&quot;&gt;dev branch of my videozip
project&lt;/a&gt;.  While I’d like to move
them out of the &lt;a href=&quot;https://github.com/ZipCPU/videozip/tree/dev&quot;&gt;dev branch&lt;/a&gt; and
into the &lt;a href=&quot;https://github.com/ZipCPU/videozip/tree/master&quot;&gt;master branch&lt;/a&gt;,
that’ll require pulling the board out and making sure they work within that
project again–something I haven’t (yet) had the opportunity to do.&lt;/p&gt;

&lt;p&gt;Sadly, the size of the initial required boot loader means that it won’t fit in
the block RAM of the smaller FPGAs I have.  Those will still need to have their
initial bootloader initially loaded into flash.  Other than that problem, they
should work quite nicely.&lt;/p&gt;

&lt;h2 id=&quot;the-memory-management-unit&quot;&gt;The Memory Management Unit&lt;/h2&gt;

&lt;p&gt;That gets us past most of the problems with the original ZipOS, but without
a Memory Management Unit (MMU) I’ll struggle to allocate new tasks at runtime.&lt;/p&gt;

&lt;p&gt;One solution, similar to the one I used in the original ZipOS, would be to give
every task its own stack and memory area.  In this case, I would again need to
know how much to give each task at allocation time.  I suppose I could give a
generous amount to each task, but this would only work if I had a generous
amount of RAM to give to every task.&lt;/p&gt;

&lt;p&gt;The second problem with the solution above was that there was no way to tell
if a task overran its memory area, nor was there a means of allocating more
memory to a task if it had done so.&lt;/p&gt;

&lt;p&gt;Both of these problems can be solved by adding an MMU to the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 1. The original ZipCPU MMU-is-a-peripheral design forced the caches to operate on virtual addresses&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/zipos/original-mmu.svg&quot; alt=&quot;&quot; width=&quot;560&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/peripherals/zipmmu.v&quot;&gt;I have built such an
MMU&lt;/a&gt;.
It has yet to be successfully integrated into the CPU.  Well, I shouldn’t quite
say it like that.  I did manage to get the CPU to build (once) with the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/peripherals/zipmmu.v&quot;&gt;MMU&lt;/a&gt;
attached, but then ran into the problem where I needed a test program to test
out and try this
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/peripherals/zipmmu.v&quot;&gt;MMU&lt;/a&gt;
and that’s where the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/peripherals/zipmmu.v&quot;&gt;MMU&lt;/a&gt;
project ran out of steam.  I just … wasn’t certain what kind of program to
write in order to exercise it well.&lt;/p&gt;

&lt;p&gt;Perhaps I should ask my &lt;a href=&quot;https://reddit.com/r/ZipCPU&quot;&gt;Reddit&lt;/a&gt;,
&lt;a href=&quot;https://twitter.com/ZipCPU&quot;&gt;Twitter&lt;/a&gt;, or &lt;a href=&quot;https://parler.com/ZipCPU&quot;&gt;Parler&lt;/a&gt;
followers for suggestions the next time?&lt;/p&gt;

&lt;p&gt;The second problem the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/peripherals/zipmmu.v&quot;&gt;MMU&lt;/a&gt;
had was that the caches operated on Virtual memory addresses within the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/peripherals/zipmmu.v&quot;&gt;MMU&lt;/a&gt;
boundary.
In other words, the caches would only ever know virtual memory addresses.
Worse, a piece of memory in the cache might get overwritten by a second
virtual memory address to the same physical memory address if ever a single
physical memory address existed in two virtual memory places.  Worse,
addresses had context associated with them that would also need to be checked
and … I never managed to come up with an acceptable solution at the time to
fix this problem.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left; padding: 20px&quot;&gt;&lt;caption&gt;Fig 2. A proposed MMU alternative, so that the caches operate on physical addresses&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/zipos/proposed-mmu.svg&quot; alt=&quot;&quot; width=&quot;560&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;With a bit of hind sight, I now understand more of MMU design.  The &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/peripherals/zipmmu.v&quot;&gt;MMU I
built&lt;/a&gt;
was a fully associative MMU–requiring much more logic than was really required.
I’m tempted, now, to take another start at the MMU and to place it between the
CPU and its caches.  I’m also tempted to build the TLB within the MMU as a
one-way cache rather than a fully associative one, but I haven’t put my hand
to that task yet, because of the next task I’ve been working on which has
really taken precedence for me.&lt;/p&gt;

&lt;h2 id=&quot;bus-agnosticism&quot;&gt;Bus Agnosticism&lt;/h2&gt;

&lt;p&gt;The &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;,
as originally designed and built, is tightly coupled to a
pipelined implementation of the
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone bus&lt;/a&gt;.  The last
couple of projects I’ve worked on, however, have required an AXI3 bus not a
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone bus&lt;/a&gt;.
My most recent work, therefore, has been to make the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
bus agnostic so that it can be used with both a
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone&lt;/a&gt;
or an AXI4 bus.  (If you build the master right, then converting from AXI3 to
AXI4 and back becomes easy.  The key trick is for the master to only use one
AXI ID to solve the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WID&lt;/code&gt; problem and then to avoid issuing any burst
requests longer than 16 beats.)&lt;/p&gt;

&lt;p&gt;I’ve therefore been rebuilding the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
since last fall to be bus agnostic.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;There’s now a &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/zipcore/rtl/core/zipcore.v&quot;&gt;ZipCore&lt;/a&gt;,
containing the core of the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
and exposing a custom interface to both instruction and data memory units 
which can now be external to this core.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I now have instruction fetch routines for AXI4.  The &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/zipcore/rtl/core/axilfetch.v&quot;&gt;basic fetch routines
are in this AXILFETCH file&lt;/a&gt;,
and include a single instruction fetch (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FETCH_LIMIT=1&lt;/code&gt;),
a dual instruction fetch (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FETCH_LIMIT=2&lt;/code&gt;), and even a full instruction fetch
pipeline and FIFO (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FETCH_LIMIT &amp;gt; 2&lt;/code&gt;).  There’s even now an &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/zipcore/rtl/core/axiicache.v&quot;&gt;AXI4 instruction
cache&lt;/a&gt;
implementation that mimics &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/pfcache.v&quot;&gt;my original Wishbone pipelined instruction cache
implementation&lt;/a&gt;–although
the updated CPU is still missing a full AXI4 wrapper.  There is, however, an
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/zipcore/rtl/zipaxil.v&quot;&gt;AXI4-lite wrapper&lt;/a&gt;
that I’d like to try out in the near future.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I also have new data routines supporting AXI4.  These include the basic
one-operation &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/zipcore/rtl/core/axilops.v&quot;&gt;AXILOPS&lt;/a&gt;,
as well as the multiple memory access
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/zipcore/rtl/core/axilops.v&quot;&gt;AXILPIPE&lt;/a&gt;
design.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I’m also working on an AXI data cache.  I expect it will be very similar to
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/dcache.v&quot;&gt;my original Wishbone data
cache&lt;/a&gt;, but
it’s still a work in progress and hasn’t (yet) been posted.  I’m still hoping
to &lt;a href=&quot;/zipcpu/2019/02/09/cpu-blinky.html&quot;&gt;outperform Microblaze again&lt;/a&gt;
but this time using AXI4 either with (&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/zipcore/rtl/core/axilops.v&quot;&gt;or
without&lt;/a&gt;)
the data cache.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;That leaves the issue of atomic accesses when using AXI4, something the AXI4
specification calls “exclusive access”.&lt;/p&gt;

    &lt;p&gt;This last weekend, I worked on and posted an updated &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/demofull.v&quot;&gt;AXI block RAM
controller&lt;/a&gt;,
which, unlike Xilinx’s block RAM controller, can actually handle exclusive
access.  (Yes, I would like to blog about this soon …)  A CPU requires
atomic access support from its bus in order to make an operating system
work, and when using the AXI4 bus that support needs to come from the
slave–and not so much the bus.  Therefore, I now have a slave which can
offer this support.  That may even keep the CPU from needing a trap to
handle semaphore’s in the future.&lt;/p&gt;

    &lt;p&gt;The key step to making this task happen was updating my AXI4 (full) properties
to fully check the exclusive access handshake.  Much to my surprise (not),
several bus components stopped working now that the exclusive properties
are being fully tested–with the key failing component being the
&lt;a href=&quot;/formal/2020/05/16/firewall.html&quot;&gt;AXI4 firewall&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Exclusive access when using AXI4 requires a bit of a change to
interface the &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/zipcore/rtl/core/zipcore.v&quot;&gt;CPU
core&lt;/a&gt; with
its memory modules.&lt;/p&gt;

    &lt;p&gt;AXI4 exclusive access works in two steps, four from the standpoint of the CPU.
1) The CPU receives a LOCK instruction, warning it that an exclusive access
request is coming.  2) The first instruction following the LOCK request is a
read, which then sets the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ARLOCK&lt;/code&gt; field in an AXI4 (not lite) memory
request.  3) Once the value is read, the CPU operates on it–however it
needs to.  In the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;’s atomic access scheme, there’s
only one ALU instruction allowed here–sufficient for most operations.
4) The value is then written back to memory using a request with
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AWLOCK&lt;/code&gt; set.  If all goes well, the slave responds with an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EXOKAY&lt;/code&gt;
response.  If, however, something else has accessed the memory between
the original read and this final write, the slave is required not to write
the value to memory and to instead return an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OKAY&lt;/code&gt; response.  This needs to
then trigger the CPU to go back and re-start the operation from the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LOCK&lt;/code&gt;
instruction.&lt;/p&gt;

    &lt;p&gt;I have most of the &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/zipcore/rtl/core/axilops.v&quot;&gt;basic AXI-lite memory
unit&lt;/a&gt;
converted to a version that now uses this exclusive access mechanism,
however that has meant that I’ve needed to change the &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/zipcore/bench/formal/fmem.v&quot;&gt;memory interface
properties&lt;/a&gt;
used to verify the other memory routines and so those other routines now need
to be reverified together with the 
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/zipcore/rtl/core/zipcore.v&quot;&gt;CPU core&lt;/a&gt;
(again).&lt;/p&gt;

    &lt;p&gt;I still need to modify the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/zipcore/rtl/core/zipcore.v&quot;&gt;CPU core&lt;/a&gt;
to handle the re-start part of the operation as well.  I’m hoping this can
be as simple as the memory unit reading into the program counter register,
but I haven’t checked that part either.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I haven’t (yet) resolved how to make the bus and CPU endian-agnostic.
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone&lt;/a&gt;
doesn’t require any particular endian requirement, although the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; is big endian by nature.
AXI4 on the other hand is very definitely little endian in spite of what the
specification says.  Perhaps you may recall &lt;a href=&quot;/blog/2020/01/13/reuse.html&quot;&gt;discussing this issue
before&lt;/a&gt;?  Swapping endianness
isn’t nearly as trivial as it sounds.
I’m expecting this
issue to rear its head once I try to start using these routines–which should
be in the next couple of months.  Indeed, I’m already aware of some bugs
that may need to be addressed early on.&lt;/p&gt;

    &lt;p&gt;In preparation for this, I’ve made modifications to both the compiler and
binutils to handle building the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
&lt;a href=&quot;/zipcpu/2018/01/31/cpu-build.html&quot;&gt;tool chain&lt;/a&gt;
for either endianness.  I have yet to test these modifications.  Depending on
what happens when I try out my bus-based hacks, I may or may not need to
continue with updating the tool chain.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Building the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
for another bus also requires another wrapper, so I now have an &lt;a href=&quot;https://github.com/ZipCPU/zipcpuc/blob/zipcore/rtl/zipaxil.v&quot;&gt;AXI-lite
wrapper for the ZipCPU to test
out&lt;/a&gt;.  Unlike
my previous wrappers, this one is now formally verified (and I’ve discovered
bugs in the previous wrappers in the process–so I’ll now be formally
verfiying all my wrappers).  That means there’s now a new
&lt;a href=&quot;https://github.com/ZipCPU/zipcpuc/blob/zipcore/rtl/zipbones.v&quot;&gt;ZipBones&lt;/a&gt;
wrapper, and a (work in progress) updated
&lt;a href=&quot;https://github.com/ZipCPU/zipcpuc/blob/zipcore/rtl/zipsystem.v&quot;&gt;ZipSystem&lt;/a&gt;
wrapper.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I’m also moving around the control register address allocation for the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;.  Previously,
the debugging interface required two interactions to read a register.
1) First, you’d need to write to the CPU debug control register to set the
register address of the register you wanted to inspect, and then 2) you’d
need to read the data value from the CPU data register.  This required
two round trips across the bus.  This process then needed to be
repeated for every register within the CPU to just display the debug
screen.  Because this involved both writing and then reading, the debugging
bus was never able to use its burst access capability.  On a bad day, the
operation could be painfully slow.  I’m therefore allocating addresses for
every register in the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;’s register, so that you can
read all registers with one group-read command.  This should drastically
improve the performance of the debugger when reading registers across a slow
serial port–a long needed change.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;bus-width-adjustments&quot;&gt;Bus Width Adjustments&lt;/h2&gt;

&lt;p&gt;All of the above bus agnostic work is designed to make the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; work on an
AXI4 bus.  The project that needs it, however, involves connecting the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; to a controller that originally
had two 32-bit AXI3 bus ports.  One of those ports, that of an AXI3 DMA, now
needs to be made to be 64-bits wide.  Indeed, the whole core bus infrastructure
of that project will require a bus whose (minimum) size is 64-bits or this
DMA will have to run in a crippled fashion.  This has left me with some
problems–now resolved below.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;The &lt;a href=&quot;/blog/2017/06/05/wb-bridge-overview.html&quot;&gt;debugging
bus&lt;/a&gt; I use has
only ever been 32-bits.&lt;/p&gt;

    &lt;p&gt;I now have an &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axilupsz.v&quot;&gt;AXI-lite bus
upsizer&lt;/a&gt; which
should work nicely for this debugging interface, so that can now issue
read or write requests on any AXI4( or lite) bus that’s at least 32-bits
wide.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;’s original
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone&lt;/a&gt;
memory modules, both instruction and data, were only ever
32-bits.  This was always a sore point when working with a 64-bit wide
DDR3 SDRAM memory, such as the one the &lt;a href=&quot;https://github.com/ZipCPU/openarty&quot;&gt;Arty
A7&lt;/a&gt; has, since the memory device could
read twice as fast as the CPU could ever receive the results.  Sure, my
&lt;a href=&quot;/blog/2020/03/23/wbm2axisp.html&quot;&gt;Wishbone to AXI&lt;/a&gt;
bridge “works” and works nicely, but half the bandwidth
of the memory was lost in the 32-bit to 64-bit conversion.&lt;/p&gt;

    &lt;p&gt;The &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;’s new AXI4 memory
modules can now be parameterized by bus width, so they should be able to
handle an arbitrary sized memory bus.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;That still leaves me with a 64-bit bus needing to control a 32-bit
peripheral.&lt;/p&gt;

    &lt;p&gt;To handle that problem, I recently built a &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axi2axilsub.v&quot;&gt;64-bit to 32-bit AXI4
downsizer&lt;/a&gt;.
This appears to work in initial formal testing, but the design hasn’t yet
passed either an induction check or any simulation.  That’ll be coming soon.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Indeed, this project is now getting much closer to testing.  I’m expecting to
have the project, with the updated
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
in test before this summer time.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;No, the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; project
hasn’t stalled.  It’s still going strong.  However, while I’ve made many of
the changes above, they’re still waiting on some simulation tests to shake out
the last bugs remaining in them.  Until that happens, I’m not likely going to
merge the new &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/tree/zipcore&quot;&gt;zipcore
branch&lt;/a&gt; into the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/tree/master&quot;&gt;master&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Perhaps the ZipOS project itself has stalled.  However, it’s now being given
the foundations it was missing from the beginning.  It’s my hope, therefore,
that when I return to it I’ll be able to make much more progress on it than
ever before.&lt;/p&gt;
&lt;hr /&gt;&lt;p&gt;&lt;em&gt;Prepare thy work without, and make it fit for thyself in the field; and afterwards build thine house. (Prov 24:27)&lt;/em&gt;</description>
        <pubDate>Thu, 18 Mar 2021 00:00:00 -0400</pubDate>
        <link>https://zipcpu.com/zipcpu/2021/03/18/zipos.html</link>
        <guid isPermaLink="true">https://zipcpu.com/zipcpu/2021/03/18/zipos.html</guid>
        
        
        <category>zipcpu</category>
        
      </item>
    
      <item>
        <title>Lessons learned while building an ASIC design</title>
        <description>&lt;p&gt;Ever since I started working with FPGAs, I’ve always wanted to do an
&lt;a href=&quot;/blog/2017/10/13/fpga-v-asic.html&quot;&gt;ASIC design&lt;/a&gt;.  If
nothing else, I wanted to understand from experience what it was like.&lt;/p&gt;

&lt;p&gt;Last year, I got my chance.  I’m now on my second design, and the team I’m
working with has just sent a piece of this second design to be &lt;a href=&quot;https://en.wikipedia.org/wiki/Tape-out&quot;&gt;taped
out&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The process, however, was different in many ways I wasn’t expecting.  Here,
below, are some of those differences I wasn’t expecting.&lt;/p&gt;

&lt;h2 id=&quot;late-from-the-beginning&quot;&gt;Late from the beginning&lt;/h2&gt;

&lt;p&gt;The first thing that surprised me was the schedule pressure.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 1.  Memory Controller IP&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/asic-lsns/memchip.svg&quot; alt=&quot;&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;The design as a whole is a memory controller, as shown in Fig. 1.  It’s a memory
controller which can be sold independently to customers for placement into
a larger SoC design.&lt;/p&gt;

&lt;p&gt;This first ASIC component of the design I needed to build was actually fairly
simple.  There’s not a lot of logic in it.  I personally like to think of this
portion of the design as a glorified serializer and deserializer.  It takes
8x samples of a signal and serializes them to an output, and then does the same
in reverse.  Except, there are some subtle differences.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left; padding: 15px&quot;&gt;&lt;caption&gt;Fig 2.  High speed design steps&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/asic-lsns/design-steps.svg&quot; alt=&quot;&quot; width=&quot;480&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;More specifically, the design is the first half of a two stage design process
to build a memory controller.  The first stage involves building the high speed
portions of the design, as shown in Fig. 2.  This is the high risk stage.  It
involves building
components that cannot be implemented in an FPGA.  In some respects, this is a
throw-away portion of the design, and so it is important to minimize its
cost.  The second part will handle the protocol and logic associated with the
design.  This is the more complicated part.  Its gate count will be much
higher.  By verifying this portion of the design within an FPGA, cost and time
to development can be
optimized.  Even better, if necessary, the protocol can be debugged and
fixed–something not easily done on an ASIC.  The first stage, therefore, is
basically a speed translator.  It communicates with slower logic on one side
of the chip, and faster logic on the other.  Since this is for a memory
controller, the high speed lines are bidirectional, and they come accompanied
by a clock whenever data is present.  Shifting this clock by 90 degrees was
a bit of a challenge, as was delaying the clock in order to sample in the
middle of a received data bit, but the design was still pretty basic.&lt;/p&gt;

&lt;p&gt;I estimated it would take me about 2-4 weeks to build the design.&lt;/p&gt;

&lt;p&gt;Much to my surprise, I was late the moment the project started.&lt;/p&gt;

&lt;p&gt;Not all of this was my fault.  As I understand things, the engineer who was
working this project before me had left mid-project.  My job was to pick up
where he left off.  Unfortunately, that meant there was a bit of management
confusion between when the last engineer left and when my contract was signed.
It didn’t help that I wasn’t certain I’d even have the bandwidth for this
project when I started it, and so I delayed bidding for the project by a
couple months.&lt;/p&gt;

&lt;p&gt;Once the contract was signed, however, the project was late.&lt;/p&gt;

&lt;p&gt;The project was also late because after building my portion of the project
(in 2-4 weeks), I discovered that wasn’t nearly enough.  Sure, I
formally verified (nearly) every portion of the design, but I couldn’t
simulate the entire  design end to end.  The low-speed logic design simulation
was handed to me in a non-functional state, and I had just changed the
interface on top of that.  In whole, this was a non-starter.  How was I to
know if my new interface was sufficient, if I couldn’t verify the whole?&lt;/p&gt;

&lt;p&gt;So, let’s back up a bit to understand how this started.  I was given a design
consisting of a protocol portion and a physical layer portion, together
with several simulation components–much like Fig. 3 below.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: center&quot;&gt;&lt;caption&gt;Fig 3.  Design as received&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/asic-lsns/asreceived.svg&quot; alt=&quot;&quot; width=&quot;560&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;I was told a lot of things about it.  For example, this was what was left from
a previous working design that had been delivered to customers.  Since then,
that design had been adjusted and modified by a previous engineer, but those
modifications had yet to make it into a delivery.  I was also told that less
than half of the test scripts were passing.  Further, the 8b internal interface
was too fast for an FPGA to handle, and so I would need to slow it down by
parallelizing the data path.  So my initial task was simply to upgrade from
an 8-bit data path in the digital front end to a 64-bit data path.  That much
of the task was quite straightforward, and that was the portion that was to go
into this ASIC design.&lt;/p&gt;

&lt;p&gt;Straightforward?  Yes.  However, it did send me crawling all over the original
design, and I did have to make changes in more places than I was expecting–even
in the low-speed logic that was destined to be scrapped as part of my upgrades.&lt;/p&gt;

&lt;p&gt;For example, the AXI bus width of the design given to me was naturally 32-bits
wide.  This works nicely with an AXI4-lite controller.  A 64-bit datapath,
however, meant that either the bus would also need to be made 64-bits wide,
or that the bus width would become a performance bottleneck.&lt;/p&gt;

&lt;p&gt;The next problem was that the simulation I was given didn’t work.  Yes, the
simulation supported nearly a hundred separate tests, but I was told at the
outset that most of them didn’t work.&lt;/p&gt;

&lt;p&gt;On top of that, the free Verilog simulator I had access to on my desktop,
&lt;a href=&quot;http://iverilog.icarus.com&quot;&gt;Icarus Verilog&lt;/a&gt;, didn’t support the SystemVerilog
dot notation when calling tasks.  Getting the simulation, therefore, to even
build in &lt;a href=&quot;http://iverilog.icarus.com&quot;&gt;Icarus Verilog&lt;/a&gt; took some days.&lt;/p&gt;

&lt;p&gt;To make matters worse, once I got to the point where I could try one or two
of the “verified” tests, that is once I could test the first of the simulations
that were supposed to “just work”–they didn’t work.  Instead, the “verified”
tests did the worst thing possible: they hung the simulation.  That left me
wondering if, or when, I should kill the simulation or if it was actually
doing something useful while it wasn’t printing anything to the screen.&lt;/p&gt;

&lt;p&gt;Needless to say, my 2-4 week task took much longer to accomplish than I was
anticipating.  It is now five months later, and the design is only now taping
out.&lt;/p&gt;

&lt;p&gt;So much for my time estimates.&lt;/p&gt;

&lt;p&gt;Seriously, I’d be a much better engineer, and certainly a much more profitable
one, if I could estimate the time to complete a project from the beginning
much better than I can today.&lt;/p&gt;

&lt;h2 id=&quot;gates-are-cheap-verification-is-not&quot;&gt;Gates are cheap, verification is not&lt;/h2&gt;

&lt;p&gt;Nothing is static in this world, not even design requirements.&lt;/p&gt;

&lt;p&gt;It wasn’t until after I had built my design that I got a chance to read the
original contract between my client and his customer.  That contract called
for a built-in self testing (BIST) capability.  Oops.  I hadn’t built that
in.  No problem, I thought, I could add in a simple BIST capability with just
a couple extra registers.&lt;/p&gt;

&lt;p&gt;First, there was the control wire.  The slave access port(s) need to be
adjusted so they could turn on the BIST checker.  That part was easy, and I
know &lt;a href=&quot;/blog/2020/12/19/axil-register-checking.html&quot;&gt;how to formally verify that a bus register can be properly
controlled&lt;/a&gt;,
so I was good there.  The second part was to capture the internal state on a
given signal.  This was almost as simple as,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;capture&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;triggered&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;capture&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;internal_value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Cool!  I was done.&lt;/p&gt;

&lt;p&gt;But did it work in simulation?  No.  I hadn’t built a simulation for it.&lt;/p&gt;

&lt;p&gt;Building the simulation took another day, since I needed to check all of the
various bits that could be captured above.  (The capture signal was wider than
a single bit.)  It then took another day (or two) to get it all to work.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 4. &quot;Of course&quot; is not a good verification practice&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/asic-lsns/of-course.svg&quot; alt=&quot;&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Was the task done?  No.  Now, every time I change the design, I have to go back
and re-verify it against this simulation.  Worse, because of the clock games
taking place within this design, there were all kinds of timing errors generated
by this logic.  In the end, I split the capture signal into two, each captured
on a separate clock.  Even that wasn’t enough, because I only later thought
through the fact that eight of the internal values were captured on their own
special clocks–but that’s part of the longer story.&lt;/p&gt;

&lt;p&gt;That happened to be only part of the BIST story.&lt;/p&gt;

&lt;p&gt;For the other half, I suggested monitoring the output of the high speed
device through the input channel.  The data would just reflect back within the
high speed portion of the design onto the input, as shown in Fig. 5 below.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: center&quot;&gt;&lt;caption&gt;Fig 5. Reflection checking&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/asic-lsns/reflection.svg&quot; alt=&quot;&quot; width=&quot;560&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;This, I reckoned, could be implemented with a simple no-logic change in the
front end.  That is, it was a no-logic change until I actually took the time
to simulate it instead of telling everyone it would “just work”.  Only after
I built a simulation for this check did I realize I had turned reflections
off to optimize power.  Although I fixed up the design to get this to work,
there was a second problem to it that I wasn’t expecting.  Because the design
would receive and return its own transmitted data as it was transmitting it,
the I/O lines couldn’t be shared between transmit and receive.  This nearly
doubled the number of I/O pins on the ASIC to the point where the size of the
I/O pin pads dominated the size of the ASIC and therefore it’s manufacturing
cost.&lt;/p&gt;

&lt;p&gt;Both adjustments required only a minimal amount of design adjustments to our
high speed ASIC design.  The design changes may have taken only 15 minutes
each.  Building the simulation necessary to prove these changes may have
taken closer to a day for each of them.  Running all the various simulations
now at &lt;a href=&quot;https://en.wikipedia.org/wiki/Tape-out&quot;&gt;tape out&lt;/a&gt; still takes several
days–assuming everything works.&lt;/p&gt;

&lt;p&gt;Even these early simulations weren’t the end of the verification task.  Once
the design was laid out and the internal timing values from within the design
were known, it then needed to be verified &lt;em&gt;again&lt;/em&gt;, and then again as a second
portion of the design was laid out, and again as a third portion, etc.  The
number of times my “working” logic has had to go through a simulator has been
somewhat of a shock to me.  More on that to come.&lt;/p&gt;

&lt;h2 id=&quot;design-for-test-dft-signals&quot;&gt;Design for Test (DFT) signals&lt;/h2&gt;

&lt;p&gt;One of the first things I did with the design I received was to strip out any
and all unused logic.  This meant both the logic I wasn’t using as well as any
logic I couldn’t explain.  As a result, I quickly removed the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TEST_MODE&lt;/code&gt;
input, as well as the several &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SCAN_*&lt;/code&gt; inputs associated with it, such as the
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SCAN_CLK&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;That worked great until I sent my design to the layout engineer.  He told me
I had to put these values back into the design to support
&lt;a href=&quot;https://en.wikipedia.org/wiki/Design_for_testing&quot;&gt;DFT&lt;/a&gt; scan chain insertion.&lt;/p&gt;

&lt;p&gt;Our &lt;a href=&quot;https://en.wikipedia.org/wiki/Design_for_testing&quot;&gt;DFT&lt;/a&gt; implementation
worked off of a basic scan chain.  That meant that every flip-flop in the
design needed to be connected to a massive shift register running through
the whole design.  This allows you to test the internal circuitry of the
design after it has been manufactured, to verify that it was manufactured
correctly.&lt;/p&gt;

&lt;p&gt;Getting this support working also required some changes to the design itself.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;The digital design module needed the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Design_for_testing&quot;&gt;DFT&lt;/a&gt;
inputs listed as part of its portlist&lt;/p&gt;

    &lt;p&gt;That meant I had to go back and put this logic back into the design in
spite of having removed it.&lt;/p&gt;

    &lt;p&gt;This felt a bit strange to do.  The
&lt;a href=&quot;https://en.wikipedia.org/wiki/Design_for_testing&quot;&gt;DFT&lt;/a&gt;
signals weren’t connected to anything within the RTL, and they generated
&lt;a href=&quot;/blog/2017/06/21/looking-at-verilator.html&quot;&gt;Verilator&lt;/a&gt;
lint errors, but they were apparently still necessary.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Every incoming clock must be multiplexed with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SCAN_CLK&lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;This was the biggest change.  I needed to add a clock switch to every
incoming clock within my design.  If &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TEST_MODE&lt;/code&gt; was high, then the design
required the use of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SCAN_CLK&lt;/code&gt;.  If &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TEST_MODE&lt;/code&gt; was low, then the design
clock would be used.&lt;/p&gt;

    &lt;p&gt;Unlike the &lt;a href=&quot;/formal/2018/05/31/clkswitch.html&quot;&gt;clock
switch&lt;/a&gt;
we studied earlier on the blog, however, this switch was nothing more than
a simple multiplexer selecting which of two clocks would be produced at the
output.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Every internal clock needed to be multiplexed with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SCAN_CLK&lt;/code&gt;.  This
was in addition to the incoming clocks mentioned above.&lt;/p&gt;

    &lt;p&gt;Basically, if you are going to create a logic generated clock, anything
that will subsequently become the edge of a flip-flop, then the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Design_for_testing&quot;&gt;DFT&lt;/a&gt; logic
needs to be able to toggle that downstream logic with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SCAN_CLK&lt;/code&gt;.
Every clock within the design therefore, and not just those one coming from
the PLL, needed a multiplexer on it before it could be used.&lt;/p&gt;

    &lt;p&gt;This also means that there will only ever be a single clock throughout the
design when in the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Design_for_testing&quot;&gt;DFT&lt;/a&gt;
test mode.  This will naturally limit the things the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Design_for_testing&quot;&gt;DFT&lt;/a&gt;
test mode can actually test.  In other words, any further testing and
verification that might need to be done in silicon was my responsibility.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The rule for clocks applies to asynchronous resets as well&lt;/p&gt;

    &lt;p&gt;This one also surprised me.  Because my design logic might toggle on
an asynchronous reset, it also needed a multiplexer to bypass
the &lt;a href=&quot;/formal/2018/04/12/areset.html&quot;&gt;reset synchronizer&lt;/a&gt;
when the test mode was active.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In many ways, this &lt;a href=&quot;https://en.wikipedia.org/wiki/Design_for_testing&quot;&gt;DFT&lt;/a&gt;
logic looked and acted very much like
&lt;a href=&quot;https://en.wikipedia.org/wiki/JTAG&quot;&gt;JTAG&lt;/a&gt; logic might–but without the
&lt;a href=&quot;https://en.wikipedia.org/wiki/JTAG&quot;&gt;JTAG&lt;/a&gt; state machine.
There was a long shift register, or even series of shift registers–i.e. the
scan chain, within the design that were controlled by this
&lt;a href=&quot;https://en.wikipedia.org/wiki/Design_for_testing&quot;&gt;DFT&lt;/a&gt;
circuitry.  I just didn’t realize that I, as the digital designer prior to
layout, had a role to play in the process.&lt;/p&gt;

&lt;p&gt;In other words, the next time I’m given a design like this, I’m not going to
immediately rip out the &lt;a href=&quot;https://en.wikipedia.org/wiki/Design_for_testing&quot;&gt;DFT&lt;/a&gt;
logic as my first step.&lt;/p&gt;

&lt;h2 id=&quot;cost-is-not-always-measured-in-gate-counts&quot;&gt;Cost is not always measured in gate counts&lt;/h2&gt;

&lt;p&gt;Manufacturing cost for ASIC production is generally proportional to the area
used by the design.  More specifically, the cost is dominated by the cost to
produce the masks necessary to manufacture a wafer.  It’s also possible to
place multiple dissimilar chips on a given wafer in order to help spread the
cost of manufacturing a wafer across multiple users.  That still leaves wafer
area as the dominant measure of cost.&lt;/p&gt;

&lt;p&gt;Prior to this design, I had always thought that meant that the logic area of
the design, as measured in gate counts, would then be roughly proportional to
the overall area and would therefore dominate the overall manufacturing cost.&lt;/p&gt;

&lt;p&gt;Much to my surprise, I discovered that each I/O pad connecting the design to
the outside world required a minimum amount of area.  In my case, the design
required so many I/O pads that the size of these pads proved to dominate the
size of the design.  The actual gate area was much smaller.&lt;/p&gt;

&lt;p&gt;Even apart from the I/O pad sizes, there was a very large analog section to
this high-speed chip.  This included things like the PLL and several DLLs,
in addition to the circuitry necessary to handle unwanted electrostatic
discharge (ESD) or the circuitry required to “clean” (i.e. filter) the power
for the analog logic.  I had never thought of a design as
needing these components before, and to my surprise the digital logic was
very small in size in comparison to them.&lt;/p&gt;

&lt;h2 id=&quot;x-propagation-matters&quot;&gt;X Propagation Matters&lt;/h2&gt;

&lt;p&gt;Ok, I’ll be honest here, I’ve never used ‘x propagation in any of my designs
prior to these ASIC projects.  My favorite simulator,
&lt;a href=&quot;/blog/2017/06/21/looking-at-verilator.html&quot;&gt;Verilator&lt;/a&gt;,
doesn’t support them as a design decision.
&lt;a href=&quot;https://symbiyosys.readthedocs.io/en/latest/&quot;&gt;SymbiYosys&lt;/a&gt;, the
formal verification tool I use, always assigns a ‘1 or a ‘0 to every value in
a broken trace, and checks all possible values for something that isn’t given
a initial value–so I haven’t needed ‘x support.&lt;/p&gt;

&lt;p&gt;Then a customer complained that my first ASIC design didn’t work in their
simulation.  I traced the complaint down to one of two problems.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;always @(*)&lt;/code&gt; block.&lt;/p&gt;

    &lt;p&gt;I’ve enjoyed using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;always @(*)&lt;/code&gt; blocks for any combinational logic.  In
particular, I’ve enjoyed using this block when dealing with generate
blocks like the one below&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;kt&quot;&gt;reg&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;VAL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;generate&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OPT_DESIGN_OPTION&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// Some complex block setting VAL&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;VAL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CONSTANT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;endgenerate&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I like this approach because I don’t need to create second wire to
   hold the value in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VAL&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The problem with this approach is that nothing triggers the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;always @(*)&lt;/code&gt;
   block.  It’s not a problem in hardware, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VAL&lt;/code&gt; is given the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CONSTANT&lt;/code&gt; as its
   definition.  It’s only a problem in simulation.  In simulation, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VAL&lt;/code&gt; is not
   given an initial value and the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;always @(*)&lt;/code&gt; block is never triggered because
   nothing within it ever changes.  As a result, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VAL&lt;/code&gt; remains &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;x&lt;/code&gt; (undefined)
   in the simulation.&lt;/p&gt;

&lt;p&gt;The SystemVerilog specification fixes this issue somewhat in its
   definition of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;always_comb&lt;/code&gt;.  However, other than &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;localparam&lt;/code&gt;s, I’ve tried
   to avoid SystemVerilog features so that I can maintain compatibility with
   the older parsers that are out there.&lt;/p&gt;

&lt;p&gt;Fixing this forced me to adjust my personal design standards so that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VAL&lt;/code&gt;
   would be defined as a wire (a.k.a. a net) in these constructs.  This
   also meant that I would now need to define a separate register, let’s
   call it &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;r_VAL&lt;/code&gt;, which the former logic sets.  In the end, the wire is then
   assigned the resulting value either way.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;VAL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;generate&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OPT_DESIGN_OPTION&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;reg&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;r_VAL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// Some complex block setting r_VAL&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;VAL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r_VAL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;VAL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CONSTANT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;endgenerate&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Personally I find this cumbersome.  However, it’s now going to become part of
   my personal coding standard lest I come across this bug again.  Indeed,
   there’s now &lt;a href=&quot;https://github.com/ZipCPU/blob/zipcore/rtl/core/zipcore.v&quot;&gt;a
   version&lt;/a&gt; of the
   &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
   following this new coding guideline as well.&lt;/p&gt;

&lt;ol start=&quot;2&quot;&gt;
  &lt;li&gt;
    &lt;p&gt;Recursive definitions&lt;/p&gt;

    &lt;p&gt;This one burns me up.  Imagine you have a clock divider, such as&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;div_clk&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;div_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In this example, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;div_clk&lt;/code&gt; isn’t given an initial value because, well,
   initial values aren’t allowed in ASICs.  As long as the hardware can fix
   the value at either &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1&lt;/code&gt;, this clock divider will do the right thing.
   Even better, I can use formal tools to verify that this simple circuit will
   do the right thing either way it’s set.  The problem is not that the hardware
   won’t work, the problem is that the simulator won’t work with something like
   this.  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;div_clk&lt;/code&gt; will be given an initial assignment of ‘x, and anything
   that depends upon it will then get an ‘x value.&lt;/p&gt;

&lt;p&gt;The result of all of this is that I’ve found myself forcing signals to be
   reset that don’t really need to be reset at all.&lt;/p&gt;

&lt;ol start=&quot;3&quot;&gt;
  &lt;li&gt;
    &lt;p&gt;The asynchronous reset applies to everything&lt;/p&gt;

    &lt;p&gt;Up until now, I’ve used &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;initial&lt;/code&gt; statements in my designs quite heavily.
They work great in FPGA designs.  They just don’t work at all in ASIC
designs.&lt;/p&gt;

    &lt;p&gt;Worse, because of ‘x propagation issues, any bit that isn’t set by the
asynchronous reset gets flagged as an ‘x and shows up like a sore thumb on
any simulation trace.&lt;/p&gt;

    &lt;p&gt;I’ve also avoided asynchronous resets in the past, based upon a comment
in some Xilinx documentation suggesting that RF interference might trigger
an accidental asynchronous reset.  (I’ve since been asked by a Xilinx
designer to find the document, and … I can’t remember where I found it
initially.  They claim asynchronous resets should work just fine.)&lt;/p&gt;

    &lt;p&gt;Not so with this design.  In this case, every flop was initialized with an
asynchronous reset.  In some cases, the asynchronous reset would be active
long before the clock ever was.&lt;/p&gt;

    &lt;p&gt;This also affected my formal proofs.  My first attempt at proofs without
initial statements involved  just not evaluating any assertions on the
first clock cycle of the proof.  Now I’m starting to get into the habit
of gating all of my formal assertions with a reset check, to make sure that
the logic works once the reset is accomplished.&lt;/p&gt;

    &lt;p&gt;This also means that my &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/tree/master/bench/formal&quot;&gt;AXI bus property
sets&lt;/a&gt; now
have options for asynchronous reset checking.  If this option is turned on,
the AXI property sets will now insist all VALID flags go to zero on the
same clock as the reset, in addition to the clock following.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Perhaps I shouldn’t complain.  As I mentioned above, logic is cheap.  Once I
knew what was going on, these fixes only took minutes to make.  It’s not the
logic that costs so much, it’s the verification part that’s much harder.&lt;/p&gt;

&lt;h2 id=&quot;asic-clocks-are--different&quot;&gt;ASIC Clocks are … different&lt;/h2&gt;

&lt;p&gt;In FPGAs, there are &lt;a href=&quot;/blog/2017/08/21/rules-for-newbies.html&quot;&gt;rules for
clocks&lt;/a&gt;.  One of
those rules is that logic generated clocks are bad.  In general, FPGA tools
can’t handle the timing analysis of any logic generated clocks,
the logic generated clock doesn’t have the same timing relationship as the
clock it came from, and it isn’t placed automatically on the clock routing
network.  These are all reasons why logic generated clocks are generally bad.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/blog/2017/08/21/rules-for-newbies.html&quot;&gt;These rules&lt;/a&gt; don’t
necessarily apply to ASIC designs.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;ASICs use logic generated clocks&lt;/p&gt;

    &lt;p&gt;ASIC designs are different.  Indeed, once you dig into the weeds of an ASIC,
you might start to believe that all clocks are logic generated.  You would
be right to some extent, because even the PLLs have some amount of logic
within them.&lt;/p&gt;

    &lt;p&gt;Unlike FPGAs, ASICs don’t come with a set of dedicated clock routing
networks.  Instead, the clock trees used within ASIC designs have to be
engineered and inserted into the design for each clock that uses them.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;ASIC designs are known for gating their clocks&lt;/p&gt;

    &lt;p&gt;This technique is primarily used for reducing power within a design.&lt;/p&gt;

    &lt;p&gt;I grew up in Minnesota, not far from &lt;a href=&quot;https://www.nps.gov/miss/planyourvisit/lockdam1.htm&quot;&gt;Lock and Dam number one on the
Mississippi river&lt;/a&gt;.
&lt;a href=&quot;https://www.nps.gov/miss/planyourvisit/lockdam1.htm&quot;&gt;That lock and Dam&lt;/a&gt;
has since become imagery for me to understand power usage within an
electronic circuit.  Imagine, if you will, that every wire within an
electronic design is a lock on a river that can either hold water (i.e.
charge) or not.  Energy is used every time the lock is filled, and it is
measured by the amount of  water necessary to fill the lock.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;table align=&quot;center&quot; style=&quot;float: center&quot;&gt;&lt;caption&gt;Fig 6. A Lock and Dam analogy to electrical power usage&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/asic-lsns/lock-analogy.svg&quot; alt=&quot;&quot; width=&quot;560&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;The higher the water level is, that is the higher the core voltage is
   within a design, the more water that will be necessary to fill the lock.
   Similarly, the longer the lock is whose water level (a.k.a
   voltage) needs to be adjusted, the more water it will take to adjust it.&lt;/p&gt;

&lt;p&gt;Clock trees are equivalent to very long lock chambers throughout the
   design that all need to be filled.  It takes a lot of current to switch
   the tree from one voltage level to another, and the more times the clock
   toggles the more power is used by the clock tree.&lt;/p&gt;

&lt;p&gt;This leads to three ways of reducing power in a design.  You can lower the
   core voltage.  This is equivalent to lowering the height of the water in
   the lock.  You can also lower the frequency.  This is equivalent to raising
   and lowering the lock fewer times, and so you use less water over time.  You
   could also limit the number of flip-flops that toggle based upon the clock,
   although that doesn’t fit our analogy nearly as will.  Finally, it doesn’t
   make sense to adjust the water level in a lock that nothing depends upon.&lt;/p&gt;

&lt;p&gt;This is how gating a clock can reduce the power usage of a design.  Because
   clock trees tend to have a large amount of circuitry dependent upon them,
   and because they use a lot of area within the chip, toggling the clock costs
   a lot of energy.&lt;/p&gt;

&lt;p&gt;Although you can do this within an FPGA, the technique itself isn’t
   commonly used.  FPGAs offer alternatives to clock gating instead, things
   like clock-enables in flip-flops.&lt;/p&gt;

&lt;p&gt;One of the things I learned in this design, which I really should have
   already known, is that gating a clock with a simple AND gate is insufficient
   when working with digital logic.  While it might be appropriate when
   implementing a &lt;a href=&quot;https://en.wikipedia.org/wiki/Design_for_testing&quot;&gt;DFT&lt;/a&gt; scan
   chain, it’s highly inappropriate in general.  A clock gate requires a
   proper gating circuit lest the clock and everything dependent upon it
   become ‘x in simulation, or fail setup and hold timing requirements in
   actual hardware leading to a mismatch between simulation and implementation.&lt;/p&gt;

&lt;p&gt;This fact came into play due to the fact that we were running simulations at
   multiple clock rates.  The simulations would start out with a slower clock,
   and then gradually increase the clock frequency to the maximum frequency
   required by the device.  Further, while the clock frequency was changing in
   the PLL, the PLL would gate the downstream clocks with an AND gate.  Sure
   enough, in one particular run, this AND gate clipped the clock at something
   less than a full pulse width.  One flip flop dependent upon this clock
   switch, a flip flop used to generate a logic clock for downstream processing,
   then turned into an ‘x.  The entire simulation failed from that point
   forward.&lt;/p&gt;

&lt;ol start=&quot;3&quot;&gt;
  &lt;li&gt;
    &lt;p&gt;Clocks can be switched&lt;/p&gt;

    &lt;p&gt;One of the tasks required of this design was to subtly adjust the timing
of particular signals within a clock’s width.  Indeed, we were shooting for
an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;80ps&lt;/code&gt; time delay adjustment capability similar to Xilinx’s ODELAY
or IDELAY hardware blocks.  We achieved some of what we were looking
for by moving data signals from one phase of the primary clock to another.&lt;/p&gt;

    &lt;p&gt;A giant clock multiplexer was used for selecting from among the many
clock phases necessary for this operation.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;All of these operations were fairly easy to design and implement in Verilog.
For several months the design with these wonderful blocks in them was awesome.&lt;/p&gt;

&lt;p&gt;Then the design was implemented, placed and routed.  All of a sudden the
consequences of these various clock choices started to make themselves clear.
The balanced clock multiplexer took nearly a fifth of a clock cycle to select
the right clock.  The &lt;a href=&quot;/blog/2020/08/22/oddr.html&quot;&gt;output DDR
element&lt;/a&gt; had one path delay on
one leg and another path delay on another.  Indeed, uncontrolled layout timing
delays on the order of 256ps made it very difficult to finally control
output delays with a better than 80ps accuracy.  These realities forced some
level of last minute redesign that I wasn’t expecting.&lt;/p&gt;

&lt;h2 id=&quot;specify-blocks&quot;&gt;Specify Blocks&lt;/h2&gt;
&lt;p&gt;I remember being in a design meeting with the engineers who built
&lt;a href=&quot;https://symbiyosys.readthedocs.io/en/latest/&quot;&gt;SymbiYosys&lt;/a&gt;
at one time discussing specify blocks.  One of their customers had requested
that &lt;a href=&quot;https://symbiyosys.readthedocs.io/en/latest/&quot;&gt;SymbiYosys&lt;/a&gt; support them,
and the discussion centered on whether or not
&lt;a href=&quot;https://symbiyosys.readthedocs.io/en/latest/&quot;&gt;SymbiYosys&lt;/a&gt;
should support them, and how they should be supported if at all.  At the
time, I had no idea what a specify block was.  As a result, it was no skin
off of any project I was working with if we didn’t support them.&lt;/p&gt;

&lt;p&gt;Then I started working on this project.&lt;/p&gt;

&lt;p&gt;The model I was given for the device we were to interact with had multiple
specify blocks within it.  These specified such things as the setup and hold
time prior to a clock tick, the time a value needed to hold constant following
a clock edge, or even the minimum skew between particular items.  Much to my
pleasant surprise, these timing specifications read like a formalization of
many data sheets I’d read before.  Indeed, all of the specification requirements
within the design could be read and translated directly from the specification
we were working with.&lt;/p&gt;

&lt;p&gt;This was awesome!  I’d never used this capability before.  I liked it!&lt;/p&gt;

&lt;p&gt;Then I started running into trouble.&lt;/p&gt;

&lt;p&gt;My first problem was that &lt;a href=&quot;http://iverilog.icarus.com&quot;&gt;Icarus Verilog&lt;/a&gt; didn’t
support them.  I didn’t realize this at first.  Then I switched from
&lt;a href=&quot;http://iverilog.icarus.com&quot;&gt;Icarus Verilog&lt;/a&gt; to a commercial simulator.  I first
tried &lt;a href=&quot;https://community.cadence.com/cadence_technology_forums/f/functional-verification/39923/nc-verilog-user-manual&quot;&gt;ncverilog&lt;/a&gt;.  When
&lt;a href=&quot;https://community.cadence.com/cadence_technology_forums/f/functional-verification/39923/nc-verilog-user-manual&quot;&gt;ncverilog&lt;/a&gt;
didn’t support &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;localparam&lt;/code&gt; statements I then switched again to
&lt;a href=&quot;https://www.cadence.com/en_US/home/tools/system-design-and-verification/simulation-and-testbench-verification/xcelium-simulator.html&quot;&gt;XCellium&lt;/a&gt;.
Then, &lt;a href=&quot;https://www.cadence.com/en_US/home/tools/system-design-and-verification/simulation-and-testbench-verification/xcelium-simulator.html&quot;&gt;XCellium&lt;/a&gt;
started generating errors when my design wasn’t holding to the various timing
requirements found within the protocol.&lt;/p&gt;

&lt;p&gt;After wrestling with the Verilog simulation for some time, I now wish in
hindsight that I had been more supportive of specify block support within
&lt;a href=&quot;https://symbiyosys.readthedocs.io/en/latest/&quot;&gt;SymbiYosys&lt;/a&gt;.
Now that I’ve read through the SystemVerilog specification discussing
specify blocks, I’m also convinced that such support wouldn’t be that hard
to build.  The hardest part would be the parsing, but in general that’s already
a solved problem.&lt;/p&gt;

&lt;h2 id=&quot;its-not-over-when-the-digital-design-is-done&quot;&gt;It’s not over when the digital design is done&lt;/h2&gt;

&lt;p&gt;One of the things I’ve already alluded to above is that the project was far
from over once the digital design was complete.  While I wasn’t a part of many
of the steps that followed, I was part of enough of them.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;I’ve already mentioned
&lt;a href=&quot;https://en.wikipedia.org/wiki/Design_for_testing&quot;&gt;DFT&lt;/a&gt;
scan chain insertion&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The design needed to pass a lint check.  The default linter wanted to
complain about a bunch of highly irrelevant “problems”.  I convinced the team
we could use 
&lt;a href=&quot;/blog/2017/06/21/looking-at-verilator.html&quot;&gt;Verilator&lt;/a&gt;
for linting instead.  As a result, I was able to produce a “clean” design
with no lint errors.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I was asked to run an automated coverage analysis check on the design.
Basically, I re-ran all of my simulations and recorded which lines were
getting executed, which bits were toggled and so on.  Signals that didn’t
toggle, or logic that didn’t get exercised were both flagged for discussion
and possible adjustment to the simulations.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Another team member ran a clock domain crossing analysis made on my design.
This analysis looked at every clock domain crossing, and caused us to look
real hard at them–did they need proper timing constraints or
false path insertion?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Power and ground pins needed to be assigned to the design, and the I/O
pins needed to be apportioned to different locations on the chip
interspersed with a sufficient number of power and ground pins to support
them.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I then needed to build an “I/O ring” for the design.  This was new for me,
as I’d never done one of these before.  Basically, I needed to build a
Verilog design that connected all of the external pins, whether inputs or
outputs, to the rest of my Verilog design.  In a Xilinx world, this would
be like connecting all of your I/O pins to an IBUF, OBUF, or an IOBUF rather
than relying on the synthesis tool to do this for you.  It was a touch
different, however, in that I also needed to place multiple power and ground
pins for the design.&lt;/p&gt;

    &lt;p&gt;During this process, the analog engineer I was working with laughed at me
for doing this.  Why, he asked?  Why do you need to model this in Verilog
at all?  As it is, the design needs to be turned into gates and components
laid out in a three dimensional grid.  Verilog is only an intermediate step.
Once you have the three dimensional layout, why do you need the Verilog
describing it anymore?&lt;/p&gt;

    &lt;p&gt;At the same time, even though this I/O ring was quite simple to build, I
still messed it up.  A coworker noticed late in the design process that
one signal had bypassed the I/O pads to go straight into the design.&lt;/p&gt;

    &lt;p&gt;Sadly, we didn’t have any good verification tools to support this portion of
the design.  Sure, I verified that the design worked as desired with the
I/O pads in place, but what would happen if I connected a particular I/O to
the wrong pin?  It would still work in simulation.  What if I used a signal
that bypassed the I/O ring?  That would also still work in simulation.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Since the design consisted of both digital and analog components, I was
given a Verilog model of the analog components to simulate with.  I initially
ignored this model, something that turned out to be quite a mistake.  Why?
Because I already “knew” my design worked against the analog model I’d been
working with, so why did I need this updated model?  As long as the analog
designer had built his design according to the specification we had agreed
upon, what difference would it make if I used my model or his?&lt;/p&gt;

    &lt;p&gt;Unlike mine, however, his model was based upon the hardware “as-built”,
not on my ideas of how it was going to be built.&lt;/p&gt;

    &lt;p&gt;Unfortunately again, once I finally replaced my own model with this
“as-built” model the design no longer passed simulation.  In one case, the
problem had to do with the fidelity of the analog model.  The analog
designer hadn’t truly modeled one of the circuits.  In another case, however,
the analog designer had misunderstood my specification and built the wrong
component.  Had I not done simulations with the analog model, I would not
have found this mistake.&lt;/p&gt;

    &lt;p&gt;I found this mistake late in our design cycle–right as we were finalizing
the design for &lt;a href=&quot;https://en.wikipedia.org/wiki/Tape-out&quot;&gt;tape out&lt;/a&gt;.
Although we managed to fix the problem and update the design, a lot of work
needed to be re-done due to where it fell in the timeline.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I was also given a model of the digital design with post &lt;a href=&quot;https://en.wikipedia.org/wiki/Tape-out&quot;&gt;place and
route&lt;/a&gt; timing annotations within
it, and asked to re-run the simulations again.&lt;/p&gt;

    &lt;p&gt;Subtle bugs in the device simulation model made this task take much longer
than I expected.  Indeed, this process took nearly two weeks to debug both
the simulation and any design problems.  This, of course, is two weeks in
what I thought was a 2-4 week problem in the first place.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Other things were taking place as well that I was only peripherally aware
of.  There were ESD simulations being run,
&lt;a href=&quot;https://en.wikipedia.org/wiki/Design_rule_checking&quot;&gt;DRC&lt;/a&gt; checks applied
to the design, packaging options were examined and chosen, as well as solder
balls designed for the pins.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;All put together, this 2-4 week RTL design took many more months to accomplish.
Worse, much to my surprise and dismay, RTL issues were still being discovered
late in the design process.  These were things I was responsible for.  They’re
also things I’ll be considering as lessons to learn for the future, so that
I might learn from them to keep them from happening again later.&lt;/p&gt;

&lt;h2 id=&quot;is-simulation-verilog-software-or-is-it-hardware&quot;&gt;Is Simulation Verilog Software or is it Hardware?&lt;/h2&gt;

&lt;p&gt;I have a deep software background.  Indeed, I’ve been building software since
grade school.&lt;/p&gt;

&lt;p&gt;My first experience with digital design was in college, back in 1992-1993.
Other than two courses, my college work was focused on either my Computer
Science or Mathematics degrees.&lt;/p&gt;

&lt;p&gt;Since that time, most of my work from 1993-2009 was in digital signal
processing (DSP).  From my standpoint, DSP was nothing but software applied
to mathematical constructs.  It was often accomplished in embedded platforms,
although not always.  Sure, I have a Ph.D. in EE, but the focus was more on
how to process radio frequency signals than circuit design or simulation.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left; padding: 20px&quot;&gt;&lt;caption&gt;Fig 7. PI should never be a magic number!&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/asic-lsns/mpi.svg&quot; alt=&quot;&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;My point is simply this: there are rules to good software design.  One rule,
for example, is that all constants should be declared in a common area
separate from your algorithm’s implementation.  Failing to follow this rule
often leads to what are known as
“&lt;a href=&quot;https://en.wikipedia.org/wiki/Magic_number_(programming)&quot;&gt;magic numbers&lt;/a&gt;”.
Another rule is that &lt;a href=&quot;https://en.wikipedia.org/wiki/Rule_of_three_(computer_programming)&quot;&gt;you should never write the same algorithm multiple
times&lt;/a&gt;.
You should instead create functions and function calls to implement
such algorithms once, and then to reference those implementations.
This will keep you from copying a broken algorithm and then needing
to find and fix all the places where it is broken.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 8. The problem with magic numbers&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/asic-lsns/ionosphere.svg&quot; alt=&quot;&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;One of the problems I struggled with throughout the project was that the
device simulation model violated the &lt;a href=&quot;https://en.wikipedia.org/wiki/Rule_of_three_(computer_programming)&quot;&gt;rule of
three&lt;/a&gt;
extensively.  There were three implementations of every operation that the
model understood–one for each of the three protocol sections.  Each
implementation had its own means of reading from the interface.
For example, there was one implementation for reading from the normal
memory, and another implementation for reading from a special area of the
memory.  These two (there were more) implementations didn’t reuse any logic
between them in spite of the fact that the interface protocol was the same
between both.  As a result, when I went to debug the read-ID feature,
whereby the simulated device could be queried for its ID, I was forced to fix
(again) the nearly identical read logic for reading from the memory only this
time with a different read result.  This left me debugging the design again and
again and again for what were often the same bugs.  It didn’t help that the
simulation took hours to either complete or halt on a bug, nor that I would
often run the design first without generating a trace just to know if or when
the trace would need to be generated.&lt;/p&gt;

&lt;p&gt;That was one problem where good software engineering practices would help.
The simulation model really needed to be rewritten from scratch to fix these
problems throughout.  The problem only compounded due to the fact that the
project as a whole was late from the start.  We therefore committed to patching,
and re-patching, and re-patching the simulation model again and again only
to promise ourselves that we would rebuild it once the fast portion of the
design &lt;a href=&quot;https://en.wikipedia.org/wiki/Tape-out&quot;&gt;tape out&lt;/a&gt; was complete.&lt;/p&gt;

&lt;p&gt;The second place this design looked like software was on the CPU side of the
design.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: center&quot;&gt;&lt;caption&gt;Fig 9. Is test bench Verilog &quot;Software&quot;?&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/asic-lsns/tbsoftware.svg&quot; alt=&quot;&quot; width=&quot;560&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;As shown in Fig. 9, the
entire design I was working with had two interfaces.  On one end, it
interfaced with the memory device we were working with.  On the other end of
the design it interacted with an AXI3 bus that would likely be controlled by
a CPU.  A large section of the test bench consisted of the definitions of
114 software functions that would call tasks within an AXI3 Verification IP
model in order to communicate with the design.  The test bench script
itself consisted primarily of a series of Verilog references to these tasks,
what I would call function calls in software, to interact with the design.
This portion of the test bench read and operated just like software.&lt;/p&gt;

&lt;p&gt;So, why wasn’t it software?&lt;/p&gt;

&lt;p&gt;If the goal was to interact with the design as a CPU might, then why not use
a CPU to control the interaction?  Even better, if you do so, you can then
deliver to your eventual customer an example of a software device driver that
is known to work with your design.&lt;/p&gt;

&lt;p&gt;I didn’t place a CPU into our test bench for several reasons, most of the
dominated by time.  Remember, the goal was to do this quickly and I was late
the moment the design process began.  On the other hand, if I were to place a
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
in place of the external test bench, then it should be possible to do exactly
that: run software instead of Verilog to exercise the design by issuing
appropriate bus commands.  Even better, the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
might issue commands more aggressively than the AXI VIP I was using might.&lt;/p&gt;

&lt;p&gt;This is now my goal for the second phase of this project.  In order to make
this happen, the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; has &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/zipcore/rtl/core/zipcore.v&quot;&gt;now been re-made to be
bus-independent&lt;/a&gt;.  The &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/tree/zipcore&quot;&gt;new version&lt;/a&gt;
now has an &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/zipcore/rtl/core/axilfetch.v&quot;&gt;AXI-lite
prefetch&lt;/a&gt;,
and an &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/zipcore/rtl/core/axilops.v&quot;&gt;AXI-lite memory
module&lt;/a&gt;.
There’s even an &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/zipcore/rtl/core/axiicache.v&quot;&gt;AXI4 (not lite) instruction
cache&lt;/a&gt;.
These interfaces should all handle bus widths of 32-bits or greater–they’re
nicely configurable in that fashion.  Moreover, the debugging register
interface is being redesigned, and the &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/zipcore/rtl/zipaxil.v&quot;&gt;ZipCPU
wrapper&lt;/a&gt;
is getting formally verified for the first time.&lt;/p&gt;

&lt;p&gt;What about the bus?  I normally work with
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone&lt;/a&gt;, although
I’ve done a lot of &lt;a href=&quot;https://github.com/ZipCPU/wb2axip&quot;&gt;recent work with AXI4&lt;/a&gt;.
Better yet, I now have a &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axi32axi.v&quot;&gt;converter from AXI3 to
AXI4&lt;/a&gt;.  This
particular design will require an AXI bus that’s at least 64-bits wide to
avoid slowing the interface down.  That means my &lt;a href=&quot;https://github.com/ZipCPU/dbgbus/tree/master/hexbus&quot;&gt;debugging
bus&lt;/a&gt; will need to be
converted from 32-bits wide to 64-bits.  &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axilupsz.v&quot;&gt;That converter is now
complete&lt;/a&gt;.
(It’s not the high-speed AXI4 converter I wanted to build and even started
working on, but rather a basic AXI4-&lt;em&gt;lite&lt;/em&gt; bus width converter.)
Indeed, the &lt;a href=&quot;https://github.com/ZipCPU/dbgbus&quot;&gt;debugging bus
itself&lt;/a&gt; now has an AXI4 back end as well.
(I used that for my last project.) I actually have two such back ends, one
that supports burst interactions and &lt;a href=&quot;https://github.com/ZipCPU/dbgbus/blob/master/hexbus/rtl/hbexecaxi.v&quot;&gt;another that supports AXI4-lite
alone&lt;/a&gt;,
but that’s a bit off topic.&lt;/p&gt;

&lt;p&gt;On top of all of that, &lt;a href=&quot;https://github.com/ZipCPU/autofpga&quot;&gt;AutoFPGA&lt;/a&gt;
was more than happy to build and connect an AXI4 bus model for me.  I can
easily connect one (or more) &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axidma.v&quot;&gt;AXI4
DMA&lt;/a&gt;’s to this bus
for simulation purposes–which will likely come in very handy soon enough.
I can also cheaply connect an arbitrarily sized
&lt;a href=&quot;/blog/2019/05/29/demoaxi.html&quot;&gt;AXI4 based memory&lt;/a&gt; for the
CPU to run off of as well.  That makes that portion of the design easy.&lt;/p&gt;

&lt;p&gt;There’s still work to be done, however.  In particular, I’m missing two critical
components.  The first is an AXI4 downsizer that will take a request from AXI4
and convert it to an AXI4-lite request at a smaller bus width.  This component
has now been drafted, although it’s not yet passing a formal check.  (i.e.
there are known, serious, and significant bugs still within it–hence why I
haven’t yet posted my draft of the logic.) The second big item to handle is the &lt;a href=&quot;/blog/2020/01/13/reuse.html&quot;&gt;big endian versus little endian
issue&lt;/a&gt;.
As you may recall, the &lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI4 bus&lt;/a&gt; is by
nature little endian, whereas the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
is naturally a big-endian machine.  I haven’t (yet)
decided how exactly I’m going to handle the difference.  The new AXI4 bus
interfaces do have a byte-swapping hack that might be sufficient.
Alternatively, I might just create a little endian version of the tools: GCC
and binutils.  Time will tell what solution I eventually come up with.&lt;/p&gt;

&lt;h2 id=&quot;conclusions&quot;&gt;Conclusions&lt;/h2&gt;

&lt;p&gt;When moving from FPGA to ASIC design, a lot of things changed.  Sure, a lot
of things stayed the same: I was still designing with Verilog, I was still
using formal methods and simulations, it’s just that, well, it was quite
different.  This was one of the things I was hoping to experience.&lt;/p&gt;

&lt;p&gt;One of the reasons why I was so interested in learning ASIC design was to see
what kind of impact formal methods might have on the ASIC design process.  Those
who know me know that I am a strong proponent of formal methods.  I have been
ever since I started finding bugs in my designs that weren’t getting found
in simulation.  So when I started this project, I wanted to know if formal
methods would help or not, or to what extent they might help.&lt;/p&gt;

&lt;p&gt;Now that I’ve gotten this far into the project, I can safely say that none of
my formally verified logic contributed to any of the faults discovered late
in the design process.  Well, that’s not quite true, the change log indicates
two late changes in pieces that had been formally verified.  In one case, I
had a timeout counter to check for the presence of a clock and then never
wrote any properties to make sure that counter worked.  The rest of that
module was formally verified, even though that register wasn’t.  In another
example, I had built a calibration logic controller to the wrong specification.
Yes, it was verified, but it was verified that it would do the wrong thing.
As for the other faults, let’s see … one was caused by an “obvious” 34-line
design that was made in haste to alleviate a timing problem with my original
implementation.  This had a consequence that wasn’t quite thought through.
In particular, it required two clock edges from a discontinuous clock ….
Another fault was caused by incorrectly setting a reset value–that fault
caused a startup glitch, but was otherwise innocuous.&lt;/p&gt;

&lt;p&gt;Another place the formal tools really helped me was within the slow logic side
of the design.  There, I used formal tools extensively as I first studied
and then rewrote several critical design components.  Indeed, I found it very
valuable to know, for example, that I would only ever request the number of
bytes to be transferred that were appropriate, or that various subtle timing
delays were implemented as desired.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/asic-lsns/my-own-hurt.svg&quot; alt=&quot;&quot; width=&quot;560&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;I can also safely say that I vastly underestimated the cost for this work.
This has left me considering Psalm 15, and the man who “sweareth to his own
hurt and changeth not.”  Having agreed to one price for the project, I have
not adjusted it–even though the project has taken far longer than I was
expecting.  Perhaps I’ll do a better job estimating the number of hours
the next time as a result of completing this project today.  In the mean time,
let’s just say that I’ve covered the cost of this cost overrun with an internal
research and development (IRAD) fund.&lt;/p&gt;
&lt;hr /&gt;&lt;p&gt;&lt;em&gt;For my thoughts are not your thoughts, neither are your ways my ways, saith the LORD.  For as the heavens are higher than the earth, so are my ways higher than your ways, and my thoughts than your thoughts.  (Is 55:8-9)&lt;/em&gt;</description>
        <pubDate>Sat, 06 Mar 2021 00:00:00 -0500</pubDate>
        <link>https://zipcpu.com/blog/2021/03/06/asic-lsns.html</link>
        <guid isPermaLink="true">https://zipcpu.com/blog/2021/03/06/asic-lsns.html</guid>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>The FPGA designer who didn't get the job</title>
        <description>&lt;p&gt;Looking for a job?  Perhaps you are fresh out of a college degree in digital
design and looking for a digital design job.  Perhaps you are mid-way through
college with a little bit of RTL experience and just looking for an internship.
Perhaps you are a single individual fresh off of your last contract, looking
for a new one.  Either way, you are looking for something new.&lt;/p&gt;

&lt;p&gt;If so, read on.  I’d like to share a bit of my perspective from the other side,
from the side of trying to find someone with your skills.&lt;/p&gt;

&lt;p&gt;You see, my time is currently oversubscribed.  This is one of the problems
with success–there’s never enough of you to go around.  The problem is,
I’m just a one man shop.  I’ve avoided needing to learn labor and tax laws
by not hiring.  While I’m not opposed to expanding &lt;a href=&quot;/about/gisselquist-technology.html&quot;&gt;Gisselquist
Technology&lt;/a&gt;,
I’m just not in a position to do so today.&lt;/p&gt;

&lt;p&gt;Recognizing this, one of my clients has been trying to find and hire talent.
He’d like to find others that can do the work that I do.  Indeed, good talent
can be hard to come by.  The problem this client has is that he doesn’t have
the ability to do digital logic design, nor does he know how to recognize it 
when he sees it.  Therefore, he has asked me more than once to review the
people he finds to know if they are worth hiring.&lt;/p&gt;

&lt;p&gt;Recently, he found an Indian man, fresh from college, who was offering his
services as a “digital design engineer”.  So, my client asked me, can I offer
him a project in “digital design” that we could give to him whereby he might
demonstrate his ability?  It should be something simple, but something that
will help us know whether to hire him for more significant work or not.&lt;/p&gt;

&lt;p&gt;I should point out, this isn’t the first time I’ve been asked that question.
In the past, I’ve used my &lt;a href=&quot;/tutorial/formal.html&quot;&gt;formal verification
courseware&lt;/a&gt; to interview students.
I’d give them one of the problems from the course, and then see how well they
would solve the problem.  If they weren’t prepared to do that, then I’d teach
a lesson or two to see how well they pick up the material.  Those that pick
up the material quickly are good material for hiring, those that don’t will get
a gentle, “No, thank you”.&lt;/p&gt;

&lt;p&gt;That takes about 2-4 hrs of my time, however.&lt;/p&gt;

&lt;p&gt;This time we tried another approach.  This time I offered this budding digital
designer a project to demonstrate his ability with.  I suggested that he might
try building the projects outlined in the (draft) first four lessons of my
&lt;a href=&quot;/tutorial/intermediate.html&quot;&gt;intermediate design tutorial&lt;/a&gt;.
My thought was this: the
&lt;a href=&quot;/tutorial/intermediate.html&quot;&gt;tutorial&lt;/a&gt; outlines a project,
tells you how to build it, simulate it, and verify it.  To spare you the time
of typing, the tutorial also comes with broken examples that need to be
fixed.  I reason that, if you can fix the bugs within those designs, then
you must know something about digital design.&lt;/p&gt;

&lt;p&gt;Yes, perhaps this was a selfish proposition.  I haven’t had the time of day
to work on &lt;a href=&quot;/tutorial/intermediate.html&quot;&gt;the tutorial&lt;/a&gt;
recently, and these first four lessons are just about done save that the
logic within them needs to be tested on actual hardware.  They make for a
nice, well defined problem set to give to a new person to whom I’m not sure
if I want to continue working with or not (yet).&lt;/p&gt;

&lt;p&gt;Consider it from my perspective: managing takes time.  Defining a project for
someone to work on takes time.  Real life problems don’t come ready built,
ready defined, ready packaged for someone to just pick up and solve.  Further,
would I really trust someone new with a real life problem before they had
proved themselves?  This project, on the other hand, contained problems that
were already well defined, and so it looked like an ideal task.  On top of
that, my client was offering to pay this individual to do the work.&lt;/p&gt;

&lt;p&gt;It sounds like a good proposition for any newbie: You can get paid for doing
some work immediately.  If you do well, more work will follow.  If you don’t,
then you can still walk away with both what you’ve learned as well as the
cash you were given to do the problem.  That sounds to me like a good deal, no?&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/hiring/not-verification.svg&quot; alt=&quot;&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;The response from this individual rather shocked me.  He said, sorry, but I’m
looking for a design job, not a verification job.&lt;/p&gt;

&lt;p&gt;I bit my tongue on my first response.&lt;/p&gt;

&lt;p&gt;My next response would’ve been a simple, “Thanks, but no thanks.”  It’s not
that wouldn’t be interested in a well qualified digital design engineer.  It’s
just that I’m not going to recommend anyone who demonstrates an attitude
problem before his first day on the job.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left; padding: 20px&quot;&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/hiring/attitude-problem.svg&quot; alt=&quot;&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;My problem, however, was that this applicant wasn’t really mine to reject,
and so decided I should soften my words and encourage him to rethink his
position.&lt;/p&gt;

&lt;p&gt;Perhaps he didn’t realize that he was being offered to prove his design ability
by verifying and then fixing a broken design?&lt;/p&gt;

&lt;p&gt;The following is copied from my response to him, with a few minor edits
along the way.&lt;/p&gt;

&lt;h2 id=&quot;digital-design-is-cost-driven&quot;&gt;Digital design is cost driven&lt;/h2&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/hiring/most-expensive.svg&quot; alt=&quot;&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Every industry is driven by costs.  In the world of digital logic design, the
most expensive thing you can do is to debug something in hardware.  When working
with FPGAs, it can take 5-15 minutes to generate a build, and another 5 minutes
to run a test (on a good day–some designs require 2hrs to build …).  Once
you run that test, &lt;a href=&quot;/blog/2017/06/08/simple-scope.html&quot;&gt;you might only get to see between 15 and 100 signals and
those for only about a thousand clock ticks or
so&lt;/a&gt;.  That is, you might
find the bug if you were lucky and just happened to be both looking for it
and looking in the right place.  If those signals don’t reveal your bug, you’ll
have to iterate and repeat–assuming the problem is repeatable.  The process is
very expensive and painful.  You can spend &lt;a href=&quot;/blog/2017/09/14/even-i-get-stuck.html&quot;&gt;months on a project stuck not
knowing what’s wrong with
it&lt;/a&gt;.  I call this
problem &lt;a href=&quot;/blog/2017/05/19/fpga-hell.html&quot;&gt;FPGA Hell&lt;/a&gt;.  Sadly,
people get stuck in &lt;a href=&quot;/blog/2017/05/19/fpga-hell.html&quot;&gt;FPGA
Hell&lt;/a&gt; quite often.&lt;/p&gt;

&lt;p&gt;The problem is worse in &lt;a href=&quot;/blog/2017/10/13/fpga-v-asic.html&quot;&gt;ASIC
design&lt;/a&gt;.  (Yes, I’m now
involved in that too …)  If you have to debug an ASIC, you’ll have already
wasted several millions of dollars to get there.  It’s a bad place to be.
Sometimes I’ve called this ASIC Hell.  Unlike &lt;a href=&quot;/blog/2017/05/19/fpga-hell.html&quot;&gt;FPGA
Hell&lt;/a&gt;,
ASIC Hell is much hotter by at least two orders of magnitude.&lt;/p&gt;

&lt;p&gt;To make this task easier, the digital design industry uses
&lt;a href=&quot;/blog/2018/08/22/what-is-simulation.html&quot;&gt;simulations&lt;/a&gt;.
Lots of dollars and hours are spent on simulating designs.  On a good day, a
simulation will reveal problems.  In many of the cases I’ve been dealing with
recently, a simulation will take 20 minutes to run and generate 200GB of data
which then need to be sorted through.  Unlike running in hardware, simulations
are able to provide you with &lt;em&gt;every&lt;/em&gt; signal taking place within the design.
However, that leads to a large data handling requirement that can make
debugging simulation results a real challenge.&lt;/p&gt;

&lt;p&gt;Simulations are great — when they find bugs.&lt;/p&gt;

&lt;p&gt;One of the realities ingrained in the history and culture of &lt;a href=&quot;/about/gisselquist-technology.html&quot;&gt;Gisselquist
Technology&lt;/a&gt; is that
simulations rarely find the critical bugs.  Hence, for all the work you put
into your simulation, the simulation isn’t complete enough to find all your
bugs.  Many of the studies we’ve done have revealed bugs that pass the
simulation tests that &lt;a href=&quot;/blog/2017/06/02/design-process.html&quot;&gt;still end up needing to be tested in
hardware&lt;/a&gt;.
Worse, I’ve had several designs &lt;em&gt;pass&lt;/em&gt; hardware testing only to be found to
have latent bugs remaining within them at a much later time.&lt;/p&gt;

&lt;p&gt;It’s not just me either.  Xilinx is one of a small number of industry leaders
in FPGA design techniques, and yet I’ve been &lt;a href=&quot;/blog/2020/01/01/2019-in-review.html&quot;&gt;tracking bugs in Xilinx’s IP for
years&lt;/a&gt;.  Some of
these bugs have existed since 2016 and remain even now in Vivado 2020.2.
&lt;a href=&quot;/blog/2020/01/01/2019-in-review.html&quot;&gt;Others&lt;/a&gt; have
passed Xilinx’s “best practices” quality assurance testing.  They were
checked via the best simulation tests, and yet the bugs still made it through.
I found them in short order via the use of formal methods while testing out
SymbiYosys.  (Why Xilinx?  Because I use their hardware a lot.  A &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/doc/orconf2019.pdf&quot;&gt;quick look
at Intel&lt;/a&gt;
reveals some of the same types of bugs …)  Indeed, &lt;a href=&quot;/formal/2019/09/06/axi-story.html&quot;&gt;AXI interface
bugs are unfortunately quite common in the
FPGA industry&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;about-myself&quot;&gt;About myself&lt;/h2&gt;

&lt;p&gt;But let me now back up and tell you &lt;a href=&quot;/about/gisselquist-technology.html&quot;&gt;some about
myself&lt;/a&gt;, because that
might help you understand my own perspective when it comes to looking at job
applicants.  I learned engineering as an officer serving in the US Air Force.
Towards the end of my time in the service, I picked up Verilog.  That was
roughly in 2008-2009, when I built two Verilog projects.  Like any Air Force
officer, I was also an engineering manager responsible for managing and
reviewing many projects.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left; padding: 20px&quot;&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/hiring/verify-my-own.svg&quot; alt=&quot;&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;I then left the service and formed &lt;a href=&quot;/about/gisselquist-technology.html&quot;&gt;Gisselquist Technology,
LLC,&lt;/a&gt; in 2013.
My initial business efforts weren’t well focused, so it wasn’t until 2015
when I finally decided that I wanted to focus on digital design and then
started building several projects to use as a portfolio.  As a
microbusiness of one trying to find work, I had no choice but to verify my
own designs.  There was no separation between being a design engineer and
being a verification engineer within Gisselquist Technology.  The two
tasks were just different aspects of the same job.&lt;/p&gt;

&lt;p&gt;This continued for about two years, bringing me to 2017.  That year, I was
still trying to find business and so I had started a blog.  During this early
time of my blog, I was asked to try out formal methods.  Seriously?  I
wasn’t interested.  I wanted to do digital design, not play with new fangled
toys.  However, &lt;a href=&quot;https://blueletterbible.org/kjv/pro/19/22&quot;&gt;I needed business&lt;/a&gt;
and testing out a formal verification tool might make a good blog article.
So … &lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;I tested out a new formal verification tool known as SymbiYosys.  Much
to my dismay, it quickly found bugs in a design
I had used for years.&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I was shocked.  No one wants to hire a digital designer who produces buggy
code.  No one.  The costs of finding and fixing bugs are just too expensive
to deal with.  So, I reasoned, why would anyone be interested in a digital
designer, if &lt;a href=&quot;https://github.com/ZipCPU/&quot;&gt;his design portfolio&lt;/a&gt; was filled
with bugs?  What if someone randomly sampled my work and quickly found bugs
within it?  I would quickly lose that potential customer–they’d look
for someone else who could actually do the job.  So &lt;a href=&quot;/blog/2018/01/22/formal-progress.html&quot;&gt;I started using formal
methods on all of the designs in my
portfolio&lt;/a&gt;–from the
smallest to the greatest.  Sadly, using the formal tools, I found bugs in every
single design.  I even &lt;a href=&quot;/blog/2018/04/02/formal-cpu-bugs.html&quot;&gt;found bugs in my flagship design, the
ZipCPU&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;That’s when I started getting seriously involved in formal verification.  The
more bugs I found, the more I liked formal methods, and the more I got used to
using formal methods and the better I became–both in using formal methods
and in digital design.&lt;/p&gt;

&lt;h2 id=&quot;the-zipcpu-tutorial&quot;&gt;The ZipCPU Tutorial&lt;/h2&gt;

&lt;p&gt;There’s another part to this story.  When I got started in 2015, I used
various online forums as a means of trying to become known.  I spent a lot
of time on the &lt;a href=&quot;https://opencores.org/forum&quot;&gt;OpenCores forum&lt;/a&gt; as well as
&lt;a href=&quot;https://forum.digilentinc.com/discover&quot;&gt;Digilent’s forums&lt;/a&gt;.  This placed me in
a position to listen to a lot of students who were trying to accomplish
final design projects.  I quickly learned that &lt;a href=&quot;/blog/2017/06/10/lost-college-student.html&quot;&gt;these students were being taught
the language to express a design and a scripted simulation, but not the tools
they would need to actually debug their
designs&lt;/a&gt;.  As a
rule, those students I came across were routinely struggling with bugs in
hardware that they didn’t know how to debug.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 1. Learning approach: start with all three in parallel&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/course-outline.svg&quot; alt=&quot;&quot; width=&quot;480&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;So, once I got started with formal methods and discovered how easy it was to
debug a design using them, I wrote &lt;a href=&quot;/tutorial&quot;&gt;a tutorial&lt;/a&gt;
that new students could use to learn Verilog.  This
&lt;a href=&quot;/tutorial&quot;&gt;tutorial&lt;/a&gt;
started from the ground up teaching both Verilog, &lt;a href=&quot;/blog/2017/06/21/looking-at-verilator.html&quot;&gt;Verilator based
simulation&lt;/a&gt;, and
formal methods.  This &lt;a href=&quot;/tutorial&quot;&gt;tutorial&lt;/a&gt;
has now been well received by many.&lt;/p&gt;

&lt;p&gt;I’ve since tried putting an
&lt;a href=&quot;/tutorial/intermediate.html&quot;&gt;intermediate tutorial&lt;/a&gt; together.&lt;/p&gt;

&lt;p&gt;I haven’t gotten nearly as far with it, as you may have noticed.  There’s
clearly a demand for it it’s just that …&lt;/p&gt;

&lt;p&gt;I’m now over booked with too many projects on my plate.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left; padding: 20px&quot;&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/hiring/formal-key.svg&quot; alt=&quot;&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;The key to finding work was, among other things, formally verifying all of my
designs.  No, I don’t use a separate verification team.  I don’t have the cash
to afford one.  In this world of small business, digital design engineers need
to do their own verification.  It’s not just small businesses either–I know
of big businesses as well that have been forced to cut their verification teams
in order to cut costs.  It’s in this environment that I’ve been doing digital
design for hire.  My customers depend upon my work being formally verified and
they trust me to do it.  I also try to maintain a reputation for quality.  That
quality comes at the cost of formally verifying all of my work.&lt;/p&gt;

&lt;p&gt;That should provide you with a sufficient technical background to know why the
ability to verify your own logic is valuable.  I wouldn’t be &lt;a href=&quot;/blog/2020/11/26/zipcpu-biz.html&quot;&gt;where I am
today&lt;/a&gt; without that ability.&lt;/p&gt;

&lt;h2 id=&quot;prima-donnas&quot;&gt;Prima Donnas&lt;/h2&gt;

&lt;p&gt;There’s one more thing you need to know.  Back in my time working as a Lt. Col.
for the US Air Force, I quickly learned that some of the hardest people to
manage are technically trained individuals.  They like to believe they know
what’s best.  They know it so well, they tend to do what they think is right
over and above what they are told.  They’ll be the one’s telling the boss how
the boss needs to do his business.  If you don’t like it, they’ll threaten to
walk out on you.  We had a name for people like this.  We called them
“&lt;a href=&quot;https://www.youtube.com/watch?v=HUy2lL_HCJY&quot;&gt;Prima Donnas&lt;/a&gt;”.&lt;/p&gt;

&lt;p&gt;Prima Donnas are really hard to work with.  They are very hard to manage as
well.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/hiring/devious-genius.svg&quot; alt=&quot;&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;I’ve struggled with my share of Prima Donnas over the years–both with those
who have worked for me and those who have worked with me on my team.  If you
give these individuals a task, they’ll often work on something else, and then
they’ll expect you to value their other work better than the paid work that’s
actually bringing the money in.  (But … who then does the work that’s being
paid for?)  Handling them is a difficult management task, and one that’s hard
for the manager to win.  This makes choosing people that much more challenging.
It’s also why you put that much more effort into finding the best people–not
just those who are technically skilled, but also those willing to work on
whatever project they are given.&lt;/p&gt;

&lt;h2 id=&quot;the-bottom-line&quot;&gt;The Bottom line&lt;/h2&gt;

&lt;p&gt;To put it simply, here are my bottom lines:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;If you aren’t interested in learning and using formal methods, then my
recommendation to anyone hiring will be that they should find someone
else.   You would be missing out, however, on some of the opportunities that
have come up to work on next generation digital designs: new CPUs, new
memory controllers, imaging systems, next generation
&lt;a href=&quot;https://en.wikipedia.org/wiki/Sonar&quot;&gt;SONAR&lt;/a&gt; and
&lt;a href=&quot;https://en.wikipedia.org/wiki/Radar&quot;&gt;Radar&lt;/a&gt; systems and more.&lt;/p&gt;

    &lt;p&gt;No, you don’t have to take &lt;a href=&quot;/tutorial/formal.html&quot;&gt;my course in formal
methods&lt;/a&gt;, nor am I trying to
convince you to sign up.  Indeed, I might turn you away if you contact me
today.  You can, however, check out the course material.  &lt;a href=&quot;/tutorial/formal.html&quot;&gt;The course
slides are posted&lt;/a&gt;, as are the
exercises.  I’ve also been known to answer questions individuals have over
e-mail–regardless of whether or not they’ve taken my course.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;If you are a design engineer who can’t humble himself enough to verify a
broken design that’s been given to you, then I foresee that you will also
be difficult to manage.  It would be easier to work with someone less
talented than someone with more talent who isn’t willing to do what he’s
asked.  Again, my recommendation to any hiring manager would be that they
look for someone else.&lt;/p&gt;

    &lt;p&gt;Right now, it’s a buyers market.  There are lots of new individuals graduating
each year with a degree in Electrical Engineering who have design experience.&lt;/p&gt;

    &lt;p&gt;Finding a new graduate is easy.&lt;/p&gt;

    &lt;p&gt;Finding someone who has both talent and character, that’s a much harder task.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Take some time.  Think about it.&lt;/p&gt;

&lt;p&gt;Yours,&lt;/p&gt;

&lt;p&gt;Dan&lt;/p&gt;

&lt;hr /&gt;&lt;p&gt;&lt;em&gt;Seest thou a man diligent in his business? he shall stand before kings; he shall not stand before mean men.  (Prov 22:29)&lt;/em&gt;</description>
        <pubDate>Fri, 29 Jan 2021 00:00:00 -0500</pubDate>
        <link>https://zipcpu.com/blog/2021/01/29/hiring.html</link>
        <guid isPermaLink="true">https://zipcpu.com/blog/2021/01/29/hiring.html</guid>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>Ultimate Logic</title>
        <description>&lt;p&gt;For many, 2020 was a depressing year.&lt;/p&gt;

&lt;p&gt;When my church was closed for a period of time by our governor, however, I
found some valuable things to hold onto.  I discovered a &lt;a href=&quot;https://www.youtube.com/watch?v=n2ANUKSF2BE&quot;&gt;theory of
catastrophic plate tectonics&lt;/a&gt;,
and learned that it explained many of the puzzles prevalent among those who
believe in an ancient earth.  I discovered &lt;a href=&quot;https://www.youtube.com/watch?v=fMJRsd8SrhU&quot;&gt;Jay Smith’s presentation on the
origins of Islam&lt;/a&gt;.  I also
discovered &lt;a href=&quot;https://www.youtube.com/watch?v=aQ_UxcV-xcM&quot;&gt;this video of Dr. Lisle presenting his “Ultimate Proof
of Creation,”&lt;/a&gt;
and found it so fascinating that I then bought &lt;a href=&quot;https://www.amazon.com/Ultimate-Proof-Creation-Jason-Lisle/dp/0890515689&quot;&gt;his
book&lt;/a&gt;.
In &lt;a href=&quot;https://www.amazon.com/Ultimate-Proof-Creation-Jason-Lisle/dp/0890515689&quot;&gt;his book&lt;/a&gt;,
he presents the idea of ultimate logic.  I found this idea so
interesting and fascinating, I wanted to share it here.&lt;/p&gt;

&lt;p&gt;For those with a Christian background, much of Lisle’s argument follows
from Prov 1:7,&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The fear of the LORD is the beginning of knowledge: but fools despise
wisdom and instruction.
(&lt;a href=&quot;https://www.blueletterbible.org/kjv/pro/1/7&quot;&gt;Prov 1:7&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Contrary to popular belief, knowledge does not come from an education.  It
doesn’t come from the best schools, the right newspapers, or the right social
media feeds.  The “fear of the LORD” is the beginning of knowledge.  (I also
found &lt;a href=&quot;https://www.youtube.com/watch?v=x23w6UPpmSY&quot;&gt;this video of Derek Prince presenting what the fear of the LORD is in
the first place&lt;/a&gt; during the COVID
lockdowns, but I digress.)  For those who would argue that science forms the
basis for knowledge, I watched what science did this year with certain studies
of COVID and hydroxychloroquine.  These observations confirmed that science
itself is founded upon honesty.  Science cannot prove the necessity of honesty,
and so science cannot be the beginning of knowledge.&lt;/p&gt;

&lt;p&gt;For those who are not Christians, the rest of the discussion focuses more on
the idea of and development of ultimate logic in the first place.&lt;/p&gt;

&lt;h2 id=&quot;a-quick-background&quot;&gt;A Quick Background&lt;/h2&gt;

&lt;p&gt;Let’s start out by defining some terms used when describing logic.  In logic,
premises are presented and used to draw a conclusion.  The progression from
premises to conclusion is called an argument.  A picture might help, so let’s
consider Fig. 1.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 1. The form of an argument&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/ultimate/logic-form.svg&quot; alt=&quot;&quot; width=&quot;560&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;When working with &lt;a href=&quot;https://symbiyosys.readthedocs.io/en/latest/&quot;&gt;SymbiYosys&lt;/a&gt;,
the assumptions within your logic file form the premises and the various
assertions form the logical conclusions we wish to draw.  The solver then works
from the premises to either prove the conclusion, or to come up with an example
that proves the conclusion invalid.&lt;/p&gt;

&lt;p&gt;The entire process is important for understanding this idea of ultimate logic,
but to get there I need to first point out that this background discussion
isn’t really complete since we haven’t listed all of the assumptions required
for such a proof.&lt;/p&gt;

&lt;h2 id=&quot;digging-deeper-into-the-assumptions&quot;&gt;Digging deeper into the assumptions&lt;/h2&gt;

&lt;p&gt;Did you notice any of the missing assumptions?  Here are some assumptions that
we typically miss when building a formal proof of hardware correctness:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;The RTL logic within the design itself constitutes a set of assumptions in
addition to the explicit ones.  This makes sense, but it’s not normally
something we think about.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;We also assume that &lt;a href=&quot;https://github.com/YosysHQ/yosys&quot;&gt;Yosys&lt;/a&gt; accurately
translates our logic and formal statements without error into something the
solver can handle.  This is a great assumption, &lt;a href=&quot;https://github.com/YosysHQ/SymbiYosys/issues/111&quot;&gt;until
it isn’t true&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;We assume the formal solver works.  That is, when the formal solver proves
something, no counter examples exist.  &lt;em&gt;None.&lt;/em&gt;&lt;/p&gt;

    &lt;p&gt;A corollary assumption that when the solver declares a proof invalid that it
truly is invalid isn’t typically as critical.  In that case, the solver is
required to provide an example proving that the proof is invalid and
such examples are easily dealt with.  The result, on a good day, will be
a bug report in solver that will then get fixed.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Here’s a tricky underlying assumption as well: A valid proof today of the
logic within our design will remain a valid proof until the assumptions
change.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;While Lisle focuses on this last assumption, he goes deeper as well.  How do
we know that the assumptions of any given proof are valid in the first place?&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left; padding: 20px&quot;&gt;&lt;caption&gt;Fig 2. Assumptions get verified when you verify the second module&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/ultimate/twin-module.svg&quot; alt=&quot;&quot; width=&quot;420&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;In digital design, many assumptions can be validated in a straightforward
fashion as shown in Fig. 2.  First, when any two components interact, any
properties of the inputs to the one will be assumed and the outputs will
be asserted.  Then, when verifying the module it interacts with, that module
will have its inputs assumed and its outputs asserted.  By swapping the
assumptions on the inputs of the one to be assertions on the outputs of the
other, the assumptions can be proven.  This ultimately forms a proof of
our assumptions.&lt;/p&gt;

&lt;p&gt;As a caution, let me remind you to verify only one module at a time.  As we’ve
discovered earlier, &lt;a href=&quot;/formal/2018/12/18/skynet.html&quot;&gt;if you make assumptions about things within a module you
might void the proof&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;That deals with some of the formal assumptions within logic design, but what
about the others?&lt;/p&gt;

&lt;h2 id=&quot;modus-ponens-and-the-invalid-proof-of-the-ultimate&quot;&gt;Modus Ponens and the Invalid Proof of the Ultimate&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Modus_ponens&quot;&gt;&lt;em&gt;Modus Ponens&lt;/em&gt;&lt;/a&gt; is a Latin name
for a specific argument that, in my mind, helps explain the need for an
ultimate premise.  The argument is fairly basic: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;P|-&amp;gt;Q&lt;/code&gt; (P implies Q), &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;P&lt;/code&gt;
(P is true), therefore &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Q&lt;/code&gt; (our conclusion) must be true as well.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 3. Modus Ponens&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/ultimate/modus-ponens.svg&quot; alt=&quot;&quot; width=&quot;320&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;A common, but related, fallacy is one where &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;P|-&amp;gt;Q&lt;/code&gt; and then &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Q&lt;/code&gt;, and so &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;P&lt;/code&gt;
is concluded.  This fallacy is called &lt;a href=&quot;https://en.wikipedia.org/wiki/Affirming_the_consequent&quot;&gt;&lt;em&gt;Affirming the
Consequent&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 4. Affirming the Consequent&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/ultimate/scientific-proof.svg&quot; alt=&quot;&quot; width=&quot;320&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;How common is this fallacy?  Well, if you think about it, is this not the
entire basis of the scientific method?  The scientist considers the evidence
before him and makes a theory about the world.  He then forms an experiment
that will have a particular outcome if his theory is true.  In formal form,
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;P&lt;/code&gt; would be the theory and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Q&lt;/code&gt; a favorable outcome from the experiment.  If
the experiment comes out as he predicts, this &lt;em&gt;does not&lt;/em&gt; confirm his
hypothesis.  &lt;em&gt;It cannot.&lt;/em&gt;  At best, all the scientific method can do is reject
hypotheses which do not match the evidence.  It cannot confirm or prove a
hypothesis because it matches the evidence because to do so would be the
fallacy of &lt;a href=&quot;https://en.wikipedia.org/wiki/Affirming_the_consequent&quot;&gt;&lt;em&gt;affirming the
consequent&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Let’s back up to &lt;em&gt;Modus Ponens&lt;/em&gt;, however, and ask ourselves, how do we know that
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;P&lt;/code&gt; is true in the first place?  Perhaps because a more fundamental premise
is true, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;P0&lt;/code&gt;, and because &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;P0&lt;/code&gt; is true therefore we know that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;P&lt;/code&gt; is true.
But what about &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;P0&lt;/code&gt;?  How shall we know that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;P0&lt;/code&gt; is true?  Because it depends
upon &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;P1&lt;/code&gt;?&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 5. Modus Ponens to Absurdity&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/ultimate/modus-absurdem.svg&quot; alt=&quot;&quot; width=&quot;320&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;We could repeat this logic and repeat this logic and repeat this logic and
the result would be that we would never truly prove anything.  There &lt;em&gt;must&lt;/em&gt;
be a first premise.  This we shall call the &lt;em&gt;Ultimate&lt;/em&gt; premise.&lt;/p&gt;

&lt;h2 id=&quot;the-ultimate-premise&quot;&gt;The Ultimate Premise&lt;/h2&gt;

&lt;p&gt;Lisle then asks, what about the rules of logic themselves?  How shall logic
itself be proven?  Why should we accept that &lt;em&gt;Modus Ponens&lt;/em&gt; is a valid argument?
Likewise, if &lt;em&gt;Modus Ponens&lt;/em&gt; is valid today, will it remain valid again
tomorrow?  If so, why?&lt;/p&gt;

&lt;p&gt;In math, I learned to handle such arguments using axioms.  An axiom is
something that isn’t otherwise proven.  We just accept them as true.  For
example, two axioms I remember include 1) there exists a zero and 2) every
integer has a successor.  The problem with just accepting axioms as true is
that doing so is
&lt;a href=&quot;https://en.wikipedia.org/wiki/Arbitrariness&quot;&gt;arbitrary&lt;/a&gt;.
In other words, why should I accept your axioms as
true and not someone else’s?&lt;/p&gt;

&lt;p&gt;As a good example of this, how often have you heard a statement such as,
“My [insert favorite politician] is honest, but [the opposition party] is
not”?  Another good example would be that parallel lines never cross.
Such statements are made as axioms with no argument offered as their
basis.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 6. Circular logic is known as Begging the question&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/ultimate/circular.svg&quot; alt=&quot;&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Such logic is &lt;a href=&quot;https://en.wikipedia.org/wiki/Arbitrariness&quot;&gt;&lt;em&gt;arbitrary&lt;/em&gt;&lt;/a&gt;,
and &lt;a href=&quot;https://www.blueletterbible.org/kjv/job/38/1&quot;&gt;therefore proves
nothing&lt;/a&gt;.  How then shall the
truth of competing axioms be weighed against each other to know which are
in fact true?&lt;/p&gt;

&lt;p&gt;A better definition of an axiom would be a &lt;a href=&quot;https://www.archives.gov/founding-docs/declaration-transcript&quot;&gt;“self-evident”
truth&lt;/a&gt;.  This is
&lt;a href=&quot;https://www.merriam-webster.com/dictionary/axiom&quot;&gt;Mirriam-Websters’s&lt;/a&gt;
second meaning of the word, and perhaps the best one for this context.&lt;/p&gt;

&lt;p&gt;Unfortunately, declaring something to be true because it is true is a known
fallacy called “&lt;a href=&quot;https://en.wikipedia.org/wiki/Begging_the_question&quot;&gt;begging the
question&lt;/a&gt;”, or
&lt;a href=&quot;https://en.wikipedia.org/wiki/Circular_reasoning&quot;&gt;circular reasoning&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;proving-the-ultimate-premise&quot;&gt;Proving the Ultimate Premise&lt;/h2&gt;

&lt;p&gt;Ultimate proofs, Lisle argues, have the form of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;A&lt;/code&gt; therefore &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;A&lt;/code&gt; yet
&lt;em&gt;without being either circular or fallatious.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;As an example of this, Lisle presents an existence proof for whether or not
such ultimate arguments could be even exist.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Premise: Rules of logic apply&lt;/li&gt;
  &lt;li&gt;Conclusion: Rules of logic apply&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This proof is not circular because to argue otherwise would render you
unable to draw any conclusion at all, leading to complete foolishness.
Indeed, you &lt;em&gt;cannot&lt;/em&gt; argue against the rules of logic without first using
the rules of logic to make your argument.  This therefore is a proof of the
rules of logic based upon those same rules yet without being circular.&lt;/p&gt;

&lt;p&gt;How shall we know, however, that the rules of logic that apply today shall
apply again tomorrow in the same fashion?  Here again, the proof follows
from an ultimate premise.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;God is true and unchanging. (The ultimate premise, drawn from the Bible
(See &lt;a href=&quot;https://www.blueletterbible.org/kjv/mal/3/6&quot;&gt;Mal 3:6&lt;/a&gt;
and &lt;a href=&quot;https://www.blueletterbible.org/kjv/jhn/3/33&quot;&gt;John 3:33&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Rules of logic follow from God’s nature.&lt;/li&gt;
  &lt;li&gt;Therefore, the rules of logic will remain unchanged again tomorrow.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Worldviews that are not founded upon God as their ultimate premise cannot make
this argument.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Lisle makes several other claims as well which cannot be explained by a secular
world view.  For example, if there are no ultimate moral standards then by what
standard would you judge my conduct right or wrong?  If you cannot judge
the conduct of another as either right or wrong, then upon what basis is
justice founded?  What basis would you then have for requiring one action or
another of someone else?  On the other hand, if there are absolute standards
of right and wrong, then what is their basis?&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.amazon.com/Ultimate-Proof-Creation-Jason-Lisle/dp/0890515689&quot;&gt;His book&lt;/a&gt;,
however, is really about the ultimate proof of &lt;em&gt;creation&lt;/em&gt;: the conclusion
that &lt;a href=&quot;https://www.blueletterbible.org/kjv/exo/20/11&quot;&gt;God made the world in six days and rested on the
seventh&lt;/a&gt;, and that He did
so roughly six thousand years ago.  Any science attempting to prove otherwise,
Lisle argues, must be &lt;a href=&quot;https://www.blueletterbible.org/kjv/2pe/3/4&quot;&gt;based upon the premise that the natural processes we
observe today have continued unchanging from the past to the
present&lt;/a&gt;.  This conclusion,
however, is &lt;a href=&quot;https://en.wikipedia.org/wiki/Arbitrariness&quot;&gt;arbitrary&lt;/a&gt;
and without basis.  Just because we see nothing but
natural processes today doesn’t mean that supernatural processes never existed.
A separate conclusion, made on the basis of recorded observations throughout
human history, is also available to us.  According to recorded history, God
did in fact create the world as He said He did, and further that &lt;a href=&quot;https://www.blueletterbible.org/kjv/jhn/3/33&quot;&gt;His record
is true and accurate&lt;/a&gt;.  This
record includes &lt;a href=&quot;/blog/2018/04/01/resurrection-day.html&quot;&gt;supernatural events which cannot be refuted
today&lt;/a&gt; apart from
resorting to
&lt;a href=&quot;https://en.wikipedia.org/wiki/Arbitrariness&quot;&gt;arbitrary&lt;/a&gt; or even
&lt;a href=&quot;https://en.wikipedia.org/wiki/Circular_reasoning&quot;&gt;circular logic&lt;/a&gt;.  (i.e., the
supernatural cannot happen therefore it didn’t.  But why couldn’t it have taken
place?  Because.)&lt;/p&gt;
&lt;hr /&gt;&lt;p&gt;&lt;em&gt;The fear of the LORD is the beginning of knowledge: but fools despise wisdom and instruction.  (Prov 1:7)&lt;/em&gt;</description>
        <pubDate>Sat, 09 Jan 2021 00:00:00 -0500</pubDate>
        <link>https://zipcpu.com/formal/2021/01/09/ultimate.html</link>
        <guid isPermaLink="true">https://zipcpu.com/formal/2021/01/09/ultimate.html</guid>
        
        
        <category>formal</category>
        
      </item>
    
  </channel>
</rss>
